<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python 中的 if __name == &#39;__main__&#39; 该如何理解</title>
    <link href="/2021/05/28/Python-%E4%B8%AD%E7%9A%84-if-name-main-%E8%AF%A5%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/"/>
    <url>/2021/05/28/Python-%E4%B8%AD%E7%9A%84-if-name-main-%E8%AF%A5%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>本文转载自: <a href="https://blog.konghy.cn/2017/04/24/python-entry-program/">https://blog.konghy.cn/2017/04/24/python-entry-program/</a></p><h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><p>对于很多编程语言来说，程序都必须要有一个入口，比如 C，C++，以及完全面向对象的编程语言 Java，C# 等。如果你接触过这些语言，对于程序入口这个概念应该很好理解，C 和 C++ 都需要有一个 main 函数来作为程序的入口，也就是程序的运行会从 main 函数开始。同样，Java 和 C# 必须要有一个包含 Main 方法的主类来作为程序入口。</p><p>而 Python 则有不同，它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。也就是从脚本第一行开始运行，没有统一的入口。</p><p>一个 Python 源码文件除了可以被直接运行外，还可以作为模块（也就是库）被导入。不管是导入还是直接运行，最顶层的代码都会被运行（Python 用缩进来区分代码层次）。而实际上在导入的时候，有一部分代码我们是不希望被运行的。</p><p>举一个例子来说明一下，假设我们有一个 const.py 文件，内容如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PI = <span class="hljs-number">3.14</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;PI:&quot;</span>, PI<br><br>main()<br></code></pre></div></td></tr></table></figure><p>我们在这个文件里边定义了一些常量，然后又写了一个 main 函数来输出定义的常量，最后运行 main 函数就相当于对定义做一遍人工检查，看看值设置的都对不对。然后我们直接执行该文件(python const.py),输出：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">PI</span>: <span class="hljs-number">3</span>.<span class="hljs-number">14</span><br></code></pre></div></td></tr></table></figure><p>现在，我们有一个 area.py 文件，用于计算圆的面积，该文件里边需要用到 const.py 文件中的 PI 变量，那么我们从 const.py 中把 PI 变量导入到 area.py 中：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> const <span class="hljs-keyword">import</span> PI<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc_round_area</span>(<span class="hljs-params">radius</span>):</span><br>    <span class="hljs-keyword">return</span> PI * (radius ** <span class="hljs-number">2</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;round area: &quot;</span>, calc_round_area(<span class="hljs-number">2</span>)<br><br>main()<br></code></pre></div></td></tr></table></figure><p>运行 area.py，输出结果：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PI: <span class="hljs-number">3.14</span><br><span class="hljs-built_in">round</span> area:  <span class="hljs-number">12.56</span><br></code></pre></div></td></tr></table></figure><p>可以看到，const 中的 main 函数也被运行了，实际上我们是不希望它被运行，提供 main 也只是为了对常量定义进行下测试。这时，<code>if __name__ == &#39;__main__&#39;</code> 就派上了用场。把 const.py 改一下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PI = <span class="hljs-number">3.14</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;PI:&quot;</span>, PI<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><p>然后再运行 area.py，输出如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">round</span> area:  <span class="hljs-number">12</span>.<span class="hljs-number">56</span><br></code></pre></div></td></tr></table></figure><p>再运行下 const.py，输出如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">PI</span>: <span class="hljs-number">3</span>.<span class="hljs-number">14</span><br></code></pre></div></td></tr></table></figure><p>这才是我们想要的效果。</p><p><code>if __name__ == &#39;__main__&#39;</code> 就相当于是 Python 模拟的程序入口。Python 本身并没有规定这么写，这只是一种编码习惯。由于模块之间相互引用，不同模块可能都有这样的定义，而入口程序只能有一个。到底哪个入口程序被选中，这取决于 <code>__name__</code> 的值。</p><h2 id="name"><a href="#name" class="headerlink" title="name"></a><strong>name</strong></h2><p><code>__name__</code> 是内置变量，用于表示当前模块的名字，同时还能反映一个包的结构。来举个例子，假设有如下一个包：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">a<br>├── b<br>│   ├── c.py<br>│   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span></span>py<br>└── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span></span>py<br></code></pre></div></td></tr></table></figure><p>目录中所有 py 文件的内容都为：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span> __name__<br></code></pre></div></td></tr></table></figure><p>我们执行 <code>python -c &quot;import a.b.c&quot;</code>，输出结果：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.b</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.b</span>.c<br></code></pre></div></td></tr></table></figure><p>由此可见，<code>__name__</code> 可以清晰的反映一个模块在包中的层次。其实，所谓模块名就是 import 时需要用到的名字，例如：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> tornado<br><span class="hljs-keyword">import</span> tornado.web<br></code></pre></div></td></tr></table></figure><p>这里的 tornado 和 tornado.web 就被称为模块的模块名。</p><p>如果一个模块被直接运行，则其没有包结构，其 <code>__name__</code> 值为 <code>__main__</code>。例如在上例中，我们直接运行 c.py 文件（python a/b/c.py），输出结果如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__main__</span><br></code></pre></div></td></tr></table></figure><p>所以，<code>if __name__ == &#39;__main__&#39;</code> 我们简单的理解就是：<strong>如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行</strong>。</p><p>实际上，这个问题还可以衍生出其他的一些知识点，例如<code>__main__.py</code> 文件与 Python 的 <code>-m</code> 参数。</p><h2 id="main-py-文件与-python-m"><a href="#main-py-文件与-python-m" class="headerlink" title="main.py 文件与 python -m"></a><strong>main</strong>.py 文件与 python -m</h2><p>Python 的 <code>-m</code> 参数用于将一个模块或者包作为一个脚本运行，而 <code>__main__.py</code> 文件则相当于是一个包的“入口程序”。</p><p>首先我们需要来看看 <code>python xxx.py</code> 与 <code>python -m xxx.py</code> 的区别。两种运行 Python 程序的方式的不同点在于，一种是直接运行，一种是当做模块来运行。</p><p>先来看一个简单的例子，假设有一个 Python 文件 run.py，其内容如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span> sys.path<br></code></pre></div></td></tr></table></figure><p>我们用直接运行的方式启动（python run.py），输出结果(为了说明问题，输出结果只截取了重要部分，下同)：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[&#x27;/home/huoty/aboutme/pythonstudy/main&#x27;, ...]<br></code></pre></div></td></tr></table></figure><p>然后以模块的方式运行（python -m run.py）:</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[<span class="hljs-string">&#x27;&#x27;</span>, ...]<br><span class="hljs-regexp">/usr/</span>bin/python: No module named run.py<br></code></pre></div></td></tr></table></figure><p>由于输出结果只列出了关键的部分，应该很容易看出他们之间的差异。直接运行是把 run.py 文件所在的目录放到了 sys.path 属性中。以模块方式运行是把你输入命令的目录（也就是当前工作路径），放到了 sys.path 属性中。以模块方式运行还有一个不同的地方是，多出了一行 <code>No module named run.py</code> 的错误。实际上以模块方式运行时，Python 先对 run.py 执行一遍 import，所以 <code>print sys.path</code> 被成功执行，然后 Python 才尝试运行 run.py 模块，但是，在 path 变量中并没有 run.py 这个模块，所以报错。而正确的运行方式，应该是 <code>python -m run</code>.</p><p>这个例子并不能明显的说明问题。接着我们来看看 <code>__main__.py</code> 的作用。</p><p>仍然先看例子，有如下一个包：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">package<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span></span>py<br>└── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__main__</span>.</span></span>py<br></code></pre></div></td></tr></table></figure><ul><li><strong>init</strong>.py</li></ul><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;__init__&quot;</span><br><span class="hljs-built_in">print</span> sys.path<br></code></pre></div></td></tr></table></figure><ul><li><strong>main</strong>.py</li></ul><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;__main__&quot;</span><br><span class="hljs-built_in">print</span> sys.path<br></code></pre></div></td></tr></table></figure><p>用 <code>python -m package</code> 运行结果：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">__init__<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;&#x27;</span>, ...]</span><br>__main__<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;&#x27;</span>, ...]</span><br></code></pre></div></td></tr></table></figure><p>用 <code>python package</code> 运行结果：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">__main__<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;package&#x27;</span>, ...]</span><br></code></pre></div></td></tr></table></figure><p>然后我们来总结一下：</p><ul><li>1、 <strong>加上 -m 参数时会把当前工作目录添加到 sys.path 中，而不加时则会把脚本所在目录添加到 sys.path 中。</strong></li><li>2、 <strong>加上 -m 参数时 Python 会先将模块或者包导入，然后再执行。</strong></li><li>3、 <strong><code>__main__.py</code> 文件是一个包或者目录的入口程序。</strong>不管是用 <code>python package</code> 还是用 <code>python -m package</code> 运行时，<code>__main__.py</code> 文件总是被执行。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.tuicool.com/articles/jMzqYzF">http://www.tuicool.com/articles/jMzqYzF</a></li><li><a href="http://stackoverflow.com/questions/4042905/what-is-main-py">http://stackoverflow.com/questions/4042905/what-is-main-py</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python字符串前面的r的含义</title>
    <link href="/2021/05/20/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E9%9D%A2%E7%9A%84r%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2021/05/20/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E9%9D%A2%E7%9A%84r%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>r 代表 raw 的意思. 表示要将字符串中所有字符当成原始字符来看待. 比如 <code>\n</code> 在普通字符串里表示换行的意思, 而在带有 r 标识的字符串中, 它就是两个字符的组合.</p><p>示例代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">str</span> = <span class="hljs-string">r&#x27;hello \n&#x27;</span><br>str2 = <span class="hljs-string">&#x27;hello \n hello&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(str2)<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">hello <span class="hljs-string">\n</span><br>hello <br> hello<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>‘编写高质量代码：改善Python代码程序的91个建议读书笔记’</title>
    <link href="/2021/05/20/%E2%80%98%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81%EF%BC%9A%E6%94%B9%E5%96%84Python%E4%BB%A3%E7%A0%81%E7%A8%8B%E5%BA%8F%E7%9A%8491%E4%B8%AA%E5%BB%BA%E8%AE%AE%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%99/"/>
    <url>/2021/05/20/%E2%80%98%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81%EF%BC%9A%E6%94%B9%E5%96%84Python%E4%BB%A3%E7%A0%81%E7%A8%8B%E5%BA%8F%E7%9A%8491%E4%B8%AA%E5%BB%BA%E8%AE%AE%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%99/</url>
    
    <content type="html"><![CDATA[<h3 id="建议一"><a href="#建议一" class="headerlink" title="建议一"></a>建议一</h3><p>这里主要是对书中一些有意思的代码进行尝试. 比如快速排序, 差不多 10 行就可以搞定, 很方便的写法.</p><p>代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : draft02.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/20</span><br><br><span class="hljs-comment"># 快速排序</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quicksort</span>(<span class="hljs-params">array:<span class="hljs-built_in">list</span></span>):</span><br>    less = []; greater = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> array<br>    pivot = array.pop() <span class="hljs-comment"># 默认是弹出最后一个元素</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> array:<br>        <span class="hljs-keyword">if</span> x &lt;= pivot:<br>            less.append(x)<br>        <span class="hljs-keyword">else</span>:<br>            greater.append(x)<br>    <span class="hljs-keyword">return</span> quicksort(less) + [pivot] + quicksort(greater)<br><br><span class="hljs-comment"># 交换两个变量的值</span><br>a = <span class="hljs-number">2</span><br>b = <span class="hljs-number">3</span><br>a, b = b, a<br><br><span class="hljs-comment"># 逆转列表</span><br>list_a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    array = [<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">19</span>, <span class="hljs-number">27</span>]<br>    array = quicksort(array)<br>    <span class="hljs-built_in">print</span>(array)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(a, b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">reversed</span>(list_a)))<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-meta">[0, 1, 1, 2, 4, 5, 8, 9, 10, 19, 27, 32, 64]</span><br><span class="hljs-code">--------</span><br><span class="hljs-code">3 2</span><br><span class="hljs-code">------</span><br><span class="hljs-meta">[4, 3, 2, 1]</span><br></code></pre></div></td></tr></table></figure><h3 id="建议三"><a href="#建议三" class="headerlink" title="建议三"></a>建议三</h3><p>1、三元操作符 “?:” 在 Python 中的替代品</p><p>code</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">X = <span class="hljs-number">0</span><br>Y = -<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(X <span class="hljs-keyword">if</span> X &lt; Y <span class="hljs-keyword">else</span> Y)<br></code></pre></div></td></tr></table></figure><p>output</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-2</span><br></code></pre></div></td></tr></table></figure><p>2、switch…case 在 Python 中的一种简单替代</p><p>code</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-number">0</span>: <span class="hljs-string">&quot;You typed zero.\n&quot;</span>,<br>        <span class="hljs-number">1</span>: <span class="hljs-string">&quot;You are in top.\n&quot;</span>,<br>        <span class="hljs-number">2</span>: <span class="hljs-string">&quot;n is an even number.\n&quot;</span><br>    &#125;.get(x, <span class="hljs-string">&quot;Only single_digit numbers are allowed\n&quot;</span>)<br><br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">3</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>output</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">n <span class="hljs-keyword">is</span> an even <span class="hljs-built_in">number</span>.<br><br></code></pre></div></td></tr></table></figure><p>注意，这里原书的代码有问题，函数签名里的用的是 <code>x</code>，但是原书在函数体中的 <code>get()</code> 中用的却是 <code>n</code>。</p><h3 id="建议八-利用-assert-语句来发现问题"><a href="#建议八-利用-assert-语句来发现问题" class="headerlink" title="建议八 利用 assert 语句来发现问题"></a>建议八 利用 assert 语句来发现问题</h3><p>基本语法</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">assert</span> expression1 [, expression2] <span class="hljs-comment"># expression2 是可选的, 用来传递具体的异常信息</span><br></code></pre></div></td></tr></table></figure><p>使用范例</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y = <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> x == y, <span class="hljs-string">&#x27;not euqals&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>AssertionError: <span class="hljs-keyword">not</span> euqals<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> x != y <span class="hljs-comment"># 这个语句敲下回车不会发生任何问题</span><br>&gt;&gt;&gt;<br></code></pre></div></td></tr></table></figure><p>在执行过程中它实际相当于如下代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y = <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-literal">__debug__</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> x == y:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">raise</span> AssertionError(<span class="hljs-string">&quot;not equals&quot;</span>)<br>...<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>AssertionError: <span class="hljs-keyword">not</span> equals<br>&gt;&gt;&gt;<br></code></pre></div></td></tr></table></figure><p>附：<code>__debug__</code> 的值默认设置为 True，而且是只读的。</p><p>我个人感觉一般尽量还是少用这个 <code>assert</code> 为好。在 Python 中这个是对性能有影响的。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Python 替换文本中的 NBSP</title>
    <link href="/2021/05/20/%E5%88%A9%E7%94%A8-Python-%E6%9B%BF%E6%8D%A2%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84-NBSP/"/>
    <url>/2021/05/20/%E5%88%A9%E7%94%A8-Python-%E6%9B%BF%E6%8D%A2%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84-NBSP/</url>
    
    <content type="html"><![CDATA[<p>今天在使用 MusicBee 听歌时, 发现它的歌词不能够自动换行, 然后将歌词粘贴到 P有Charm 中, 发现有很多这个 <code>NBSP</code>,</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210520224314.png" alt=""></p><p>根据以往的经验, 这和 html 中硬编码的空格 <code>&amp;nbsp</code> 有点像, 然后就直接使用 Python 的 <code>replace()</code> 函数给替换掉之后, 发现歌词就可以正常换行了.</p><p>完整代码如下:</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : draft01.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/20</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[00:00.000] 作词 : Angergård</span><br><span class="hljs-string">[00:01.000] 作曲 : Club 8</span><br><span class="hljs-string">[00:08.660]it&#x27;s saturday</span><br><span class="hljs-string">[00:10.200]so you&quot;re going out</span><br><span class="hljs-string">[00:12.250]you&quot;re going out without much in sight</span><br><span class="hljs-string">[00:16.100]when all stand still</span><br><span class="hljs-string">[00:18.500]you just can&quot;t go home</span><br><span class="hljs-string">[00:20.600]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[00:26.950]</span><br><span class="hljs-string">[00:32.670]hey you</span><br><span class="hljs-string">[00:34.390]what&quot;s that you&quot;re saying?</span><br><span class="hljs-string">[00:36.210]it&quot;s the club 8</span><br><span class="hljs-string">[00:38.370]who&quot;s gonna be playing here</span><br><span class="hljs-string">[00:45.220]</span><br><span class="hljs-string">[00:56.730]hey you</span><br><span class="hljs-string">[00:58.370]stop that singing</span><br><span class="hljs-string">[01:00.180]cause the club 8</span><br><span class="hljs-string">[01:02.410]is all there needs to be</span><br><span class="hljs-string">[01:14.110]</span><br><span class="hljs-string">[01:16.780]it&quot;s saturday</span><br><span class="hljs-string">[01:18.500]so you&quot;re going out</span><br><span class="hljs-string">[01:20.460]you&quot;re going out without much in sight</span><br><span class="hljs-string">[01:24.0]when all stand still</span><br><span class="hljs-string">[01:26.400]you just can&quot;t go home</span><br><span class="hljs-string">[01:28.400]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[01:34.340]</span><br><span class="hljs-string">[01:44.910]hey you</span><br><span class="hljs-string">[01:46.520]what&quot;s that you&quot;re saying?</span><br><span class="hljs-string">[01:48.470]it&quot;s the club 8</span><br><span class="hljs-string">[01:50.509]who&quot;s gonna be playing here</span><br><span class="hljs-string">[02:00.810]</span><br><span class="hljs-string">[02:08.880]hey you</span><br><span class="hljs-string">[02:10.509]your sound&quot;s a disaster</span><br><span class="hljs-string">[02:12.240]won&quot;t you please step</span><br><span class="hljs-string">[02:14.460]out of the way for me</span><br><span class="hljs-string">[02:21.900]</span><br><span class="hljs-string">[02:28.650]it&quot;s saturday</span><br><span class="hljs-string">[02:30.150]so you&quot;re going out</span><br><span class="hljs-string">[02:32.610]you&quot;re going out without much in sight</span><br><span class="hljs-string">[02:36.140]when all stand still</span><br><span class="hljs-string">[02:38.710]you just can&quot;t go home</span><br><span class="hljs-string">[02:40.570]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[02:47.500]</span><br><span class="hljs-string">[02:52.950]take your time</span><br><span class="hljs-string">[02:54.850]drink your wine</span><br><span class="hljs-string">[02:56.850]i don&quot;t care where you&quot;re going</span><br><span class="hljs-string">[03:00.890]if music&quot;s fine</span><br><span class="hljs-string">[03:03.200]i don&quot;t mind</span><br><span class="hljs-string">[03:05.110]if all those people are showing off</span><br><span class="hljs-string">[03:12.940]it&quot;s saturday</span><br><span class="hljs-string">[03:14.390]so you&quot;re going out</span><br><span class="hljs-string">[03:16.590]you&quot;re going out without much in sight</span><br><span class="hljs-string">[03:20.220]when all stand still</span><br><span class="hljs-string">[03:22.400]you just can&quot;t go home</span><br><span class="hljs-string">[03:28.670]it&quot;s saturday</span><br><span class="hljs-string">[03:30.400]so you&quot;re going out</span><br><span class="hljs-string">[03:32.670]you&quot;re going out without much in sight</span><br><span class="hljs-string">[03:36.350]when all stand still</span><br><span class="hljs-string">[03:38.390]you just can&quot;t go home</span><br><span class="hljs-string">[03:40.700]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[03:50.700]</span><br><span class="hljs-string">[04:00.240]</span><br><span class="hljs-string">[04:05.240]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>res = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>res = <span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>小玩意</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对博客本身的内省</title>
    <link href="/2021/05/20/%E5%AF%B9%E5%8D%9A%E5%AE%A2%E6%9C%AC%E8%BA%AB%E7%9A%84%E5%86%85%E7%9C%81/"/>
    <url>/2021/05/20/%E5%AF%B9%E5%8D%9A%E5%AE%A2%E6%9C%AC%E8%BA%AB%E7%9A%84%E5%86%85%E7%9C%81/</url>
    
    <content type="html"><![CDATA[<p>2021.0520</p><p>目前博客只能够维护宽屏的电脑端了. 其他的暂时都不考虑. 在使用 Hexo 渲染的过程中出现的一些代码警告暂时也顾不上了. 写博客是为了巩固和掌握知识, 现阶段是没有办法兼顾很多内容的. 只要暂时电脑端浏览博客不出现问题就可以了.</p><p>重要的是写! 写! 写!</p><p><strong>一个星期可以对博客进行一次审视与整理.</strong></p>]]></content>
    
    
    <categories>
      
      <category>杂感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉格朗日（Lagrange）插值多项式的基函数构造法(详细推导)</title>
    <link href="/2021/05/20/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%EF%BC%88Lagrange%EF%BC%89%E6%8F%92%E5%80%BC%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E5%9F%BA%E5%87%BD%E6%95%B0%E6%9E%84%E9%80%A0%E6%B3%95/"/>
    <url>/2021/05/20/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%EF%BC%88Lagrange%EF%BC%89%E6%8F%92%E5%80%BC%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E5%9F%BA%E5%87%BD%E6%95%B0%E6%9E%84%E9%80%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>先从最简单的一次插值(n = 1) 开始, 求作一次式 <script type="math/tex">L_{1}(x)</script>, 使之满足条件</p><script type="math/tex; mode=display">L_{1}(x_{0}) = y_0, \quad L_1(x_1) = y_1.</script><p>从几何上看, <script type="math/tex">y = L_1(x)</script> 即是过点 <script type="math/tex">(x_0, y_0)</script> 和 <script type="math/tex">(x_1, y_1)</script> 的直线, 由解析几何知道, 这条直线可用点斜式表示为</p><script type="math/tex; mode=display">L_1(x) = y_0 + \frac{y_1 - y_0}{x_1 - x_0}(x - x_0). \qquad (1)</script><p>线性插值公式 <script type="math/tex">(1)</script> 亦可表为下列两点式</p><script type="math/tex; mode=display">L_1(x) = \frac{x - x_1}{x_0 - x_0}y_0 + \frac{x - x_0}{x_1 - x_0}y_1. \qquad (2)</script><p>若记</p><script type="math/tex; mode=display">l_0(x) = \frac{x - x_1}{x_0 - x_1}, \quad l_1(x) = \frac{x - x_0}{x_1 - x_0},</script><p>则式 $(2)$ 还可写为</p><script type="math/tex; mode=display">L_1(x) = y_0l_0(x) + y_1l_1(x) = \sum_{i = 0}^{1}y_il_i(x),</script><p>其中, <script type="math/tex">l_i(x)</script> 称为插值基函数, 它们的图形见下图, </p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/pic2.svg" alt=""></p><p>且有如下特点:</p><script type="math/tex; mode=display">\left\{\begin{matrix}\begin{align}& l_0(x) + l_1(x) = 1, \\& l_0(x_0) = 1, \: l_0(x_1) = 0, \\& l_1(x_0) = 0, \: l_1(x_1) = 1, \\\end{align}\end{matrix}\right. \qquad (3)</script><p>即</p><script type="math/tex; mode=display">l_i(x_j) = \delta_{ij} = \left\{\begin{matrix}1, \quad i = j, \\0, \quad i \neq j, \\\end{matrix}\right.\quad i, j = 0, 1.</script><p>由上可见, <script type="math/tex">\displaystyle l_0(x) = \frac{x - x_1}{x_0 - x_1}</script> 与 <script type="math/tex">\displaystyle l_1(x) = \frac{x - x_0}{x_1 - x_0}</script> 满足条件 <script type="math/tex">(3)</script> 且都是线性函数,反过来,如果一次函数 <script type="math/tex">l_0(x)</script> 与 <script type="math/tex">l_1(x)</script> 满足条件 <script type="math/tex">(3)</script>, 那么可以证明, 它们只能是 <script type="math/tex">\displaystyle \frac{x - x_1}{x_0 - x_1}</script> 与 <script type="math/tex">\displaystyle \frac{x - x_0}{x_1 - x_0}</script>.</p><p>事实上, 由代数多项式的性质值, 如果 <script type="math/tex">x_0</script> 是一个 <script type="math/tex">n</script> 次多项式 <script type="math/tex">L_n(x)</script> 的零点, 则多项式 <script type="math/tex">L_n{x}</script> 就一定含有一因子 <script type="math/tex">(x - x_0)</script>, 这时</p><script type="math/tex; mode=display">L_n(x) = (x - x_0) L_{n - 1}(x),</script><p>其中, <script type="math/tex">L_{n - 1}(x)</script> 为 <script type="math/tex">n - 1</script> 次多项式.</p><p>因此, 对于一次函数 <script type="math/tex">l_0(x)</script>, 性质 <script type="math/tex">l_1(x_1) = 0</script> 说明 <script type="math/tex">x_1</script> 是 <script type="math/tex">l_0(x)</script> 的零点, 这时 <script type="math/tex">l_0(x)</script> 含有因子 <script type="math/tex">(x - x_1)</script>; 由于 <script type="math/tex">l_0(x)</script> 是一次多项式, 所以</p><script type="math/tex; mode=display">l_0(x)= c(x - x_1), \qquad (4)</script><p>其中, c 是常数. 又由 <script type="math/tex">l_0(x_0) = 1</script>, 将其代入式 <script type="math/tex">(4)</script>, 得 <script type="math/tex">\displaystyle \frac{1}{x_0 - x_1}</script>, 于是得</p><script type="math/tex; mode=display">l_0(x)= \frac{x - x_0}{x_0 - x_1}.</script><p>同理可得</p><script type="math/tex; mode=display">l_1(x) = \frac{x - x_0}{x_1 - x_0}.</script><p>函数 <script type="math/tex">l_0(x), l_1(x)</script> 也常称一次 <script type="math/tex">Lagrange</script> 基函数.</p><p><strong>一般情形:</strong></p><p>求作 <script type="math/tex">n</script> 次式 <script type="math/tex">L_n(x)</script>, 使之满足</p><script type="math/tex; mode=display">L_n(x_i) = y_i = f(x_i), \quad i = 0, 1, ..., n. \qquad (5)</script><p>从几何上看, 就是求作 <script type="math/tex">n</script> 次曲线 <script type="math/tex">y = L_n(x)</script>, 使之通过 <script type="math/tex">(n + 1)</script> 个点 <script type="math/tex">(x_0, y_0), (x_1, y_1), ..., (x_n, y_n)</script>. 设</p><script type="math/tex; mode=display">L_n(x) = \sum_{i = 0}^{n} y_i l_i(x),</script><p>也就是仍从构造所谓插值基函数 <script type="math/tex">l_i(x)</script> 入手, 由插值条件 <script type="math/tex">(5)</script> 知 <script type="math/tex">l_i(x)</script> 应满足条件 <script type="math/tex">l_i(x) = \delta_{ij}, \: i, j = 0, 1, ..., n</script>, 即 <script type="math/tex">n</script> 次多项式 <script type="math/tex">l_i(x), \: i = 0, 1, ..., n</script> 满足条件</p><script type="math/tex; mode=display">\left\{\begin{matrix}\begin{align}& l_0(x_0) = 1, l_0(x_1) = 0, ..., l_0(x_n) = 0, \\& l_1(x_0) = 0, l_1(x_1) = 1, ..., l_1(x_n) = 0, \\& \cdots \cdots \\& l_n(x_0) = 0, l_n(x_1) = 0, ..., l_n(x_n) = 1. \\\end{align}\end{matrix}\right. \qquad (6)</script><p>由条件 <script type="math/tex">(6)</script> 知, <script type="math/tex">n</script> 次多项式 <script type="math/tex">l_0(x)</script> 有 <script type="math/tex">n</script> 个零点, 它们为 <script type="math/tex">x_1, x_2, ..., x_n</script>, 所以</p><script type="math/tex; mode=display">l_0(x)= c_0(x - x_1)(x - x_2) \cdots (x - x_n), \qquad (7)</script><p>其中, <script type="math/tex">c_0</script> 为待定常数; 把 <script type="math/tex">x = x_0</script> 代入式 <script type="math/tex">(7)</script>, 并注意到 <script type="math/tex">l_0(x_0) = 1</script>, 可推得</p><script type="math/tex; mode=display">l_i(x) = \frac{(x - x_0) \cdots (x - x_{i - 1}) (x - x_{i + 1}) \cdots (x - x_n)}{(x_i - x_0) \cdots (x_i - x_{i - 1})(x_i - x_{i + 1}) \cdots (x_i - x_n)} = \prod_{j = 0 \\ i \neq j}^{n} \frac{x - x_j}{x_i - x_j}. \qquad (8)</script><p>于是 <script type="math/tex">y = f(x)</script> 的 <script type="math/tex">n</script> 次插值多项式可写为</p><script type="math/tex; mode=display">L_n(x) = \sum_{i = 0}^{n} y_il_i(x) = \sum_{i = 0}^{n} (\prod_{j = 0 \\ j \neq i}^{n} \frac{x - x_j}{x_i - x_j})y_i. \qquad (9)</script><p>易验证有 <script type="math/tex">\displaystyle L_n(x_i) = \sum\limits_{i = 0}^{n} y_i l_i(x_i) = y_i</script>, 即 <script type="math/tex">L_n(x)</script> 满足插值条件 <script type="math/tex">(5)</script>. 形如式 <script type="math/tex">(9)</script> 的插值多项式称为 <script type="math/tex">Lagrange</script> 插值多项式, 由式 <script type="math/tex">(8)</script> 所表示的 <script type="math/tex">n</script> 次代数多项式 <script type="math/tex">l_i(x)(i = 0, 1, ..., n)</script> 称为以 <script type="math/tex">x_i(i = 0, 1, ..., n)</script> 为节点的 <script type="math/tex">Lagrange</script> 插值基函数. 上述构造插值多项式的方法叫做基函数法.</p><p>特别地, 一点零次插值多项式为</p><script type="math/tex; mode=display">L_0(x) = y_0,</script><p>两点一次插值(线性插值)多项式为</p><script type="math/tex; mode=display">L_1(x) = \frac{x - x_1}{x_0 - x_1}y_0 + \frac{x - x_0}{x_1 - x_0}y_1,</script><p>三点二次插值(抛物插值)多项式为</p><script type="math/tex; mode=display">\begin{equation}{L_2(x) = \frac{(x - x_1)(x - x_2)}{(x_0 - x_1)(x_0 - x_2)} y_0 + \frac{(x - x_0)(x - x_2)}{(x_1 - x_0)(x_1 - x_2)} y_1 + \frac{(x - x_0)(x - _1)}{(x_2 - x_0)(x_2 - x_1)} y_2. \qquad (10) }\end{equation}</script><p>按: 本博客内容摘自《数值分析》(李红).</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算方法</tag>
      
      <tag>插值法</tag>
      
      <tag>数值积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 的 PicGo 插件配置</title>
    <link href="/2021/05/17/VSCode-%E7%9A%84-PicGo-%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/05/17/VSCode-%E7%9A%84-PicGo-%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>因为要在另一台设备上继续使用我原来在 Github 上面搭建的图床，遂在这里记录一下安装 PicGo 插件之后需要做的配置，由于我之前配置过，所以我只需要将之前的配置参数给直接 copy 过去即可。结果发现果然如此哈哈。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210517225511.png" alt=""></p><p>然后就可以在另一台设备上面继续愉快地使用原来的图床了。</p>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPad X13 AMD Gen1 安装 Ubuntu20.04 之后 F4 键的 LED 灯一直常亮的问题</title>
    <link href="/2021/05/07/ThinkPad-X13-AMD-Gen1-%E5%AE%89%E8%A3%85-Ubuntu20-04-%E4%B9%8B%E5%90%8E-F4-%E9%94%AE%E7%9A%84-LED-%E7%81%AF%E4%B8%80%E7%9B%B4%E5%B8%B8%E4%BA%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/05/07/ThinkPad-X13-AMD-Gen1-%E5%AE%89%E8%A3%85-Ubuntu20-04-%E4%B9%8B%E5%90%8E-F4-%E9%94%AE%E7%9A%84-LED-%E7%81%AF%E4%B8%80%E7%9B%B4%E5%B8%B8%E4%BA%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>这个问题无法通过设置 BIOS 来解决，目测是 ThinkPad 的适配工作没有做好，目前可以做的是，手动关闭这个灯</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> 0 | sudo tee /sys/class/leds/platform\:\:micmute/brightness<br></code></pre></div></td></tr></table></figure><p>开启的命令则是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> 1 | sudo tee /sys/class/leds/platform\:\:micmute/brightness<br></code></pre></div></td></tr></table></figure><p>参考：<a href="https://askubuntu.com/questions/1291918/ubuntu-20-10-on-thinkpad-t14-amd-microphone-mute-led-always-stays-on-how-can#new-answer?newreg=fcf137424b8b41a495efbe900da6c722">askubuntu</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu20</tag>
      
      <tag>ThinkPad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 下的 pthread_t</title>
    <link href="/2021/05/05/Linux-%E4%B8%8B%E7%9A%84-pthread-t/"/>
    <url>/2021/05/05/Linux-%E4%B8%8B%E7%9A%84-pthread-t/</url>
    
    <content type="html"><![CDATA[<p>先由 pthread.h 文件推断一下 pthread_t 的位置，</p><p>然后 locate 一下位置</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210505172222.png" alt=""></p><p>最后使用 VSCode 查看一下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210505172415.png" alt=""></p><p>发现，Linux 下的 pthread_t 其实是一个 unsigned long int 类型。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文档（手册）在描述函数时，括号中的数字的含义</title>
    <link href="/2021/05/05/Linux-%E6%96%87%E6%A1%A3%EF%BC%88%E6%89%8B%E5%86%8C%EF%BC%89%E5%9C%A8%E6%8F%8F%E8%BF%B0%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8B%AC%E5%8F%B7%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2021/05/05/Linux-%E6%96%87%E6%A1%A3%EF%BC%88%E6%89%8B%E5%86%8C%EF%BC%89%E5%9C%A8%E6%8F%8F%E8%BF%B0%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8B%AC%E5%8F%B7%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在阅读《Linux C 一站式编程》时，发现书中提到函数时，会在括号中加上数字。第一次遇到，不解。遂谷歌之，记录一下。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210505170358.png" alt=""></p><h2 id="具体解释"><a href="#具体解释" class="headerlink" title="具体解释"></a>具体解释</h2><p>Linux 下的一些说明</p><p>1 用户命令，可由任何人启动的</p><p>2 系统调用，即由内核提供的函数</p><p>3 例程，即库函数</p><p>4 设备，即 /dev 目录下的特殊文件</p><p>5 文件格式描述，例如 /etc/passws</p><p>6 游戏，啊这</p><p>7 杂项，例如宏命令包、惯例等</p><p>8 系统管理员工具，只能由 root 启动</p><p>9 其他（Linux 特定的），用来存放内核例行程序的文档</p><p>n 新文档，可能要移到更合适的领域</p><p>o 老文档，可能会一段期限内保留 </p><p>l 本地文档，与本特定系统有关的</p><p>参考：<a href="https://blog.csdn.net/wingSys/article/details/8592614?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control">别人的博文</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C pthread_create() 函数的理解与使用</title>
    <link href="/2021/05/05/Linux-C-pthread-create-%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/05/05/Linux-C-pthread-create-%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要是记录一下 Linux 下创建线程的相关知识。</p><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pthread_create</span><span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> *<span class="hljs-keyword">restrict</span> thread, <span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *<span class="hljs-keyword">restrict</span> attr, <span class="hljs-keyword">void</span> *(*start_routine)(<span class="hljs-keyword">void</span> *), <span class="hljs-keyword">void</span> *<span class="hljs-keyword">restrict</span> arg)</span></span>;<br></code></pre></div></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li>成功返回 0</li><li>失败返回错误号</li></ul><p>以前学过的系统函数都是成功返回 0， 失败返回 -1，而错误号保存在全局变量 errno 中，而 pthread 库的函数都是通过返回值返回错误号，虽然每个线程也都有一个 errno，但这是为了兼容其他函数接口而提供的，pthread 库本身并不使用它，通过返回值返回错误码更加清晰。</p><h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h2><p>首先说明一下，<code>restrict</code> 是一个关键字，这个关键字主要作用在于告诉编译器可以放心对这个函数做优化，程序员自己会保证这些指针所指的内存区间互不重叠。具体参见：<a href="https://fanlumaster.github.io/2021/05/05/C99-%E7%9A%84-restrict-%E5%85%B3%E9%94%AE%E5%AD%97/">C99 的 restrict 关键字</a></p><h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><p>pthread_create 成功返回后，新创建的线程的 id 被填写到 thread 参数所指向的内存单元。</p><p>我们知道 <strong>进程 id</strong> 的类型是 pid_t，每个进程的 id 在整个系统中是唯一的，调用 <code>getpid(2)</code> （2 表示是系统调用，即由内核提供的函数）可以获得当前进程的 id，是一个正整数值。</p><p><strong>线程 id</strong> 的类型是 thread_t，它只在当前进程中保证是唯一的，在不同的系统中 thread_t 有不同的实现（在 Linux 下，经查看源码文件，发现其是一个 unsigned long int 类型），它可能是一个整数值，也可能是一个结构体，也可能是一个地址，所以不能简单地当成整数用 printf 打印。调用 <code>pthread_self(3)</code> （3 表示是例程，即库函数）可以获得当前线程的 id。</p><h3 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h3><p>attr 参数表示线程属性，这里不深入讨论线程属性，我们在代码中一律传 NULL 给 attr 参数，表示线程属性取缺省值。</p><h3 id="start-routine"><a href="#start-routine" class="headerlink" title="start_routine"></a>start_routine</h3><p>start_routine 实际是一个函数指针，在实际使用过程中，我们需要传递一个函数给这个参数。在这里，新的线程所执行的代码就是由我们传递给 <code>pthread_create()</code> 的函数指针 start_routine 决定。start_routine 函数接收一个参数，是通过 <code>pthread_create()</code> 的 arg 参数传递给它的。，该参数的类型是 void <em>，这个指针按什么类型解释由调用者自己定义。start_routine 的返回值也是 void </em>，这个指针的含义同样由调用者自己定义。</p><p>start_routine 返回时，这个线程就退出了。其它线程可以调用 <code>pthread_join()</code> 得到 start_routine 的返回值。相当于父进程调用 <code>wait()</code> 得到子进程的退出状态。</p><h3 id="arg"><a href="#arg" class="headerlink" title="arg"></a>arg</h3><p>这个参数的作用是将自身传递给上面的 start_routine 函数。</p><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// threadfirst.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span> <span class="hljs-comment">// strerror()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span> <span class="hljs-comment">// exit()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">pthread_t</span> ntid;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printids</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">pthread_t</span> tid;<br><br>    pid = getpid(); <span class="hljs-comment">// get process id</span><br>    tid = pthread_self(); <span class="hljs-comment">// get self&#x27;s thread id</span><br>    <span class="hljs-comment">// printf(&quot;ceshi: %u\n&quot;, (unsigned)ntid); // 这行代码也是可以正常打印线程号的</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s pid %u tid %u (0x%x)\n&quot;</span>, s, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)pid, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)tid, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)tid);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thr_fn</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *arg)</span> <span class="hljs-comment">// thread function</span></span><br><span class="hljs-function"></span>&#123;<br>    printids(arg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> err;<br><br>    err = pthread_create(&amp;ntid, <span class="hljs-literal">NULL</span>, thr_fn, <span class="hljs-string">&quot;new thread: &quot;</span>);<br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t create thread: %s\n&quot;</span>, strerror(err)); <span class="hljs-comment">// strerror() 函数的作用是把错误码转换成错误信息再打印</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// exit() 函数会终止整个进程，也就意味着会终止所有的线程</span><br>    &#125;<br>    printids(<span class="hljs-string">&quot;main thread:&quot;</span>);<br>    sleep(<span class="hljs-number">1</span>); <span class="hljs-comment">// 这里延时 1 秒是为了防止新创建的线程还没有得到执行就终止（这只是权宜之计）</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>命令行执行结果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ gcc threadfirst.c -lpthread<br>$ ./a.out<br>main thread: pid 4394 tid 1650427712 (0x625f8740)<br>new thread:  pid 4394 tid 1641907968 (0x61dd8700)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>《Linux C 一站式编程》</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言使用 typedef 声明函数指针</title>
    <link href="/2021/05/05/C-%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8-typedef-%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <url>/2021/05/05/C-%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8-typedef-%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="用-typedef-声明函数的格式"><a href="#用-typedef-声明函数的格式" class="headerlink" title="用 typedef 声明函数的格式"></a>用 typedef 声明函数的格式</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 方式一 --&gt; 表示一个返回值为 int 类型, 参数为两个 int 的函数</span><br><span class="hljs-comment">// 赋值时可以这样写: Func = 函数名</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(Func)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<br><br><span class="hljs-comment">// 方式二 --&gt; 表示一个返回值为 int 类型, 参数为两个 int 的函数</span><br><span class="hljs-comment">// 赋值时可以这样写: Func_P = 函数名</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(*Func_P)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<br></code></pre></div></td></tr></table></figure><p>关于上面的函数, 调用时的语法如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">Func *func = 函数名<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> res = func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 这里 1 和 2 可以换成其它 int 类型参数</span><br><span class="hljs-keyword">int</span> res2 = (*func)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 效果和上面相同</span><br><br>Func_P = 函数名<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> res = func_p(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 这里 1 和 2 可以换成其它 int 类型参数</span><br><span class="hljs-keyword">int</span> res2 = (*func_p)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 效果和上面相同</span><br></code></pre></div></td></tr></table></figure><h2 id="另外一种方式"><a href="#另外一种方式" class="headerlink" title="另外一种方式"></a>另外一种方式</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 直接通过指针类型创建, 不需要使用 typedef 预定义, 使用时方法和上面相同</span><br><span class="hljs-keyword">int</span>(*Func)(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>博客园让人失望</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言函数指针</title>
    <link href="/2021/05/05/C-%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <url>/2021/05/05/C-%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天在整理《数据结构》(陈越) 中的图时, 读到一段用到了函数指针的写法, 初时很懵, 遂谷歌之, 找到了菜鸟教程的写得很好的一篇解释, 现转载整理如下.</p></blockquote><p>书中使用到了函数指针的代码:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Visit</span><span class="hljs-params">(Vertex V)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;正在访问顶点%d\n&quot;</span>, V);<br>&#125;<br><br><br><span class="hljs-comment">// Visited[] 为全局变量， 已经初始化为 false</span><br><span class="hljs-comment">// 以 V 为出发点对邻接表存储的图 Graph 进行 DFS 搜索</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(LGraph Graph, Vertex V, <span class="hljs-keyword">void</span>(*Visit)(Vertex))</span></span><br><span class="hljs-function"></span>&#123;<br>    PtrToAdjVNode W;<br><br>    Visit(V); <span class="hljs-comment">// 访问第 V 个顶点</span><br>    Visited[V] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 标记 V 已访问</span><br><br>    <span class="hljs-keyword">for</span> (W = Graph-&gt;G[V].FirstEdge; W; W = W-&gt;Next) <span class="hljs-comment">// 对 V 的每个邻接点 W-&gt;AdjV</span><br>        <span class="hljs-keyword">if</span> (!Visited[W-&gt;AdjV]) <span class="hljs-comment">// 若 W-&gt;AdjV 为被访问</span><br>            DFS(Graph, W-&gt;AdjV, Visit); <span class="hljs-comment">// 则递归访问之</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针是指向函数的指针变量。<br>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。<br>函数指针可以像一般函数一样，用于调用函数、传递参数。<br>函数指针变量的声明：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*fun_ptr)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>; <span class="hljs-comment">// 声明一个指向同样参数、返回值的函数指针类型</span><br></code></pre></div></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例声明了函数指针变量 p，指向函数 max：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt; y ? x : y;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* p 是函数指针 */</span><br>    <span class="hljs-keyword">int</span> (* p)(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) = &amp; max; <span class="hljs-comment">// &amp;可以省略</span><br>    <span class="hljs-keyword">int</span> a, b, c, d;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入三个数字:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp; a, &amp; b, &amp; c);<br> <br>    <span class="hljs-comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span><br>    d = p(p(a, b), c); <br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大的数字是: %d\n&quot;</span>, d);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">请输入三个数字:1 2 3</span><br><span class="hljs-section">最大的数字是: 3</span><br></code></pre></div></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><h3 id="函数指针作为某个函数的参数"><a href="#函数指针作为某个函数的参数" class="headerlink" title="函数指针作为某个函数的参数"></a>函数指针作为某个函数的参数</h3><p>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。<br>简单讲：回调函数是由别人的函数执行时调用你实现的函数。</p><blockquote><p>以下是来自知乎作者常溪玲的解说：<br>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</p></blockquote><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指针，通过该函数来设置数组的值。<br>实例中我们定义了回调函数 getNextRandomValue，它返回一个随机值，它作为一个函数指针传递给 populate_array 函数。<br>populate_array 将调用 10 次回调函数，并将回调函数的返回值赋值给数组。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">// 回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">populate_array</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">array</span>, <span class="hljs-keyword">size_t</span> arraySize, <span class="hljs-keyword">int</span> (*getNextValue)(<span class="hljs-keyword">void</span>))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;arraySize; i++)<br>        <span class="hljs-built_in">array</span>[i] = getNextValue();<br>&#125;<br> <br><span class="hljs-comment">// 获取随机值</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getNextRandomValue</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> rand();<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> myarray[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">/* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int , 而不是函数指针*/</span><br>    populate_array(myarray, <span class="hljs-number">10</span>, getNextRandomValue);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, myarray[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>编译执行，输出结果如下：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">16807 </span><span class="hljs-number">282475249</span> <span class="hljs-number">1622650073</span> <span class="hljs-number">984943658</span> <span class="hljs-number">1144108930</span> <span class="hljs-number">470211272</span> <span class="hljs-number">101027544</span> <span class="hljs-number">1457850878</span> <span class="hljs-number">1458777923</span> <span class="hljs-number">2007237709</span> <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>博客园让人失望</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C99 的 restrict 关键字</title>
    <link href="/2021/05/05/C99-%E7%9A%84-restrict-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2021/05/05/C99-%E7%9A%84-restrict-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>我们来看一个跟 <code>memcpy/memmove</code> 类似的问题。下面的函数将两个数组中对应的元素相加，结果保存在第三个数组中。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">vector_add</span><span class="hljs-params">(<span class="hljs-keyword">float</span> *x, <span class="hljs-keyword">float</span> *y, <span class="hljs-keyword">float</span> *result)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; ++i)<br>        result[i] = x[i] + y[i];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果这个函数要在多处理器的计算机上执行，编译器可以做这样的优化：把这一个循环拆成两个循环，一个处理器计算 i 值从 0 到 31 的循环，另一个处理器计算 i 值从 32 到 63 的循环，这样两个处理器可以同时工作，使计算时间缩短一半。但是这样的编译优化能保证得出正确结果吗？假如 result 和 x 所指的内存区间是重叠的，result[0] 其实是 x[1]，result[i] 其实是 x[i+1]，这两个处理器就不能各干各的事情了，因为第二个处理器的工作依赖于第一个处理器的最终计算结果，这种情况下编译优化的结果是错的。这样看来编译器是不敢随便做优化了，那么多处理器提供的并行性就无法利用，岂不可惜？为此，C99 引入 restrict 关键字，如果程序员把上面的函数声明为 <code>void vector_add(const double *restrict x, const double *restrict y, double *restrict result)</code>，就是告诉编译器可以放心地对这个函数做优化，程序员自己会保证这些指针所指的内存区间互不重叠。</p><p>由于 restrict 是 C99 引入的新关键字，目前 Linux 的 Man Page 还没有更新，所以都没有 restrict 关键字，本书的函数原型都取自 Man Page，所以也都没有 restrict 关键字。但在 C99 标准中库函数的原型都在必要的地方加了 restrict 关键字，在 C99 中 memcpy 的原型是 <code>void *memcpy(void * restrict s1, const void * restrict s2, size_t n);</code>，就是告诉调用者，这个函数的实现可能会做些优化，编译器也可能会做些优化，传进来的指针不允许指向重叠的内存区间，否则结果可能是错的，而 memmove 的原型是 <code>void *memmove(void *s1, const void *s2, size_t n);</code>，没有 restrict 关键字，说明传给这个函数的指针允许指向重叠的内存区间。在 restrict 关键字出现之前都是用自然语言描述哪些函数的参数不允许指向重叠的内存区间，例如在 C89 标准的库函数一章开头提到，本章描述的所有函数，除非特别说明，都不应该接收两个指针参数指向重叠的内存区间，例如调用 sprintf 时传进来的格式化字符串和结果字符串的首地址相同，诸如此类的调用都是非法的。本书也遵循这一惯例，除非像 memmove 这样特别说明之外，都表示“不允许”。</p><p>关于 restrict 关键字更详细的可以查看一些英文文档。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Linux C 一站式编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C sys/types.h 源码文件</title>
    <link href="/2021/05/05/Linux-C-sys-types-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/05/Linux-C-sys-types-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核版本是 5.4，文件位置 <code>/usr/include/x86_64-linux-gnu/sys/types.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *POSIX Standard: 2.6 Primitive System Data Types&lt;sys/types.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>_SYS_TYPES_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_SYS_TYPES_H1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;features.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __u_char_defined</span><br><span class="hljs-keyword">typedef</span> __u_char u_char;<br><span class="hljs-keyword">typedef</span> __u_short u_short;<br><span class="hljs-keyword">typedef</span> __u_int u_int;<br><span class="hljs-keyword">typedef</span> __u_long u_long;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__quad_t</span> <span class="hljs-keyword">quad_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__u_quad_t</span> <span class="hljs-keyword">u_quad_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__fsid_t</span> <span class="hljs-keyword">fsid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __u_char_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__loff_t</span> <span class="hljs-keyword">loff_t</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __ino_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__ino_t</span> <span class="hljs-keyword">ino_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__ino64_t</span> <span class="hljs-keyword">ino_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __ino_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __ino64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__ino64_t</span> <span class="hljs-keyword">ino64_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __ino64_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __dev_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__dev_t</span> <span class="hljs-keyword">dev_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __dev_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __gid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__gid_t</span> <span class="hljs-keyword">gid_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __gid_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __mode_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__mode_t</span> <span class="hljs-keyword">mode_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __mode_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __nlink_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__nlink_t</span> <span class="hljs-keyword">nlink_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __nlink_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __uid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__uid_t</span> <span class="hljs-keyword">uid_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __uid_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off_t</span> <span class="hljs-keyword">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-keyword">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __off_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-keyword">off64_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __off64_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __pid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-keyword">pid_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __pid_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN || defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    &amp;&amp; !defined __id_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__id_t</span> <span class="hljs-keyword">id_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __id_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __ssize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__ssize_t</span> <span class="hljs-keyword">ssize_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __ssize_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __daddr_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__daddr_t</span> <span class="hljs-keyword">daddr_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__caddr_t</span> <span class="hljs-keyword">caddr_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __daddr_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_MISC || defined __USE_XOPEN) &amp;&amp; !defined __key_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__key_t</span> <span class="hljs-keyword">key_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __key_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN || defined __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/clock_t.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/clockid_t.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/time_t.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/timer_t.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __useconds_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__useconds_t</span> <span class="hljs-keyword">useconds_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __useconds_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __suseconds_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__suseconds_t</span> <span class="hljs-keyword">suseconds_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __suseconds_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>__need_size_t</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Old compatibility names for C types.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> ulong;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ushort;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uint;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* These size-specific names are used by some of the inet code.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdint-intn.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> !__GNUC_PREREQ (2, 7)</span><br><br><span class="hljs-comment">/* These were defined by ISO C without the first `_&#x27;.  */</span><br><span class="hljs-keyword">typedef</span><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> <span class="hljs-keyword">u_int8_t</span>;<br><span class="hljs-keyword">typedef</span><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">u_int16_t</span>;<br><span class="hljs-keyword">typedef</span><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">u_int32_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __WORDSIZE == 64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">u_int64_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br>__extension__ <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">u_int64_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">register_t</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><br><span class="hljs-comment">/* For GCC 2.7 and later, we can use specific type-size attributes.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __u_intN_t(N, MODE) \</span><br><span class="hljs-meta">  typedef unsigned int u_int##N##_t __attribute__ ((__mode__ (MODE)))</span><br><br>__u_intN_t (<span class="hljs-number">8</span>, __QI__);<br>__u_intN_t (<span class="hljs-number">16</span>, __HI__);<br>__u_intN_t (<span class="hljs-number">32</span>, __SI__);<br>__u_intN_t (<span class="hljs-number">64</span>, __DI__);<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">register_t</span> __attribute__ ((__mode__ (__word__)));<br><br><br><span class="hljs-comment">/* Some code from BIND tests this macro to see if the types above are</span><br><span class="hljs-comment">   defined.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __BIT_TYPES_DEFINED__1</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* In BSD &lt;sys/types.h&gt; is expected to define BYTE_ORDER.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;endian.h&gt;</span></span><br><br><span class="hljs-comment">/* It also defines `fd_set&#x27; and the FD_* macros for `select&#x27;.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/select.h&gt;</span></span><br><br><span class="hljs-comment">/* BSD defines `major&#x27;, `minor&#x27;, and `makedev&#x27; in this header.</span><br><span class="hljs-comment">   However, these symbols are likely to collide with user code, so we are</span><br><span class="hljs-comment">   going to stop defining them here in an upcoming release.  Code that needs</span><br><span class="hljs-comment">   these macros should include &lt;sys/sysmacros.h&gt; directly.  Code that does</span><br><span class="hljs-comment">   not need these macros should #undef them after including this header.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __SYSMACROS_DEPRECATED_INCLUSION</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/sysmacros.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">undef</span> __SYSMACROS_DEPRECATED_INCLUSION</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_UNIX98 || defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    &amp;&amp; !defined __blksize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__blksize_t</span> <span class="hljs-keyword">blksize_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __blksize_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Types from the Large File Support interface.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __blkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__blkcnt_t</span> <span class="hljs-keyword">blkcnt_t</span>; <span class="hljs-comment">/* Type to count number of disk blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __blkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __fsblkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__fsblkcnt_t</span> <span class="hljs-keyword">fsblkcnt_t</span>; <span class="hljs-comment">/* Type to count file system blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __fsblkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __fsfilcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__fsfilcnt_t</span> <span class="hljs-keyword">fsfilcnt_t</span>; <span class="hljs-comment">/* Type to count file system inodes.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __fsfilcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __blkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__blkcnt64_t</span> <span class="hljs-keyword">blkcnt_t</span>;   <span class="hljs-comment">/* Type to count number of disk blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __blkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __fsblkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__fsblkcnt64_t</span> <span class="hljs-keyword">fsblkcnt_t</span>; <span class="hljs-comment">/* Type to count file system blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __fsblkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __fsfilcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__fsfilcnt64_t</span> <span class="hljs-keyword">fsfilcnt_t</span>; <span class="hljs-comment">/* Type to count file system inodes.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __fsfilcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__blkcnt64_t</span> <span class="hljs-keyword">blkcnt64_t</span>;     <span class="hljs-comment">/* Type to count number of disk blocks. */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__fsblkcnt64_t</span> <span class="hljs-keyword">fsblkcnt64_t</span>; <span class="hljs-comment">/* Type to count file system blocks.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__fsfilcnt64_t</span> <span class="hljs-keyword">fsfilcnt64_t</span>; <span class="hljs-comment">/* Type to count file system inodes.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Now add the thread types.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_POSIX199506 || defined __USE_UNIX98</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/pthreadtypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* sys/types.h */</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C stdlib.h 源码文件</title>
    <link href="/2021/05/05/Linux-C-stdlib-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/05/Linux-C-stdlib-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核版本是 5.4，文件位置 <code>/usr/include/stdlib.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *ISO C99 Standard: 7.20 General utilities&lt;stdlib.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>_STDLIB_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/libc-header-start.h&gt;</span></span><br><br><span class="hljs-comment">/* Get size_t, wchar_t and NULL from &lt;stddef.h&gt;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __need_size_t</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __need_wchar_t</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __need_NULL</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stddef.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_STDLIB_H1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN || defined __USE_XOPEN2K8) &amp;&amp; !defined _SYS_WAIT_H</span><br><span class="hljs-comment">/* XPG requires a few symbols from &lt;sys/wait.h&gt; being defined.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/waitflags.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/waitstatus.h&gt;</span></span><br><br><span class="hljs-comment">/* Define the macros &lt;sys/wait.h&gt; also would define this way.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> WEXITSTATUS(status)__WEXITSTATUS (status)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> WTERMSIG(status)__WTERMSIG (status)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> WSTOPSIG(status)__WSTOPSIG (status)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> WIFEXITED(status)__WIFEXITED (status)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> WIFSIGNALED(status)__WIFSIGNALED (status)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> WIFSTOPPED(status)__WIFSTOPPED (status)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __WIFCONTINUED</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> WIFCONTINUED(status)__WIFCONTINUED (status)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* X/Open or XPG7 and &lt;sys/wait.h&gt; not included.  */</span></span><br><br><span class="hljs-comment">/* _FloatN API tests for enablement.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/floatn.h&gt;</span></span><br><br><span class="hljs-comment">/* Returned by `div&#x27;.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">int</span> quot;<span class="hljs-comment">/* Quotient.  */</span><br>    <span class="hljs-keyword">int</span> rem;<span class="hljs-comment">/* Remainder.  */</span><br>  &#125; <span class="hljs-keyword">div_t</span>;<br><br><span class="hljs-comment">/* Returned by `ldiv&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __ldiv_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> quot;<span class="hljs-comment">/* Quotient.  */</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> rem;<span class="hljs-comment">/* Remainder.  */</span><br>  &#125; <span class="hljs-keyword">ldiv_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __ldiv_t_defined1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_ISOC99 &amp;&amp; !defined __lldiv_t_defined</span><br><span class="hljs-comment">/* Returned by `lldiv&#x27;.  */</span><br>__extension__ <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> quot;<span class="hljs-comment">/* Quotient.  */</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> rem;<span class="hljs-comment">/* Remainder.  */</span><br>  &#125; <span class="hljs-keyword">lldiv_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __lldiv_t_defined1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* The largest number rand will return (same as INT_MAX).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>RAND_MAX2147483647</span><br><br><br><span class="hljs-comment">/* We define these the same for all machines.</span><br><span class="hljs-comment">   Changes from this to the outside world should be done in `_exit&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EXIT_FAILURE1<span class="hljs-comment">/* Failing exit status.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EXIT_SUCCESS0<span class="hljs-comment">/* Successful exit status.  */</span></span><br><br><br><span class="hljs-comment">/* Maximum length of a multibyte character in the current locale.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>MB_CUR_MAX(__ctype_get_mb_cur_max ())</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> __ctype_get_mb_cur_max (<span class="hljs-keyword">void</span>) __THROW __wur;<br><br><br><span class="hljs-comment">/* Convert a string to a floating-point number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">double</span> <span class="hljs-title">atof</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__nptr)</span></span><br><span class="hljs-function">     __THROW __attribute_pure__ __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-comment">/* Convert a string to an integer.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">atoi</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__nptr)</span></span><br><span class="hljs-function">     __THROW __attribute_pure__ __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-comment">/* Convert a string to a long integer.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">atol</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__nptr)</span></span><br><span class="hljs-function">     __THROW __attribute_pure__ __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-comment">/* Convert a string to a long long integer.  */</span><br><span class="hljs-function">__extension__ <span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">atoll</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__nptr)</span></span><br><span class="hljs-function">     __THROW __attribute_pure__ __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Convert a string to a floating-point number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">double</span> <span class="hljs-title">strtod</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_ISOC99</span><br><span class="hljs-comment">/* Likewise for `float&#x27; and `long double&#x27; sizes of floating-point numbers.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">float</span> <span class="hljs-title">strtof</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">char</span> **__restrict __endptr)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">strtold</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Likewise for &#x27;_FloatN&#x27; and &#x27;_FloatNx&#x27;.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT16 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float16 <span class="hljs-title">strtof16</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT32 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float32 <span class="hljs-title">strtof32</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT64 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float64 <span class="hljs-title">strtof64</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT128 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float128 <span class="hljs-title">strtof128</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT32X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float32x <span class="hljs-title">strtof32x</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT64X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float64x <span class="hljs-title">strtof64x</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT128X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float128x <span class="hljs-title">strtof128x</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __endptr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Convert a string to a long integer.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtol</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-comment">/* Convert a string to an unsigned long integer.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtoul</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Convert a string to a quadword integer.  */</span><br><span class="hljs-function">__extension__</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtoq</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-comment">/* Convert a string to an unsigned quadword integer.  */</span><br><span class="hljs-function">__extension__</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtouq</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-comment">/* Convert a string to a quadword integer.  */</span><br><span class="hljs-function">__extension__</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtoll</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-comment">/* Convert a string to an unsigned quadword integer.  */</span><br><span class="hljs-function">__extension__</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtoull</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* ISO C99 or use MISC.  */</span></span><br><br><span class="hljs-comment">/* Convert a floating-point number to a string.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __GLIBC_USE (IEC_60559_BFP_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromd</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__format,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">double</span> __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__format,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">float</span> __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfroml</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__format,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT16 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf16</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * __format,</span></span><br><span class="hljs-params"><span class="hljs-function">       _Float16 __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT32 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf32</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * __format,</span></span><br><span class="hljs-params"><span class="hljs-function">       _Float32 __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT64 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf64</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * __format,</span></span><br><span class="hljs-params"><span class="hljs-function">       _Float64 __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT128 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf128</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * __format,</span></span><br><span class="hljs-params"><span class="hljs-function">_Float128 __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT32X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf32x</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * __format,</span></span><br><span class="hljs-params"><span class="hljs-function">_Float32x __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT64X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf64x</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * __format,</span></span><br><span class="hljs-params"><span class="hljs-function">_Float64x __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __HAVE_FLOAT128X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strfromf128x</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__dest, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * __format,</span></span><br><span class="hljs-params"><span class="hljs-function"> _Float128x __f)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Parallel versions of the functions above which take the locale to</span><br><span class="hljs-comment">   use as an additional parameter.  These are GNU extensions inspired</span><br><span class="hljs-comment">   by the POSIX.1-2008 extended locale API.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/locale_t.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtol_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">locale_t</span> __loc)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtoul_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> __base, <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span></span>;<br><br><span class="hljs-function">__extension__</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtoll_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">int</span> __base,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span></span>;<br><br><span class="hljs-function">__extension__</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strtoull_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> __base, <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">double</span> <span class="hljs-title">strtod_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">float</span> <span class="hljs-title">strtof_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">char</span> **__restrict __endptr, <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">strtold_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __HAVE_FLOAT16</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float16 <span class="hljs-title">strtof16_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __HAVE_FLOAT32</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float32 <span class="hljs-title">strtof32_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __HAVE_FLOAT64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float64 <span class="hljs-title">strtof64_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __HAVE_FLOAT128</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float128 <span class="hljs-title">strtof128_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __HAVE_FLOAT32X</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float32x <span class="hljs-title">strtof32x_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __HAVE_FLOAT64X</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float64x <span class="hljs-title">strtof64x_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __HAVE_FLOAT128X</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _Float128x <span class="hljs-title">strtof128x_l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __nptr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">char</span> **__restrict __endptr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">locale_t</span> __loc)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* GNU */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br>__extern_inline <span class="hljs-keyword">int</span><br>__NTH (atoi (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__nptr))<br>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) strtol (__nptr, (<span class="hljs-keyword">char</span> **) <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>&#125;<br>__extern_inline <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span><br>__NTH (atol (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__nptr))<br>&#123;<br>  <span class="hljs-keyword">return</span> strtol (__nptr, (<span class="hljs-keyword">char</span> **) <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_ISOC99</span><br>__extension__ __extern_inline <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span><br>__NTH (atoll (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__nptr))<br>&#123;<br>  <span class="hljs-keyword">return</span> strtoll (__nptr, (<span class="hljs-keyword">char</span> **) <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Optimizing and Inlining.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Convert N to base 64 using the digits &quot;./0-9A-Za-z&quot;, least-significant</span><br><span class="hljs-comment">   digit first.  Returns a pointer to static storage overwritten by the</span><br><span class="hljs-comment">   next call.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">l64a</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __n)</span> __THROW __wur</span>;<br><br><span class="hljs-comment">/* Read a number from a string S in base 64 as above.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">a64l</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__s)</span></span><br><span class="hljs-function">     __THROW __attribute_pure__ __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* Use misc || extended X/Open.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span><span class="hljs-comment">/* we need int32_t... */</span></span><br><br><span class="hljs-comment">/* These are the functions that actually do things.  The `random&#x27;, `srandom&#x27;,</span><br><span class="hljs-comment">   `initstate&#x27; and `setstate&#x27; functions are those from BSD Unices.</span><br><span class="hljs-comment">   The `rand&#x27; and `srand&#x27; functions are required by the ANSI standard.</span><br><span class="hljs-comment">   We provide both interfaces to the same random number generator.  */</span><br><span class="hljs-comment">/* Return a random long integer between 0 and RAND_MAX inclusive.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">random</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Seed the random number generator with the given number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">srandom</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __seed)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Initialize the random number generator to use state buffer STATEBUF,</span><br><span class="hljs-comment">   of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,</span><br><span class="hljs-comment">   32, 64, 128 and 256, the bigger the better; values less than 8 will</span><br><span class="hljs-comment">   cause an error and values greater than 256 will be rounded down.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">initstate</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __seed, <span class="hljs-keyword">char</span> *__statebuf,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">size_t</span> __statelen)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Switch the random number generator to state buffer STATEBUF,</span><br><span class="hljs-comment">   which should have been previously initialized by `initstate&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">setstate</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__statebuf)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Reentrant versions of the `random&#x27; family of functions.</span><br><span class="hljs-comment">   These functions all use the following data structure to contain</span><br><span class="hljs-comment">   state, rather than global state variables.  */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">random_data</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">int32_t</span> *fptr;<span class="hljs-comment">/* Front pointer.  */</span><br>    <span class="hljs-keyword">int32_t</span> *rptr;<span class="hljs-comment">/* Rear pointer.  */</span><br>    <span class="hljs-keyword">int32_t</span> *state;<span class="hljs-comment">/* Array of state values.  */</span><br>    <span class="hljs-keyword">int</span> rand_type;<span class="hljs-comment">/* Type of random number generator.  */</span><br>    <span class="hljs-keyword">int</span> rand_deg;<span class="hljs-comment">/* Degree of random number generator.  */</span><br>    <span class="hljs-keyword">int</span> rand_sep;<span class="hljs-comment">/* Distance between front and rear.  */</span><br>    <span class="hljs-keyword">int32_t</span> *end_ptr;<span class="hljs-comment">/* Pointer behind state table.  */</span><br>  &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">random_r</span> <span class="hljs-params">(struct random_data *__restrict __buf,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">int32_t</span> *__restrict __result)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">srandom_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __seed, struct random_data *__buf)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">initstate_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __seed, <span class="hljs-keyword">char</span> *__restrict __statebuf,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">size_t</span> __statelen,</span></span><br><span class="hljs-params"><span class="hljs-function">struct random_data *__restrict __buf)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setstate_r</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __statebuf,</span></span><br><span class="hljs-params"><span class="hljs-function">       struct random_data *__restrict __buf)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* Use misc.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* Use extended X/Open || misc. */</span></span><br><br><br><span class="hljs-comment">/* Return a random integer between 0 and RAND_MAX inclusive.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rand</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-comment">/* Seed the random number generator with the given number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">srand</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __seed)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* Reentrant interface according to POSIX.1.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rand_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *__seed)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* System V style 48-bit random number generator functions.  */</span><br><br><span class="hljs-comment">/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">double</span> <span class="hljs-title">drand48</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">double</span> <span class="hljs-title">erand48</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __xsubi[<span class="hljs-number">3</span>])</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Return non-negative, long integer in [0,2^31).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lrand48</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nrand48</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __xsubi[<span class="hljs-number">3</span>])</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Return signed, long integers in [-2^31,2^31).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mrand48</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jrand48</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __xsubi[<span class="hljs-number">3</span>])</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Seed random number generator.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">srand48</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __seedval)</span> __THROW</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> *<span class="hljs-title">seed48</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __seed16v[<span class="hljs-number">3</span>])</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lcong48</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __param[<span class="hljs-number">7</span>])</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Data structure for communication with thread safe versions.  This</span><br><span class="hljs-comment">   type is to be regarded as opaque.  It&#x27;s only exported because users</span><br><span class="hljs-comment">   have to allocate objects of this type.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drand48_data</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __x[<span class="hljs-number">3</span>];<span class="hljs-comment">/* Current state.  */</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __old_x[<span class="hljs-number">3</span>]; <span class="hljs-comment">/* Old state.  */</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __c;<span class="hljs-comment">/* Additive const. in congruential formula.  */</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __init;<span class="hljs-comment">/* Flag for initializing.  */</span><br>    __extension__ <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __a;<span class="hljs-comment">/* Factor in congruential</span><br><span class="hljs-comment">   formula.  */</span><br>  &#125;;<br><br><span class="hljs-comment">/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">drand48_r</span> <span class="hljs-params">(struct drand48_data *__restrict __buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">double</span> *__restrict __result)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">erand48_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __xsubi[<span class="hljs-number">3</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">      struct drand48_data *__restrict __buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">double</span> *__restrict __result)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Return non-negative, long integer in [0,2^31).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lrand48_r</span> <span class="hljs-params">(struct drand48_data *__restrict __buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> *__restrict __result)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nrand48_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __xsubi[<span class="hljs-number">3</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">      struct drand48_data *__restrict __buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> *__restrict __result)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Return signed, long integers in [-2^31,2^31).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mrand48_r</span> <span class="hljs-params">(struct drand48_data *__restrict __buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> *__restrict __result)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jrand48_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __xsubi[<span class="hljs-number">3</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">      struct drand48_data *__restrict __buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> *__restrict __result)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Seed random number generator.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">srand48_r</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __seedval, struct drand48_data *__buffer)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">seed48_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __seed16v[<span class="hljs-number">3</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">     struct drand48_data *__buffer)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lcong48_r</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> __param[<span class="hljs-number">7</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">      struct drand48_data *__buffer)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* Use misc.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* Use misc or X/Open.  */</span></span><br><br><span class="hljs-comment">/* Allocate SIZE bytes of memory.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">malloc</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> __size)</span> __THROW __attribute_malloc__ __wur</span>;<br><span class="hljs-comment">/* Allocate NMEMB elements of SIZE bytes each, all initialized to 0.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">calloc</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> __nmemb, <span class="hljs-keyword">size_t</span> __size)</span></span><br><span class="hljs-function">     __THROW __attribute_malloc__ __wur</span>;<br><br><span class="hljs-comment">/* Re-allocate the previously allocated block</span><br><span class="hljs-comment">   in PTR, making the new block SIZE bytes long.  */</span><br><span class="hljs-comment">/* __attribute_malloc__ is not used, because if realloc returns</span><br><span class="hljs-comment">   the same pointer that was passed to it, aliasing needs to be allowed</span><br><span class="hljs-comment">   between objects pointed by the old and new pointers.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">realloc</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__ptr, <span class="hljs-keyword">size_t</span> __size)</span></span><br><span class="hljs-function">     __THROW __attribute_warn_unused_result__</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Re-allocate the previously allocated block in PTR, making the new</span><br><span class="hljs-comment">   block large enough for NMEMB elements of SIZE bytes each.  */</span><br><span class="hljs-comment">/* __attribute_malloc__ is not used, because if reallocarray returns</span><br><span class="hljs-comment">   the same pointer that was passed to it, aliasing needs to be allowed</span><br><span class="hljs-comment">   between objects pointed by the old and new pointers.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">reallocarray</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__ptr, <span class="hljs-keyword">size_t</span> __nmemb, <span class="hljs-keyword">size_t</span> __size)</span></span><br><span class="hljs-function">     __THROW __attribute_warn_unused_result__</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Free a block allocated by `malloc&#x27;, `realloc&#x27; or `calloc&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">free</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__ptr)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;alloca.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Allocate SIZE bytes on a page boundary.  The storage cannot be freed.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">valloc</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> __size)</span> __THROW __attribute_malloc__ __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Allocate memory of SIZE bytes with an alignment of ALIGNMENT.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">posix_memalign</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> **__memptr, <span class="hljs-keyword">size_t</span> __alignment, <span class="hljs-keyword">size_t</span> __size)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ISOC11</span><br><span class="hljs-comment">/* ISO C variant of aligned allocation.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">aligned_alloc</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> __alignment, <span class="hljs-keyword">size_t</span> __size)</span></span><br><span class="hljs-function">     __THROW __attribute_malloc__ __<span class="hljs-title">attribute_alloc_size__</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Abort execution and generate a core-dump.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">abort</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__noreturn__))</span></span>;<br><br><br><span class="hljs-comment">/* Register a function to be called when `exit&#x27; is called.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">atexit</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> (*__func) (<span class="hljs-keyword">void</span>))</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_ISOC11 || defined __USE_ISOCXX11</span><br><span class="hljs-comment">/* Register a function to be called when `quick_exit&#x27; is called.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C++&quot;</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">at_quick_exit</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> (*__func) (<span class="hljs-keyword">void</span>))</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">asm</span> <span class="hljs-params">(<span class="hljs-string">&quot;at_quick_exit&quot;</span>)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">at_quick_exit</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> (*__func) (<span class="hljs-keyword">void</span>))</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* Register a function to be called with the status</span><br><span class="hljs-comment">   given to `exit&#x27; and the given argument.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">on_exit</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> (*__func) (<span class="hljs-keyword">int</span> __status, <span class="hljs-keyword">void</span> *__arg), <span class="hljs-keyword">void</span> *__arg)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Call all functions registered with `atexit&#x27; and `on_exit&#x27;,</span><br><span class="hljs-comment">   in the reverse of the order in which they were registered,</span><br><span class="hljs-comment">   perform stdio cleanup, and terminate program execution with STATUS.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exit</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __status)</span> __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__noreturn__))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_ISOC11 || defined __USE_ISOCXX11</span><br><span class="hljs-comment">/* Call all functions registered with `at_quick_exit&#x27; in the reverse</span><br><span class="hljs-comment">   of the order in which they were registered and terminate program</span><br><span class="hljs-comment">   execution with STATUS.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick_exit</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __status)</span> __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__noreturn__))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-comment">/* Terminate the program with STATUS without calling any of the</span><br><span class="hljs-comment">   functions registered with `atexit&#x27; or `on_exit&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> _Exit (<span class="hljs-keyword">int</span> __status) __THROW __attribute__ ((__noreturn__));<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Return the value of envariable NAME, or NULL if it doesn&#x27;t exist.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">getenv</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* This function is similar to the above but returns NULL if the</span><br><span class="hljs-comment">   programs is running with SUID or SGID enabled.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">secure_getenv</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* The SVID says this is in &lt;stdio.h&gt;, but this seems a better place.*/</span><br><span class="hljs-comment">/* Put STRING, which is of the form &quot;NAME=VALUE&quot;, in the environment.</span><br><span class="hljs-comment">   If there is no `=&#x27;, remove NAME from the environment.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">putenv</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__string)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Set NAME to VALUE in the environment.</span><br><span class="hljs-comment">   If REPLACE is nonzero, overwrite an existing value.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setenv</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__value, <span class="hljs-keyword">int</span> __replace)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Remove the variable NAME from the environment.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">unsetenv</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* The `clearenv&#x27; was planned to be added to POSIX.1 but probably</span><br><span class="hljs-comment">   never made it.  Nevertheless the POSIX.9 standard (POSIX bindings</span><br><span class="hljs-comment">   for Fortran 77) requires this function.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">clearenv</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC \</span><br><span class="hljs-meta">    || (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8)</span><br><span class="hljs-comment">/* Generate a unique temporary file name from TEMPLATE.</span><br><span class="hljs-comment">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</span><br><span class="hljs-comment">   they are replaced with a string that makes the file name unique.</span><br><span class="hljs-comment">   Always returns TEMPLATE, it&#x27;s either a temporary file name or a null</span><br><span class="hljs-comment">   string if it cannot get a unique file name.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">mktemp</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Generate a unique temporary file name from TEMPLATE.</span><br><span class="hljs-comment">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</span><br><span class="hljs-comment">   they are replaced with a string that makes the filename unique.</span><br><span class="hljs-comment">   Returns a file descriptor open on the file for reading and writing,</span><br><span class="hljs-comment">   or -1 if it cannot create a uniquely-named file.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkstemp</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (mkstemp, (<span class="hljs-keyword">char</span> *__template), mkstemp64)<br>     __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> mkstemp mkstemp64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkstemp64</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Similar to mkstemp, but the template can have a suffix after the</span><br><span class="hljs-comment">   XXXXXX.  The length of the suffix is specified in the second</span><br><span class="hljs-comment">   parameter.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkstemps</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __suffixlen)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (mkstemps, (<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __suffixlen),<br>       mkstemps64) __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> mkstemps mkstemps64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkstemps64</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __suffixlen)</span></span><br><span class="hljs-function">     __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Create a unique temporary directory from TEMPLATE.</span><br><span class="hljs-comment">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</span><br><span class="hljs-comment">   they are replaced with a string that makes the directory name unique.</span><br><span class="hljs-comment">   Returns TEMPLATE, or a null pointer if it cannot get a unique name.</span><br><span class="hljs-comment">   The directory is created mode 700.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">mkdtemp</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Generate a unique temporary file name from TEMPLATE similar to</span><br><span class="hljs-comment">   mkstemp.  But allow the caller to pass additional flags which are</span><br><span class="hljs-comment">   used in the open call to create the file..</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkostemp</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __flags)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (mkostemp, (<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __flags), mkostemp64)<br>     __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> mkostemp mkostemp64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkostemp64</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __flags)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Similar to mkostemp, but the template can have a suffix after the</span><br><span class="hljs-comment">   XXXXXX.  The length of the suffix is specified in the second</span><br><span class="hljs-comment">   parameter.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkostemps</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __suffixlen, <span class="hljs-keyword">int</span> __flags)</span></span><br><span class="hljs-function">     __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (mkostemps, (<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __suffixlen,<br>   <span class="hljs-keyword">int</span> __flags), mkostemps64)<br>     __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> mkostemps mkostemps64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mkostemps64</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__template, <span class="hljs-keyword">int</span> __suffixlen, <span class="hljs-keyword">int</span> __flags)</span></span><br><span class="hljs-function">     __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Execute the given line as a shell command.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">system</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__command)</span> __wur</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Return a malloc&#x27;d string containing the canonical absolute name of the</span><br><span class="hljs-comment">   existing named file.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">canonicalize_file_name</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Return the canonical absolute name of file NAME.  If RESOLVED is</span><br><span class="hljs-comment">   null, the result is malloc&#x27;d; otherwise, if the canonical name is</span><br><span class="hljs-comment">   PATH_MAX chars or more, returns null with `errno&#x27; set to</span><br><span class="hljs-comment">   ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,</span><br><span class="hljs-comment">   returns the name in RESOLVED.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">realpath</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __name,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">char</span> *__restrict __resolved)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Shorthand for type of comparison functions.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __COMPAR_FN_T</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __COMPAR_FN_T</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*<span class="hljs-keyword">__compar_fn_t</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *)</span></span>;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__compar_fn_t</span> <span class="hljs-keyword">comparison_fn_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*<span class="hljs-keyword">__compar_d_fn_t</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *, <span class="hljs-keyword">void</span> *)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Do a binary search for KEY in BASE, which consists of NMEMB elements</span><br><span class="hljs-comment">   of SIZE bytes each, using COMPAR to perform the comparisons.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">bsearch</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__key, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__base,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">size_t</span> __nmemb, <span class="hljs-keyword">size_t</span> __size, <span class="hljs-keyword">__compar_fn_t</span> __compar)</span></span><br><span class="hljs-function">     __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdlib-bsearch.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Sort NMEMB elements of BASE, of SIZE bytes each,</span><br><span class="hljs-comment">   using COMPAR to perform the comparisons.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">qsort</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__base, <span class="hljs-keyword">size_t</span> __nmemb, <span class="hljs-keyword">size_t</span> __size,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">__compar_fn_t</span> __compar)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">qsort_r</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__base, <span class="hljs-keyword">size_t</span> __nmemb, <span class="hljs-keyword">size_t</span> __size,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">__compar_d_fn_t</span> __compar, <span class="hljs-keyword">void</span> *__arg)</span></span><br><span class="hljs-function">  __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Return the absolute value of X.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">abs</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __x)</span> __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">labs</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __x)</span> __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-function">__extension__ <span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">llabs</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __x)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Return the `div_t&#x27;, `ldiv_t&#x27; or `lldiv_t&#x27; representation</span><br><span class="hljs-comment">   of the value of NUMER over DENOM. */</span><br><span class="hljs-comment">/* GCC may have built-ins for these someday.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">div_t</span> <span class="hljs-title">div</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __numer, <span class="hljs-keyword">int</span> __denom)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ldiv_t</span> <span class="hljs-title">ldiv</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __numer, <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __denom)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-function">__extension__ <span class="hljs-keyword">extern</span> <span class="hljs-keyword">lldiv_t</span> <span class="hljs-title">lldiv</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __numer,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __denom)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Convert floating point numbers to strings.  The returned values are</span><br><span class="hljs-comment">   valid only until another call to the same function.  */</span><br><br><span class="hljs-comment">/* Convert VALUE to a string with NDIGIT digits and return a pointer to</span><br><span class="hljs-comment">   this.  Set *DECPT with the position of the decimal character and *SIGN</span><br><span class="hljs-comment">   with the sign of the number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">ecvt</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit, <span class="hljs-keyword">int</span> *__restrict __decpt,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> *__restrict __sign)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur</span>;<br><br><span class="hljs-comment">/* Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT</span><br><span class="hljs-comment">   with the position of the decimal character and *SIGN with the sign of</span><br><span class="hljs-comment">   the number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">fcvt</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit, <span class="hljs-keyword">int</span> *__restrict __decpt,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> *__restrict __sign)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur</span>;<br><br><span class="hljs-comment">/* If possible convert VALUE to a string with NDIGIT significant digits.</span><br><span class="hljs-comment">   Otherwise use exponential representation.  The resulting string will</span><br><span class="hljs-comment">   be written to BUF.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">gcvt</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit, <span class="hljs-keyword">char</span> *__buf)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Long double versions of above functions.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">qecvt</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> *__restrict __decpt, <span class="hljs-keyword">int</span> *__restrict __sign)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">qfcvt</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> *__restrict __decpt, <span class="hljs-keyword">int</span> *__restrict __sign)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">qgcvt</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit, <span class="hljs-keyword">char</span> *__buf)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span> __wur</span>;<br><br><br><span class="hljs-comment">/* Reentrant version of the functions above which provide their own</span><br><span class="hljs-comment">   buffers.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ecvt_r</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit, <span class="hljs-keyword">int</span> *__restrict __decpt,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> *__restrict __sign, <span class="hljs-keyword">char</span> *__restrict __buf,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">size_t</span> __len)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fcvt_r</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit, <span class="hljs-keyword">int</span> *__restrict __decpt,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> *__restrict __sign, <span class="hljs-keyword">char</span> *__restrict __buf,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">size_t</span> __len)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qecvt_r</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> *__restrict __decpt, <span class="hljs-keyword">int</span> *__restrict __sign,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> *__restrict __buf, <span class="hljs-keyword">size_t</span> __len)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qfcvt_r</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> __value, <span class="hljs-keyword">int</span> __ndigit,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> *__restrict __decpt, <span class="hljs-keyword">int</span> *__restrict __sign,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> *__restrict __buf, <span class="hljs-keyword">size_t</span> __len)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* misc */</span></span><br><br><br><span class="hljs-comment">/* Return the length of the multibyte character</span><br><span class="hljs-comment">   in S, which is no longer than N.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mblen</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__s, <span class="hljs-keyword">size_t</span> __n)</span> __THROW</span>;<br><span class="hljs-comment">/* Return the length of the given multibyte character,</span><br><span class="hljs-comment">   putting its `wchar_t&#x27; representation in *PWC.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mbtowc</span> <span class="hljs-params">(<span class="hljs-keyword">wchar_t</span> *__restrict __pwc,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s, <span class="hljs-keyword">size_t</span> __n)</span> __THROW</span>;<br><span class="hljs-comment">/* Put the multibyte character represented</span><br><span class="hljs-comment">   by WCHAR in S, returning its length.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">wctomb</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s, <span class="hljs-keyword">wchar_t</span> __wchar)</span> __THROW</span>;<br><br><br><span class="hljs-comment">/* Convert a multibyte string to a wide char string.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> <span class="hljs-title">mbstowcs</span> <span class="hljs-params">(<span class="hljs-keyword">wchar_t</span> *__restrict  __pwcs,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s, <span class="hljs-keyword">size_t</span> __n)</span> __THROW</span>;<br><span class="hljs-comment">/* Convert a wide char string to multibyte string.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> <span class="hljs-title">wcstombs</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __s,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">wchar_t</span> *__restrict __pwcs, <span class="hljs-keyword">size_t</span> __n)</span></span><br><span class="hljs-function">     __THROW</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Determine whether the string value of RESPONSE matches the affirmation</span><br><span class="hljs-comment">   or negative response expression as specified by the LC_MESSAGES category</span><br><span class="hljs-comment">   in the program&#x27;s current locale.  Returns 1 if affirmative, 0 if</span><br><span class="hljs-comment">   negative, and -1 if not matching.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rpmatch</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__response)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Parse comma separated suboption from *OPTIONP and match against</span><br><span class="hljs-comment">   strings in TOKENS.  If found return index and set *VALUEP to</span><br><span class="hljs-comment">   optional value introduced by an equal sign.  If the suboption is</span><br><span class="hljs-comment">   not part of TOKENS return in *VALUEP beginning of unknown</span><br><span class="hljs-comment">   suboption.  On exit *OPTIONP is set to the beginning of the next</span><br><span class="hljs-comment">   token or at the terminating NUL character.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getsubopt</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> **__restrict __optionp,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> *__restrict __tokens,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">char</span> **__restrict __valuep)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN</span><br><span class="hljs-comment">/* Setup DES tables according KEY.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setkey</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__key)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* X/Open pseudo terminal handling.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2KXSI</span><br><span class="hljs-comment">/* Return a master pseudo-terminal handle.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">posix_openpt</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __oflag)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* The next four functions all take a master pseudo-tty fd and</span><br><span class="hljs-comment">   perform an operation on the associated slave:  */</span><br><br><span class="hljs-comment">/* Chown the slave to the calling user.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">grantpt</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Release an internal lock so the slave can be opened.</span><br><span class="hljs-comment">   Call after grantpt().  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">unlockpt</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Return the pathname of the pseudo terminal slave associated with</span><br><span class="hljs-comment">   the master FD is open on, or NULL on errors.</span><br><span class="hljs-comment">   The returned storage is good until the next call to this function.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">ptsname</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Store at most BUFLEN characters of the pathname of the slave pseudo</span><br><span class="hljs-comment">   terminal associated with the master FD is open on in BUF.</span><br><span class="hljs-comment">   Return 0 on success, otherwise an error number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ptsname_r</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">char</span> *__buf, <span class="hljs-keyword">size_t</span> __buflen)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Open a master pseudo terminal and return its file descriptor.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getpt</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Put the 1 minute, 5 minute and 15 minute load averages into the first</span><br><span class="hljs-comment">   NELEM elements of LOADAVG.  Return the number written (never more than</span><br><span class="hljs-comment">   three, but may be less than NELEM), or -1 if an error occurred.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getloadavg</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> __loadavg[], <span class="hljs-keyword">int</span> __nelem)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the index into the active-logins file (utmp) for</span><br><span class="hljs-comment">   the controlling terminal.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ttyslot</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdlib-float.h&gt;</span></span><br><br><span class="hljs-comment">/* Define some macros helping to catch buffer overflows.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __LDBL_COMPAT</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdlib-ldbl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* stdlib.h  */</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C stdio.h 源码文件</title>
    <link href="/2021/05/05/Linux-C-stdio-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/05/Linux-C-stdio-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核版本是 5.4，文件位置 <code>/usr/include/stdio.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Define ISO C stdio on top of C++ iostreams.</span><br><span class="hljs-comment">   Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *ISO C99 Standard: 7.19 Input/output&lt;stdio.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _STDIO_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _STDIO_H1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/libc-header-start.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __need_size_t</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __need_NULL</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/__FILE.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/FILE.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _STDIO_USES_IOSTREAM</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/libio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN || defined __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __GNUC__</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifndef</span> _VA_LIST_DEFINED</span><br><span class="hljs-keyword">typedef</span> _G_va_list va_list;<br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> _VA_LIST_DEFINED</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdarg.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off_t</span> <span class="hljs-keyword">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-keyword">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-keyword">off64_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __off64_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __ssize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__ssize_t</span> <span class="hljs-keyword">ssize_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __ssize_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* The type of the second argument to `fgetpos&#x27; and `fsetpos&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> _G_fpos_t <span class="hljs-keyword">fpos_t</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> _G_fpos64_t <span class="hljs-keyword">fpos_t</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">typedef</span> _G_fpos64_t <span class="hljs-keyword">fpos64_t</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* The possibilities for the third argument to `setvbuf&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _IOFBF 0<span class="hljs-comment">/* Fully buffered.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _IOLBF 1<span class="hljs-comment">/* Line buffered.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _IONBF 2<span class="hljs-comment">/* No buffering.  */</span></span><br><br><br><span class="hljs-comment">/* Default buffer size.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> BUFSIZ</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> BUFSIZ _IO_BUFSIZ</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* End of file character.</span><br><span class="hljs-comment">   Some things throughout the library rely on this being -1.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> EOF</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> EOF (-1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* The possibilities for the third argument to `fseek&#x27;.</span><br><span class="hljs-comment">   These values should not be changed.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SEEK_SET0<span class="hljs-comment">/* Seek from beginning of file.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SEEK_CUR1<span class="hljs-comment">/* Seek from current position.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SEEK_END2<span class="hljs-comment">/* Seek from end of file.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> SEEK_DATA3<span class="hljs-comment">/* Seek to next data.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> SEEK_HOLE4<span class="hljs-comment">/* Seek to next hole.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* Default path prefix for `tempnam&#x27; and `tmpnam&#x27;.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> P_tmpdir<span class="hljs-meta-string">&quot;/tmp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Get the values:</span><br><span class="hljs-comment">   L_tmpnamHow long an array of chars must be to be passed to `tmpnam&#x27;.</span><br><span class="hljs-comment">   TMP_MAXThe minimum number of unique filenames generated by tmpnam</span><br><span class="hljs-comment">(and tempnam when it uses tmpnam&#x27;s name space),</span><br><span class="hljs-comment">or tempnam (the two are separate).</span><br><span class="hljs-comment">   L_ctermidHow long an array to pass to `ctermid&#x27;.</span><br><span class="hljs-comment">   L_cuseridHow long an array to pass to `cuserid&#x27;.</span><br><span class="hljs-comment">   FOPEN_MAXMinimum number of files that can be open at once.</span><br><span class="hljs-comment">   FILENAME_MAXMaximum length of a filename.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdio_lim.h&gt;</span></span><br><br><br><span class="hljs-comment">/* Standard streams.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">stdin</span>;</span><span class="hljs-comment">/* Standard input stream.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">stdout</span>;</span><span class="hljs-comment">/* Standard output stream.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">stderr</span>;</span><span class="hljs-comment">/* Standard error output stream.  */</span><br><span class="hljs-comment">/* C89/C99 say they&#x27;re macros.  Make them happy.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> stdin stdin</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> stdout stdout</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> stderr stderr</span><br><br><span class="hljs-comment">/* Remove file FILENAME.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">remove</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__filename)</span> __THROW</span>;<br><span class="hljs-comment">/* Rename file OLD to NEW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rename</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__old, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__new)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">renameat</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __oldfd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__old, <span class="hljs-keyword">int</span> __newfd,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__new)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Create a temporary file and open it read/write.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">tmpfile</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> FILE *__REDIRECT (tmpfile, (<span class="hljs-keyword">void</span>), tmpfile64) __wur;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> tmpfile tmpfile64</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">tmpfile64</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Generate a temporary filename.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">tmpnam</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s)</span> __THROW __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* This is the reentrant variant of `tmpnam&#x27;.  The only difference is</span><br><span class="hljs-comment">   that it does not allow S to be NULL.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">tmpnam_r</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* Generate a unique temporary filename using up to five characters of PFX</span><br><span class="hljs-comment">   if it is not NULL.  The directory to put this file in is searched for</span><br><span class="hljs-comment">   as follows: First the environment variable &quot;TMPDIR&quot; is checked.</span><br><span class="hljs-comment">   If it contains the name of a writable directory, that directory is used.</span><br><span class="hljs-comment">   If not and if DIR is not NULL, that value is checked.  If that fails,</span><br><span class="hljs-comment">   P_tmpdir is tried and finally &quot;/tmp&quot;.  The storage for the filename</span><br><span class="hljs-comment">   is allocated by `malloc&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">tempnam</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__dir, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__pfx)</span></span><br><span class="hljs-function">     __THROW __attribute_malloc__ __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Close STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fclose</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><span class="hljs-comment">/* Flush STREAM, or all streams if STREAM is NULL.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fflush</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster versions when locking is not required.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fflush_unlocked</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Close all streams.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fcloseall</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Open a file and create a new stream for it.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">fopen</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __filename,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __modes)</span> __wur</span>;<br><span class="hljs-comment">/* Open a file, replacing an existing stream with it.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">freopen</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __filename,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __modes,</span></span><br><span class="hljs-params"><span class="hljs-function">      FILE *__restrict __stream)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> FILE *__REDIRECT (fopen, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __filename,<br> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __modes), fopen64)<br>  __wur;<br><span class="hljs-keyword">extern</span> FILE *__REDIRECT (freopen, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __filename,<br>   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __modes,<br>   FILE *__restrict __stream), freopen64)<br>  __wur;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> fopen fopen64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> freopen freopen64</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">fopen64</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __filename,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __modes)</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">freopen64</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __filename,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __modes,</span></span><br><span class="hljs-params"><span class="hljs-function">FILE *__restrict __stream)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_POSIX</span><br><span class="hljs-comment">/* Create a new stream that refers to an existing system file descriptor.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">fdopen</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__modes)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Create a new stream that refers to the given magic cookie,</span><br><span class="hljs-comment">   and uses the given functions for input and output.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">fopencookie</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__restrict __magic_cookie,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __modes,</span></span><br><span class="hljs-params"><span class="hljs-function">  _IO_cookie_io_functions_t __io_funcs)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)</span><br><span class="hljs-comment">/* Create a new stream that refers to a memory buffer.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">fmemopen</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__s, <span class="hljs-keyword">size_t</span> __len, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__modes)</span></span><br><span class="hljs-function">  __THROW __wur</span>;<br><br><span class="hljs-comment">/* Open a stream that writes into a malloc&#x27;d buffer that is expanded as</span><br><span class="hljs-comment">   necessary.  *BUFLOC and *SIZELOC are updated with the buffer&#x27;s location</span><br><span class="hljs-comment">   and the number of characters written on fflush or fclose.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">open_memstream</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> **__bufloc, <span class="hljs-keyword">size_t</span> *__sizeloc)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* If BUF is NULL, make STREAM unbuffered.</span><br><span class="hljs-comment">   Else make it use buffer BUF, of size BUFSIZ.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setbuf</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-keyword">char</span> *__restrict __buf)</span> __THROW</span>;<br><span class="hljs-comment">/* Make STREAM use buffering mode MODE.</span><br><span class="hljs-comment">   If BUF is not NULL, use N bytes of it for buffering;</span><br><span class="hljs-comment">   else allocate an internal buffer N bytes long.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setvbuf</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-keyword">char</span> *__restrict __buf,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> __modes, <span class="hljs-keyword">size_t</span> __n)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* If BUF is NULL, make STREAM unbuffered.</span><br><span class="hljs-comment">   Else make it use SIZE bytes of BUF for buffering.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setbuffer</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-keyword">char</span> *__restrict __buf,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">size_t</span> __size)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Make STREAM line-buffered.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setlinebuf</span> <span class="hljs-params">(FILE *__stream)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Write formatted output to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fprintf</span> <span class="hljs-params">(FILE *__restrict __stream,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span></span>;<br><span class="hljs-comment">/* Write formatted output to stdout.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span></span>;<br><span class="hljs-comment">/* Write formatted output to S.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sprintf</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __s,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span> __THROWNL</span>;<br><br><span class="hljs-comment">/* Write formatted output to S from argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vfprintf</span> <span class="hljs-params">(FILE *__restrict __s, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,</span></span><br><span class="hljs-params"><span class="hljs-function">     _G_va_list __arg)</span></span>;<br><span class="hljs-comment">/* Write formatted output to stdout from argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vprintf</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, _G_va_list __arg)</span></span>;<br><span class="hljs-comment">/* Write formatted output to S from argument list ARG.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vsprintf</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __s, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,</span></span><br><span class="hljs-params"><span class="hljs-function">     _G_va_list __arg)</span> __THROWNL</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_ISOC99 || defined __USE_UNIX98</span><br><span class="hljs-comment">/* Maximum chars of output to write in MAXLEN.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">snprintf</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __s, <span class="hljs-keyword">size_t</span> __maxlen,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vsnprintf</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __s, <span class="hljs-keyword">size_t</span> __maxlen,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, _G_va_list __arg)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>)))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __GLIBC_USE (LIB_EXT2)</span><br><span class="hljs-comment">/* Write formatted output to a string dynamically allocated with `malloc&#x27;.</span><br><span class="hljs-comment">   Store the address of the string in *PTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vasprintf</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> **__restrict __ptr, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __f,</span></span><br><span class="hljs-params"><span class="hljs-function">      _G_va_list __arg)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span> __wur</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __asprintf (<span class="hljs-keyword">char</span> **__restrict __ptr,<br>       <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __fmt, ...)<br>     __THROWNL __attribute__ ((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))) __wur;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">asprintf</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> **__restrict __ptr,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __fmt, ...)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Write formatted output to a file descriptor.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vdprintf</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __fmt,</span></span><br><span class="hljs-params"><span class="hljs-function">     _G_va_list __arg)</span></span><br><span class="hljs-function">     __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dprintf</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __fmt, ...)</span></span><br><span class="hljs-function">     __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Read formatted input from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fscanf</span> <span class="hljs-params">(FILE *__restrict __stream,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span> __wur</span>;<br><span class="hljs-comment">/* Read formatted input from stdin.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">scanf</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span> __wur</span>;<br><span class="hljs-comment">/* Read formatted input from S.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sscanf</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_ISOC99 &amp;&amp; !defined __USE_GNU \</span><br><span class="hljs-meta">    &amp;&amp; (!defined __LDBL_COMPAT || !defined __REDIRECT) \</span><br><span class="hljs-meta">    &amp;&amp; (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-comment">/* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[</span><br><span class="hljs-comment">   GNU extension which conflicts with valid %a followed by letter</span><br><span class="hljs-comment">   s, S or [.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (<span class="hljs-built_in">fscanf</span>, (FILE *__restrict __stream,<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...),<br>       __isoc99_fscanf) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (<span class="hljs-built_in">scanf</span>, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...),<br>       __isoc99_scanf) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT_NTH (<span class="hljs-built_in">sscanf</span>, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s,<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...),<br>   __isoc99_sscanf);<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __isoc99_fscanf (FILE *__restrict __stream,<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __isoc99_scanf (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __isoc99_sscanf (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s,<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...) __THROW;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> fscanf __isoc99_fscanf</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> scanf __isoc99_scanf</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> sscanf __isoc99_sscanf</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_ISOC99</span><br><span class="hljs-comment">/* Read formatted input from S into argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vfscanf</span> <span class="hljs-params">(FILE *__restrict __s, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,</span></span><br><span class="hljs-params"><span class="hljs-function">    _G_va_list __arg)</span></span><br><span class="hljs-function">     __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span> __wur</span>;<br><br><span class="hljs-comment">/* Read formatted input from stdin into argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vscanf</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, _G_va_list __arg)</span></span><br><span class="hljs-function">     __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)))</span> __wur</span>;<br><br><span class="hljs-comment">/* Read formatted input from S into argument list ARG.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vsscanf</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, _G_va_list __arg)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span></span>;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> !defined __USE_GNU \</span><br><span class="hljs-meta">     &amp;&amp; (!defined __LDBL_COMPAT || !defined __REDIRECT) \</span><br><span class="hljs-meta">     &amp;&amp; (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-comment">/* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[</span><br><span class="hljs-comment">   GNU extension which conflicts with valid %a followed by letter</span><br><span class="hljs-comment">   s, S or [.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (vfscanf,<br>       (FILE *__restrict __s,<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, _G_va_list __arg),<br>       __isoc99_vfscanf)<br>     __attribute__ ((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (vscanf, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,<br>_G_va_list __arg), __isoc99_vscanf)<br>     __attribute__ ((__format__ (__scanf__, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>))) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT_NTH (vsscanf,<br>   (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s,<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,<br>    _G_va_list __arg), __isoc99_vsscanf)<br>     __attribute__ ((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)));<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __isoc99_vfscanf (FILE *__restrict __s,<br>     <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,<br>     _G_va_list __arg) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __isoc99_vscanf (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,<br>    _G_va_list __arg) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __isoc99_vsscanf (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s,<br>     <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,<br>     _G_va_list __arg) __THROW;<br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> vfscanf __isoc99_vfscanf</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> vscanf __isoc99_vscanf</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> vsscanf __isoc99_vsscanf</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use ISO C9x.  */</span></span><br><br><br><span class="hljs-comment">/* Read a character from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fgetc</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getc</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><br><span class="hljs-comment">/* Read a character from stdin.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getchar</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><span class="hljs-comment">/* The C standard explicitly says this is a macro, so we always do the</span><br><span class="hljs-comment">   optimization for it.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> getc(_fp) _IO_getc (_fp)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* These are defined in POSIX.1:1996.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getc_unlocked</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getchar_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster version when locking is not necessary.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fgetc_unlocked</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use MISC.  */</span></span><br><br><br><span class="hljs-comment">/* Write a character to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fputc</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __c, FILE *__stream)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">putc</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __c, FILE *__stream)</span></span>;<br><br><span class="hljs-comment">/* Write a character to stdout.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">putchar</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __c)</span></span>;<br><br><span class="hljs-comment">/* The C standard explicitly says this can be a macro,</span><br><span class="hljs-comment">   so we always do the optimization for it.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> putc(_ch, _fp) _IO_putc (_ch, _fp)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster version when locking is not necessary.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fputc_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __c, FILE *__stream)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use MISC.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* These are defined in POSIX.1:1996.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">putc_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __c, FILE *__stream)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">putchar_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __c)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC \</span><br><span class="hljs-meta">    || (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K)</span><br><span class="hljs-comment">/* Get a word (int) from STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getw</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><br><span class="hljs-comment">/* Write a word (int) to STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">putw</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __w, FILE *__stream)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Get a newline-terminated string of finite length from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">fgets</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __s, <span class="hljs-keyword">int</span> __n, FILE *__restrict __stream)</span></span><br><span class="hljs-function">     __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __GLIBC_USE (DEPRECATED_GETS)</span><br><span class="hljs-comment">/* Get a newline-terminated string from stdin, removing the newline.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is impossible to use safely.  It has been officially</span><br><span class="hljs-comment">   removed from ISO C11 and ISO C++14, and we have also removed it</span><br><span class="hljs-comment">   from the _GNU_SOURCE feature list.  It remains available when</span><br><span class="hljs-comment">   explicitly using an old ISO C, Unix, or POSIX standard.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">gets</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s)</span> __wur __attribute_deprecated__</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* This function does the same as `fgets&#x27; but does not lock the stream.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">fgets_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__restrict __s, <span class="hljs-keyword">int</span> __n,</span></span><br><span class="hljs-params"><span class="hljs-function">     FILE *__restrict __stream)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)</span><br><span class="hljs-comment">/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR</span><br><span class="hljs-comment">   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or</span><br><span class="hljs-comment">   NULL), pointing to *N characters of space.  It is realloc&#x27;d as</span><br><span class="hljs-comment">   necessary.  Returns the number of characters read (not including the</span><br><span class="hljs-comment">   null terminator), or -1 on error or EOF.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation they are cancellation points and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> _IO_ssize_t __getdelim (<span class="hljs-keyword">char</span> **__restrict __lineptr,<br>       <span class="hljs-keyword">size_t</span> *__restrict __n, <span class="hljs-keyword">int</span> __delimiter,<br>       FILE *__restrict __stream) __wur;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> _IO_ssize_t <span class="hljs-title">getdelim</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> **__restrict __lineptr,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">size_t</span> *__restrict __n, <span class="hljs-keyword">int</span> __delimiter,</span></span><br><span class="hljs-params"><span class="hljs-function">     FILE *__restrict __stream)</span> __wur</span>;<br><br><span class="hljs-comment">/* Like `getdelim&#x27;, but reads up to a newline.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> _IO_ssize_t <span class="hljs-title">getline</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> **__restrict __lineptr,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">size_t</span> *__restrict __n,</span></span><br><span class="hljs-params"><span class="hljs-function">    FILE *__restrict __stream)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Write a string to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fputs</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s, FILE *__restrict __stream)</span></span>;<br><br><span class="hljs-comment">/* Write a string, followed by a newline, to stdout.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">puts</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__s)</span></span>;<br><br><br><span class="hljs-comment">/* Push a character back onto the input buffer of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ungetc</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __c, FILE *__stream)</span></span>;<br><br><br><span class="hljs-comment">/* Read chunks of generic data from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> <span class="hljs-title">fread</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__restrict __ptr, <span class="hljs-keyword">size_t</span> __size,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">size_t</span> __n, FILE *__restrict __stream)</span> __wur</span>;<br><span class="hljs-comment">/* Write chunks of generic data to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> <span class="hljs-title">fwrite</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__restrict __ptr, <span class="hljs-keyword">size_t</span> __size,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">size_t</span> __n, FILE *__restrict __s)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* This function does the same as `fputs&#x27; but does not lock the stream.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fputs_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __s,</span></span><br><span class="hljs-params"><span class="hljs-function">   FILE *__restrict __stream)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster versions when locking is not necessary.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation they are cancellation points and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> <span class="hljs-title">fread_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__restrict __ptr, <span class="hljs-keyword">size_t</span> __size,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">size_t</span> __n, FILE *__restrict __stream)</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> <span class="hljs-title">fwrite_unlocked</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__restrict __ptr, <span class="hljs-keyword">size_t</span> __size,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">size_t</span> __n, FILE *__restrict __stream)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Seek to a certain position on STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fseek</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __off, <span class="hljs-keyword">int</span> __whence)</span></span>;<br><span class="hljs-comment">/* Return the current position of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ftell</span> <span class="hljs-params">(FILE *__stream)</span> __wur</span>;<br><span class="hljs-comment">/* Rewind to the beginning of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rewind</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><br><span class="hljs-comment">/* The Single Unix Specification, Version 2, specifies an alternative,</span><br><span class="hljs-comment">   more adequate interface for the two functions above which deal with</span><br><span class="hljs-comment">   file offset.  `long int&#x27; is not the right type.  These definitions</span><br><span class="hljs-comment">   are originally defined in the Large File Support API.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_LARGEFILE || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Seek to a certain position on STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fseeko</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-keyword">__off_t</span> __off, <span class="hljs-keyword">int</span> __whence)</span></span>;<br><span class="hljs-comment">/* Return the current position of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__off_t</span> <span class="hljs-title">ftello</span> <span class="hljs-params">(FILE *__stream)</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (fseeko,<br>       (FILE *__stream, <span class="hljs-keyword">__off64_t</span> __off, <span class="hljs-keyword">int</span> __whence),<br>       fseeko64);<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__off64_t</span> __REDIRECT (ftello, (FILE *__stream), ftello64);<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> fseeko fseeko64</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> ftello ftello64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Get STREAM&#x27;s position.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fgetpos</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-keyword">fpos_t</span> *__restrict __pos)</span></span>;<br><span class="hljs-comment">/* Set STREAM&#x27;s position.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fsetpos</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-keyword">const</span> <span class="hljs-keyword">fpos_t</span> *__pos)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (fgetpos, (FILE *__restrict __stream,<br> <span class="hljs-keyword">fpos_t</span> *__restrict __pos), fgetpos64);<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (fsetpos,<br>       (FILE *__stream, <span class="hljs-keyword">const</span> <span class="hljs-keyword">fpos_t</span> *__pos), fsetpos64);<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> fgetpos fgetpos64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> fsetpos fsetpos64</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fseeko64</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-keyword">__off64_t</span> __off, <span class="hljs-keyword">int</span> __whence)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-title">ftello64</span> <span class="hljs-params">(FILE *__stream)</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fgetpos64</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-keyword">fpos64_t</span> *__restrict __pos)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fsetpos64</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-keyword">const</span> <span class="hljs-keyword">fpos64_t</span> *__pos)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Clear the error and EOF indicators for STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearerr</span> <span class="hljs-params">(FILE *__stream)</span> __THROW</span>;<br><span class="hljs-comment">/* Return the EOF indicator for STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">feof</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur</span>;<br><span class="hljs-comment">/* Return the error indicator for STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ferror</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster versions when locking is not required.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearerr_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">feof_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ferror_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Print a message describing the meaning of the value of errno.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">perror</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__s)</span></span>;<br><br><span class="hljs-comment">/* Provide the declarations for `sys_errlist&#x27; and `sys_nerr&#x27; if they</span><br><span class="hljs-comment">   are available on this system.  Even if available, these variables</span><br><span class="hljs-comment">   should not be used directly.  The `strerror&#x27; function provides</span><br><span class="hljs-comment">   all the necessary functionality.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/sys_errlist.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_POSIX</span><br><span class="hljs-comment">/* Return the system file descriptor for STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fileno</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster version when locking is not required.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fileno_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_POSIX2</span><br><span class="hljs-comment">/* Create a new stream connected to a pipe running the given command.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">popen</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__command, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__modes)</span> __wur</span>;<br><br><span class="hljs-comment">/* Close a stream opened by popen and return the status of its child.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pclose</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_POSIX</span><br><span class="hljs-comment">/* Return the name of the controlling terminal.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">ctermid</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K) || defined __USE_GNU</span><br><span class="hljs-comment">/* Return the name of the current user.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">cuserid</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use X/Open, but not issue 6.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">obstack</span>;</span><span class="hljs-comment">/* See &lt;obstack.h&gt;.  */</span><br><br><span class="hljs-comment">/* Write formatted output to an obstack.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">obstack_printf</span> <span class="hljs-params">(struct obstack *__restrict __obstack,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format, ...)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">obstack_vprintf</span> <span class="hljs-params">(struct obstack *__restrict __obstack,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __format,</span></span><br><span class="hljs-params"><span class="hljs-function">    _G_va_list __args)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use GNU.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* These are defined in POSIX.1:1996.  */</span><br><br><span class="hljs-comment">/* Acquire ownership of STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flockfile</span> <span class="hljs-params">(FILE *__stream)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Try to acquire ownership of STREAM but do not block if it is not</span><br><span class="hljs-comment">   possible.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ftrylockfile</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur</span>;<br><br><span class="hljs-comment">/* Relinquish the ownership granted for STREAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">funlockfile</span> <span class="hljs-params">(FILE *__stream)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* POSIX */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K &amp;&amp; !defined __USE_GNU</span><br><span class="hljs-comment">/*  X/Open Issues 1-5 required getopt to be declared in this</span><br><span class="hljs-comment">   header.  It was removed in Issue 6.  GNU follows Issue 6.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/getopt_posix.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* If we are compiling with optimizing read this file.  It contains</span><br><span class="hljs-comment">   several optimizing inline functions and macros.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdio2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __LDBL_COMPAT</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdio-ldbl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* &lt;stdio.h&gt; included.  */</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 0.11 unistd.h 源码文件</title>
    <link href="/2021/05/04/Linux-0-11-unistd-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/04/Linux-0-11-unistd-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这学期在学操作系统，一些实验内容主要是使用 Linux C，很多头文件不知所然，总觉得盲目去看别人的代码，连哪个函数需要使用哪个头文件都不知道，还写个锤儿的代码！首当其冲的就是这个 <code>unistd.h</code>，一怒之下，找到 Linux 0.11 版本的源码来看，这样至少知道我使用的库中的函数有哪些是 <code>unistd.h</code> 中声明的。</p><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><p>标准符号常数和类型头文件。该文件定义了很多各种各样的常数和类型，以及一些函数声明。（如果在程序中定义了符号 <code>__LIBRARY__</code>，则还包括内核系统调用号和内嵌汇编 _syscall0()）（括号中的内容暂时不理解，暂时按下不表）</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>源码位置：<code>linux/include/unistd.h</code></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _UNISTD_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _UNISTD_H</span><br><br><span class="hljs-comment">/* ok, this may be a joke, but I&#x27;m working on it */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _POSIX_VERSION 198808L</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _POSIX_CHOWN_RESTRICTED<span class="hljs-comment">/* only root can do a chown (I think..) */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _POSIX_NO_TRUNC<span class="hljs-comment">/* no pathname truncation (but see in kernel) */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _POSIX_VDISABLE <span class="hljs-meta-string">&#x27;\0&#x27;</span><span class="hljs-comment">/* character to disable things like ^C */</span></span><br><span class="hljs-comment">/*#define _POSIX_SAVED_IDS */</span><span class="hljs-comment">/* we&#x27;ll get to this yet */</span><br><span class="hljs-comment">/*#define _POSIX_JOB_CONTROL */</span><span class="hljs-comment">/* we aren&#x27;t there quite yet. Soon hopefully */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STDIN_FILENO0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STDOUT_FILENO1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STDERR_FILENO2</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> NULL</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NULL    ((void *)0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* access */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F_OK0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> X_OK1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> W_OK2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R_OK4</span><br><br><span class="hljs-comment">/* lseek */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SEEK_SET0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SEEK_CUR1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SEEK_END2</span><br><br><span class="hljs-comment">/* _SC stands for System Configuration. We don&#x27;t use them much */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_ARG_MAX1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_CHILD_MAX2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_CLOCKS_PER_SEC3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_NGROUPS_MAX4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_OPEN_MAX5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_JOB_CONTROL6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_SAVED_IDS7</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _SC_VERSION8</span><br><br><span class="hljs-comment">/* more (possibly) configurable things - now pathnames */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_LINK_MAX1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_MAX_CANON2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_MAX_INPUT3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_NAME_MAX4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_PATH_MAX5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_PIPE_BUF6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_NO_TRUNC7</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_VDISABLE8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PC_CHOWN_RESTRICTED9</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/times.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/utsname.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utime.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __LIBRARY__</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_setup0<span class="hljs-comment">/* used only by init, to get system going */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_exit1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_fork2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_read3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_write4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_open5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_close6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_waitpid7</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_creat8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_link9</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_unlink10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_execve11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_chdir12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_time13</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_mknod14</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_chmod15</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_chown16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_break17</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_stat18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_lseek19</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_getpid20</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_mount21</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_umount22</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_setuid23</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_getuid24</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_stime25</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_ptrace26</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_alarm27</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_fstat28</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_pause29</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_utime30</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_stty31</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_gtty32</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_access33</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_nice34</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_ftime35</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_sync36</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_kill37</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_rename38</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_mkdir39</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_rmdir40</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_dup41</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_pipe42</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_times43</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_prof44</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_brk45</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_setgid46</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_getgid47</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_signal48</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_geteuid49</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_getegid50</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_acct51</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_phys52</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_lock53</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_ioctl54</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_fcntl55</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_mpx56</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_setpgid57</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_ulimit58</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_uname59</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_umask60</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_chroot61</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_ustat62</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_dup263</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_getppid64</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_getpgrp65</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_setsid66</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_sigaction67</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_sgetmask68</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_ssetmask69</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_setreuid70</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_setregid71</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _syscall0(type,name) \</span><br><span class="hljs-meta">type name(void) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-meta-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;0&quot;</span> (__NR_##name)); \</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">if</span> (__res &gt;= 0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno = -__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _syscall1(type,name,atype,a) \</span><br><span class="hljs-meta">type name(atype a) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-meta-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;0&quot;</span> (__NR_##name),<span class="hljs-meta-string">&quot;b&quot;</span> ((long)(a))); \</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">if</span> (__res &gt;= 0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno = -__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _syscall2(type,name,atype,a,btype,b) \</span><br><span class="hljs-meta">type name(atype a,btype b) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-meta-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;0&quot;</span> (__NR_##name),<span class="hljs-meta-string">&quot;b&quot;</span> ((long)(a)),<span class="hljs-meta-string">&quot;c&quot;</span> ((long)(b))); \</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">if</span> (__res &gt;= 0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno = -__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _syscall3(type,name,atype,a,btype,b,ctype,c) \</span><br><span class="hljs-meta">type name(atype a,btype b,ctype c) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-meta-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-meta-string">&quot;0&quot;</span> (__NR_##name),<span class="hljs-meta-string">&quot;b&quot;</span> ((long)(a)),<span class="hljs-meta-string">&quot;c&quot;</span> ((long)(b)),<span class="hljs-meta-string">&quot;d&quot;</span> ((long)(c))); \</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">if</span> (__res&gt;=0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno=-__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* __LIBRARY__ */</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> errno;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">acct</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">alarm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sec)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">brk</span><span class="hljs-params">(<span class="hljs-keyword">void</span> * end_data_segment)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> * <span class="hljs-title">sbrk</span><span class="hljs-params">(<span class="hljs-keyword">ptrdiff_t</span> increment)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chdir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chmod</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">uid_t</span> owner, <span class="hljs-keyword">gid_t</span> group)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chroot</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">close</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execve</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">char</span> ** argv, <span class="hljs-keyword">char</span> ** envp)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execv</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * pathname, <span class="hljs-keyword">char</span> ** argv)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execvp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * file, <span class="hljs-keyword">char</span> ** argv)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execl</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * pathname, <span class="hljs-keyword">char</span> * arg0, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execlp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * file, <span class="hljs-keyword">char</span> * arg0, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">execle</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * pathname, <span class="hljs-keyword">char</span> * arg0, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">volatile</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> status)</span></span>;<br><span class="hljs-keyword">volatile</span> <span class="hljs-keyword">void</span> _exit(<span class="hljs-keyword">int</span> status);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fcntl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes, <span class="hljs-keyword">int</span> cmd, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fork</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getpid</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getuid</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">geteuid</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getgid</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getegid</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ioctl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes, <span class="hljs-keyword">int</span> cmd, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kill</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid, <span class="hljs-keyword">int</span> signal)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lseek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes, <span class="hljs-keyword">off_t</span> offset, <span class="hljs-keyword">int</span> origin)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mknod</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">mode_t</span> mode, <span class="hljs-keyword">dev_t</span> dev)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mount</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * specialfile, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * dir, <span class="hljs-keyword">int</span> rwflag)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">int</span> flag, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pause</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pipe</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * fildes)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes, <span class="hljs-keyword">char</span> * buf, <span class="hljs-keyword">off_t</span> count)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">setpgrp</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">setpgid</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid,<span class="hljs-keyword">pid_t</span> pgid)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">setuid</span><span class="hljs-params">(<span class="hljs-keyword">uid_t</span> uid)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">setgid</span><span class="hljs-params">(<span class="hljs-keyword">gid_t</span> gid)</span></span>;<br><span class="hljs-keyword">void</span> (*signal(<span class="hljs-keyword">int</span> sig, <span class="hljs-keyword">void</span> (*fn)(<span class="hljs-keyword">int</span>)))(<span class="hljs-keyword">int</span>);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">stat</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, struct stat * stat_buf)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fstat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes, struct stat * stat_buf)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">stime</span><span class="hljs-params">(<span class="hljs-keyword">time_t</span> * tptr)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sync</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">time_t</span> <span class="hljs-title">time</span><span class="hljs-params">(<span class="hljs-keyword">time_t</span> * tloc)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">time_t</span> <span class="hljs-title">times</span><span class="hljs-params">(struct tms * tbuf)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ulimit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cmd, <span class="hljs-keyword">long</span> limit)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">mode_t</span> <span class="hljs-title">umask</span><span class="hljs-params">(<span class="hljs-keyword">mode_t</span> mask)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">umount</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * specialfile)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uname</span><span class="hljs-params">(struct utsname * name)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">unlink</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ustat</span><span class="hljs-params">(<span class="hljs-keyword">dev_t</span> dev, struct ustat * ubuf)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">utime</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, struct utimbuf * times)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">waitpid</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid,<span class="hljs-keyword">int</span> * wait_stat,<span class="hljs-keyword">int</span> options)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * wait_stat)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * buf, <span class="hljs-keyword">off_t</span> count)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dup2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> oldfd, <span class="hljs-keyword">int</span> newfd)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getppid</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">getpgrp</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">pid_t</span> <span class="hljs-title">setsid</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><p>上面的是 0.11 内核的代码，下面贴一个 5.7 版本的代码。代码位置 <code>/usr/include/unistd.h</code></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *POSIX Standard: 2.10 Symbolic Constants&lt;unistd.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>_UNISTD_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_UNISTD_H1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;features.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-comment">/* These may be used to determine what facilities are present at compile time.</span><br><span class="hljs-comment">   Their values can be obtained at run time from `sysconf&#x27;.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of September 2008.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _POSIX_VERSION200809L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of December 2001.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _POSIX_VERSION200112L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined __USE_POSIX199506</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of June 1995.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _POSIX_VERSION199506L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined __USE_POSIX199309</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of September 1993.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _POSIX_VERSION199309L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of September 1990.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _POSIX_VERSION199009L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* These are not #ifdef __USE_POSIX2 because they are</span><br><span class="hljs-comment">   in the theoretically application-owned namespace.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __POSIX2_THIS_VERSION200809L</span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __POSIX2_THIS_VERSION200112L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined __USE_POSIX199506</span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __POSIX2_THIS_VERSION199506L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __POSIX2_THIS_VERSION199209L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _POSIX2_VERSION__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* This symbol was required until the 2001 edition of POSIX.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_POSIX2_C_VERSION__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   C Language Bindings Option.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_POSIX2_C_BIND__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   C Language Development Utilities Option.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_POSIX2_C_DEV__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   Software Development Utilities Option.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_POSIX2_SW_DEV__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   creation of locales with the localedef utility.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _POSIX2_LOCALEDEF       __POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* X/Open version number to which the library conforms.  It is selectable.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _XOPEN_VERSION700</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _XOPEN_VERSION600</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined __USE_UNIX98</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _XOPEN_VERSION500</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> _XOPEN_VERSION4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Commands and utilities from XPG4 are available.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _XOPEN_XCU_VERSION4</span><br><br><span class="hljs-comment">/* We are compatible with the old published standards as well.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _XOPEN_XPG21</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _XOPEN_XPG31</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _XOPEN_XPG41</span><br><br><span class="hljs-comment">/* The X/Open Unix extensions are available.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _XOPEN_UNIX1</span><br><br><span class="hljs-comment">/* Encryption is present.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_XOPEN_CRYPT1</span><br><br><span class="hljs-comment">/* The enhanced internationalization capabilities according to XPG4.2</span><br><span class="hljs-comment">   are present.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>_XOPEN_ENH_I18N1</span><br><br><span class="hljs-comment">/* The legacy interfaces are also available.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _XOPEN_LEGACY1</span><br><br><br><span class="hljs-comment">/* Get values of POSIX options:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   If these symbols are defined, the corresponding features are</span><br><span class="hljs-comment">   always available.  If not, they may be available sometimes.</span><br><span class="hljs-comment">   The current values can be obtained with `sysconf&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _POSIX_JOB_CONTROLJob control is supported.</span><br><span class="hljs-comment">   _POSIX_SAVED_IDSProcesses have a saved set-user-ID</span><br><span class="hljs-comment">and a saved set-group-ID.</span><br><span class="hljs-comment">   _POSIX_REALTIME_SIGNALSReal-time, queued signals are supported.</span><br><span class="hljs-comment">   _POSIX_PRIORITY_SCHEDULINGPriority scheduling is supported.</span><br><span class="hljs-comment">   _POSIX_TIMERSPOSIX.4 clocks and timers are supported.</span><br><span class="hljs-comment">   _POSIX_ASYNCHRONOUS_IOAsynchronous I/O is supported.</span><br><span class="hljs-comment">   _POSIX_PRIORITIZED_IOPrioritized asynchronous I/O is supported.</span><br><span class="hljs-comment">   _POSIX_SYNCHRONIZED_IOSynchronizing file data is supported.</span><br><span class="hljs-comment">   _POSIX_FSYNCThe fsync function is present.</span><br><span class="hljs-comment">   _POSIX_MAPPED_FILESMapping of files to memory is supported.</span><br><span class="hljs-comment">   _POSIX_MEMLOCKLocking of all memory is supported.</span><br><span class="hljs-comment">   _POSIX_MEMLOCK_RANGELocking of ranges of memory is supported.</span><br><span class="hljs-comment">   _POSIX_MEMORY_PROTECTIONSetting of memory protections is supported.</span><br><span class="hljs-comment">   _POSIX_MESSAGE_PASSINGPOSIX.4 message queues are supported.</span><br><span class="hljs-comment">   _POSIX_SEMAPHORESPOSIX.4 counting semaphores are supported.</span><br><span class="hljs-comment">   _POSIX_SHARED_MEMORY_OBJECTSPOSIX.4 shared memory objects are supported.</span><br><span class="hljs-comment">   _POSIX_THREADSPOSIX.1c pthreads are supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_ATTR_STACKADDRThread stack address attribute option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_ATTR_STACKSIZEThread stack size attribute option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_SAFE_FUNCTIONSThread-safe functions are supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PRIORITY_SCHEDULING</span><br><span class="hljs-comment">POSIX.1c thread execution scheduling supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PRIO_INHERITThread priority inheritance option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PRIO_PROTECTThread priority protection option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PROCESS_SHAREDProcess-shared synchronization supported.</span><br><span class="hljs-comment">   _POSIX_PIIProtocol-independent interfaces are supported.</span><br><span class="hljs-comment">   _POSIX_PII_XTIXTI protocol-indep. interfaces are supported.</span><br><span class="hljs-comment">   _POSIX_PII_SOCKETSocket protocol-indep. interfaces are supported.</span><br><span class="hljs-comment">   _POSIX_PII_INTERNETInternet family of protocols supported.</span><br><span class="hljs-comment">   _POSIX_PII_INTERNET_STREAMConnection-mode Internet protocol supported.</span><br><span class="hljs-comment">   _POSIX_PII_INTERNET_DGRAMConnectionless Internet protocol supported.</span><br><span class="hljs-comment">   _POSIX_PII_OSIISO/OSI family of protocols supported.</span><br><span class="hljs-comment">   _POSIX_PII_OSI_COTSConnection-mode ISO/OSI service supported.</span><br><span class="hljs-comment">   _POSIX_PII_OSI_CLTSConnectionless ISO/OSI service supported.</span><br><span class="hljs-comment">   _POSIX_POLLImplementation supports `poll&#x27; function.</span><br><span class="hljs-comment">   _POSIX_SELECTImplementation supports `select&#x27; and `pselect&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _XOPEN_REALTIMEX/Open realtime support is available.</span><br><span class="hljs-comment">   _XOPEN_REALTIME_THREADSX/Open realtime thread support is available.</span><br><span class="hljs-comment">   _XOPEN_SHMShared memory interface according to XPG4.2.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _XBS5_ILP32_OFF32Implementation provides environment with 32-bit</span><br><span class="hljs-comment">int, long, pointer, and off_t types.</span><br><span class="hljs-comment">   _XBS5_ILP32_OFFBIGImplementation provides environment with 32-bit</span><br><span class="hljs-comment">int, long, and pointer and off_t with at least</span><br><span class="hljs-comment">64 bits.</span><br><span class="hljs-comment">   _XBS5_LP64_OFF64Implementation provides environment with 32-bit</span><br><span class="hljs-comment">int, and 64-bit long, pointer, and off_t types.</span><br><span class="hljs-comment">   _XBS5_LPBIG_OFFBIGImplementation provides environment with at</span><br><span class="hljs-comment">least 32 bits int and long, pointer, and off_t</span><br><span class="hljs-comment">with at least 64 bits.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   If any of these symbols is defined as -1, the corresponding option is not</span><br><span class="hljs-comment">   true for any file.  If any is defined as other than -1, the corresponding</span><br><span class="hljs-comment">   option is true for all files.  If a symbol is not defined at all, the value</span><br><span class="hljs-comment">   for a specific file can be obtained from `pathconf&#x27; and `fpathconf&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _POSIX_CHOWN_RESTRICTEDOnly the super user can use `chown&#x27; to change</span><br><span class="hljs-comment">the owner of a file.  `chown&#x27; can only be used</span><br><span class="hljs-comment">to change the group ID of a file to a group of</span><br><span class="hljs-comment">which the calling process is a member.</span><br><span class="hljs-comment">   _POSIX_NO_TRUNCPathname components longer than</span><br><span class="hljs-comment">NAME_MAX generate an error.</span><br><span class="hljs-comment">   _POSIX_VDISABLEIf defined, if the value of an element of the</span><br><span class="hljs-comment">`c_cc&#x27; member of `struct termios&#x27; is</span><br><span class="hljs-comment">_POSIX_VDISABLE, no character will have the</span><br><span class="hljs-comment">effect associated with that element.</span><br><span class="hljs-comment">   _POSIX_SYNC_IOSynchronous I/O may be performed.</span><br><span class="hljs-comment">   _POSIX_ASYNC_IOAsynchronous I/O may be performed.</span><br><span class="hljs-comment">   _POSIX_PRIO_IOPrioritized Asynchronous I/O may be performed.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Support for the Large File Support interface is not generally available.</span><br><span class="hljs-comment">   If it is available the following constants are defined to one.</span><br><span class="hljs-comment">   _LFS64_LARGEFILELow-level I/O supports large files.</span><br><span class="hljs-comment">   _LFS64_STDIOStandard I/O supports large files.</span><br><span class="hljs-comment">   */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/posix_opt.h&gt;</span></span><br><br><span class="hljs-comment">/* Get the environment definitions from Unix98.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/environments.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Standard file descriptors.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>STDIN_FILENO0<span class="hljs-comment">/* Standard input.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>STDOUT_FILENO1<span class="hljs-comment">/* Standard output.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>STDERR_FILENO2<span class="hljs-comment">/* Standard error output.  */</span></span><br><br><br><span class="hljs-comment">/* All functions that are not declared anywhere else.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>__ssize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__ssize_t</span> <span class="hljs-keyword">ssize_t</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __ssize_t_defined</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>__need_size_t</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __need_NULL</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* The Single Unix specification says that some more types are</span><br><span class="hljs-comment">   available here.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __gid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__gid_t</span> <span class="hljs-keyword">gid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __gid_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __uid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__uid_t</span> <span class="hljs-keyword">uid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __uid_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __off_t_defined</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off_t</span> <span class="hljs-keyword">off_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-keyword">off_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-keyword">off64_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __off64_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __useconds_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__useconds_t</span> <span class="hljs-keyword">useconds_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __useconds_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __pid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-keyword">pid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __pid_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* X/Open */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __intptr_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__intptr_t</span> <span class="hljs-keyword">intptr_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __intptr_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __socklen_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__socklen_t</span> <span class="hljs-keyword">socklen_t</span>;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __socklen_t_defined</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Values for the second argument to access.</span><br><span class="hljs-comment">   These may be OR&#x27;d together.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>R_OK4<span class="hljs-comment">/* Test for read permission.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>W_OK2<span class="hljs-comment">/* Test for write permission.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>X_OK1<span class="hljs-comment">/* Test for execute permission.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>F_OK0<span class="hljs-comment">/* Test for existence.  */</span></span><br><br><span class="hljs-comment">/* Test for access to NAME using the real UID and real GID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">access</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">int</span> __type)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Test for access to NAME using the effective UID and GID</span><br><span class="hljs-comment">   (as normal file operations use).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">euidaccess</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">int</span> __type)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* An alias for `euidaccess&#x27;, used by some other systems.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">eaccess</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">int</span> __type)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Test for access to FILE relative to the directory FD is open on.</span><br><span class="hljs-comment">   If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess&#x27;,</span><br><span class="hljs-comment">   otherwise use real IDs like `access&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">faccessat</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">int</span> __type, <span class="hljs-keyword">int</span> __flag)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use GNU.  */</span></span><br><br><br><span class="hljs-comment">/* Values for the WHENCE argument to lseek.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>_STDIO_H<span class="hljs-comment">/* &lt;stdio.h&gt; has the same definitions.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> SEEK_SET0<span class="hljs-comment">/* Seek from beginning of file.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> SEEK_CUR1<span class="hljs-comment">/* Seek from current position.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> SEEK_END2<span class="hljs-comment">/* Seek from end of file.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> SEEK_DATA3<span class="hljs-comment">/* Seek to next data.  */</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> SEEK_HOLE4<span class="hljs-comment">/* Seek to next hole.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC &amp;&amp; !defined L_SET</span><br><span class="hljs-comment">/* Old BSD names for the same constants; just for compatibility.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> L_SETSEEK_SET</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> L_INCRSEEK_CUR</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> L_XTNDSEEK_END</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Move FD&#x27;s file position to OFFSET bytes from the</span><br><span class="hljs-comment">   beginning of the file (if WHENCE is SEEK_SET),</span><br><span class="hljs-comment">   the current position (if WHENCE is SEEK_CUR),</span><br><span class="hljs-comment">   or the end of the file (if WHENCE is SEEK_END).</span><br><span class="hljs-comment">   Return the new file position.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__off_t</span> <span class="hljs-title">lseek</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__off_t</span> __offset, <span class="hljs-keyword">int</span> __whence)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __REDIRECT_NTH</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__off64_t</span> __REDIRECT_NTH (lseek,<br> (<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__off64_t</span> __offset, <span class="hljs-keyword">int</span> __whence),<br> lseek64);<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> lseek lseek64</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__off64_t</span> <span class="hljs-title">lseek64</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__off64_t</span> __offset, <span class="hljs-keyword">int</span> __whence)</span></span><br><span class="hljs-function">     __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Close the file descriptor FD.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">close</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span></span>;<br><br><span class="hljs-comment">/* Read NBYTES into BUF from FD.  Return the</span><br><span class="hljs-comment">   number read, -1 for errors or 0 for EOF.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">read</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">void</span> *__buf, <span class="hljs-keyword">size_t</span> __nbytes)</span> __wur</span>;<br><br><span class="hljs-comment">/* Write N bytes of BUF to FD.  Return the number written, or -1.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__buf, <span class="hljs-keyword">size_t</span> __n)</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Read NBYTES into BUF from FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number read, -1 for errors</span><br><span class="hljs-comment">   or 0 for EOF.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">pread</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">void</span> *__buf, <span class="hljs-keyword">size_t</span> __nbytes,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">__off_t</span> __offset)</span> __wur</span>;<br><br><span class="hljs-comment">/* Write N bytes of BUF to FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number written, or -1.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">pwrite</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__buf, <span class="hljs-keyword">size_t</span> __n,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">__off_t</span> __offset)</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> __REDIRECT (pread, (<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">void</span> *__buf, <span class="hljs-keyword">size_t</span> __nbytes,<br>   <span class="hljs-keyword">__off64_t</span> __offset),<br>   pread64) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> __REDIRECT (pwrite, (<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__buf,<br>    <span class="hljs-keyword">size_t</span> __nbytes, <span class="hljs-keyword">__off64_t</span> __offset),<br>   pwrite64) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> pread pread64</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> pwrite pwrite64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-comment">/* Read NBYTES into BUF from FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number read, -1 for errors</span><br><span class="hljs-comment">   or 0 for EOF.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">pread64</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">void</span> *__buf, <span class="hljs-keyword">size_t</span> __nbytes,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">__off64_t</span> __offset)</span> __wur</span>;<br><span class="hljs-comment">/* Write N bytes of BUF to FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number written, or -1.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">pwrite64</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__buf, <span class="hljs-keyword">size_t</span> __n,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">__off64_t</span> __offset)</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Create a one-way communication channel (pipe).</span><br><span class="hljs-comment">   If successful, two file descriptors are stored in PIPEDES;</span><br><span class="hljs-comment">   bytes written on PIPEDES[1] can be read from PIPEDES[0].</span><br><span class="hljs-comment">   Returns 0 if successful, -1 if not.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pipe</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __pipedes[<span class="hljs-number">2</span>])</span> __THROW __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Same as pipe but apply flags passed in FLAGS to the new file</span><br><span class="hljs-comment">   descriptors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pipe2</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __pipedes[<span class="hljs-number">2</span>], <span class="hljs-keyword">int</span> __flags)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.</span><br><span class="hljs-comment">   If SECONDS is zero, any currently scheduled alarm will be cancelled.</span><br><span class="hljs-comment">   The function returns the number of seconds remaining until the last</span><br><span class="hljs-comment">   alarm scheduled would have signaled, or zero if there wasn&#x27;t one.</span><br><span class="hljs-comment">   There is no return value to indicate an error, but you can set `errno&#x27;</span><br><span class="hljs-comment">   to 0 and check its value after calling `alarm&#x27;, and this might tell you.</span><br><span class="hljs-comment">   The signal may come late due to processor scheduling.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">alarm</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __seconds)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Make the process sleep for SECONDS seconds, or until a signal arrives</span><br><span class="hljs-comment">   and is not ignored.  The function returns the number of seconds less</span><br><span class="hljs-comment">   than SECONDS which it actually slept (thus zero if it slept the full time).</span><br><span class="hljs-comment">   If a signal handler does a `longjmp&#x27; or modifies the handling of the</span><br><span class="hljs-comment">   SIGALRM signal while inside `sleep&#x27; call, the handling of the SIGALRM</span><br><span class="hljs-comment">   signal afterwards is undefined.  There is no return value to indicate</span><br><span class="hljs-comment">   error, but if `sleep&#x27; returns SECONDS, it probably didn&#x27;t work.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sleep</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __seconds)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Set an alarm to go off (generating a SIGALRM signal) in VALUE</span><br><span class="hljs-comment">   microseconds.  If INTERVAL is nonzero, when the alarm goes off, the</span><br><span class="hljs-comment">   timer is reset to go off every INTERVAL microseconds thereafter.</span><br><span class="hljs-comment">   Returns the number of microseconds remaining before the alarm.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__useconds_t</span> <span class="hljs-title">ualarm</span> <span class="hljs-params">(<span class="hljs-keyword">__useconds_t</span> __value, <span class="hljs-keyword">__useconds_t</span> __interval)</span></span><br><span class="hljs-function">     __THROW</span>;<br><br><span class="hljs-comment">/* Sleep USECONDS microseconds, or until a signal arrives that is not blocked</span><br><span class="hljs-comment">   or ignored.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">usleep</span> <span class="hljs-params">(<span class="hljs-keyword">__useconds_t</span> __useconds)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Suspend the process until a signal arrives.</span><br><span class="hljs-comment">   This always returns -1 and sets `errno&#x27; to EINTR.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pause</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">/* Change the owner and group of FILE.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">chown</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">__uid_t</span> __owner, <span class="hljs-keyword">__gid_t</span> __group)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Change the owner and group of the file that FD is open on.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fchown</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__uid_t</span> __owner, <span class="hljs-keyword">__gid_t</span> __group)</span> __THROW __wur</span>;<br><br><br><span class="hljs-comment">/* Change owner and group of FILE, if it is a symbolic</span><br><span class="hljs-comment">   link the ownership of the symbolic link is changed.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lchown</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">__uid_t</span> __owner, <span class="hljs-keyword">__gid_t</span> __group)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use X/Open Unix.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Change the owner and group of FILE relative to the directory FD is open</span><br><span class="hljs-comment">   on.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fchownat</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">__uid_t</span> __owner,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">__gid_t</span> __group, <span class="hljs-keyword">int</span> __flag)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use GNU.  */</span></span><br><br><span class="hljs-comment">/* Change the process&#x27;s working directory to PATH.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">chdir</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Change the process&#x27;s working directory to the one FD is open on.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fchdir</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Get the pathname of the current working directory,</span><br><span class="hljs-comment">   and put it in SIZE bytes of BUF.  Returns NULL if the</span><br><span class="hljs-comment">   directory couldn&#x27;t be determined or SIZE was too small.</span><br><span class="hljs-comment">   If successful, returns BUF.  In GNU, if BUF is NULL,</span><br><span class="hljs-comment">   an array is allocated with `malloc&#x27;; the array is SIZE</span><br><span class="hljs-comment">   bytes long, unless SIZE == 0, in which case it is as</span><br><span class="hljs-comment">   big as necessary.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">getcwd</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__buf, <span class="hljs-keyword">size_t</span> __size)</span> __THROW __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Return a malloc&#x27;d string containing the current directory name.</span><br><span class="hljs-comment">   If the environment variable `PWD&#x27; is set, and its value is correct,</span><br><span class="hljs-comment">   that value is used.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">get_current_dir_name</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Put the absolute pathname of the current working directory in BUF.</span><br><span class="hljs-comment">   If successful, return BUF.  If not, put an error message in</span><br><span class="hljs-comment">   BUF and return NULL.  BUF should be at least PATH_MAX bytes long.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">getwd</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__buf)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __attribute_deprecated__ __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Duplicate FD, returning a new file descriptor on the same file.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dup</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW __wur</span>;<br><br><span class="hljs-comment">/* Duplicate FD to FD2, closing FD2 and making it open on the same file.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dup2</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __fd2)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Duplicate FD to FD2, closing FD2 and making it open on the same</span><br><span class="hljs-comment">   file while setting flags according to FLAGS.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dup3</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __fd2, <span class="hljs-keyword">int</span> __flags)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* NULL-terminated array of &quot;NAME=VALUE&quot; environment variables.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> **__environ;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> **environ;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Replace the current process, executing PATH with arguments ARGV and</span><br><span class="hljs-comment">   environment ENVP.  ARGV and ENVP are terminated by NULL pointers.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">execve</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __argv[],</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __envp[])</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Execute the file FD refers to, overlaying the running program image.</span><br><span class="hljs-comment">   ARGV and ENVP are passed to the new program, as for `execve&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fexecve</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __argv[], <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __envp[])</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Execute PATH with arguments ARGV and environment from `environ&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">execv</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __argv[])</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Execute PATH with all arguments after PATH until a NULL pointer,</span><br><span class="hljs-comment">   and the argument after that for environment.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">execle</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__arg, ...)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Execute PATH with all arguments after PATH until</span><br><span class="hljs-comment">   a NULL pointer and environment from `environ&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">execl</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__arg, ...)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Execute FILE, searching in the `PATH&#x27; environment variable if it contains</span><br><span class="hljs-comment">   no slashes, with arguments ARGV and environment from `environ&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">execvp</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __argv[])</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Execute FILE, searching in the `PATH&#x27; environment variable if</span><br><span class="hljs-comment">   it contains no slashes, with all arguments after FILE until a</span><br><span class="hljs-comment">   NULL pointer and environment from `environ&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">execlp</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__arg, ...)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Execute FILE, searching in the `PATH&#x27; environment variable if it contains</span><br><span class="hljs-comment">   no slashes, with arguments ARGV and environment from `environ&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">execvpe</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __argv[],</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">char</span> *<span class="hljs-keyword">const</span> __envp[])</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* Add INC to priority of the current process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nice</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __inc)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Terminate program execution with the low-order 8 bits of STATUS.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> _exit (<span class="hljs-keyword">int</span> __status) __attribute__ ((__noreturn__));<br><br><br><span class="hljs-comment">/* Get the `_PC_*&#x27; symbols for the NAME argument to `pathconf&#x27; and `fpathconf&#x27;;</span><br><span class="hljs-comment">   the `_SC_*&#x27; symbols for the NAME argument to `sysconf&#x27;;</span><br><span class="hljs-comment">   and the `_CS_*&#x27; symbols for the NAME argument to `confstr&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/confname.h&gt;</span></span><br><br><span class="hljs-comment">/* Get file-specific configuration information about PATH.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pathconf</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path, <span class="hljs-keyword">int</span> __name)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Get file-specific configuration about descriptor FD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpathconf</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __name)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Get the value of the system variable NAME.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sysconf</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __name)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_POSIX2</span><br><span class="hljs-comment">/* Get the value of the string-valued system variable NAME.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">size_t</span> <span class="hljs-title">confstr</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __name, <span class="hljs-keyword">char</span> *__buf, <span class="hljs-keyword">size_t</span> __len)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Get the process ID of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">getpid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Get the process ID of the calling process&#x27;s parent.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">getppid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Get the process group ID of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">getpgrp</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Get the process group ID of process PID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> __getpgid (<span class="hljs-keyword">__pid_t</span> __pid) __THROW;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">getpgid</span> <span class="hljs-params">(<span class="hljs-keyword">__pid_t</span> __pid)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Set the process group ID of the process matching PID to PGID.</span><br><span class="hljs-comment">   If PID is zero, the current process&#x27;s process group ID is set.</span><br><span class="hljs-comment">   If PGID is zero, the process ID of the process is used.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setpgid</span> <span class="hljs-params">(<span class="hljs-keyword">__pid_t</span> __pid, <span class="hljs-keyword">__pid_t</span> __pgid)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Both System V and BSD have `setpgrp&#x27; functions, but with different</span><br><span class="hljs-comment">   calling conventions.  The BSD function is the same as POSIX.1 `setpgid&#x27;</span><br><span class="hljs-comment">   (above).  The System V function takes no arguments and puts the calling</span><br><span class="hljs-comment">   process in its on group like `setpgid (0, 0)&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   New programs should always use `setpgid&#x27; instead.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   GNU provides the POSIX.1 function.  */</span><br><br><span class="hljs-comment">/* Set the process group ID of the calling process to its own PID.</span><br><span class="hljs-comment">   This is exactly the same as `setpgid (0, 0)&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setpgrp</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* Use misc or X/Open.  */</span></span><br><br><span class="hljs-comment">/* Create a new session with the calling process as its leader.</span><br><span class="hljs-comment">   The process group IDs of the session and the calling process</span><br><span class="hljs-comment">   are set to the process ID of the calling process, which is returned.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">setsid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Return the session ID of the given process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">getsid</span> <span class="hljs-params">(<span class="hljs-keyword">__pid_t</span> __pid)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Get the real user ID of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__uid_t</span> <span class="hljs-title">getuid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Get the effective user ID of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__uid_t</span> <span class="hljs-title">geteuid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Get the real group ID of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__gid_t</span> <span class="hljs-title">getgid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Get the effective group ID of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__gid_t</span> <span class="hljs-title">getegid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* If SIZE is zero, return the number of supplementary groups</span><br><span class="hljs-comment">   the calling process is in.  Otherwise, fill in the group IDs</span><br><span class="hljs-comment">   of its supplementary groups in LIST and return the number written.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getgroups</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __size, <span class="hljs-keyword">__gid_t</span> __list[])</span> __THROW __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Return nonzero iff the calling process is in group GID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">group_member</span> <span class="hljs-params">(<span class="hljs-keyword">__gid_t</span> __gid)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Set the user ID of the calling process to UID.</span><br><span class="hljs-comment">   If the calling process is the super-user, set the real</span><br><span class="hljs-comment">   and effective user IDs, and the saved set-user-ID to UID;</span><br><span class="hljs-comment">   if not, the effective user ID is set to UID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setuid</span> <span class="hljs-params">(<span class="hljs-keyword">__uid_t</span> __uid)</span> __THROW __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Set the real user ID of the calling process to RUID,</span><br><span class="hljs-comment">   and the effective user ID of the calling process to EUID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setreuid</span> <span class="hljs-params">(<span class="hljs-keyword">__uid_t</span> __ruid, <span class="hljs-keyword">__uid_t</span> __euid)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Set the effective user ID of the calling process to UID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">seteuid</span> <span class="hljs-params">(<span class="hljs-keyword">__uid_t</span> __uid)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1-2001.  */</span></span><br><br><span class="hljs-comment">/* Set the group ID of the calling process to GID.</span><br><span class="hljs-comment">   If the calling process is the super-user, set the real</span><br><span class="hljs-comment">   and effective group IDs, and the saved set-group-ID to GID;</span><br><span class="hljs-comment">   if not, the effective group ID is set to GID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setgid</span> <span class="hljs-params">(<span class="hljs-keyword">__gid_t</span> __gid)</span> __THROW __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Set the real group ID of the calling process to RGID,</span><br><span class="hljs-comment">   and the effective group ID of the calling process to EGID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setregid</span> <span class="hljs-params">(<span class="hljs-keyword">__gid_t</span> __rgid, <span class="hljs-keyword">__gid_t</span> __egid)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Set the effective group ID of the calling process to GID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setegid</span> <span class="hljs-params">(<span class="hljs-keyword">__gid_t</span> __gid)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1-2001.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Fetch the real user ID, effective user ID, and saved-set user ID,</span><br><span class="hljs-comment">   of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getresuid</span> <span class="hljs-params">(<span class="hljs-keyword">__uid_t</span> *__ruid, <span class="hljs-keyword">__uid_t</span> *__euid, <span class="hljs-keyword">__uid_t</span> *__suid)</span></span><br><span class="hljs-function">     __THROW</span>;<br><br><span class="hljs-comment">/* Fetch the real group ID, effective group ID, and saved-set group ID,</span><br><span class="hljs-comment">   of the calling process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getresgid</span> <span class="hljs-params">(<span class="hljs-keyword">__gid_t</span> *__rgid, <span class="hljs-keyword">__gid_t</span> *__egid, <span class="hljs-keyword">__gid_t</span> *__sgid)</span></span><br><span class="hljs-function">     __THROW</span>;<br><br><span class="hljs-comment">/* Set the real user ID, effective user ID, and saved-set user ID,</span><br><span class="hljs-comment">   of the calling process to RUID, EUID, and SUID, respectively.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setresuid</span> <span class="hljs-params">(<span class="hljs-keyword">__uid_t</span> __ruid, <span class="hljs-keyword">__uid_t</span> __euid, <span class="hljs-keyword">__uid_t</span> __suid)</span></span><br><span class="hljs-function">     __THROW __wur</span>;<br><br><span class="hljs-comment">/* Set the real group ID, effective group ID, and saved-set group ID,</span><br><span class="hljs-comment">   of the calling process to RGID, EGID, and SGID, respectively.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setresgid</span> <span class="hljs-params">(<span class="hljs-keyword">__gid_t</span> __rgid, <span class="hljs-keyword">__gid_t</span> __egid, <span class="hljs-keyword">__gid_t</span> __sgid)</span></span><br><span class="hljs-function">     __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Clone the calling process, creating an exact copy.</span><br><span class="hljs-comment">   Return -1 for errors, 0 to the new process,</span><br><span class="hljs-comment">   and the process ID of the new process to the old process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">fork</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROWNL</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Clone the calling process, but without copying the whole address space.</span><br><span class="hljs-comment">   The calling process is suspended until the new process exits or is</span><br><span class="hljs-comment">   replaced by a call to `execve&#x27;.  Return -1 for errors, 0 to the new process,</span><br><span class="hljs-comment">   and the process ID of the new process to the old process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">vfork</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc or XPG &lt; 7. */</span></span><br><br><br><span class="hljs-comment">/* Return the pathname of the terminal FD is open on, or NULL on errors.</span><br><span class="hljs-comment">   The returned storage is good only until the next call to this function.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">ttyname</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Store at most BUFLEN characters of the pathname of the terminal FD is</span><br><span class="hljs-comment">   open on in BUF.  Return 0 on success, otherwise an error number.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ttyname_r</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">char</span> *__buf, <span class="hljs-keyword">size_t</span> __buflen)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur</span>;<br><br><span class="hljs-comment">/* Return 1 if FD is a valid descriptor associated</span><br><span class="hljs-comment">   with a terminal, zero if not.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">isatty</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Return the index into the active-logins file (utmp) for</span><br><span class="hljs-comment">   the controlling terminal.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ttyslot</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Make a link to FROM named TO.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">link</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__from, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__to)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __wur</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Like link but relative paths in TO and FROM are interpreted relative</span><br><span class="hljs-comment">   to FROMFD and TOFD respectively.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">linkat</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fromfd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__from, <span class="hljs-keyword">int</span> __tofd,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__to, <span class="hljs-keyword">int</span> __flags)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Make a symbolic link to FROM named TO.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">symlink</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__from, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__to)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __wur</span>;<br><br><span class="hljs-comment">/* Read the contents of the symbolic link PATH into no more than</span><br><span class="hljs-comment">   LEN bytes of BUF.  The contents are not null-terminated.</span><br><span class="hljs-comment">   Returns the number of characters read, or -1 for errors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">readlink</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __path,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">char</span> *__restrict __buf, <span class="hljs-keyword">size_t</span> __len)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1-2001.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Like symlink but a relative path in TO is interpreted relative to TOFD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">symlinkat</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__from, <span class="hljs-keyword">int</span> __tofd,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__to)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span> __wur</span>;<br><br><span class="hljs-comment">/* Like readlink but a relative PATH is interpreted relative to FD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">readlinkat</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__restrict __path,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">char</span> *__restrict __buf, <span class="hljs-keyword">size_t</span> __len)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Remove the link NAME.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">unlink</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Remove the link NAME relative to FD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">unlinkat</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">int</span> __flag)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Remove the directory PATH.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rmdir</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Return the foreground process group ID of FD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">__pid_t</span> <span class="hljs-title">tcgetpgrp</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Set the foreground process group ID of FD set PGRP_ID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tcsetpgrp</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__pid_t</span> __pgrp_id)</span> __THROW</span>;<br><br><br><span class="hljs-comment">/* Return the login name of the user.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">getlogin</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* Return at most NAME_LEN characters of the login name of the user in NAME.</span><br><span class="hljs-comment">   If it cannot be determined or some other error occurred, return the error</span><br><span class="hljs-comment">   code.  Otherwise return 0.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getlogin_r</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">size_t</span> __name_len)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* Set the login name returned by `getlogin&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setlogin</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_POSIX2</span><br><span class="hljs-comment">/* Get definitions and prototypes for functions to process the</span><br><span class="hljs-comment">   arguments in ARGV (ARGC of them, minus the program name) for</span><br><span class="hljs-comment">   options given in OPTS.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/getopt_posix.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Put the name of the current host in no more than LEN bytes of NAME.</span><br><span class="hljs-comment">   The result is null-terminated if LEN is large enough for the full</span><br><span class="hljs-comment">   name and the terminator.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gethostname</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">size_t</span> __len)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC</span><br><span class="hljs-comment">/* Set the name of the current host to NAME, which is LEN bytes long.</span><br><span class="hljs-comment">   This call is restricted to the super-user.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sethostname</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">size_t</span> __len)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-comment">/* Set the current machine&#x27;s Internet number to ID.</span><br><span class="hljs-comment">   This call is restricted to the super-user.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sethostid</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __id)</span> __THROW __wur</span>;<br><br><br><span class="hljs-comment">/* Get and set the NIS (aka YP) domain name, if any.</span><br><span class="hljs-comment">   Called just like `gethostname&#x27; and `sethostname&#x27;.</span><br><span class="hljs-comment">   The NIS domain name is usually the empty string when not using NIS.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getdomainname</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">size_t</span> __len)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setdomainname</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name, <span class="hljs-keyword">size_t</span> __len)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><br><span class="hljs-comment">/* Revoke access permissions to all processes currently communicating</span><br><span class="hljs-comment">   with the control terminal, and then send a SIGHUP signal to the process</span><br><span class="hljs-comment">   group of the control terminal.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vhangup</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Revoke the access of all descriptors currently open on FILE.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">revoke</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><br><span class="hljs-comment">/* Enable statistical profiling, writing samples of the PC into at most</span><br><span class="hljs-comment">   SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling</span><br><span class="hljs-comment">   is enabled, the system examines the user PC and increments</span><br><span class="hljs-comment">   SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,</span><br><span class="hljs-comment">   disable profiling.  Returns zero on success, -1 on error.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">profil</span> <span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> *__sample_buffer, <span class="hljs-keyword">size_t</span> __size,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">size_t</span> __offset, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __scale)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Turn accounting on if NAME is an existing file.  The system will then write</span><br><span class="hljs-comment">   a record for each process as it terminates, to this file.  If NAME is NULL,</span><br><span class="hljs-comment">   turn accounting off.  This call is restricted to the super-user.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">acct</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span> __THROW</span>;<br><br><br><span class="hljs-comment">/* Successive calls return the shells listed in `/etc/shells&#x27;.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">getusershell</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">endusershell</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>; <span class="hljs-comment">/* Discard cached info.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setusershell</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>; <span class="hljs-comment">/* Rewind and re-read the file.  */</span><br><br><br><span class="hljs-comment">/* Put the program in the background, and dissociate from the controlling</span><br><span class="hljs-comment">   terminal.  If NOCHDIR is zero, do `chdir (&quot;/&quot;)&#x27;.  If NOCLOSE is zero,</span><br><span class="hljs-comment">   redirects stdin, stdout, and stderr to /dev/null.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daemon</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __nochdir, <span class="hljs-keyword">int</span> __noclose)</span> __THROW __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K)</span><br><span class="hljs-comment">/* Make PATH be the root directory (the starting point for absolute paths).</span><br><span class="hljs-comment">   This call is restricted to the super-user.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">chroot</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__path)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><br><span class="hljs-comment">/* Prompt with PROMPT and read a string from the terminal without echoing.</span><br><span class="hljs-comment">   Uses /dev/tty if possible; otherwise stderr and stdin.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">getpass</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__prompt)</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc || X/Open.  */</span></span><br><br><br><span class="hljs-comment">/* Make all changes done to FD actually appear on disk.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fsync</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span></span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Make all changes done to all files on the file system associated</span><br><span class="hljs-comment">   with FD actually appear on disk.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">syncfs</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><br><span class="hljs-comment">/* Return identifier for the current host.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gethostid</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><span class="hljs-comment">/* Make all changes done to all files actually appear on disk.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sync</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> defined __USE_MISC || !defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the number of bytes in a page.  This is the system&#x27;s page size,</span><br><span class="hljs-comment">   which is not necessarily the same as the hardware page size.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getpagesize</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>  __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span></span>;<br><br><br><span class="hljs-comment">/* Return the maximum number of file descriptors</span><br><span class="hljs-comment">   the current process could possibly have.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getdtablesize</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc || X/Open Unix.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><br><span class="hljs-comment">/* Truncate FILE to LENGTH bytes.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">truncate</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">__off_t</span> __length)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT_NTH</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT_NTH (truncate,<br>   (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">__off64_t</span> __length),<br>   truncate64) __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> truncate truncate64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">truncate64</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__file, <span class="hljs-keyword">__off64_t</span> __length)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use X/Open Unix || POSIX 2008.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_POSIX199309 \</span><br><span class="hljs-meta">    || defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><br><span class="hljs-comment">/* Truncate the file FD is open on to LENGTH bytes.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ftruncate</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__off_t</span> __length)</span> __THROW __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT_NTH</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT_NTH (ftruncate, (<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__off64_t</span> __length),<br>   ftruncate64) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> ftruncate ftruncate64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ftruncate64</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">__off64_t</span> __length)</span> __THROW __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1b || X/Open Unix || XPG6.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><br><span class="hljs-comment">/* Set the end of accessible data space (aka &quot;the break&quot;) to ADDR.</span><br><span class="hljs-comment">   Returns zero on success and -1 for errors (with errno set).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">brk</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__addr)</span> __THROW __wur</span>;<br><br><span class="hljs-comment">/* Increase or decrease the end of accessible data space by DELTA bytes.</span><br><span class="hljs-comment">   If successful, returns the address the previous end of data space</span><br><span class="hljs-comment">   (i.e. the beginning of the new space, if DELTA &gt; 0);</span><br><span class="hljs-comment">   returns (void *) -1 for errors (with errno set).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">sbrk</span> <span class="hljs-params">(<span class="hljs-keyword">intptr_t</span> __delta)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Invoke `system call&#x27; number SYSNO, passing it the remaining arguments.</span><br><span class="hljs-comment">   This is completely system-dependent, and not often useful.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   In Unix, `syscall&#x27; sets `errno&#x27; for all errors and most calls return -1</span><br><span class="hljs-comment">   for errors; in many systems you cannot pass arguments or get return</span><br><span class="hljs-comment">   values for all system calls (`pipe&#x27;, `fork&#x27;, and `getppid&#x27; typically</span><br><span class="hljs-comment">   among them).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   In Mach, all system calls take normal arguments and always return an</span><br><span class="hljs-comment">   error code (zero for success).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">syscall</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> __sysno, ...)</span> __THROW</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* Use misc.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) &amp;&amp; !defined F_LOCK</span><br><span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> These declarations also appear in &lt;fcntl.h&gt;; be sure to keep both</span><br><span class="hljs-comment">   files consistent.  Some systems have them there and some here, and some</span><br><span class="hljs-comment">   software depends on the macros being defined without including both.  */</span><br><br><span class="hljs-comment">/* `lockf&#x27; is a simpler interface to the locking facilities of `fcntl&#x27;.</span><br><span class="hljs-comment">   LEN is always relative to the current file position.</span><br><span class="hljs-comment">   The CMD argument is one of the following.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> F_ULOCK 0<span class="hljs-comment">/* Unlock a previously locked region.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> F_LOCK  1<span class="hljs-comment">/* Lock a region for exclusive use.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> F_TLOCK 2<span class="hljs-comment">/* Test and lock a region for exclusive use.  */</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> F_TEST  3<span class="hljs-comment">/* Test a region for other processes locks.  */</span></span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lockf</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __cmd, <span class="hljs-keyword">__off_t</span> __len)</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __REDIRECT (lockf, (<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __cmd, <span class="hljs-keyword">__off64_t</span> __len),<br>       lockf64) __wur;<br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> lockf lockf64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lockf64</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __cmd, <span class="hljs-keyword">__off64_t</span> __len)</span> __wur</span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use misc and F_LOCK not already defined.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><br><span class="hljs-comment">/* Evaluate EXPRESSION, and repeat as long as it returns -1 with `errno&#x27;</span><br><span class="hljs-comment">   set to EINTR.  */</span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> TEMP_FAILURE_RETRY(expression) \</span><br><span class="hljs-meta">  (__extension__      \</span><br><span class="hljs-meta">    (&#123; long int __result;      \</span><br><span class="hljs-meta">       do __result = (long int) (expression);      \</span><br><span class="hljs-meta">       while (__result == -1L &amp;&amp; errno == EINTR);      \</span><br><span class="hljs-meta">       __result; &#125;))</span><br><br><span class="hljs-comment">/* Copy LENGTH bytes from INFD to OUTFD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">copy_file_range</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __infd, <span class="hljs-keyword">__off64_t</span> *__pinoff,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">int</span> __outfd, <span class="hljs-keyword">__off64_t</span> *__poutoff,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">size_t</span> __length, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __flags)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* __USE_GNU */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_POSIX199309 || defined __USE_UNIX98</span><br><span class="hljs-comment">/* Synchronize at least the data part of a file with the underlying</span><br><span class="hljs-comment">   media.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fdatasync</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fildes)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* Use POSIX199309 */</span></span><br><br><br><span class="hljs-comment">/* XPG4.2 specifies that prototypes for the encryption functions must</span><br><span class="hljs-comment">   be defined here.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span>__USE_XOPEN</span><br><span class="hljs-comment">/* Encrypt at most 8 characters from KEY using salt to perturb DES.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">crypt</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__key, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__salt)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Encrypt data in BLOCK in place if EDFLAG is zero; otherwise decrypt</span><br><span class="hljs-comment">   block in place.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">encrypt</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__glibc_block, <span class="hljs-keyword">int</span> __edflag)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Swab pairs bytes in the first N bytes of the area pointed to by</span><br><span class="hljs-comment">   FROM and copy the result to TO.  The value of TO must not be in the</span><br><span class="hljs-comment">   range [FROM - N + 1, FROM - 1].  If N is odd the first byte in FROM</span><br><span class="hljs-comment">   is without partner.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swab</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__restrict __from, <span class="hljs-keyword">void</span> *__restrict __to,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">ssize_t</span> __n)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Prior to Issue 6, the Single Unix Specification required these</span><br><span class="hljs-comment">   prototypes to appear in this header.  They are also found in</span><br><span class="hljs-comment">   &lt;stdio.h&gt;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the name of the controlling terminal.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">ctermid</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Return the name of the current user.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">cuserid</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *__s)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Unix98 requires this function to be declared here.  In other</span><br><span class="hljs-comment">   standards it is in &lt;pthread.h&gt;.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 &amp;&amp; !defined __USE_XOPEN2K</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_atfork</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> (*__prepare) (<span class="hljs-keyword">void</span>),</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">void</span> (*__parent) (<span class="hljs-keyword">void</span>),</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">void</span> (*__child) (<span class="hljs-keyword">void</span>))</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on</span><br><span class="hljs-comment">   success or -1 on error.  */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getentropy</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__buffer, <span class="hljs-keyword">size_t</span> __length)</span> __wur</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Define some macros helping to catch buffer overflows.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* unistd.h  */</span></span><br></code></pre></div></td></tr></table></figure><p>参考：《Linux 内核完全剖析（0.11）》<a href="https://github.com/karottc/linux-0.11">github 仓库（源码）</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 整数常用进制转换</title>
    <link href="/2021/05/04/Python-%E5%B8%B8%E7%94%A8%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <url>/2021/05/04/Python-%E5%B8%B8%E7%94%A8%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h3><p>这里使用 Python 内置的 <code>int()</code> 函数。</p><p><strong>语法</strong></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">int</span>(x, base=<span class="hljs-number">10</span>)<br></code></pre></div></td></tr></table></figure><p><strong>参数</strong></p><ul><li>x — 字符串或数字</li><li>base — 进制数，十进制</li></ul><p><strong>返回值</strong></p><p>返回 base 进制的的 x 值转换成十进制之后的值。</p><p><strong>使用实例</strong></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">12</span>))<br><span class="hljs-comment"># 二进制转十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b11&#x27;</span>, <span class="hljs-number">2</span>))<br><span class="hljs-comment"># 8 进制转十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;012&#x27;</span>, <span class="hljs-number">8</span>))<br><span class="hljs-comment"># 16 进制转十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-number">16</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0x12&#x27;</span>, <span class="hljs-number">16</span>))<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code>123310101818</code></pre></div><h3 id="十进制转其他进制"><a href="#十进制转其他进制" class="headerlink" title="十进制转其他进制"></a>十进制转其他进制</h3><h4 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h4><p>使用 <code>bin()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt;bin(12)<br><span class="hljs-string">&#x27;0b1100&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="十进制转八进制"><a href="#十进制转八进制" class="headerlink" title="十进制转八进制"></a>十进制转八进制</h4><p>使用 <code>oct()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt;oct(12)<br><span class="hljs-string">&#x27;0o14&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="十进制转二进制-1"><a href="#十进制转二进制-1" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><p>使用 <code>bin()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt;bin(12)<br><span class="hljs-string">&#x27;0b1100&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="其他非十进制之间的互转"><a href="#其他非十进制之间的互转" class="headerlink" title="其他非十进制之间的互转"></a>其他非十进制之间的互转</h3><p>一个简单的方法是，可以利用十进制作中转。</p><p>另一个方法是，我们给相应进制的数加上代表它们的前缀，然后使用诸如 <code>hex()</code> 函数即可。</p><p>例如，我们将十六进制 <code>0x12</code> 数转成八进制数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt;oct(int(<span class="hljs-string">&#x27;0x12&#x27;</span>, 16))<br><span class="hljs-string">&#x27;0o22&#x27;</span><br>&gt;&gt;&gt;oct(0x12)<br><span class="hljs-string">&#x27;0o22&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这里补充各个常用的进制的前缀和后缀。</p><ul><li>二进制：前缀 <code>0b/0B</code>，后缀 <code>b/B</code></li><li>八进制：前缀 <code>0o/0O</code>，后缀 <code>o/O</code>，有的资料说，八进制的前缀也可以使用单独一个数字 <code>0</code>，但是，这在 Python 中是行不通的</li><li>十进制：前缀 <code>无</code>，后缀 <code>d/D</code></li><li>十六进制：前缀 <code>0x/0X</code>，后缀 <code>h/H</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵链乘法问题的 Python 实现（《算法导论》）</title>
    <link href="/2021/05/03/%E7%9F%A9%E9%98%B5%E9%93%BE%E4%B9%98%E6%B3%95%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/"/>
    <url>/2021/05/03/%E7%9F%A9%E9%98%B5%E9%93%BE%E4%B9%98%E6%B3%95%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : matrix_chain_order.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/3</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">matrix_chain_order</span>(<span class="hljs-params">p:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计算矩阵链乘法最优代价</span><br><span class="hljs-string">    :param p: 由矩阵乘法式转化成的序列，注意，这里的 p 序列的长度比矩阵链乘数的长度要多一</span><br><span class="hljs-string">    :return: m 和 s 表</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n = <span class="hljs-built_in">len</span>(p) - <span class="hljs-number">1</span> <span class="hljs-comment"># 获取乘数的个数 n</span><br>    m = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    s = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> cl <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>): <span class="hljs-comment"># cl is the chain length</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n - cl + <span class="hljs-number">1</span>): <span class="hljs-comment"># i 是每个 cl 片段的起点位置，n - cl + 1 是最后一个 cl 片段的终点位置</span><br>            j = i + cl - <span class="hljs-number">1</span> <span class="hljs-comment"># j 是每一个 cl 片段的终点索引</span><br>            m[i][j] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, j): <span class="hljs-comment"># 尝试每一个切割位置，循环找出最优解</span><br>                q = m[i][k] + m[k + <span class="hljs-number">1</span>][j] + p[i] * p[k + <span class="hljs-number">1</span>] * p[j + <span class="hljs-number">1</span>] <span class="hljs-comment"># p[i] 和书中的 p[i - 1] 对应</span><br>                <span class="hljs-keyword">if</span> q &lt; m[i][j]:<br>                    m[i][j] = q<br>                    s[i][j - <span class="hljs-number">1</span>] = k <span class="hljs-comment"># 注意这里的二维索引</span><br>    <span class="hljs-keyword">return</span> [m, s]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_optimal_parents</span>(<span class="hljs-params">s:<span class="hljs-built_in">list</span>, i:<span class="hljs-built_in">int</span>, j:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    打印最优化括号方案</span><br><span class="hljs-string">    :param s: 记录最有分割点的列表</span><br><span class="hljs-string">    :param i: 矩阵链的起点位置</span><br><span class="hljs-string">    :param j: 矩阵链的终点位置</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> i == j:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A_&#x27;</span> + <span class="hljs-built_in">str</span>(i), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        print_optimal_parents(s, i, s[i][j - <span class="hljs-number">1</span>])<br>        print_optimal_parents(s, s[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, j)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;)&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = [<span class="hljs-number">30</span>, <span class="hljs-number">35</span>, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>]<br>    res = matrix_chain_order(p)<br>    <span class="hljs-built_in">print</span>(res)<br>    m = res[<span class="hljs-number">0</span>]<br>    s = res[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> res:<br>        <span class="hljs-keyword">for</span> ea <span class="hljs-keyword">in</span> each:<br>            <span class="hljs-built_in">print</span>(ea)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(m[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>])<br>    print_optimal_parents(s, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><p>测试的输出：</p><div class="hljs code-wrapper"><pre><code>[[[0, 15750, 7875, 9375, 11875, 15125], [0, 0, 2625, 4375, 7125, 10500], [0, 0, 0, 750, 2500, 5375], [0, 0, 0, 0, 1000, 3500], [0, 0, 0, 0, 0, 5000], [0, 0, 0, 0, 0, 0]], [[0, 0, 2, 2, 2], [0, 1, 2, 2, 2], [0, 0, 2, 2, 2], [0, 0, 0, 3, 4], [0, 0, 0, 0, 4]]][0, 15750, 7875, 9375, 11875, 15125][0, 0, 2625, 4375, 7125, 10500][0, 0, 0, 750, 2500, 5375][0, 0, 0, 0, 1000, 3500][0, 0, 0, 0, 0, 5000][0, 0, 0, 0, 0, 0]--------[0, 0, 2, 2, 2][0, 1, 2, 2, 2][0, 0, 2, 2, 2][0, 0, 0, 3, 4][0, 0, 0, 0, 4]--------7125((A_0(A_1A_2))((A_3A_4)A_5))</code></pre></div><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这个算法初看时不容易理解，但是跟着书上的思路，仔细地走上一遍，最终理解这个算法的思想是不困难的。</p><p>但是，在实现代码的过程中，也没有想象中那样顺利。主要原因是数组索引的问题。书中的数组索引有的是以 1 作为起始索引，有的是以 0 作为起始索引，而我在使用 Python 实现的过程中，全部是以 0 作为起始索引（这样主要是为了不浪费空间）。这样一来，就很可能产生一些索引的对应问题。遂，将索引对应的关系记录如下</p><ol><li><code>m[i][j]</code>：对应书中的 <code>m[i + 1, j + 1]</code>，表示计算矩阵 $A_{i + 1..j + 1}$ 所需标量乘法次数的最小值。关于定义，书中是 <code>m[1..n, 1..n]</code>，而代码中是 <code>m[0..n - 1][0..n - 1]</code>。</li><li><code>s[i][j]</code>：对应书中的 <code>s[i + 1, j + 2]</code>，表示最优值 <code>m[i + 1][j + 2]</code> 对应的分割点 k。关于定义，书中是 <code>s[1..n - 1, 2..n]</code>，而代码中是 <code>s[0..n - 1][0..n - 1]</code>，<strong>因此</strong>，这也导致了在代码中，与 <code>m[i][j]</code> 对应的最优分割点是 <code>s[i][j - 1]</code>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《算法导论》</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法导论》寻找最近点对问题的 Python 实现</title>
    <link href="/2021/05/03/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E5%AF%BB%E6%89%BE%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/05/03/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E5%AF%BB%E6%89%BE%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : nearest_dot_pair_final.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/3</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">寻找最近点对问题</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_dist</span>(<span class="hljs-params">a:<span class="hljs-built_in">tuple</span>, b:<span class="hljs-built_in">tuple</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    获取两点之间的欧几里得距离</span><br><span class="hljs-string">    :param a: 点 a</span><br><span class="hljs-string">    :param b: 点 b</span><br><span class="hljs-string">    :return: 两点间的欧几里得距离</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    dist = math.sqrt((a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>]) ** <span class="hljs-number">2</span> + (a[<span class="hljs-number">1</span>] - b[<span class="hljs-number">1</span>]) ** <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> dist<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">brute_get_min</span>(<span class="hljs-params">Q:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    暴力求解最小点对问题</span><br><span class="hljs-string">    :param Q: 点的全集</span><br><span class="hljs-string">    :return: 最近点对，最近点对的距离</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    point_pair = [(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>))] <span class="hljs-comment"># 初始最近点对为原点和无穷点</span><br>    dist_min = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-comment"># 初始最近点对的距离是无穷大</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Q)):<br>        a = Q[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(Q)):<br>            b = Q[j]<br>            dist = get_dist(a, b)<br>            <span class="hljs-keyword">if</span> dist &lt; dist_min:<br>                dist_min = dist<br>                point_pair[<span class="hljs-number">0</span>] = a<br>                point_pair[<span class="hljs-number">1</span>] = b<br>    <span class="hljs-keyword">return</span> [point_pair, dist_min]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_dotpair</span>(<span class="hljs-params">P:<span class="hljs-built_in">list</span>, X:<span class="hljs-built_in">list</span>, Y:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    找出最近点对</span><br><span class="hljs-string">    :param P: 点的全集 Q 的子集</span><br><span class="hljs-string">    :param X: P 中的所有点按照 x 坐标排序的结果</span><br><span class="hljs-string">    :param Y: P 中的所有点按照 y 坐标排序的结果</span><br><span class="hljs-string">    :return: 点对，最短距离</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n = <span class="hljs-built_in">len</span>(P) <span class="hljs-comment"># 获取点的总数，这同时是 P.len，X.len 和 Y.len</span><br>    <span class="hljs-comment"># n &lt;= 3 时，直接暴力求解</span><br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">3</span>:<br>        point_pair = [(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>))]<br>        dist_min = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>                <span class="hljs-keyword">if</span> get_dist(P[i], P[j]) &lt; dist_min:<br>                    point_pair[<span class="hljs-number">0</span>] = P[i]<br>                    point_pair[<span class="hljs-number">1</span>] = P[j]<br>                    dist_min = get_dist(P[i], P[j])<br>        <span class="hljs-keyword">return</span> [point_pair, dist_min]<br><br>    <span class="hljs-comment"># 求出递归所需的参数</span><br>    half = math.ceil(n / <span class="hljs-number">2</span>)<br>    XL = X[:half]<br>    XR = X[half:]<br>    PL = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XL]<br>    PR = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XR]<br>    <span class="hljs-comment"># 对中间的边界的可能重复的元素进行处理</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PL) != <span class="hljs-built_in">len</span>(XL):<br>        PL.remove(XL[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PR) != <span class="hljs-built_in">len</span>(XR):<br>        PR.remove(XR[<span class="hljs-number">0</span>])<br>    YL = []<br>    YR = []<br>    L_len = R_len = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>        <span class="hljs-keyword">if</span> Y[i] <span class="hljs-keyword">in</span> PL:<br>            YL.append(Y[i])<br>            L_len += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> Y[i] <span class="hljs-keyword">in</span> PR:<br>            YR.append(Y[i])<br>            R_len += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 对中间的边界的可能重复的元素进行处理</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(YL) != <span class="hljs-built_in">len</span>(XL):<br>        YL.remove(XL[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(YR) != <span class="hljs-built_in">len</span>(XR):<br>        YR.remove(XR[<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># 递归处理</span><br>    PL_res = find_dotpair(PL, XL, YL) <span class="hljs-comment"># 左半部分递归处理结果</span><br>    PR_res = find_dotpair(PR, XR, YR) <span class="hljs-comment"># 右半部分递归处理结果</span><br>    point_pair = PL_res[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> PL_res[<span class="hljs-number">1</span>] &lt; PR_res[<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> PR_res[<span class="hljs-number">0</span>]<br>    dist_min = <span class="hljs-built_in">min</span>(PL_res[<span class="hljs-number">1</span>], PR_res[<span class="hljs-number">1</span>]) <span class="hljs-comment"># 取左右两个部分中的最小的那一个距离</span><br>    <span class="hljs-comment"># 对中间区域进行处理</span><br>    x_mid = (X[half - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + X[half][<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span> <span class="hljs-comment"># 中间分割线的 x 坐标</span><br>    Y_midarea = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Y <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] &gt;= x_mid - dist_min <span class="hljs-keyword">and</span> i[<span class="hljs-number">0</span>] &lt;= x_mid + dist_min] <span class="hljs-comment"># 中间区域的所有点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Y_midarea)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">7</span>):<br>            <span class="hljs-keyword">if</span> j &gt;= <span class="hljs-built_in">len</span>(Y_midarea):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> get_dist(Y_midarea[i], Y_midarea[j]) &lt; dist_min:<br>                point_pair[<span class="hljs-number">0</span>] = Y_midarea[i]<br>                point_pair[<span class="hljs-number">1</span>] = Y_midarea[j]<br>                dist_min = get_dist(Y_midarea[i], Y_midarea[j])<br>    <span class="hljs-keyword">return</span> [point_pair, dist_min]<br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    Q = [(random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>)] <span class="hljs-comment"># 生成 128 个点</span><br>    <span class="hljs-built_in">print</span>(Q)<br>    <span class="hljs-comment"># 测试暴力求解法</span><br>    brute_res = brute_get_min(Q)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;暴力法&#x27;</span>, brute_res)<br>    <span class="hljs-comment"># 测试分治法</span><br>    P = Q<br>    X = <span class="hljs-built_in">sorted</span>(P) <span class="hljs-comment"># 默认按照 x 坐标排序</span><br>    Y = <span class="hljs-built_in">sorted</span>(P, key=<span class="hljs-keyword">lambda</span> p : p[<span class="hljs-number">1</span>]) <span class="hljs-comment"># 按照 Y 坐标排序</span><br>    divide_res = find_dotpair(P, X, Y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;分治法&#x27;</span>, divide_res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        main()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>这里测试了 10 组数据，输出结果如下</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">[<span class="hljs-comment">(84, 15)</span>, <span class="hljs-comment">(221, 232)</span>, <span class="hljs-comment">(186, 143)</span>, <span class="hljs-comment">(221, 1)</span>, <span class="hljs-comment">(52, 100)</span>, <span class="hljs-comment">(129, 188)</span>, <span class="hljs-comment">(50, 213)</span>, <span class="hljs-comment">(12, 29)</span>, <span class="hljs-comment">(30, 201)</span>, <span class="hljs-comment">(208, 160)</span>, <span class="hljs-comment">(15, 248)</span>, <span class="hljs-comment">(185, 115)</span>, <span class="hljs-comment">(254, 239)</span>, <span class="hljs-comment">(210, 102)</span>, <span class="hljs-comment">(139, 79)</span>, <span class="hljs-comment">(204, 135)</span>, <span class="hljs-comment">(140, 0)</span>, <span class="hljs-comment">(235, 163)</span>, <span class="hljs-comment">(197, 176)</span>, <span class="hljs-comment">(137, 104)</span>, <span class="hljs-comment">(144, 159)</span>, <span class="hljs-comment">(220, 180)</span>, <span class="hljs-comment">(51, 227)</span>, <span class="hljs-comment">(211, 139)</span>, <span class="hljs-comment">(134, 59)</span>, <span class="hljs-comment">(225, 219)</span>, <span class="hljs-comment">(100, 198)</span>, <span class="hljs-comment">(81, 91)</span>, <span class="hljs-comment">(134, 177)</span>, <span class="hljs-comment">(139, 12)</span>, <span class="hljs-comment">(142, 17)</span>, <span class="hljs-comment">(88, 1)</span>, <span class="hljs-comment">(251, 165)</span>, <span class="hljs-comment">(12, 210)</span>, <span class="hljs-comment">(166, 241)</span>, <span class="hljs-comment">(28, 142)</span>, <span class="hljs-comment">(224, 139)</span>, <span class="hljs-comment">(109, 113)</span>, <span class="hljs-comment">(109, 166)</span>, <span class="hljs-comment">(193, 68)</span>, <span class="hljs-comment">(230, 17)</span>, <span class="hljs-comment">(210, 88)</span>, <span class="hljs-comment">(119, 168)</span>, <span class="hljs-comment">(206, 248)</span>, <span class="hljs-comment">(78, 241)</span>, <span class="hljs-comment">(66, 40)</span>, <span class="hljs-comment">(66, 55)</span>, <span class="hljs-comment">(178, 83)</span>, <span class="hljs-comment">(199, 179)</span>, <span class="hljs-comment">(238, 226)</span>, <span class="hljs-comment">(170, 211)</span>, <span class="hljs-comment">(237, 135)</span>, <span class="hljs-comment">(18, 231)</span>, <span class="hljs-comment">(169, 90)</span>, <span class="hljs-comment">(159, 196)</span>, <span class="hljs-comment">(103, 115)</span>, <span class="hljs-comment">(230, 141)</span>, <span class="hljs-comment">(94, 89)</span>, <span class="hljs-comment">(136, 174)</span>, <span class="hljs-comment">(29, 231)</span>, <span class="hljs-comment">(148, 34)</span>, <span class="hljs-comment">(1, 0)</span>, <span class="hljs-comment">(209, 40)</span>, <span class="hljs-comment">(220, 229)</span>, <span class="hljs-comment">(173, 246)</span>, <span class="hljs-comment">(212, 150)</span>, <span class="hljs-comment">(191, 60)</span>, <span class="hljs-comment">(221, 96)</span>, <span class="hljs-comment">(79, 188)</span>, <span class="hljs-comment">(41, 246)</span>, <span class="hljs-comment">(123, 116)</span>, <span class="hljs-comment">(210, 139)</span>, <span class="hljs-comment">(146, 211)</span>, <span class="hljs-comment">(97, 48)</span>, <span class="hljs-comment">(186, 116)</span>, <span class="hljs-comment">(245, 21)</span>, <span class="hljs-comment">(244, 223)</span>, <span class="hljs-comment">(205, 102)</span>, <span class="hljs-comment">(85, 28)</span>, <span class="hljs-comment">(66, 24)</span>, <span class="hljs-comment">(249, 210)</span>, <span class="hljs-comment">(49, 78)</span>, <span class="hljs-comment">(224, 253)</span>, <span class="hljs-comment">(115, 20)</span>, <span class="hljs-comment">(104, 60)</span>, <span class="hljs-comment">(250, 131)</span>, <span class="hljs-comment">(203, 41)</span>, <span class="hljs-comment">(130, 129)</span>, <span class="hljs-comment">(44, 215)</span>, <span class="hljs-comment">(137, 123)</span>, <span class="hljs-comment">(72, 205)</span>, <span class="hljs-comment">(198, 166)</span>, <span class="hljs-comment">(63, 248)</span>, <span class="hljs-comment">(236, 237)</span>, <span class="hljs-comment">(93, 247)</span>, <span class="hljs-comment">(98, 241)</span>, <span class="hljs-comment">(143, 165)</span>, <span class="hljs-comment">(176, 246)</span>, <span class="hljs-comment">(15, 167)</span>, <span class="hljs-comment">(231, 194)</span>, <span class="hljs-comment">(197, 248)</span>, <span class="hljs-comment">(39, 77)</span>, <span class="hljs-comment">(107, 239)</span>, <span class="hljs-comment">(107, 149)</span>, <span class="hljs-comment">(53, 188)</span>, <span class="hljs-comment">(188, 9)</span>, <span class="hljs-comment">(112, 29)</span>, <span class="hljs-comment">(243, 152)</span>, <span class="hljs-comment">(94, 209)</span>, <span class="hljs-comment">(232, 251)</span>, <span class="hljs-comment">(193, 30)</span>, <span class="hljs-comment">(127, 15)</span>, <span class="hljs-comment">(235, 55)</span>, <span class="hljs-comment">(180, 93)</span>, <span class="hljs-comment">(128, 104)</span>, <span class="hljs-comment">(167, 194)</span>, <span class="hljs-comment">(202, 113)</span>, <span class="hljs-comment">(3, 170)</span>, <span class="hljs-comment">(209, 22)</span>, <span class="hljs-comment">(159, 80)</span>, <span class="hljs-comment">(26, 196)</span>, <span class="hljs-comment">(21, 62)</span>, <span class="hljs-comment">(191, 236)</span>, <span class="hljs-comment">(227, 121)</span>, <span class="hljs-comment">(136, 223)</span>, <span class="hljs-comment">(21, 111)</span>, <span class="hljs-comment">(108, 192)</span>, <span class="hljs-comment">(148, 207)</span>]<br>暴力法 [[<span class="hljs-comment">(211, 139)</span>, <span class="hljs-comment">(210, 139)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(211, 139)</span>, <span class="hljs-comment">(210, 139)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(116, 20)</span>, <span class="hljs-comment">(172, 213)</span>, <span class="hljs-comment">(181, 186)</span>, <span class="hljs-comment">(181, 145)</span>, <span class="hljs-comment">(106, 120)</span>, <span class="hljs-comment">(249, 125)</span>, <span class="hljs-comment">(98, 143)</span>, <span class="hljs-comment">(114, 201)</span>, <span class="hljs-comment">(50, 47)</span>, <span class="hljs-comment">(183, 122)</span>, <span class="hljs-comment">(160, 253)</span>, <span class="hljs-comment">(236, 87)</span>, <span class="hljs-comment">(40, 125)</span>, <span class="hljs-comment">(180, 111)</span>, <span class="hljs-comment">(202, 183)</span>, <span class="hljs-comment">(210, 57)</span>, <span class="hljs-comment">(118, 103)</span>, <span class="hljs-comment">(162, 177)</span>, <span class="hljs-comment">(78, 57)</span>, <span class="hljs-comment">(248, 77)</span>, <span class="hljs-comment">(184, 43)</span>, <span class="hljs-comment">(165, 193)</span>, <span class="hljs-comment">(39, 135)</span>, <span class="hljs-comment">(21, 237)</span>, <span class="hljs-comment">(99, 36)</span>, <span class="hljs-comment">(232, 54)</span>, <span class="hljs-comment">(220, 219)</span>, <span class="hljs-comment">(175, 17)</span>, <span class="hljs-comment">(151, 92)</span>, <span class="hljs-comment">(189, 195)</span>, <span class="hljs-comment">(249, 7)</span>, <span class="hljs-comment">(126, 129)</span>, <span class="hljs-comment">(153, 216)</span>, <span class="hljs-comment">(19, 198)</span>, <span class="hljs-comment">(48, 205)</span>, <span class="hljs-comment">(228, 181)</span>, <span class="hljs-comment">(190, 200)</span>, <span class="hljs-comment">(39, 121)</span>, <span class="hljs-comment">(54, 167)</span>, <span class="hljs-comment">(130, 200)</span>, <span class="hljs-comment">(24, 121)</span>, <span class="hljs-comment">(4, 106)</span>, <span class="hljs-comment">(118, 42)</span>, <span class="hljs-comment">(104, 16)</span>, <span class="hljs-comment">(43, 3)</span>, <span class="hljs-comment">(242, 251)</span>, <span class="hljs-comment">(91, 47)</span>, <span class="hljs-comment">(142, 103)</span>, <span class="hljs-comment">(62, 224)</span>, <span class="hljs-comment">(123, 195)</span>, <span class="hljs-comment">(225, 177)</span>, <span class="hljs-comment">(166, 238)</span>, <span class="hljs-comment">(105, 176)</span>, <span class="hljs-comment">(144, 174)</span>, <span class="hljs-comment">(163, 199)</span>, <span class="hljs-comment">(43, 219)</span>, <span class="hljs-comment">(229, 96)</span>, <span class="hljs-comment">(131, 239)</span>, <span class="hljs-comment">(113, 129)</span>, <span class="hljs-comment">(32, 103)</span>, <span class="hljs-comment">(163, 42)</span>, <span class="hljs-comment">(87, 0)</span>, <span class="hljs-comment">(184, 130)</span>, <span class="hljs-comment">(79, 87)</span>, <span class="hljs-comment">(134, 208)</span>, <span class="hljs-comment">(75, 187)</span>, <span class="hljs-comment">(3, 53)</span>, <span class="hljs-comment">(140, 25)</span>, <span class="hljs-comment">(139, 77)</span>, <span class="hljs-comment">(8, 2)</span>, <span class="hljs-comment">(198, 148)</span>, <span class="hljs-comment">(71, 225)</span>, <span class="hljs-comment">(235, 48)</span>, <span class="hljs-comment">(27, 112)</span>, <span class="hljs-comment">(217, 74)</span>, <span class="hljs-comment">(46, 45)</span>, <span class="hljs-comment">(117, 20)</span>, <span class="hljs-comment">(199, 125)</span>, <span class="hljs-comment">(14, 253)</span>, <span class="hljs-comment">(169, 208)</span>, <span class="hljs-comment">(91, 62)</span>, <span class="hljs-comment">(138, 115)</span>, <span class="hljs-comment">(36, 89)</span>, <span class="hljs-comment">(13, 61)</span>, <span class="hljs-comment">(23, 84)</span>, <span class="hljs-comment">(141, 82)</span>, <span class="hljs-comment">(101, 188)</span>, <span class="hljs-comment">(189, 12)</span>, <span class="hljs-comment">(10, 17)</span>, <span class="hljs-comment">(185, 89)</span>, <span class="hljs-comment">(142, 181)</span>, <span class="hljs-comment">(92, 255)</span>, <span class="hljs-comment">(139, 60)</span>, <span class="hljs-comment">(230, 167)</span>, <span class="hljs-comment">(72, 239)</span>, <span class="hljs-comment">(117, 49)</span>, <span class="hljs-comment">(233, 45)</span>, <span class="hljs-comment">(210, 212)</span>, <span class="hljs-comment">(111, 9)</span>, <span class="hljs-comment">(188, 159)</span>, <span class="hljs-comment">(214, 22)</span>, <span class="hljs-comment">(111, 202)</span>, <span class="hljs-comment">(95, 254)</span>, <span class="hljs-comment">(99, 148)</span>, <span class="hljs-comment">(36, 238)</span>, <span class="hljs-comment">(240, 13)</span>, <span class="hljs-comment">(138, 164)</span>, <span class="hljs-comment">(98, 229)</span>, <span class="hljs-comment">(55, 101)</span>, <span class="hljs-comment">(254, 128)</span>, <span class="hljs-comment">(15, 64)</span>, <span class="hljs-comment">(189, 205)</span>, <span class="hljs-comment">(142, 15)</span>, <span class="hljs-comment">(62, 24)</span>, <span class="hljs-comment">(135, 65)</span>, <span class="hljs-comment">(117, 64)</span>, <span class="hljs-comment">(112, 120)</span>, <span class="hljs-comment">(72, 197)</span>, <span class="hljs-comment">(252, 129)</span>, <span class="hljs-comment">(210, 5)</span>, <span class="hljs-comment">(105, 11)</span>, <span class="hljs-comment">(210, 64)</span>, <span class="hljs-comment">(71, 39)</span>, <span class="hljs-comment">(14, 16)</span>, <span class="hljs-comment">(157, 150)</span>, <span class="hljs-comment">(229, 132)</span>, <span class="hljs-comment">(41, 180)</span>, <span class="hljs-comment">(193, 121)</span>]<br>暴力法 [[<span class="hljs-comment">(116, 20)</span>, <span class="hljs-comment">(117, 20)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(116, 20)</span>, <span class="hljs-comment">(117, 20)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(148, 202)</span>, <span class="hljs-comment">(195, 27)</span>, <span class="hljs-comment">(64, 65)</span>, <span class="hljs-comment">(137, 57)</span>, <span class="hljs-comment">(76, 27)</span>, <span class="hljs-comment">(255, 26)</span>, <span class="hljs-comment">(67, 255)</span>, <span class="hljs-comment">(4, 39)</span>, <span class="hljs-comment">(213, 212)</span>, <span class="hljs-comment">(109, 51)</span>, <span class="hljs-comment">(125, 149)</span>, <span class="hljs-comment">(96, 102)</span>, <span class="hljs-comment">(188, 191)</span>, <span class="hljs-comment">(28, 104)</span>, <span class="hljs-comment">(36, 202)</span>, <span class="hljs-comment">(193, 210)</span>, <span class="hljs-comment">(35, 160)</span>, <span class="hljs-comment">(160, 200)</span>, <span class="hljs-comment">(26, 2)</span>, <span class="hljs-comment">(17, 127)</span>, <span class="hljs-comment">(67, 105)</span>, <span class="hljs-comment">(137, 74)</span>, <span class="hljs-comment">(244, 176)</span>, <span class="hljs-comment">(87, 106)</span>, <span class="hljs-comment">(195, 141)</span>, <span class="hljs-comment">(253, 233)</span>, <span class="hljs-comment">(247, 9)</span>, <span class="hljs-comment">(252, 239)</span>, <span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(145, 82)</span>, <span class="hljs-comment">(197, 229)</span>, <span class="hljs-comment">(78, 199)</span>, <span class="hljs-comment">(90, 122)</span>, <span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(93, 80)</span>, <span class="hljs-comment">(111, 1)</span>, <span class="hljs-comment">(154, 251)</span>, <span class="hljs-comment">(199, 233)</span>, <span class="hljs-comment">(188, 34)</span>, <span class="hljs-comment">(108, 144)</span>, <span class="hljs-comment">(75, 70)</span>, <span class="hljs-comment">(233, 98)</span>, <span class="hljs-comment">(203, 6)</span>, <span class="hljs-comment">(256, 56)</span>, <span class="hljs-comment">(84, 90)</span>, <span class="hljs-comment">(243, 224)</span>, <span class="hljs-comment">(224, 249)</span>, <span class="hljs-comment">(129, 98)</span>, <span class="hljs-comment">(110, 102)</span>, <span class="hljs-comment">(93, 144)</span>, <span class="hljs-comment">(159, 247)</span>, <span class="hljs-comment">(5, 60)</span>, <span class="hljs-comment">(221, 175)</span>, <span class="hljs-comment">(256, 58)</span>, <span class="hljs-comment">(93, 56)</span>, <span class="hljs-comment">(230, 100)</span>, <span class="hljs-comment">(145, 97)</span>, <span class="hljs-comment">(110, 114)</span>, <span class="hljs-comment">(21, 84)</span>, <span class="hljs-comment">(143, 33)</span>, <span class="hljs-comment">(124, 41)</span>, <span class="hljs-comment">(88, 68)</span>, <span class="hljs-comment">(208, 117)</span>, <span class="hljs-comment">(54, 78)</span>, <span class="hljs-comment">(241, 129)</span>, <span class="hljs-comment">(247, 92)</span>, <span class="hljs-comment">(75, 159)</span>, <span class="hljs-comment">(135, 219)</span>, <span class="hljs-comment">(11, 159)</span>, <span class="hljs-comment">(196, 171)</span>, <span class="hljs-comment">(90, 197)</span>, <span class="hljs-comment">(180, 256)</span>, <span class="hljs-comment">(184, 207)</span>, <span class="hljs-comment">(118, 158)</span>, <span class="hljs-comment">(232, 184)</span>, <span class="hljs-comment">(244, 105)</span>, <span class="hljs-comment">(95, 169)</span>, <span class="hljs-comment">(121, 236)</span>, <span class="hljs-comment">(215, 109)</span>, <span class="hljs-comment">(112, 89)</span>, <span class="hljs-comment">(172, 126)</span>, <span class="hljs-comment">(72, 153)</span>, <span class="hljs-comment">(84, 112)</span>, <span class="hljs-comment">(204, 121)</span>, <span class="hljs-comment">(17, 23)</span>, <span class="hljs-comment">(118, 152)</span>, <span class="hljs-comment">(206, 84)</span>, <span class="hljs-comment">(95, 145)</span>, <span class="hljs-comment">(161, 98)</span>, <span class="hljs-comment">(123, 210)</span>, <span class="hljs-comment">(136, 11)</span>, <span class="hljs-comment">(232, 77)</span>, <span class="hljs-comment">(35, 34)</span>, <span class="hljs-comment">(209, 203)</span>, <span class="hljs-comment">(111, 225)</span>, <span class="hljs-comment">(207, 33)</span>, <span class="hljs-comment">(214, 174)</span>, <span class="hljs-comment">(170, 71)</span>, <span class="hljs-comment">(213, 139)</span>, <span class="hljs-comment">(198, 118)</span>, <span class="hljs-comment">(16, 181)</span>, <span class="hljs-comment">(181, 157)</span>, <span class="hljs-comment">(44, 239)</span>, <span class="hljs-comment">(184, 61)</span>, <span class="hljs-comment">(85, 150)</span>, <span class="hljs-comment">(252, 16)</span>, <span class="hljs-comment">(202, 43)</span>, <span class="hljs-comment">(5, 250)</span>, <span class="hljs-comment">(79, 170)</span>, <span class="hljs-comment">(57, 126)</span>, <span class="hljs-comment">(235, 174)</span>, <span class="hljs-comment">(57, 40)</span>, <span class="hljs-comment">(175, 123)</span>, <span class="hljs-comment">(231, 130)</span>, <span class="hljs-comment">(57, 106)</span>, <span class="hljs-comment">(136, 187)</span>, <span class="hljs-comment">(148, 89)</span>, <span class="hljs-comment">(68, 57)</span>, <span class="hljs-comment">(48, 200)</span>, <span class="hljs-comment">(95, 122)</span>, <span class="hljs-comment">(248, 18)</span>, <span class="hljs-comment">(127, 171)</span>, <span class="hljs-comment">(14, 120)</span>, <span class="hljs-comment">(93, 205)</span>, <span class="hljs-comment">(133, 35)</span>, <span class="hljs-comment">(8, 254)</span>, <span class="hljs-comment">(183, 209)</span>, <span class="hljs-comment">(95, 153)</span>]<br>暴力法 [[<span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(160, 194)</span>], <span class="hljs-number">0.0</span>]<br>分治法 [[<span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(160, 194)</span>], <span class="hljs-number">0.0</span>]<br>----------<br>[<span class="hljs-comment">(182, 36)</span>, <span class="hljs-comment">(205, 46)</span>, <span class="hljs-comment">(56, 106)</span>, <span class="hljs-comment">(246, 173)</span>, <span class="hljs-comment">(255, 177)</span>, <span class="hljs-comment">(174, 103)</span>, <span class="hljs-comment">(231, 97)</span>, <span class="hljs-comment">(143, 30)</span>, <span class="hljs-comment">(166, 90)</span>, <span class="hljs-comment">(145, 212)</span>, <span class="hljs-comment">(15, 196)</span>, <span class="hljs-comment">(249, 224)</span>, <span class="hljs-comment">(192, 5)</span>, <span class="hljs-comment">(73, 252)</span>, <span class="hljs-comment">(23, 151)</span>, <span class="hljs-comment">(123, 182)</span>, <span class="hljs-comment">(110, 87)</span>, <span class="hljs-comment">(179, 211)</span>, <span class="hljs-comment">(143, 61)</span>, <span class="hljs-comment">(168, 30)</span>, <span class="hljs-comment">(228, 213)</span>, <span class="hljs-comment">(89, 17)</span>, <span class="hljs-comment">(241, 87)</span>, <span class="hljs-comment">(163, 254)</span>, <span class="hljs-comment">(242, 44)</span>, <span class="hljs-comment">(204, 110)</span>, <span class="hljs-comment">(185, 5)</span>, <span class="hljs-comment">(152, 65)</span>, <span class="hljs-comment">(41, 244)</span>, <span class="hljs-comment">(126, 254)</span>, <span class="hljs-comment">(104, 114)</span>, <span class="hljs-comment">(128, 65)</span>, <span class="hljs-comment">(46, 102)</span>, <span class="hljs-comment">(154, 188)</span>, <span class="hljs-comment">(111, 72)</span>, <span class="hljs-comment">(94, 29)</span>, <span class="hljs-comment">(117, 6)</span>, <span class="hljs-comment">(234, 200)</span>, <span class="hljs-comment">(105, 243)</span>, <span class="hljs-comment">(96, 190)</span>, <span class="hljs-comment">(15, 85)</span>, <span class="hljs-comment">(74, 27)</span>, <span class="hljs-comment">(80, 106)</span>, <span class="hljs-comment">(34, 197)</span>, <span class="hljs-comment">(217, 44)</span>, <span class="hljs-comment">(144, 180)</span>, <span class="hljs-comment">(114, 155)</span>, <span class="hljs-comment">(67, 122)</span>, <span class="hljs-comment">(31, 146)</span>, <span class="hljs-comment">(171, 87)</span>, <span class="hljs-comment">(78, 147)</span>, <span class="hljs-comment">(242, 231)</span>, <span class="hljs-comment">(103, 130)</span>, <span class="hljs-comment">(212, 59)</span>, <span class="hljs-comment">(23, 183)</span>, <span class="hljs-comment">(134, 157)</span>, <span class="hljs-comment">(110, 113)</span>, <span class="hljs-comment">(192, 120)</span>, <span class="hljs-comment">(11, 131)</span>, <span class="hljs-comment">(186, 64)</span>, <span class="hljs-comment">(210, 243)</span>, <span class="hljs-comment">(119, 125)</span>, <span class="hljs-comment">(165, 56)</span>, <span class="hljs-comment">(158, 145)</span>, <span class="hljs-comment">(154, 216)</span>, <span class="hljs-comment">(47, 2)</span>, <span class="hljs-comment">(95, 207)</span>, <span class="hljs-comment">(246, 202)</span>, <span class="hljs-comment">(181, 58)</span>, <span class="hljs-comment">(214, 56)</span>, <span class="hljs-comment">(22, 5)</span>, <span class="hljs-comment">(19, 65)</span>, <span class="hljs-comment">(173, 85)</span>, <span class="hljs-comment">(215, 16)</span>, <span class="hljs-comment">(47, 129)</span>, <span class="hljs-comment">(32, 217)</span>, <span class="hljs-comment">(0, 119)</span>, <span class="hljs-comment">(118, 48)</span>, <span class="hljs-comment">(180, 208)</span>, <span class="hljs-comment">(55, 122)</span>, <span class="hljs-comment">(62, 185)</span>, <span class="hljs-comment">(26, 232)</span>, <span class="hljs-comment">(99, 223)</span>, <span class="hljs-comment">(73, 170)</span>, <span class="hljs-comment">(141, 41)</span>, <span class="hljs-comment">(222, 153)</span>, <span class="hljs-comment">(180, 91)</span>, <span class="hljs-comment">(42, 251)</span>, <span class="hljs-comment">(45, 156)</span>, <span class="hljs-comment">(20, 117)</span>, <span class="hljs-comment">(73, 233)</span>, <span class="hljs-comment">(65, 148)</span>, <span class="hljs-comment">(34, 43)</span>, <span class="hljs-comment">(197, 69)</span>, <span class="hljs-comment">(192, 69)</span>, <span class="hljs-comment">(82, 245)</span>, <span class="hljs-comment">(98, 66)</span>, <span class="hljs-comment">(4, 136)</span>, <span class="hljs-comment">(247, 191)</span>, <span class="hljs-comment">(143, 197)</span>, <span class="hljs-comment">(178, 67)</span>, <span class="hljs-comment">(3, 91)</span>, <span class="hljs-comment">(251, 217)</span>, <span class="hljs-comment">(217, 45)</span>, <span class="hljs-comment">(175, 105)</span>, <span class="hljs-comment">(187, 47)</span>, <span class="hljs-comment">(12, 142)</span>, <span class="hljs-comment">(64, 74)</span>, <span class="hljs-comment">(150, 248)</span>, <span class="hljs-comment">(228, 112)</span>, <span class="hljs-comment">(225, 145)</span>, <span class="hljs-comment">(166, 191)</span>, <span class="hljs-comment">(161, 129)</span>, <span class="hljs-comment">(190, 41)</span>, <span class="hljs-comment">(124, 1)</span>, <span class="hljs-comment">(207, 16)</span>, <span class="hljs-comment">(9, 253)</span>, <span class="hljs-comment">(147, 88)</span>, <span class="hljs-comment">(75, 191)</span>, <span class="hljs-comment">(76, 54)</span>, <span class="hljs-comment">(128, 0)</span>, <span class="hljs-comment">(237, 30)</span>, <span class="hljs-comment">(71, 46)</span>, <span class="hljs-comment">(150, 17)</span>, <span class="hljs-comment">(147, 219)</span>, <span class="hljs-comment">(68, 194)</span>, <span class="hljs-comment">(21, 165)</span>, <span class="hljs-comment">(149, 29)</span>]<br>暴力法 [[<span class="hljs-comment">(217, 44)</span>, <span class="hljs-comment">(217, 45)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(217, 44)</span>, <span class="hljs-comment">(217, 45)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(85, 218)</span>, <span class="hljs-comment">(31, 202)</span>, <span class="hljs-comment">(218, 246)</span>, <span class="hljs-comment">(175, 131)</span>, <span class="hljs-comment">(170, 125)</span>, <span class="hljs-comment">(155, 8)</span>, <span class="hljs-comment">(137, 165)</span>, <span class="hljs-comment">(193, 179)</span>, <span class="hljs-comment">(232, 251)</span>, <span class="hljs-comment">(17, 111)</span>, <span class="hljs-comment">(227, 28)</span>, <span class="hljs-comment">(235, 34)</span>, <span class="hljs-comment">(150, 8)</span>, <span class="hljs-comment">(49, 176)</span>, <span class="hljs-comment">(40, 88)</span>, <span class="hljs-comment">(129, 34)</span>, <span class="hljs-comment">(20, 167)</span>, <span class="hljs-comment">(1, 100)</span>, <span class="hljs-comment">(17, 86)</span>, <span class="hljs-comment">(112, 176)</span>, <span class="hljs-comment">(235, 116)</span>, <span class="hljs-comment">(82, 91)</span>, <span class="hljs-comment">(248, 230)</span>, <span class="hljs-comment">(86, 48)</span>, <span class="hljs-comment">(53, 194)</span>, <span class="hljs-comment">(133, 165)</span>, <span class="hljs-comment">(13, 39)</span>, <span class="hljs-comment">(7, 60)</span>, <span class="hljs-comment">(61, 62)</span>, <span class="hljs-comment">(190, 112)</span>, <span class="hljs-comment">(194, 117)</span>, <span class="hljs-comment">(34, 118)</span>, <span class="hljs-comment">(219, 193)</span>, <span class="hljs-comment">(125, 247)</span>, <span class="hljs-comment">(146, 72)</span>, <span class="hljs-comment">(107, 23)</span>, <span class="hljs-comment">(127, 168)</span>, <span class="hljs-comment">(53, 59)</span>, <span class="hljs-comment">(218, 18)</span>, <span class="hljs-comment">(94, 28)</span>, <span class="hljs-comment">(135, 120)</span>, <span class="hljs-comment">(119, 251)</span>, <span class="hljs-comment">(119, 142)</span>, <span class="hljs-comment">(116, 152)</span>, <span class="hljs-comment">(10, 31)</span>, <span class="hljs-comment">(169, 27)</span>, <span class="hljs-comment">(23, 124)</span>, <span class="hljs-comment">(222, 92)</span>, <span class="hljs-comment">(252, 97)</span>, <span class="hljs-comment">(60, 80)</span>, <span class="hljs-comment">(10, 80)</span>, <span class="hljs-comment">(107, 197)</span>, <span class="hljs-comment">(198, 151)</span>, <span class="hljs-comment">(49, 48)</span>, <span class="hljs-comment">(17, 211)</span>, <span class="hljs-comment">(248, 52)</span>, <span class="hljs-comment">(248, 11)</span>, <span class="hljs-comment">(140, 167)</span>, <span class="hljs-comment">(26, 223)</span>, <span class="hljs-comment">(171, 153)</span>, <span class="hljs-comment">(153, 197)</span>, <span class="hljs-comment">(50, 241)</span>, <span class="hljs-comment">(158, 47)</span>, <span class="hljs-comment">(13, 163)</span>, <span class="hljs-comment">(225, 135)</span>, <span class="hljs-comment">(209, 136)</span>, <span class="hljs-comment">(102, 241)</span>, <span class="hljs-comment">(214, 63)</span>, <span class="hljs-comment">(233, 130)</span>, <span class="hljs-comment">(24, 157)</span>, <span class="hljs-comment">(12, 195)</span>, <span class="hljs-comment">(13, 222)</span>, <span class="hljs-comment">(233, 5)</span>, <span class="hljs-comment">(17, 118)</span>, <span class="hljs-comment">(48, 206)</span>, <span class="hljs-comment">(22, 140)</span>, <span class="hljs-comment">(72, 71)</span>, <span class="hljs-comment">(169, 131)</span>, <span class="hljs-comment">(18, 250)</span>, <span class="hljs-comment">(181, 227)</span>, <span class="hljs-comment">(73, 193)</span>, <span class="hljs-comment">(162, 16)</span>, <span class="hljs-comment">(135, 235)</span>, <span class="hljs-comment">(139, 72)</span>, <span class="hljs-comment">(44, 130)</span>, <span class="hljs-comment">(18, 212)</span>, <span class="hljs-comment">(130, 97)</span>, <span class="hljs-comment">(211, 40)</span>, <span class="hljs-comment">(222, 171)</span>, <span class="hljs-comment">(75, 50)</span>, <span class="hljs-comment">(62, 70)</span>, <span class="hljs-comment">(122, 119)</span>, <span class="hljs-comment">(7, 22)</span>, <span class="hljs-comment">(81, 161)</span>, <span class="hljs-comment">(96, 206)</span>, <span class="hljs-comment">(223, 100)</span>, <span class="hljs-comment">(1, 128)</span>, <span class="hljs-comment">(202, 109)</span>, <span class="hljs-comment">(215, 232)</span>, <span class="hljs-comment">(190, 0)</span>, <span class="hljs-comment">(37, 181)</span>, <span class="hljs-comment">(127, 185)</span>, <span class="hljs-comment">(32, 161)</span>, <span class="hljs-comment">(70, 239)</span>, <span class="hljs-comment">(239, 125)</span>, <span class="hljs-comment">(35, 30)</span>, <span class="hljs-comment">(155, 115)</span>, <span class="hljs-comment">(163, 245)</span>, <span class="hljs-comment">(1, 154)</span>, <span class="hljs-comment">(3, 63)</span>, <span class="hljs-comment">(48, 89)</span>, <span class="hljs-comment">(10, 18)</span>, <span class="hljs-comment">(149, 151)</span>, <span class="hljs-comment">(196, 182)</span>, <span class="hljs-comment">(76, 222)</span>, <span class="hljs-comment">(162, 115)</span>, <span class="hljs-comment">(147, 1)</span>, <span class="hljs-comment">(98, 132)</span>, <span class="hljs-comment">(88, 129)</span>, <span class="hljs-comment">(134, 215)</span>, <span class="hljs-comment">(207, 90)</span>, <span class="hljs-comment">(222, 57)</span>, <span class="hljs-comment">(121, 145)</span>, <span class="hljs-comment">(255, 33)</span>, <span class="hljs-comment">(117, 234)</span>, <span class="hljs-comment">(153, 213)</span>, <span class="hljs-comment">(8, 173)</span>, <span class="hljs-comment">(50, 29)</span>]<br>暴力法 [[<span class="hljs-comment">(17, 211)</span>, <span class="hljs-comment">(18, 212)</span>], <span class="hljs-number">1.4142135623730951</span>]<br>分治法 [[<span class="hljs-comment">(17, 211)</span>, <span class="hljs-comment">(18, 212)</span>], <span class="hljs-number">1.4142135623730951</span>]<br>----------<br>[<span class="hljs-comment">(115, 114)</span>, <span class="hljs-comment">(216, 172)</span>, <span class="hljs-comment">(144, 254)</span>, <span class="hljs-comment">(138, 198)</span>, <span class="hljs-comment">(76, 60)</span>, <span class="hljs-comment">(142, 57)</span>, <span class="hljs-comment">(129, 140)</span>, <span class="hljs-comment">(151, 12)</span>, <span class="hljs-comment">(140, 166)</span>, <span class="hljs-comment">(91, 28)</span>, <span class="hljs-comment">(252, 189)</span>, <span class="hljs-comment">(159, 84)</span>, <span class="hljs-comment">(122, 29)</span>, <span class="hljs-comment">(243, 163)</span>, <span class="hljs-comment">(200, 47)</span>, <span class="hljs-comment">(76, 142)</span>, <span class="hljs-comment">(221, 233)</span>, <span class="hljs-comment">(219, 200)</span>, <span class="hljs-comment">(199, 81)</span>, <span class="hljs-comment">(142, 49)</span>, <span class="hljs-comment">(2, 6)</span>, <span class="hljs-comment">(71, 164)</span>, <span class="hljs-comment">(17, 227)</span>, <span class="hljs-comment">(224, 181)</span>, <span class="hljs-comment">(158, 119)</span>, <span class="hljs-comment">(183, 36)</span>, <span class="hljs-comment">(113, 103)</span>, <span class="hljs-comment">(220, 107)</span>, <span class="hljs-comment">(26, 47)</span>, <span class="hljs-comment">(221, 106)</span>, <span class="hljs-comment">(167, 247)</span>, <span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(245, 70)</span>, <span class="hljs-comment">(70, 252)</span>, <span class="hljs-comment">(44, 173)</span>, <span class="hljs-comment">(251, 191)</span>, <span class="hljs-comment">(169, 147)</span>, <span class="hljs-comment">(231, 5)</span>, <span class="hljs-comment">(95, 8)</span>, <span class="hljs-comment">(185, 224)</span>, <span class="hljs-comment">(209, 26)</span>, <span class="hljs-comment">(189, 124)</span>, <span class="hljs-comment">(154, 180)</span>, <span class="hljs-comment">(126, 83)</span>, <span class="hljs-comment">(86, 236)</span>, <span class="hljs-comment">(218, 13)</span>, <span class="hljs-comment">(153, 183)</span>, <span class="hljs-comment">(134, 129)</span>, <span class="hljs-comment">(122, 127)</span>, <span class="hljs-comment">(254, 106)</span>, <span class="hljs-comment">(156, 209)</span>, <span class="hljs-comment">(78, 57)</span>, <span class="hljs-comment">(167, 70)</span>, <span class="hljs-comment">(99, 222)</span>, <span class="hljs-comment">(201, 178)</span>, <span class="hljs-comment">(5, 182)</span>, <span class="hljs-comment">(98, 198)</span>, <span class="hljs-comment">(211, 65)</span>, <span class="hljs-comment">(143, 139)</span>, <span class="hljs-comment">(213, 209)</span>, <span class="hljs-comment">(63, 221)</span>, <span class="hljs-comment">(201, 164)</span>, <span class="hljs-comment">(210, 17)</span>, <span class="hljs-comment">(203, 43)</span>, <span class="hljs-comment">(124, 199)</span>, <span class="hljs-comment">(248, 202)</span>, <span class="hljs-comment">(34, 37)</span>, <span class="hljs-comment">(11, 66)</span>, <span class="hljs-comment">(28, 49)</span>, <span class="hljs-comment">(81, 25)</span>, <span class="hljs-comment">(256, 204)</span>, <span class="hljs-comment">(128, 29)</span>, <span class="hljs-comment">(171, 227)</span>, <span class="hljs-comment">(38, 88)</span>, <span class="hljs-comment">(223, 240)</span>, <span class="hljs-comment">(38, 13)</span>, <span class="hljs-comment">(17, 253)</span>, <span class="hljs-comment">(45, 110)</span>, <span class="hljs-comment">(72, 96)</span>, <span class="hljs-comment">(93, 38)</span>, <span class="hljs-comment">(195, 137)</span>, <span class="hljs-comment">(245, 108)</span>, <span class="hljs-comment">(59, 163)</span>, <span class="hljs-comment">(65, 150)</span>, <span class="hljs-comment">(103, 16)</span>, <span class="hljs-comment">(35, 181)</span>, <span class="hljs-comment">(14, 101)</span>, <span class="hljs-comment">(216, 13)</span>, <span class="hljs-comment">(224, 144)</span>, <span class="hljs-comment">(177, 140)</span>, <span class="hljs-comment">(242, 158)</span>, <span class="hljs-comment">(16, 23)</span>, <span class="hljs-comment">(46, 192)</span>, <span class="hljs-comment">(149, 120)</span>, <span class="hljs-comment">(203, 220)</span>, <span class="hljs-comment">(191, 183)</span>, <span class="hljs-comment">(131, 28)</span>, <span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(114, 81)</span>, <span class="hljs-comment">(180, 94)</span>, <span class="hljs-comment">(113, 234)</span>, <span class="hljs-comment">(4, 47)</span>, <span class="hljs-comment">(107, 220)</span>, <span class="hljs-comment">(67, 100)</span>, <span class="hljs-comment">(226, 114)</span>, <span class="hljs-comment">(0, 39)</span>, <span class="hljs-comment">(44, 88)</span>, <span class="hljs-comment">(157, 144)</span>, <span class="hljs-comment">(12, 173)</span>, <span class="hljs-comment">(48, 40)</span>, <span class="hljs-comment">(254, 199)</span>, <span class="hljs-comment">(110, 180)</span>, <span class="hljs-comment">(200, 27)</span>, <span class="hljs-comment">(70, 202)</span>, <span class="hljs-comment">(43, 24)</span>, <span class="hljs-comment">(248, 166)</span>, <span class="hljs-comment">(25, 26)</span>, <span class="hljs-comment">(34, 72)</span>, <span class="hljs-comment">(249, 1)</span>, <span class="hljs-comment">(150, 22)</span>, <span class="hljs-comment">(210, 240)</span>, <span class="hljs-comment">(40, 206)</span>, <span class="hljs-comment">(49, 232)</span>, <span class="hljs-comment">(47, 171)</span>, <span class="hljs-comment">(191, 140)</span>, <span class="hljs-comment">(237, 118)</span>, <span class="hljs-comment">(20, 227)</span>, <span class="hljs-comment">(198, 140)</span>]<br>暴力法 [[<span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(251, 173)</span>], <span class="hljs-number">0.0</span>]<br>分治法 [[<span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(251, 173)</span>], <span class="hljs-number">0.0</span>]<br>----------<br>[<span class="hljs-comment">(15, 124)</span>, <span class="hljs-comment">(69, 248)</span>, <span class="hljs-comment">(93, 25)</span>, <span class="hljs-comment">(188, 178)</span>, <span class="hljs-comment">(142, 34)</span>, <span class="hljs-comment">(217, 240)</span>, <span class="hljs-comment">(90, 133)</span>, <span class="hljs-comment">(35, 120)</span>, <span class="hljs-comment">(189, 57)</span>, <span class="hljs-comment">(186, 11)</span>, <span class="hljs-comment">(138, 66)</span>, <span class="hljs-comment">(170, 252)</span>, <span class="hljs-comment">(43, 115)</span>, <span class="hljs-comment">(186, 106)</span>, <span class="hljs-comment">(44, 123)</span>, <span class="hljs-comment">(150, 212)</span>, <span class="hljs-comment">(78, 1)</span>, <span class="hljs-comment">(215, 126)</span>, <span class="hljs-comment">(112, 40)</span>, <span class="hljs-comment">(235, 210)</span>, <span class="hljs-comment">(74, 151)</span>, <span class="hljs-comment">(169, 179)</span>, <span class="hljs-comment">(192, 71)</span>, <span class="hljs-comment">(147, 69)</span>, <span class="hljs-comment">(220, 137)</span>, <span class="hljs-comment">(43, 62)</span>, <span class="hljs-comment">(42, 22)</span>, <span class="hljs-comment">(222, 0)</span>, <span class="hljs-comment">(183, 132)</span>, <span class="hljs-comment">(82, 83)</span>, <span class="hljs-comment">(87, 7)</span>, <span class="hljs-comment">(141, 140)</span>, <span class="hljs-comment">(212, 104)</span>, <span class="hljs-comment">(28, 55)</span>, <span class="hljs-comment">(108, 11)</span>, <span class="hljs-comment">(31, 138)</span>, <span class="hljs-comment">(225, 167)</span>, <span class="hljs-comment">(169, 249)</span>, <span class="hljs-comment">(134, 19)</span>, <span class="hljs-comment">(235, 238)</span>, <span class="hljs-comment">(228, 51)</span>, <span class="hljs-comment">(101, 53)</span>, <span class="hljs-comment">(4, 226)</span>, <span class="hljs-comment">(195, 87)</span>, <span class="hljs-comment">(57, 142)</span>, <span class="hljs-comment">(11, 34)</span>, <span class="hljs-comment">(50, 250)</span>, <span class="hljs-comment">(172, 58)</span>, <span class="hljs-comment">(101, 118)</span>, <span class="hljs-comment">(198, 165)</span>, <span class="hljs-comment">(214, 95)</span>, <span class="hljs-comment">(60, 99)</span>, <span class="hljs-comment">(90, 55)</span>, <span class="hljs-comment">(115, 63)</span>, <span class="hljs-comment">(75, 155)</span>, <span class="hljs-comment">(49, 24)</span>, <span class="hljs-comment">(38, 248)</span>, <span class="hljs-comment">(223, 49)</span>, <span class="hljs-comment">(70, 92)</span>, <span class="hljs-comment">(118, 65)</span>, <span class="hljs-comment">(103, 67)</span>, <span class="hljs-comment">(107, 22)</span>, <span class="hljs-comment">(114, 129)</span>, <span class="hljs-comment">(254, 29)</span>, <span class="hljs-comment">(17, 174)</span>, <span class="hljs-comment">(72, 123)</span>, <span class="hljs-comment">(59, 16)</span>, <span class="hljs-comment">(76, 41)</span>, <span class="hljs-comment">(157, 76)</span>, <span class="hljs-comment">(25, 74)</span>, <span class="hljs-comment">(40, 188)</span>, <span class="hljs-comment">(244, 70)</span>, <span class="hljs-comment">(160, 184)</span>, <span class="hljs-comment">(234, 15)</span>, <span class="hljs-comment">(80, 202)</span>, <span class="hljs-comment">(15, 117)</span>, <span class="hljs-comment">(0, 47)</span>, <span class="hljs-comment">(158, 140)</span>, <span class="hljs-comment">(77, 187)</span>, <span class="hljs-comment">(61, 47)</span>, <span class="hljs-comment">(149, 35)</span>, <span class="hljs-comment">(154, 184)</span>, <span class="hljs-comment">(64, 142)</span>, <span class="hljs-comment">(213, 116)</span>, <span class="hljs-comment">(74, 213)</span>, <span class="hljs-comment">(238, 34)</span>, <span class="hljs-comment">(87, 117)</span>, <span class="hljs-comment">(110, 87)</span>, <span class="hljs-comment">(218, 54)</span>, <span class="hljs-comment">(18, 77)</span>, <span class="hljs-comment">(196, 145)</span>, <span class="hljs-comment">(187, 249)</span>, <span class="hljs-comment">(246, 235)</span>, <span class="hljs-comment">(89, 218)</span>, <span class="hljs-comment">(98, 229)</span>, <span class="hljs-comment">(149, 198)</span>, <span class="hljs-comment">(26, 105)</span>, <span class="hljs-comment">(106, 102)</span>, <span class="hljs-comment">(33, 142)</span>, <span class="hljs-comment">(240, 204)</span>, <span class="hljs-comment">(177, 154)</span>, <span class="hljs-comment">(201, 163)</span>, <span class="hljs-comment">(188, 126)</span>, <span class="hljs-comment">(173, 67)</span>, <span class="hljs-comment">(255, 34)</span>, <span class="hljs-comment">(83, 58)</span>, <span class="hljs-comment">(53, 236)</span>, <span class="hljs-comment">(253, 133)</span>, <span class="hljs-comment">(48, 8)</span>, <span class="hljs-comment">(87, 157)</span>, <span class="hljs-comment">(151, 98)</span>, <span class="hljs-comment">(80, 120)</span>, <span class="hljs-comment">(91, 175)</span>, <span class="hljs-comment">(33, 8)</span>, <span class="hljs-comment">(100, 233)</span>, <span class="hljs-comment">(193, 148)</span>, <span class="hljs-comment">(16, 159)</span>, <span class="hljs-comment">(114, 33)</span>, <span class="hljs-comment">(27, 240)</span>, <span class="hljs-comment">(250, 46)</span>, <span class="hljs-comment">(22, 251)</span>, <span class="hljs-comment">(235, 81)</span>, <span class="hljs-comment">(52, 4)</span>, <span class="hljs-comment">(15, 60)</span>, <span class="hljs-comment">(99, 69)</span>, <span class="hljs-comment">(30, 216)</span>, <span class="hljs-comment">(101, 131)</span>, <span class="hljs-comment">(246, 144)</span>]<br>暴力法 [[<span class="hljs-comment">(170, 252)</span>, <span class="hljs-comment">(169, 249)</span>], <span class="hljs-number">3.1622776601683795</span>]<br>分治法 [[<span class="hljs-comment">(170, 252)</span>, <span class="hljs-comment">(169, 249)</span>], <span class="hljs-number">3.1622776601683795</span>]<br>----------<br>[<span class="hljs-comment">(75, 244)</span>, <span class="hljs-comment">(134, 234)</span>, <span class="hljs-comment">(160, 37)</span>, <span class="hljs-comment">(110, 192)</span>, <span class="hljs-comment">(150, 247)</span>, <span class="hljs-comment">(39, 1)</span>, <span class="hljs-comment">(100, 162)</span>, <span class="hljs-comment">(87, 102)</span>, <span class="hljs-comment">(180, 24)</span>, <span class="hljs-comment">(235, 93)</span>, <span class="hljs-comment">(57, 198)</span>, <span class="hljs-comment">(56, 0)</span>, <span class="hljs-comment">(229, 85)</span>, <span class="hljs-comment">(142, 23)</span>, <span class="hljs-comment">(14, 115)</span>, <span class="hljs-comment">(201, 163)</span>, <span class="hljs-comment">(231, 237)</span>, <span class="hljs-comment">(168, 102)</span>, <span class="hljs-comment">(21, 225)</span>, <span class="hljs-comment">(162, 195)</span>, <span class="hljs-comment">(255, 168)</span>, <span class="hljs-comment">(193, 57)</span>, <span class="hljs-comment">(180, 94)</span>, <span class="hljs-comment">(32, 123)</span>, <span class="hljs-comment">(112, 116)</span>, <span class="hljs-comment">(248, 130)</span>, <span class="hljs-comment">(245, 75)</span>, <span class="hljs-comment">(78, 20)</span>, <span class="hljs-comment">(151, 240)</span>, <span class="hljs-comment">(82, 219)</span>, <span class="hljs-comment">(52, 218)</span>, <span class="hljs-comment">(77, 127)</span>, <span class="hljs-comment">(201, 11)</span>, <span class="hljs-comment">(25, 81)</span>, <span class="hljs-comment">(236, 251)</span>, <span class="hljs-comment">(25, 11)</span>, <span class="hljs-comment">(129, 68)</span>, <span class="hljs-comment">(64, 203)</span>, <span class="hljs-comment">(205, 113)</span>, <span class="hljs-comment">(254, 71)</span>, <span class="hljs-comment">(171, 182)</span>, <span class="hljs-comment">(208, 4)</span>, <span class="hljs-comment">(225, 120)</span>, <span class="hljs-comment">(95, 4)</span>, <span class="hljs-comment">(218, 224)</span>, <span class="hljs-comment">(172, 203)</span>, <span class="hljs-comment">(84, 33)</span>, <span class="hljs-comment">(62, 51)</span>, <span class="hljs-comment">(232, 183)</span>, <span class="hljs-comment">(42, 189)</span>, <span class="hljs-comment">(54, 184)</span>, <span class="hljs-comment">(183, 236)</span>, <span class="hljs-comment">(213, 96)</span>, <span class="hljs-comment">(241, 224)</span>, <span class="hljs-comment">(60, 107)</span>, <span class="hljs-comment">(233, 173)</span>, <span class="hljs-comment">(164, 30)</span>, <span class="hljs-comment">(106, 15)</span>, <span class="hljs-comment">(140, 110)</span>, <span class="hljs-comment">(171, 79)</span>, <span class="hljs-comment">(19, 171)</span>, <span class="hljs-comment">(60, 12)</span>, <span class="hljs-comment">(108, 239)</span>, <span class="hljs-comment">(181, 29)</span>, <span class="hljs-comment">(28, 236)</span>, <span class="hljs-comment">(70, 150)</span>, <span class="hljs-comment">(242, 95)</span>, <span class="hljs-comment">(209, 242)</span>, <span class="hljs-comment">(27, 28)</span>, <span class="hljs-comment">(88, 250)</span>, <span class="hljs-comment">(129, 162)</span>, <span class="hljs-comment">(191, 80)</span>, <span class="hljs-comment">(140, 77)</span>, <span class="hljs-comment">(50, 116)</span>, <span class="hljs-comment">(28, 130)</span>, <span class="hljs-comment">(86, 60)</span>, <span class="hljs-comment">(12, 84)</span>, <span class="hljs-comment">(51, 197)</span>, <span class="hljs-comment">(68, 200)</span>, <span class="hljs-comment">(239, 211)</span>, <span class="hljs-comment">(143, 22)</span>, <span class="hljs-comment">(97, 224)</span>, <span class="hljs-comment">(221, 46)</span>, <span class="hljs-comment">(89, 117)</span>, <span class="hljs-comment">(201, 117)</span>, <span class="hljs-comment">(28, 85)</span>, <span class="hljs-comment">(205, 135)</span>, <span class="hljs-comment">(156, 247)</span>, <span class="hljs-comment">(11, 46)</span>, <span class="hljs-comment">(185, 86)</span>, <span class="hljs-comment">(135, 200)</span>, <span class="hljs-comment">(231, 249)</span>, <span class="hljs-comment">(14, 168)</span>, <span class="hljs-comment">(1, 236)</span>, <span class="hljs-comment">(16, 242)</span>, <span class="hljs-comment">(168, 34)</span>, <span class="hljs-comment">(105, 179)</span>, <span class="hljs-comment">(173, 137)</span>, <span class="hljs-comment">(222, 163)</span>, <span class="hljs-comment">(252, 188)</span>, <span class="hljs-comment">(228, 166)</span>, <span class="hljs-comment">(170, 40)</span>, <span class="hljs-comment">(240, 197)</span>, <span class="hljs-comment">(237, 20)</span>, <span class="hljs-comment">(116, 212)</span>, <span class="hljs-comment">(160, 137)</span>, <span class="hljs-comment">(172, 40)</span>, <span class="hljs-comment">(220, 202)</span>, <span class="hljs-comment">(125, 113)</span>, <span class="hljs-comment">(236, 224)</span>, <span class="hljs-comment">(85, 178)</span>, <span class="hljs-comment">(220, 16)</span>, <span class="hljs-comment">(103, 147)</span>, <span class="hljs-comment">(195, 51)</span>, <span class="hljs-comment">(235, 125)</span>, <span class="hljs-comment">(241, 237)</span>, <span class="hljs-comment">(5, 49)</span>, <span class="hljs-comment">(153, 42)</span>, <span class="hljs-comment">(56, 217)</span>, <span class="hljs-comment">(152, 74)</span>, <span class="hljs-comment">(179, 63)</span>, <span class="hljs-comment">(91, 175)</span>, <span class="hljs-comment">(107, 205)</span>, <span class="hljs-comment">(244, 139)</span>, <span class="hljs-comment">(78, 235)</span>, <span class="hljs-comment">(208, 5)</span>, <span class="hljs-comment">(134, 243)</span>, <span class="hljs-comment">(141, 124)</span>]<br>暴力法 [[<span class="hljs-comment">(208, 4)</span>, <span class="hljs-comment">(208, 5)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(208, 4)</span>, <span class="hljs-comment">(208, 5)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(151, 44)</span>, <span class="hljs-comment">(2, 146)</span>, <span class="hljs-comment">(199, 205)</span>, <span class="hljs-comment">(122, 167)</span>, <span class="hljs-comment">(133, 110)</span>, <span class="hljs-comment">(160, 225)</span>, <span class="hljs-comment">(100, 199)</span>, <span class="hljs-comment">(242, 251)</span>, <span class="hljs-comment">(58, 62)</span>, <span class="hljs-comment">(211, 61)</span>, <span class="hljs-comment">(100, 94)</span>, <span class="hljs-comment">(140, 240)</span>, <span class="hljs-comment">(197, 196)</span>, <span class="hljs-comment">(237, 15)</span>, <span class="hljs-comment">(167, 222)</span>, <span class="hljs-comment">(194, 6)</span>, <span class="hljs-comment">(237, 14)</span>, <span class="hljs-comment">(3, 138)</span>, <span class="hljs-comment">(223, 7)</span>, <span class="hljs-comment">(245, 222)</span>, <span class="hljs-comment">(201, 112)</span>, <span class="hljs-comment">(252, 103)</span>, <span class="hljs-comment">(238, 81)</span>, <span class="hljs-comment">(63, 147)</span>, <span class="hljs-comment">(148, 123)</span>, <span class="hljs-comment">(172, 121)</span>, <span class="hljs-comment">(156, 51)</span>, <span class="hljs-comment">(249, 251)</span>, <span class="hljs-comment">(80, 23)</span>, <span class="hljs-comment">(227, 115)</span>, <span class="hljs-comment">(228, 209)</span>, <span class="hljs-comment">(198, 118)</span>, <span class="hljs-comment">(187, 25)</span>, <span class="hljs-comment">(38, 167)</span>, <span class="hljs-comment">(205, 21)</span>, <span class="hljs-comment">(238, 145)</span>, <span class="hljs-comment">(50, 35)</span>, <span class="hljs-comment">(53, 123)</span>, <span class="hljs-comment">(230, 146)</span>, <span class="hljs-comment">(199, 145)</span>, <span class="hljs-comment">(195, 80)</span>, <span class="hljs-comment">(12, 173)</span>, <span class="hljs-comment">(8, 77)</span>, <span class="hljs-comment">(40, 89)</span>, <span class="hljs-comment">(2, 116)</span>, <span class="hljs-comment">(206, 174)</span>, <span class="hljs-comment">(177, 48)</span>, <span class="hljs-comment">(134, 36)</span>, <span class="hljs-comment">(254, 88)</span>, <span class="hljs-comment">(176, 183)</span>, <span class="hljs-comment">(97, 171)</span>, <span class="hljs-comment">(85, 172)</span>, <span class="hljs-comment">(229, 139)</span>, <span class="hljs-comment">(256, 214)</span>, <span class="hljs-comment">(132, 91)</span>, <span class="hljs-comment">(15, 66)</span>, <span class="hljs-comment">(81, 246)</span>, <span class="hljs-comment">(203, 224)</span>, <span class="hljs-comment">(133, 72)</span>, <span class="hljs-comment">(9, 83)</span>, <span class="hljs-comment">(178, 229)</span>, <span class="hljs-comment">(238, 248)</span>, <span class="hljs-comment">(29, 217)</span>, <span class="hljs-comment">(104, 155)</span>, <span class="hljs-comment">(41, 213)</span>, <span class="hljs-comment">(73, 64)</span>, <span class="hljs-comment">(42, 43)</span>, <span class="hljs-comment">(220, 255)</span>, <span class="hljs-comment">(103, 138)</span>, <span class="hljs-comment">(83, 105)</span>, <span class="hljs-comment">(82, 58)</span>, <span class="hljs-comment">(221, 41)</span>, <span class="hljs-comment">(130, 228)</span>, <span class="hljs-comment">(77, 50)</span>, <span class="hljs-comment">(169, 100)</span>, <span class="hljs-comment">(18, 97)</span>, <span class="hljs-comment">(68, 162)</span>, <span class="hljs-comment">(239, 194)</span>, <span class="hljs-comment">(112, 16)</span>, <span class="hljs-comment">(216, 236)</span>, <span class="hljs-comment">(210, 0)</span>, <span class="hljs-comment">(107, 159)</span>, <span class="hljs-comment">(148, 179)</span>, <span class="hljs-comment">(59, 125)</span>, <span class="hljs-comment">(42, 246)</span>, <span class="hljs-comment">(233, 202)</span>, <span class="hljs-comment">(78, 50)</span>, <span class="hljs-comment">(18, 31)</span>, <span class="hljs-comment">(21, 207)</span>, <span class="hljs-comment">(166, 29)</span>, <span class="hljs-comment">(253, 103)</span>, <span class="hljs-comment">(10, 249)</span>, <span class="hljs-comment">(41, 173)</span>, <span class="hljs-comment">(4, 67)</span>, <span class="hljs-comment">(173, 27)</span>, <span class="hljs-comment">(250, 33)</span>, <span class="hljs-comment">(212, 37)</span>, <span class="hljs-comment">(242, 123)</span>, <span class="hljs-comment">(194, 124)</span>, <span class="hljs-comment">(122, 85)</span>, <span class="hljs-comment">(117, 77)</span>, <span class="hljs-comment">(229, 125)</span>, <span class="hljs-comment">(217, 228)</span>, <span class="hljs-comment">(228, 17)</span>, <span class="hljs-comment">(110, 195)</span>, <span class="hljs-comment">(171, 150)</span>, <span class="hljs-comment">(166, 188)</span>, <span class="hljs-comment">(75, 21)</span>, <span class="hljs-comment">(47, 43)</span>, <span class="hljs-comment">(254, 184)</span>, <span class="hljs-comment">(248, 107)</span>, <span class="hljs-comment">(36, 83)</span>, <span class="hljs-comment">(35, 183)</span>, <span class="hljs-comment">(77, 114)</span>, <span class="hljs-comment">(183, 26)</span>, <span class="hljs-comment">(47, 92)</span>, <span class="hljs-comment">(242, 131)</span>, <span class="hljs-comment">(112, 119)</span>, <span class="hljs-comment">(69, 68)</span>, <span class="hljs-comment">(29, 71)</span>, <span class="hljs-comment">(134, 14)</span>, <span class="hljs-comment">(34, 166)</span>, <span class="hljs-comment">(241, 6)</span>, <span class="hljs-comment">(77, 93)</span>, <span class="hljs-comment">(212, 234)</span>, <span class="hljs-comment">(198, 95)</span>, <span class="hljs-comment">(81, 101)</span>, <span class="hljs-comment">(37, 104)</span>]<br>暴力法 [[<span class="hljs-comment">(237, 15)</span>, <span class="hljs-comment">(237, 14)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(252, 103)</span>, <span class="hljs-comment">(253, 103)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(53, 10)</span>, <span class="hljs-comment">(250, 83)</span>, <span class="hljs-comment">(213, 218)</span>, <span class="hljs-comment">(55, 207)</span>, <span class="hljs-comment">(97, 129)</span>, <span class="hljs-comment">(164, 249)</span>, <span class="hljs-comment">(164, 104)</span>, <span class="hljs-comment">(206, 136)</span>, <span class="hljs-comment">(197, 40)</span>, <span class="hljs-comment">(11, 156)</span>, <span class="hljs-comment">(105, 163)</span>, <span class="hljs-comment">(34, 229)</span>, <span class="hljs-comment">(107, 240)</span>, <span class="hljs-comment">(118, 168)</span>, <span class="hljs-comment">(163, 171)</span>, <span class="hljs-comment">(36, 209)</span>, <span class="hljs-comment">(205, 154)</span>, <span class="hljs-comment">(235, 172)</span>, <span class="hljs-comment">(73, 219)</span>, <span class="hljs-comment">(18, 142)</span>, <span class="hljs-comment">(66, 154)</span>, <span class="hljs-comment">(73, 241)</span>, <span class="hljs-comment">(109, 56)</span>, <span class="hljs-comment">(236, 8)</span>, <span class="hljs-comment">(27, 68)</span>, <span class="hljs-comment">(149, 65)</span>, <span class="hljs-comment">(249, 110)</span>, <span class="hljs-comment">(69, 243)</span>, <span class="hljs-comment">(158, 164)</span>, <span class="hljs-comment">(192, 217)</span>, <span class="hljs-comment">(147, 196)</span>, <span class="hljs-comment">(167, 84)</span>, <span class="hljs-comment">(165, 2)</span>, <span class="hljs-comment">(141, 243)</span>, <span class="hljs-comment">(164, 110)</span>, <span class="hljs-comment">(102, 195)</span>, <span class="hljs-comment">(87, 64)</span>, <span class="hljs-comment">(0, 102)</span>, <span class="hljs-comment">(224, 135)</span>, <span class="hljs-comment">(217, 32)</span>, <span class="hljs-comment">(234, 227)</span>, <span class="hljs-comment">(29, 149)</span>, <span class="hljs-comment">(48, 67)</span>, <span class="hljs-comment">(140, 236)</span>, <span class="hljs-comment">(174, 174)</span>, <span class="hljs-comment">(256, 52)</span>, <span class="hljs-comment">(63, 112)</span>, <span class="hljs-comment">(15, 159)</span>, <span class="hljs-comment">(178, 33)</span>, <span class="hljs-comment">(198, 119)</span>, <span class="hljs-comment">(130, 70)</span>, <span class="hljs-comment">(24, 91)</span>, <span class="hljs-comment">(26, 74)</span>, <span class="hljs-comment">(21, 46)</span>, <span class="hljs-comment">(116, 202)</span>, <span class="hljs-comment">(199, 14)</span>, <span class="hljs-comment">(10, 180)</span>, <span class="hljs-comment">(59, 73)</span>, <span class="hljs-comment">(236, 63)</span>, <span class="hljs-comment">(195, 82)</span>, <span class="hljs-comment">(180, 216)</span>, <span class="hljs-comment">(46, 229)</span>, <span class="hljs-comment">(4, 201)</span>, <span class="hljs-comment">(44, 151)</span>, <span class="hljs-comment">(135, 96)</span>, <span class="hljs-comment">(118, 17)</span>, <span class="hljs-comment">(201, 53)</span>, <span class="hljs-comment">(161, 190)</span>, <span class="hljs-comment">(156, 173)</span>, <span class="hljs-comment">(153, 194)</span>, <span class="hljs-comment">(30, 227)</span>, <span class="hljs-comment">(203, 14)</span>, <span class="hljs-comment">(100, 157)</span>, <span class="hljs-comment">(46, 93)</span>, <span class="hljs-comment">(193, 247)</span>, <span class="hljs-comment">(91, 139)</span>, <span class="hljs-comment">(9, 203)</span>, <span class="hljs-comment">(32, 92)</span>, <span class="hljs-comment">(200, 183)</span>, <span class="hljs-comment">(98, 130)</span>, <span class="hljs-comment">(71, 102)</span>, <span class="hljs-comment">(66, 56)</span>, <span class="hljs-comment">(173, 202)</span>, <span class="hljs-comment">(192, 158)</span>, <span class="hljs-comment">(198, 105)</span>, <span class="hljs-comment">(191, 96)</span>, <span class="hljs-comment">(161, 65)</span>, <span class="hljs-comment">(41, 52)</span>, <span class="hljs-comment">(5, 116)</span>, <span class="hljs-comment">(129, 222)</span>, <span class="hljs-comment">(167, 163)</span>, <span class="hljs-comment">(256, 65)</span>, <span class="hljs-comment">(40, 234)</span>, <span class="hljs-comment">(180, 130)</span>, <span class="hljs-comment">(162, 250)</span>, <span class="hljs-comment">(250, 148)</span>, <span class="hljs-comment">(219, 245)</span>, <span class="hljs-comment">(146, 133)</span>, <span class="hljs-comment">(111, 65)</span>, <span class="hljs-comment">(256, 149)</span>, <span class="hljs-comment">(91, 100)</span>, <span class="hljs-comment">(206, 170)</span>, <span class="hljs-comment">(100, 226)</span>, <span class="hljs-comment">(208, 96)</span>, <span class="hljs-comment">(236, 222)</span>, <span class="hljs-comment">(211, 214)</span>, <span class="hljs-comment">(239, 23)</span>, <span class="hljs-comment">(158, 194)</span>, <span class="hljs-comment">(236, 70)</span>, <span class="hljs-comment">(116, 174)</span>, <span class="hljs-comment">(210, 59)</span>, <span class="hljs-comment">(208, 197)</span>, <span class="hljs-comment">(15, 182)</span>, <span class="hljs-comment">(2, 119)</span>, <span class="hljs-comment">(227, 125)</span>, <span class="hljs-comment">(36, 202)</span>, <span class="hljs-comment">(8, 252)</span>, <span class="hljs-comment">(82, 226)</span>, <span class="hljs-comment">(93, 107)</span>, <span class="hljs-comment">(194, 247)</span>, <span class="hljs-comment">(64, 200)</span>, <span class="hljs-comment">(141, 197)</span>, <span class="hljs-comment">(213, 47)</span>, <span class="hljs-comment">(82, 166)</span>, <span class="hljs-comment">(125, 146)</span>, <span class="hljs-comment">(35, 120)</span>, <span class="hljs-comment">(57, 174)</span>, <span class="hljs-comment">(8, 197)</span>]<br>暴力法 [[<span class="hljs-comment">(193, 247)</span>, <span class="hljs-comment">(194, 247)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(193, 247)</span>, <span class="hljs-comment">(194, 247)</span>], <span class="hljs-number">1.0</span>]<br>----------<br></code></pre></div></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>关于这个算法，《算法导论》原书中并没有伪码来参考。但是根据书中的详细的描述，写出算法其实是可以的。只是，这其中有一些坑，或者说需要注意的点，需要详细记述一下。如下。</p><h4 id="注意点一"><a href="#注意点一" class="headerlink" title="注意点一"></a>注意点一</h4><blockquote><p>寻找一条垂直线 <script type="math/tex">l</script>，它把点集 <script type="math/tex">P</script> 对分为满足下列条件的两个集合 <script type="math/tex">P_L</script> 和 <script type="math/tex">P_R</script>：使得 <script type="math/tex">|P_L| = \left \lceil |P| / 2 \right \rceil, \; |P_R| = \left \lfloor |P| / 2 \right \rfloor</script>，<script type="math/tex">P_L</script> 中的点都在直线 <script type="math/tex">l</script> 上或 <script type="math/tex">l</script> 的左侧，<script type="math/tex">P_R</script> 中的所有点都在直线 <script type="math/tex">l</script> 上或 <script type="math/tex">l</script> 的右侧。</p></blockquote><p>这里划分时，要注意向上和向下取整的问题。另外，在划分时，我使用了这样的代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PL = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XL]<br>PR = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XR]<br></code></pre></div></td></tr></table></figure><p>其实这两行代码执行后产生的 <script type="math/tex">P_L</script> 和 <script type="math/tex">P_R</script> 是有问题的。问题就出在如果 <script type="math/tex">X_L</script> 和 <script type="math/tex">X_R</script> 中有重复的元素，那么，<script type="math/tex">|P_L|</script> 或者 <script type="math/tex">P_R</script> 的值可能会大于 <script type="math/tex">X_L</script> 或者 <script type="math/tex">X_R</script> 的值。显然，这样是有问题的。所以我们需要对 <script type="math/tex">P_L</script> 和 <script type="math/tex">P_R</script> 进行一些处理</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 对中间的边界的可能重复的元素进行处理</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PL) != <span class="hljs-built_in">len</span>(XL):<br>    PL.remove(XL[-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PR) != <span class="hljs-built_in">len</span>(XR):<br>    PR.remove(XR[<span class="hljs-number">0</span>])<br></code></pre></div></td></tr></table></figure><p>这里的 <code>XL[-1]</code> 和 <code>XR[0]</code> 的值其实是相等的，而且，如果 <code>PL</code> 或者 <code>PR</code> 中出现了多余的元素，那么，多余的元素也一定是这个中间边界的值。</p><h4 id="注意点二"><a href="#注意点二" class="headerlink" title="注意点二"></a>注意点二</h4><p>对于 <script type="math/tex">Y^{'}</script> 的处理。具体就是，对于 <script type="math/tex">Y^{'}</script> 中的每一个点 <script type="math/tex">p</script>，我们只需要考虑紧随 <script type="math/tex">p</script> 后的 7 个点。</p><p>我之前还因为中间的分割线 <script type="math/tex">l</script> 上的重复点问题而异或，重复点的话，两个不是应该算成一个吗？所以为什么不是检查 5 个点呢？后来在解决注意点一的时候想明白了，重复的点是要慎重考虑的，是不能够把两个点算作一个的。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>本算法是严格参照《算法导论》原书的描述来实现的。具体过程和算法的正确性的证明请阅读《算法导论》相关章节。</p><p>另外，关于分治法的函数的参数问题，我认为，如果要像我一样，在代码中有去重的这一步操作的话，那么，参数 <code>P</code> 是可以省去的。我认为这个参数 <code>P</code> 是多余的。但是为了和书上的描述保持一致，这里就没有去掉这个参数。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《算法导论》</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求矩阵乘法的 Strassen 算法之 Python 实现（《算法导论》）</title>
    <link href="/2021/04/27/%E6%B1%82%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E7%9A%84-Strassen-%E7%AE%97%E6%B3%95/"/>
    <url>/2021/04/27/%E6%B1%82%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E7%9A%84-Strassen-%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : strassen.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/27</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">矩阵乘法的 Strassen 算法</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">matrix_add</span>(<span class="hljs-params">matrix_a:<span class="hljs-built_in">list</span>, matrix_b:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    矩阵加法</span><br><span class="hljs-string">    :param matrix_a: 加数</span><br><span class="hljs-string">    :param matrix_b: 加数</span><br><span class="hljs-string">    :return: 相加后的结果矩阵 matrix_c</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_a) <span class="hljs-comment"># 矩阵行数</span><br>    columns = <span class="hljs-built_in">len</span>(matrix_a[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 矩阵列数</span><br>    matrix_c = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows)] <span class="hljs-comment"># 结果矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(columns):<br>            tmp = matrix_a[i][j] + matrix_b[i][j]<br>            matrix_c[i].append(tmp)<br>    <span class="hljs-keyword">return</span> matrix_c<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">matrix_minus</span>(<span class="hljs-params">matrix_a:<span class="hljs-built_in">list</span>, matrix_b:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    矩阵减法</span><br><span class="hljs-string">    :param matrix_a: 被减数</span><br><span class="hljs-string">    :param matrix_b: 减数</span><br><span class="hljs-string">    :return: 相减后的结果矩阵 matrix_c</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_a) <span class="hljs-comment"># 矩阵行数</span><br>    columns = <span class="hljs-built_in">len</span>(matrix_a[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 矩阵列数</span><br>    matrix_c = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows)] <span class="hljs-comment"># 结果矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(columns):<br>            tmp = matrix_a[i][j] - matrix_b[i][j]<br>            matrix_c[i].append(tmp)<br>    <span class="hljs-keyword">return</span> matrix_c<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">matrix_divide</span>(<span class="hljs-params">matrix:<span class="hljs-built_in">list</span>, row:<span class="hljs-built_in">int</span>, column:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    分离一个子矩阵（四分之一）出来，注意，切割出来的子矩阵的边长是父矩阵的边长的一半</span><br><span class="hljs-string">    :param matrix: 父矩阵</span><br><span class="hljs-string">    :param row: 行的开始索引，row 的可能取值为 &#123;1, 2&#125;</span><br><span class="hljs-string">    :param column: 列的开始索引，column 的可能取值为 &#123;1, 2&#125;</span><br><span class="hljs-string">    :return: 切割好的矩阵</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix) <span class="hljs-comment"># 矩阵的边长</span><br>    matrix_sub = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows // <span class="hljs-number">2</span>)]<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((row - <span class="hljs-number">1</span>) * rows // <span class="hljs-number">2</span>, row * rows // <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((column - <span class="hljs-number">1</span>) * rows // <span class="hljs-number">2</span>, column * rows // <span class="hljs-number">2</span>):<br>            tmp = matrix[i][j]<br>            matrix_sub[k].append(tmp)<br>        k += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> matrix_sub<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">matrix_merge</span>(<span class="hljs-params">matrix_11:<span class="hljs-built_in">list</span>, matrix_12:<span class="hljs-built_in">list</span>, matrix_21:<span class="hljs-built_in">list</span>, matrix_22:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    合并四个子矩阵</span><br><span class="hljs-string">    :param matrix_11: 左上角的子矩阵</span><br><span class="hljs-string">    :param matrix_12: 右上角的子矩阵</span><br><span class="hljs-string">    :param matrix_21: 左下角的子矩阵</span><br><span class="hljs-string">    :param matrix_22: 右下角的子矩阵</span><br><span class="hljs-string">    :return: 合并之后的矩阵</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_11) <span class="hljs-comment"># 矩阵的边长</span><br>    matrix_all = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows * <span class="hljs-number">2</span>)] <span class="hljs-comment"># 合并之后的矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        matrix_all[i] = matrix_11[i] + matrix_12[i] <span class="hljs-comment"># 直接利用 Python 列表的加法</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        matrix_all[rows + j] = matrix_21[j] + matrix_22[j]<br>    <span class="hljs-keyword">return</span> matrix_all<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strassen</span>(<span class="hljs-params">matrix_a:<span class="hljs-built_in">list</span>, matrix_b:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Strassen 算法计算矩阵的乘法</span><br><span class="hljs-string">    :param matrix_a: 待乘矩阵</span><br><span class="hljs-string">    :param matrix_b: 待乘矩阵</span><br><span class="hljs-string">    :return: 结果矩阵</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_a) <span class="hljs-comment"># 矩阵的边长</span><br>    <span class="hljs-keyword">if</span> rows == <span class="hljs-number">1</span>:<br>        matrix_all = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows)]<br>        matrix_all[<span class="hljs-number">0</span>].append(matrix_a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * matrix_b[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 创建 10 个矩阵</span><br>        s1 = matrix_minus(matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s2 = matrix_add(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>        s3 = matrix_add(matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s4 = matrix_minus(matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>        s5 = matrix_add(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s6 = matrix_add(matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s7 = matrix_minus(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s8 = matrix_add(matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s9 = matrix_minus(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br>        s10 = matrix_add(matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># 7 个乘法</span><br>        p1 = strassen(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), s1)<br>        p2 = strassen(s2, matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        p3 = strassen(s3, matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>        p4 = strassen(matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>), s4)<br>        p5 = strassen(s5, s6)<br>        p6 = strassen(s7, s8)<br>        p7 = strassen(s9, s10)<br>        <span class="hljs-comment"># 求出四个子矩阵</span><br>        c11 = matrix_add(matrix_add(p5, p4), matrix_minus(p6, p2))<br>        c12 = matrix_add(p1, p2)<br>        c21 = matrix_add(p3, p4)<br>        c22 = matrix_add(matrix_minus(p5, p3), matrix_minus(p1, p7))<br>        <span class="hljs-comment"># 合并矩阵</span><br>        matrix_all = matrix_merge(c11, c12, c21, c22)<br>        <span class="hljs-comment"># 实验需要打印的 p1...p7，这里仅仅是为了应付实验的需要</span><br>        <span class="hljs-comment"># print(p1)</span><br>        <span class="hljs-comment"># print(p2)</span><br>        <span class="hljs-comment"># print(p3)</span><br>        <span class="hljs-comment"># print(p4)</span><br>        <span class="hljs-comment"># print(p5)</span><br>        <span class="hljs-comment"># print(p6)</span><br>        <span class="hljs-comment"># print(p7)</span><br>    <span class="hljs-keyword">return</span> matrix_all<br><br><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    b = [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    c = strassen(a, b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;打印结果矩阵&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(c)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-comment"># 使用 numpy 的矩阵乘法来验证</span><br>    n_a = numpy.array(a)<br>    n_b = numpy.array(b)<br>    <span class="hljs-built_in">print</span>(n_a)<br>    <span class="hljs-built_in">print</span>(n_b)<br>    <span class="hljs-built_in">print</span>(n_a.dot(b))<br></code></pre></div></td></tr></table></figure><p>说明：本算法严格参照《算法导论》的描述来实现。具体思路可以参照《算法导论》相关章节。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《算法导论》</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字逻辑--序列检测器相关问题整理</title>
    <link href="/2021/04/26/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E5%BA%8F%E5%88%97%E6%A3%80%E6%B5%8B%E5%99%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/2021/04/26/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E5%BA%8F%E5%88%97%E6%A3%80%E6%B5%8B%E5%99%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221106.png" alt="20210426221106"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221132.png" alt="20210426221132"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221156.png" alt="20210426221156"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221217.png" alt="20210426221217"></p><p>来源：第五章 PPT</p><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221328.png" alt="20210426221328"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221347.png" alt="20210426221347"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221407.png" alt="20210426221407"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221423.png" alt="20210426221423"></p><p>来源：第五章 PPT</p><h3 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426222426.png" alt="20210426222426"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426222447.png" alt="20210426222447"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426222504.png" alt="20210426222504"></p>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字逻辑</tag>
      
      <tag>待 refactor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用门电路符号及表达式</title>
    <link href="/2021/04/26/%E5%B8%B8%E7%94%A8%E9%97%A8%E7%94%B5%E8%B7%AF%E7%AC%A6%E5%8F%B7%E5%8F%8A%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/04/26/%E5%B8%B8%E7%94%A8%E9%97%A8%E7%94%B5%E8%B7%AF%E7%AC%A6%E5%8F%B7%E5%8F%8A%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>常用的门电路符号及表达式，便于以后查阅与记忆。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426215327.png" alt="20210426215327"></p><p>按：只是，个人暂时不知道如何使用软件绘制这些符号，所以只能从 pdf 课本中截取这个图片，有些不优雅。以后有机会，一定要重构一下。</p>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字逻辑</tag>
      
      <tag>待 refactor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 实现经典排序算法（《算法导论》）</title>
    <link href="/2021/04/26/Python-%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/"/>
    <url>/2021/04/26/Python-%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426131930.png" alt="20210426131930"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426131850.png" alt="20210426131850"></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : insertion_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">插入排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    插入排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(A)):<br>        key = A[j]<br>        <span class="hljs-comment"># 开始插入</span><br>        i = j  -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> A[i] &gt; key:<br>            A[i + <span class="hljs-number">1</span>] = A[i]<br>            i -= <span class="hljs-number">1</span><br>        A[i + <span class="hljs-number">1</span>] = key<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]<br>    insert_sort(A)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="合并（归并）排序"><a href="#合并（归并）排序" class="headerlink" title="合并（归并）排序"></a>合并（归并）排序</h2><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132201.png" alt="20210426132201"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132242.png" alt="20210426132242"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132330.png" alt="20210426132330"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132353.png" alt="20210426132353"></p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : merge_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">合并（归并）排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 归并函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, q:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    把数组的 p 到 q 和 q + 1 到 r 这两个部分进行合并</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边的数组索引</span><br><span class="hljs-string">    :param q: 中间的数组索引</span><br><span class="hljs-string">    :param r: 右边的数组索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n_1 = q - p + <span class="hljs-number">1</span> <span class="hljs-comment"># 左边待归并的数组元素数量</span><br>    n_2 = r - q <span class="hljs-comment"># 右边的待归并的数组元素数量</span><br>    <span class="hljs-comment"># 这里多出来的一个元素放在最后，用正无穷来表示</span><br>    L = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_1 + <span class="hljs-number">1</span>)]<br>    R = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_2 + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_1):<br>        L[i] = A[p + i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_2):<br>        R[j] = A[q + j + <span class="hljs-number">1</span>]<br>    L[n_1] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-comment"># 给最后一个值赋无穷大</span><br>    R[n_2] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p, r + <span class="hljs-number">1</span>): <span class="hljs-comment"># 这里注意索引的问题</span><br>        <span class="hljs-keyword">if</span> L[i] &lt;= R[j]:<br>            A[k] = L[i]<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            A[k] = R[j]<br>            j += <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    归并排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 待排数组左边界</span><br><span class="hljs-string">    :param r: 右边界</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> p &lt; r:<br>        q = <span class="hljs-built_in">int</span>((p + r) / <span class="hljs-number">2</span>)<br>        merge_sort(A, p, q)<br>        merge_sort(A, q + <span class="hljs-number">1</span>, r) <span class="hljs-comment"># bug 处在了这里，这里第一次把 q 写成了 p ！！！！！</span><br>        merge(A, p, q, r)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>]<br>    p = <span class="hljs-number">0</span><br>    r = <span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span><br>    merge_sort(A, p, r)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132538.png" alt="20210426132538"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132551.png" alt="20210426132551"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132622.png" alt="20210426132622"></p><h3 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : quick_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">快速排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, i:<span class="hljs-built_in">int</span>, j:<span class="hljs-built_in">int</span></span>):</span><br>    tmp = A[i]<br>    A[i] = A[j]<br>    A[j] = tmp<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    处理 p 到 r 这一部分的数组（包含 r），具体操作是以 A[r] 为中心点（pivot），</span><br><span class="hljs-string">    将小于等于 pivot 的元素放在左边，将大于 pivot 的元素放在右边</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    x = A[r] <span class="hljs-comment"># pivot 值</span><br>    i = p - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p, r): <span class="hljs-comment"># j 从 p 到 r（不包含 r）</span><br>        <span class="hljs-keyword">if</span> A[j] &lt;= x:<br>            i = i + <span class="hljs-number">1</span> <span class="hljs-comment"># i + 1 之后指向的就是右边的比 pivot 值大的那部分数组中的第一个元素</span><br>            swap(A, i, j)<br>    swap(A, i + <span class="hljs-number">1</span>, r) <span class="hljs-comment"># 把 pivot 值给换回来</span><br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span> <span class="hljs-comment"># i + 1 是中间值</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    快速排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> p &lt; r:<br>        q = partition(A, p, r)<br>        quick_sort(A, p, q - <span class="hljs-number">1</span>)<br>        quick_sort(A, q + <span class="hljs-number">1</span>, r)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]<br>    p = <span class="hljs-number">0</span><br>    r = <span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span><br>    quick_sort(A, p, r)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="随机快速排序算法"><a href="#随机快速排序算法" class="headerlink" title="随机快速排序算法"></a>随机快速排序算法</h2><h3 id="算法描述-3"><a href="#算法描述-3" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132824.png" alt="20210426132824"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132842.png" alt="20210426132842"></p><h3 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : random_quick_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">随机快速排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> quick_sort<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">randomized_partition</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    随机化选择 pivot</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    i = random.randint(p, r)<br>    quick_sort.swap(A, r, i)<br>    <span class="hljs-keyword">return</span> quick_sort.partition(A, p, r)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">randomized_quicksort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    随机化快速排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> p &lt; r:<br>        q = randomized_partition(A, p, r)<br>        randomized_quicksort(A, p, q - <span class="hljs-number">1</span>)<br>        randomized_quicksort(A, q + <span class="hljs-number">1</span>, r)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]<br>    p = <span class="hljs-number">0</span><br>    r = <span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span><br>    randomized_quicksort(A, p, r)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="算法描述-4"><a href="#算法描述-4" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133153.png" alt="20210426133153"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133210.png" alt="20210426133210"></p><h3 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : counting_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">计数排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">counting_sort</span>(<span class="hljs-params">A: <span class="hljs-built_in">list</span>, B: <span class="hljs-built_in">list</span>, k: <span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计数排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param B: 排好序的结果数组</span><br><span class="hljs-string">    :param k: A 中元素最大值</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    C = []<br>    <span class="hljs-comment"># 初始化 C 为 k + 1 个 0，索引是从 0 到 k</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k + <span class="hljs-number">1</span>):<br>        C.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(B)):<br>        C[A[j]] = C[A[j]] + <span class="hljs-number">1</span> <span class="hljs-comment"># 给数组 A 中的所有不同的数字计数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>        C[i] = C[i] + C[i - <span class="hljs-number">1</span>] <span class="hljs-comment"># 计算累加和</span><br>    <span class="hljs-comment"># 按从后往前的顺序从 A 中取数据，然后根据规则放入 B 中</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        B[C[A[j]] - <span class="hljs-number">1</span>] = A[j] <span class="hljs-comment"># 注意 B 的索引是从 0 开始的</span><br>        C[A[j]] = C[A[j]] - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br>    B = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A))]<br>    k = <span class="hljs-built_in">max</span>(A)<br>    counting_sort(A, B, k)<br>    <span class="hljs-built_in">print</span>(B)<br></code></pre></div></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h3 id="算法描述-5"><a href="#算法描述-5" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133346.png" alt="20210426133346"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133358.png" alt="20210426133358"></p><h3 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : bucket_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">桶排序，这里假设待排元素的范围是 [0, 1)（前闭后开）</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> insertion_sort<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bucket_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    桶排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n = <span class="hljs-built_in">len</span>(A)<br>    B = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        B.append([])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        index = <span class="hljs-built_in">int</span>(n * A[i])<br>        B[index].append(A[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        insertion_sort.insert_sort(B[i])<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> B[i]:<br>            A[k] = each<br>            k = k + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">0.78</span>, <span class="hljs-number">0.17</span>, <span class="hljs-number">0.39</span>, <span class="hljs-number">0.26</span>, <span class="hljs-number">0.72</span>, <span class="hljs-number">0.94</span>, <span class="hljs-number">0.21</span>, <span class="hljs-number">0.12</span>, <span class="hljs-number">0.23</span>, <span class="hljs-number">0.68</span>]<br>    bucket_sort(A)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="算法效率可视化"><a href="#算法效率可视化" class="headerlink" title="算法效率可视化"></a>算法效率可视化</h2><p>主要是利用 Python 的 matplotlib 这个库，绘制 $T(N)$ 随输入规模的变化的折线图，这里同时绘制三种情况：最好情况（正序）、一般情况和最坏情况（逆序）。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : time_analysis.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-keyword">import</span> insertion_sort, merge_sort<br><span class="hljs-keyword">import</span> quick_sort, random_quick_sort<br><span class="hljs-keyword">import</span> counting_sort, bucket_sort<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>A = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">6000</span>, <span class="hljs-number">7000</span>]<br><span class="hljs-comment"># A = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] # 测试数据</span><br>T = []<br>T_best = []<br>T_worst = []<br>T_list = [T, T_best, T_worst]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> A:<br>    B = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        B.append(random.randint(<span class="hljs-number">0</span>, i))<br>    B_best = <span class="hljs-built_in">sorted</span>(B)<br>    B_worst = B_best[::-<span class="hljs-number">1</span>]<br>    B_list = [B, B_best, B_worst]<br>    TB_map = [(T, B), (T_best, B_best), (T_worst, B_worst)]<br>    <span class="hljs-keyword">for</span> each_T, each_B <span class="hljs-keyword">in</span> TB_map:<br>        pre = time.process_time_ns()<br>        insertion_sort.insert_sort(each_B)<br>        after = time.process_time_ns()<br>        <span class="hljs-built_in">print</span>(after - pre)<br>        each_T.append(after - pre)<br><span class="hljs-built_in">print</span>(T)<br><span class="hljs-built_in">print</span>(T_best)<br><span class="hljs-built_in">print</span>(T_worst)<br><span class="hljs-comment"># 绘制图线</span><br>plt.plot(A, T, label=<span class="hljs-string">&#x27;normal&#x27;</span>)<br>plt.plot(A, T_best, label=<span class="hljs-string">&#x27;best&#x27;</span>)<br>plt.plot(A, T_worst, label=<span class="hljs-string">&#x27;worst&#x27;</span>)<br>plt.legend() <span class="hljs-comment"># 显示 label</span><br>plt.savefig(fname=<span class="hljs-string">&#x27;insert.svg&#x27;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;svg&#x27;</span>)<br>plt.show()<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426214702.svg" alt="insert"></p><p>这里只绘制了一个插入排序，如果想绘制其他的图像，只需要将代码中的相应的排序方法给替换掉，然后重新跑一遍代码即可。不过，在实际测试时，如果要替换成其他的排序算法来测试，那么，相应地也要调整测试数据（也就是输入的规模），否则快速排序在最坏情况下的递归会耗尽内存。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于这些排序算法，基本都是直接对原数组进行操作的，原因是这里要测试它们的时间效率，所以不便于产生其他额外的开销。但是，在实际运用中，也会有对待排数组的副本进行排序然后返回的情况，这样的好处是不会修改待排的原数组，这一点是要注意的。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《算法导论》</tag>
      
      <tag>算法</tag>
      
      <tag>算法设计与分析实验一</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Windows 命令行：&#39;cl&#39; 不是内部或外部命令</title>
    <link href="/2021/04/25/%E8%A7%A3%E5%86%B3-Windows-%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%9A-cl-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/04/25/%E8%A7%A3%E5%86%B3-Windows-%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%9A-cl-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>因为要在 Windows 上做操作系统原理的 C 语言实验，同时不愿意开一个笨重的 VS2019 来写一个简单的程序，遂决定在像 Linux 一样，在命令编译运行 C 语言程序，无奈根据微软官方文档的指示，命令行敲入 <code>cl</code> 后出现了 “‘cl’ 不是内部或外部命令” 的信息，不过这种情况的解决方案一般就是找到相关的 <code>exe</code> 文件所在的文件路径，然后将其添加到系统高级环境变量的 PATH 中即可。</p><p>下面是我的 <code>cl.exe</code> 文件所在的路径，根据你安装 VS2019 时选择的路径，路径会稍微不同，不过大同小异就是了</p><div class="hljs code-wrapper"><pre><code>D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\bin\Hostx64\x64</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210425143545.png" alt="20210425143545"></p><p>将这个路径添加到系统高级环境变量中的 Path 中之后，再次在命令行敲入 <code>cl</code>，成功输出正常的提示信息</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210425143751.png" alt="20210425143751"></p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
      <tag>C 语言</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 中的 pthread.h 头文件（附源码）</title>
    <link href="/2021/04/25/Linux-%E4%B8%AD%E7%9A%84-pthread-h-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2021/04/25/Linux-%E4%B8%AD%E7%9A%84-pthread-h-%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Linux 下的线程库函数是由 POSIX 标准定义的，成为 POSIX thread 或 pthread。在 Linux 上线程函数位于 libthread 共享库中，因此在编译时要加上 <code>-lpthread</code> 选项。</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>Linux 内核版本是 5.4，文件位置 <code>/usr/include/pthread.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 2002-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _PTHREAD_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PTHREAD_H1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;features.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;endian.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/pthreadtypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/setjmp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/wordsize.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/types/struct_timespec.h&gt;</span></span><br><br><br><span class="hljs-comment">/* Detach state.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_CREATE_JOINABLE,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_CREATE_JOINABLEPTHREAD_CREATE_JOINABLE</span><br>  PTHREAD_CREATE_DETACHED<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_CREATE_DETACHEDPTHREAD_CREATE_DETACHED</span><br>&#125;;<br><br><br><span class="hljs-comment">/* Mutex types.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_MUTEX_TIMED_NP,<br>  PTHREAD_MUTEX_RECURSIVE_NP,<br>  PTHREAD_MUTEX_ERRORCHECK_NP,<br>  PTHREAD_MUTEX_ADAPTIVE_NP<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K8</span><br>  ,<br>  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,<br>  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,<br>  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,<br>  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br>  <span class="hljs-comment">/* For compatibility.  */</span><br>  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Robust mutex or not flags.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_MUTEX_STALLED,<br>  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,<br>  PTHREAD_MUTEX_ROBUST,<br>  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_POSIX199506 || defined __USE_UNIX98</span><br><span class="hljs-comment">/* Mutex protocols.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_PRIO_NONE,<br>  PTHREAD_PRIO_INHERIT,<br>  PTHREAD_PRIO_PROTECT<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __PTHREAD_MUTEX_HAVE_PREV</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> PTHREAD_MUTEX_INITIALIZER \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> PTHREAD_MUTEX_INITIALIZER \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Read-write lock types.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_RWLOCK_PREFER_READER_NP,<br>  PTHREAD_RWLOCK_PREFER_WRITER_NP,<br>  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,<br>  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP<br>&#125;;<br><br><span class="hljs-comment">/* Define __PTHREAD_RWLOCK_INT_FLAGS_SHARED to 1 if pthread_rwlock_t</span><br><span class="hljs-comment">   has the shared field.  All 64-bit architectures have the shared field</span><br><span class="hljs-comment">   in pthread_rwlock_t.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __PTHREAD_RWLOCK_INT_FLAGS_SHARED</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __WORDSIZE == 64</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> __PTHREAD_RWLOCK_INT_FLAGS_SHARED 1</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Read-write lock initializers.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> PTHREAD_RWLOCK_INITIALIZER \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, 0 &#125; &#125;</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __PTHREAD_RWLOCK_INT_FLAGS_SHARED</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0,      \</span><br><span class="hljs-meta">PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">if</span> __BYTE_ORDER == __LITTLE_ENDIAN</span><br><span class="hljs-meta">#    <span class="hljs-meta-keyword">define</span> PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, \</span><br><span class="hljs-meta">      0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, 0 &#125; &#125;</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#    <span class="hljs-meta-keyword">define</span> PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,\</span><br><span class="hljs-meta">      0 &#125; &#125;</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span>  <span class="hljs-comment">/* Unix98 or XOpen2K */</span></span><br><br><br><span class="hljs-comment">/* Scheduler inheritance.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_INHERIT_SCHED,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_INHERIT_SCHED   PTHREAD_INHERIT_SCHED</span><br>  PTHREAD_EXPLICIT_SCHED<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_EXPLICIT_SCHED  PTHREAD_EXPLICIT_SCHED</span><br>&#125;;<br><br><br><span class="hljs-comment">/* Scope handling.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_SCOPE_SYSTEM,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_SCOPE_SYSTEM    PTHREAD_SCOPE_SYSTEM</span><br>  PTHREAD_SCOPE_PROCESS<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_SCOPE_PROCESS   PTHREAD_SCOPE_PROCESS</span><br>&#125;;<br><br><br><span class="hljs-comment">/* Process shared or private flag.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_PROCESS_PRIVATE,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE</span><br>  PTHREAD_PROCESS_SHARED<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_PROCESS_SHARED  PTHREAD_PROCESS_SHARED</span><br>&#125;;<br><br><br><br><span class="hljs-comment">/* Conditional variable handling.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_COND_INITIALIZER &#123; &#123; &#123;0&#125;, &#123;0&#125;, &#123;0, 0&#125;, &#123;0, 0&#125;, 0, 0, &#123;0, 0&#125; &#125; &#125;</span><br><br><br><span class="hljs-comment">/* Cleanup buffers */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">pthread_cleanup_buffer</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">void</span> (*__routine) (<span class="hljs-keyword">void</span> *);             <span class="hljs-comment">/* Function to call.  */</span><br>  <span class="hljs-keyword">void</span> *__arg;                            <span class="hljs-comment">/* Its argument.  */</span><br>  <span class="hljs-keyword">int</span> __canceltype;                       <span class="hljs-comment">/* Saved cancellation type. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">pthread_cleanup_buffer</span> *__<span class="hljs-title">prev</span>;</span> <span class="hljs-comment">/* Chaining of cleanup functions.  */</span><br>&#125;;<br><br><span class="hljs-comment">/* Cancellation */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_CANCEL_ENABLE,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_CANCEL_ENABLE   PTHREAD_CANCEL_ENABLE</span><br>  PTHREAD_CANCEL_DISABLE<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_CANCEL_DISABLE  PTHREAD_CANCEL_DISABLE</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_CANCEL_DEFERRED,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_CANCEL_DEFERREDPTHREAD_CANCEL_DEFERRED</span><br>  PTHREAD_CANCEL_ASYNCHRONOUS<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_CANCEL_ASYNCHRONOUSPTHREAD_CANCEL_ASYNCHRONOUS</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_CANCELED ((void *) -1)</span><br><br><br><span class="hljs-comment">/* Single execution handling.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_ONCE_INIT 0</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Value returned by &#x27;pthread_barrier_wait&#x27; for one of the threads after</span><br><span class="hljs-comment">   the required number of threads have called this function.</span><br><span class="hljs-comment">   -1 is distinct from 0 and all errno constants */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> PTHREAD_BARRIER_SERIAL_THREAD -1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br>__BEGIN_DECLS<br><br><span class="hljs-comment">/* Create a new thread, starting with execution of START-ROUTINE</span><br><span class="hljs-comment">   getting passed ARG.  Creation attributed come from ATTR.  The new</span><br><span class="hljs-comment">   handle is stored in *NEWTHREAD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_create</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> *__restrict __newthread,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">void</span> *(*__start_routine) (<span class="hljs-keyword">void</span> *),</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">void</span> *__restrict __arg)</span> __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* Terminate calling thread.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The registered cleanup handlers are called via exception handling</span><br><span class="hljs-comment">   so we cannot mark this function with __THROW.*/</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pthread_exit</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> *__retval)</span> __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__noreturn__))</span></span>;<br><br><span class="hljs-comment">/* Make calling thread wait for termination of the thread TH.  The</span><br><span class="hljs-comment">   exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN</span><br><span class="hljs-comment">   is not NULL.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_join</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th, <span class="hljs-keyword">void</span> **__thread_return)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Check whether thread TH has terminated.  If yes return the status of</span><br><span class="hljs-comment">   the thread in *THREAD_RETURN, if THREAD_RETURN is not NULL.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_tryjoin_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th, <span class="hljs-keyword">void</span> **__thread_return)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Make calling thread wait for termination of the thread TH, but only</span><br><span class="hljs-comment">   until TIMEOUT.  The exit status of the thread is stored in</span><br><span class="hljs-comment">   *THREAD_RETURN, if THREAD_RETURN is not NULL.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_timedjoin_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th, <span class="hljs-keyword">void</span> **__thread_return,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">const</span> struct timespec *__abstime)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Indicate that the thread TH is never to be joined with PTHREAD_JOIN.</span><br><span class="hljs-comment">   The resources of TH will therefore be freed immediately when it</span><br><span class="hljs-comment">   terminates, instead of waiting for another thread to perform PTHREAD_JOIN</span><br><span class="hljs-comment">   on it.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_detach</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th)</span> __THROW</span>;<br><br><br><span class="hljs-comment">/* Obtain the identifier of the current thread.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">pthread_t</span> <span class="hljs-title">pthread_self</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span></span>;<br><br><span class="hljs-comment">/* Compare two thread identifiers.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_equal</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __thread1, <span class="hljs-keyword">pthread_t</span> __thread2)</span></span><br><span class="hljs-function">  __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span></span>;<br><br><br><span class="hljs-comment">/* Thread attribute handling.  */</span><br><br><span class="hljs-comment">/* Initialize thread attribute *ATTR with default attributes</span><br><span class="hljs-comment">   (detachstate is PTHREAD_JOINABLE, scheduling policy is SCHED_OTHER,</span><br><span class="hljs-comment">    no user-provided stack).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy thread attribute *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Get detach state attribute.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getdetachstate</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> *__detachstate)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set detach state attribute.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setdetachstate</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> __detachstate)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Get the size of the guard area created for stack overflow protection.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getguardsize</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">size_t</span> *__guardsize)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the size of the guard area created for stack overflow protection.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setguardsize</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">size_t</span> __guardsize)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Return in *PARAM the scheduling parameters of *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getschedparam</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">       struct sched_param *__restrict __param)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set scheduling parameters (priority, etc) in *ATTR according to PARAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setschedparam</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">const</span> struct sched_param *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">       __param)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Return in *POLICY the scheduling policy of *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getschedpolicy</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">__attr, <span class="hljs-keyword">int</span> *__restrict __policy)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set scheduling policy in *ATTR according to POLICY.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setschedpolicy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr, <span class="hljs-keyword">int</span> __policy)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Return in *INHERIT the scheduling inheritance mode of *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getinheritsched</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function"> __attr, <span class="hljs-keyword">int</span> *__restrict __inherit)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set scheduling inheritance mode in *ATTR according to INHERIT.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setinheritsched</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">int</span> __inherit)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Return in *SCOPE the scheduling contention scope of *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getscope</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> *__restrict __scope)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set scheduling contention scope in *ATTR according to SCOPE.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setscope</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr, <span class="hljs-keyword">int</span> __scope)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Return the previously set address for the stack.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getstackaddr</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">      __attr, <span class="hljs-keyword">void</span> **__restrict __stackaddr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __attribute_deprecated__</span>;<br><br><span class="hljs-comment">/* Set the starting address of the stack of the thread to be created.</span><br><span class="hljs-comment">   Depending on whether the stack grows up or down the value must either</span><br><span class="hljs-comment">   be higher or lower than all the address in the memory block.  The</span><br><span class="hljs-comment">   minimal size of the block must be PTHREAD_STACK_MIN.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setstackaddr</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">void</span> *__stackaddr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __attribute_deprecated__</span>;<br><br><span class="hljs-comment">/* Return the currently used minimal stack size.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getstacksize</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">      __attr, <span class="hljs-keyword">size_t</span> *__restrict __stacksize)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Add information about the minimum stack size needed for the thread</span><br><span class="hljs-comment">   to be started.  This size must never be less than PTHREAD_STACK_MIN</span><br><span class="hljs-comment">   and must also not exceed the system limits.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setstacksize</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">size_t</span> __stacksize)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the previously set address for the stack.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getstack</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">void</span> **__restrict __stackaddr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">size_t</span> *__restrict __stacksize)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* The following two interfaces are intended to replace the last two.  They</span><br><span class="hljs-comment">   require setting the address as well as the size since only setting the</span><br><span class="hljs-comment">   address will make the implementation on some architectures impossible.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setstack</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr, <span class="hljs-keyword">void</span> *__stackaddr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">size_t</span> __stacksize)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Thread created with attribute ATTR will be limited to run only on</span><br><span class="hljs-comment">   the processors represented in CPUSET.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_setaffinity_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">size_t</span> __cpusetsize,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">cpu_set_t</span> *__cpuset)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* Get bit set in CPUSET representing the processors threads created with</span><br><span class="hljs-comment">   ATTR can run on.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_attr_getaffinity_np</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">size_t</span> __cpusetsize,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">cpu_set_t</span> *__cpuset)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* Get the default attributes used by pthread_create in this process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_getattr_default_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_attr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the default attributes to be used by pthread_create in this</span><br><span class="hljs-comment">   process.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setattr_default_np</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_attr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Initialize thread attribute *ATTR with attributes corresponding to the</span><br><span class="hljs-comment">   already running thread TH.  It shall be called on uninitialized ATTR</span><br><span class="hljs-comment">   and destroyed with pthread_attr_destroy when no longer needed.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_getattr_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th, <span class="hljs-keyword">pthread_attr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for scheduling control.  */</span><br><br><span class="hljs-comment">/* Set the scheduling parameters for TARGET_THREAD according to POLICY</span><br><span class="hljs-comment">   and *PARAM.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setschedparam</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __target_thread, <span class="hljs-keyword">int</span> __policy,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> struct sched_param *__param)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* Return in *POLICY and *PARAM the scheduling parameters for TARGET_THREAD. */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_getschedparam</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __target_thread,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> *__restrict __policy,</span></span><br><span class="hljs-params"><span class="hljs-function">  struct sched_param *__restrict __param)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the scheduling priority for TARGET_THREAD.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setschedprio</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __target_thread, <span class="hljs-keyword">int</span> __prio)</span></span><br><span class="hljs-function">     __THROW</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Get thread name visible in the kernel and its interfaces.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_getname_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __target_thread, <span class="hljs-keyword">char</span> *__buf,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">size_t</span> __buflen)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set thread name visible in the kernel and its interfaces.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setname_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __target_thread, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__name)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_UNIX98</span><br><span class="hljs-comment">/* Determine level of concurrency.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_getconcurrency</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Set new concurrency level to LEVEL.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setconcurrency</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __level)</span> __THROW</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Yield the processor to another thread or process.</span><br><span class="hljs-comment">   This function is similar to the POSIX `sched_yield&#x27; function but</span><br><span class="hljs-comment">   might be differently implemented in the case of a m-on-n thread</span><br><span class="hljs-comment">   implementation.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_yield</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> __THROW</span>;<br><br><br><span class="hljs-comment">/* Limit specified thread TH to run only on the processors represented</span><br><span class="hljs-comment">   in CPUSET.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setaffinity_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th, <span class="hljs-keyword">size_t</span> __cpusetsize,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">cpu_set_t</span> *__cpuset)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* Get bit set in CPUSET representing the processors TH can run on.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_getaffinity_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th, <span class="hljs-keyword">size_t</span> __cpusetsize,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">cpu_set_t</span> *__cpuset)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling initialization.  */</span><br><br><span class="hljs-comment">/* Guarantee that the initialization function INIT_ROUTINE will be called</span><br><span class="hljs-comment">   only once, even if pthread_once is executed several times with the</span><br><span class="hljs-comment">   same ONCE_CONTROL argument. ONCE_CONTROL must point to a static or</span><br><span class="hljs-comment">   extern variable initialized to PTHREAD_ONCE_INIT.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The initialization functions might throw exception which is why</span><br><span class="hljs-comment">   this function is not marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_once</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_once_t</span> *__once_control,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">void</span> (*__init_routine) (<span class="hljs-keyword">void</span>))</span> __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Functions for handling cancellation.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Note that these functions are explicitly not marked to not throw an</span><br><span class="hljs-comment">   exception in C++ code.  If cancellation is implemented by unwinding</span><br><span class="hljs-comment">   this is necessary to have the compiler generate the unwind information.  */</span><br><br><span class="hljs-comment">/* Set cancelability state of current thread to STATE, returning old</span><br><span class="hljs-comment">   state in *OLDSTATE if OLDSTATE is not NULL.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setcancelstate</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __state, <span class="hljs-keyword">int</span> *__oldstate)</span></span>;<br><br><span class="hljs-comment">/* Set cancellation state of current thread to TYPE, returning the old</span><br><span class="hljs-comment">   type in *OLDTYPE if OLDTYPE is not NULL.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setcanceltype</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __type, <span class="hljs-keyword">int</span> *__oldtype)</span></span>;<br><br><span class="hljs-comment">/* Cancel THREAD immediately or at the next possibility.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cancel</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __th)</span></span>;<br><br><span class="hljs-comment">/* Test for pending cancellation for the current thread and terminate</span><br><span class="hljs-comment">   the thread as per pthread_exit(PTHREAD_CANCELED) if it has been</span><br><span class="hljs-comment">   cancelled.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pthread_testcancel</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">/* Cancellation handling with integration into exception handling.  */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    __jmp_buf __cancel_jmp_buf;<br>    <span class="hljs-keyword">int</span> __mask_was_saved;<br>  &#125; __cancel_jmp_buf[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">void</span> *__pad[<span class="hljs-number">4</span>];<br>&#125; <span class="hljs-keyword">__pthread_unwind_buf_t</span> __attribute__ ((__aligned__));<br><br><span class="hljs-comment">/* No special attributes by default.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __cleanup_fct_attribute</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __cleanup_fct_attribute</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Structure to hold the cleanup handler information.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">pthread_cleanup_frame</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">void</span> (*__cancel_routine) (<span class="hljs-keyword">void</span> *);<br>  <span class="hljs-keyword">void</span> *__cancel_arg;<br>  <span class="hljs-keyword">int</span> __do_it;<br>  <span class="hljs-keyword">int</span> __cancel_type;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __GNUC__ &amp;&amp; defined __EXCEPTIONS</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-comment">/* Class to handle cancellation handler invocation.  */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> __<span class="hljs-title">pthread_cleanup_class</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">void</span> (*__cancel_routine) (<span class="hljs-keyword">void</span> *);<br>  <span class="hljs-keyword">void</span> *__cancel_arg;<br>  <span class="hljs-keyword">int</span> __do_it;<br>  <span class="hljs-keyword">int</span> __cancel_type;<br><br> <span class="hljs-keyword">public</span>:<br>  __pthread_cleanup_class (<span class="hljs-keyword">void</span> (*__fct) (<span class="hljs-keyword">void</span> *), <span class="hljs-keyword">void</span> *__arg)<br>    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (<span class="hljs-number">1</span>) &#123; &#125;<br>  ~__pthread_cleanup_class () &#123; <span class="hljs-keyword">if</span> (__do_it) __cancel_routine (__cancel_arg); &#125;<br>  <span class="hljs-keyword">void</span> __setdoit (<span class="hljs-keyword">int</span> __newval) &#123; __do_it = __newval; &#125;<br>  <span class="hljs-keyword">void</span> __defer () &#123; pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,<br>   &amp;__cancel_type); &#125;<br>  <span class="hljs-keyword">void</span> __restore () <span class="hljs-keyword">const</span> &#123; pthread_setcanceltype (__cancel_type, <span class="hljs-number">0</span>); &#125;<br>&#125;;<br><br><span class="hljs-comment">/* Install a cleanup handler: ROUTINE will be called with arguments ARG</span><br><span class="hljs-comment">   when the thread is canceled or calls pthread_exit.  ROUTINE will also</span><br><span class="hljs-comment">   be called with arguments ARG when the matching pthread_cleanup_pop</span><br><span class="hljs-comment">   is executed with non-zero EXECUTE argument.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   pthread_cleanup_push and pthread_cleanup_pop are macros and must always</span><br><span class="hljs-comment">   be used in matching pairs at the same nesting level of braces.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> pthread_cleanup_push(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_cleanup_class __clframe (routine, arg)</span><br><br><span class="hljs-comment">/* Remove a cleanup handler installed by the matching pthread_cleanup_push.</span><br><span class="hljs-comment">   If EXECUTE is non-zero, the handler function is called. */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> pthread_cleanup_pop(execute) \</span><br><span class="hljs-meta">    __clframe.__setdoit (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Install a cleanup handler as pthread_cleanup_push does, but also</span><br><span class="hljs-comment">   saves the current cancellation type and sets it to deferred</span><br><span class="hljs-comment">   cancellation.  */</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> pthread_cleanup_push_defer_np(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_cleanup_class __clframe (routine, arg);      \</span><br><span class="hljs-meta">    __clframe.__defer ()</span><br><br><span class="hljs-comment">/* Remove a cleanup handler as pthread_cleanup_pop does, but also</span><br><span class="hljs-comment">   restores the cancellation type that was in effect when the matching</span><br><span class="hljs-comment">   pthread_cleanup_push_defer was called.  */</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> pthread_cleanup_pop_restore_np(execute) \</span><br><span class="hljs-meta">    __clframe.__restore ();      \</span><br><span class="hljs-meta">    __clframe.__setdoit (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-comment">/* Function called to call the cleanup handler.  As an extern inline</span><br><span class="hljs-comment">   function the compiler is free to decide inlining the change when</span><br><span class="hljs-comment">   needed or fall back on the copy which must exist somewhere</span><br><span class="hljs-comment">   else.  */</span><br>__extern_inline <span class="hljs-keyword">void</span><br>__pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)<br>&#123;<br>  <span class="hljs-keyword">if</span> (__frame-&gt;__do_it)<br>    __frame-&gt;__cancel_routine (__frame-&gt;__cancel_arg);<br>&#125;<br><br><span class="hljs-comment">/* Install a cleanup handler: ROUTINE will be called with arguments ARG</span><br><span class="hljs-comment">   when the thread is canceled or calls pthread_exit.  ROUTINE will also</span><br><span class="hljs-comment">   be called with arguments ARG when the matching pthread_cleanup_pop</span><br><span class="hljs-comment">   is executed with non-zero EXECUTE argument.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   pthread_cleanup_push and pthread_cleanup_pop are macros and must always</span><br><span class="hljs-comment">   be used in matching pairs at the same nesting level of braces.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> pthread_cleanup_push(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    struct __pthread_cleanup_frame __clframe      \</span><br><span class="hljs-meta">      __attribute__ ((__cleanup__ (__pthread_cleanup_routine)))      \</span><br><span class="hljs-meta">      = &#123; .__cancel_routine = (routine), .__cancel_arg = (arg),       \</span><br><span class="hljs-meta">  .__do_it = 1 &#125;;</span><br><br><span class="hljs-comment">/* Remove a cleanup handler installed by the matching pthread_cleanup_push.</span><br><span class="hljs-comment">   If EXECUTE is non-zero, the handler function is called. */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> pthread_cleanup_pop(execute) \</span><br><span class="hljs-meta">    __clframe.__do_it = (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Install a cleanup handler as pthread_cleanup_push does, but also</span><br><span class="hljs-comment">   saves the current cancellation type and sets it to deferred</span><br><span class="hljs-comment">   cancellation.  */</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> pthread_cleanup_push_defer_np(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    struct __pthread_cleanup_frame __clframe      \</span><br><span class="hljs-meta">      __attribute__ ((__cleanup__ (__pthread_cleanup_routine)))      \</span><br><span class="hljs-meta">      = &#123; .__cancel_routine = (routine), .__cancel_arg = (arg),      \</span><br><span class="hljs-meta">  .__do_it = 1 &#125;;      \</span><br><span class="hljs-meta">    (void) pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,      \</span><br><span class="hljs-meta">  &amp;__clframe.__cancel_type)</span><br><br><span class="hljs-comment">/* Remove a cleanup handler as pthread_cleanup_pop does, but also</span><br><span class="hljs-comment">   restores the cancellation type that was in effect when the matching</span><br><span class="hljs-comment">   pthread_cleanup_push_defer was called.  */</span><br><span class="hljs-meta">#   <span class="hljs-meta-keyword">define</span> pthread_cleanup_pop_restore_np(execute) \</span><br><span class="hljs-meta">    (void) pthread_setcanceltype (__clframe.__cancel_type, NULL);      \</span><br><span class="hljs-meta">    __clframe.__do_it = (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-comment">/* Install a cleanup handler: ROUTINE will be called with arguments ARG</span><br><span class="hljs-comment">   when the thread is canceled or calls pthread_exit.  ROUTINE will also</span><br><span class="hljs-comment">   be called with arguments ARG when the matching pthread_cleanup_pop</span><br><span class="hljs-comment">   is executed with non-zero EXECUTE argument.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   pthread_cleanup_push and pthread_cleanup_pop are macros and must always</span><br><span class="hljs-comment">   be used in matching pairs at the same nesting level of braces.  */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> pthread_cleanup_push(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_unwind_buf_t __cancel_buf;      \</span><br><span class="hljs-meta">    void (*__cancel_routine) (void *) = (routine);      \</span><br><span class="hljs-meta">    void *__cancel_arg = (arg);      \</span><br><span class="hljs-meta">    int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \</span><br><span class="hljs-meta">__cancel_buf.__cancel_jmp_buf, 0);    \</span><br><span class="hljs-meta">    <span class="hljs-meta-keyword">if</span> (__glibc_unlikely (__not_first_call))      \</span><br><span class="hljs-meta">      &#123;      \</span><br><span class="hljs-meta">__cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">__pthread_unwind_next (&amp;__cancel_buf);      \</span><br><span class="hljs-meta"><span class="hljs-comment">/* NOTREACHED */</span>      \</span><br><span class="hljs-meta">      &#125;      \</span><br><span class="hljs-meta">      \</span><br><span class="hljs-meta">    __pthread_register_cancel (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    do &#123;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> __pthread_register_cancel (<span class="hljs-keyword">__pthread_unwind_buf_t</span> *__buf)<br>     __cleanup_fct_attribute;<br><br><span class="hljs-comment">/* Remove a cleanup handler installed by the matching pthread_cleanup_push.</span><br><span class="hljs-comment">   If EXECUTE is non-zero, the handler function is called. */</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> pthread_cleanup_pop(execute) \</span><br><span class="hljs-meta">      do &#123; &#125; while (0);<span class="hljs-comment">/* Empty to allow label before pthread_cleanup_pop.  */</span>\</span><br><span class="hljs-meta">    &#125; while (0);      \</span><br><span class="hljs-meta">    __pthread_unregister_cancel (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    <span class="hljs-meta-keyword">if</span> (execute)      \</span><br><span class="hljs-meta">      __cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> __pthread_unregister_cancel (<span class="hljs-keyword">__pthread_unwind_buf_t</span> *__buf)<br>  __cleanup_fct_attribute;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Install a cleanup handler as pthread_cleanup_push does, but also</span><br><span class="hljs-comment">   saves the current cancellation type and sets it to deferred</span><br><span class="hljs-comment">   cancellation.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> pthread_cleanup_push_defer_np(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_unwind_buf_t __cancel_buf;      \</span><br><span class="hljs-meta">    void (*__cancel_routine) (void *) = (routine);      \</span><br><span class="hljs-meta">    void *__cancel_arg = (arg);      \</span><br><span class="hljs-meta">    int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \</span><br><span class="hljs-meta">__cancel_buf.__cancel_jmp_buf, 0);    \</span><br><span class="hljs-meta">    <span class="hljs-meta-keyword">if</span> (__glibc_unlikely (__not_first_call))      \</span><br><span class="hljs-meta">      &#123;      \</span><br><span class="hljs-meta">__cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">__pthread_unwind_next (&amp;__cancel_buf);      \</span><br><span class="hljs-meta"><span class="hljs-comment">/* NOTREACHED */</span>      \</span><br><span class="hljs-meta">      &#125;      \</span><br><span class="hljs-meta">      \</span><br><span class="hljs-meta">    __pthread_register_cancel_defer (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    do &#123;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> __pthread_register_cancel_defer (<span class="hljs-keyword">__pthread_unwind_buf_t</span> *__buf)<br>     __cleanup_fct_attribute;<br><br><span class="hljs-comment">/* Remove a cleanup handler as pthread_cleanup_pop does, but also</span><br><span class="hljs-comment">   restores the cancellation type that was in effect when the matching</span><br><span class="hljs-comment">   pthread_cleanup_push_defer was called.  */</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> pthread_cleanup_pop_restore_np(execute) \</span><br><span class="hljs-meta">      do &#123; &#125; while (0);<span class="hljs-comment">/* Empty to allow label before pthread_cleanup_pop.  */</span>\</span><br><span class="hljs-meta">    &#125; while (0);      \</span><br><span class="hljs-meta">    __pthread_unregister_cancel_restore (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    <span class="hljs-meta-keyword">if</span> (execute)      \</span><br><span class="hljs-meta">      __cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> __pthread_unregister_cancel_restore (<span class="hljs-keyword">__pthread_unwind_buf_t</span> *__buf)<br>  __cleanup_fct_attribute;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Internal interface to initiate cleanup.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> __pthread_unwind_next (<span class="hljs-keyword">__pthread_unwind_buf_t</span> *__buf)<br>     __cleanup_fct_attribute __attribute__ ((__noreturn__))<br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifndef</span> SHARED</span><br>     __attribute__ ((__weak__))<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br>     ;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Function used in the macros.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">jmp_buf_tag</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> __sigsetjmp (struct __jmp_buf_tag *__env, <span class="hljs-keyword">int</span> __savemask) __THROWNL;<br><br><br><span class="hljs-comment">/* Mutex handling.  */</span><br><br><span class="hljs-comment">/* Initialize a mutex.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__mutex,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutexattr_t</span> *__mutexattr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy a mutex.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__mutex)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Try locking a mutex.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_trylock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__mutex)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Lock a mutex.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_lock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__mutex)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Wait until lock becomes available, or specified time passes. */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_timedlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__restrict __mutex,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> struct timespec *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">    __abstime)</span> __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Unlock a mutex.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_unlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__mutex)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Get the priority ceiling of MUTEX.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_getprioceiling</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutex_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function"> __restrict __mutex,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">int</span> *__restrict __prioceiling)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the priority ceiling of MUTEX to PRIOCEILING, return old</span><br><span class="hljs-comment">   priority ceiling value in *OLD_CEILING.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_setprioceiling</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__restrict __mutex,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">int</span> __prioceiling,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">int</span> *__restrict __old_ceiling)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Declare the state protected by MUTEX as consistent.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_consistent</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__mutex)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutex_consistent_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutex_t</span> *__mutex)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling mutex attributes.  */</span><br><br><span class="hljs-comment">/* Initialize mutex attribute object ATTR with default attributes</span><br><span class="hljs-comment">   (kind is PTHREAD_MUTEX_TIMED_NP).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy mutex attribute object ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Get the process-shared flag of the mutex attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_getpshared</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutexattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function"> __restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">int</span> *__restrict __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the process-shared flag of the mutex attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_setpshared</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">int</span> __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Return in *KIND the mutex kind attribute in *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_gettype</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutexattr_t</span> *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">      __attr, <span class="hljs-keyword">int</span> *__restrict __kind)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the mutex kind attribute in *ATTR to KIND (either PTHREAD_MUTEX_NORMAL,</span><br><span class="hljs-comment">   PTHREAD_MUTEX_RECURSIVE, PTHREAD_MUTEX_ERRORCHECK, or</span><br><span class="hljs-comment">   PTHREAD_MUTEX_DEFAULT).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_settype</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr, <span class="hljs-keyword">int</span> __kind)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Return in *PROTOCOL the mutex protocol attribute in *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_getprotocol</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutexattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function">  __restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> *__restrict __protocol)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the mutex protocol attribute in *ATTR to PROTOCOL (either</span><br><span class="hljs-comment">   PTHREAD_PRIO_NONE, PTHREAD_PRIO_INHERIT, or PTHREAD_PRIO_PROTECT).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_setprotocol</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> __protocol)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Return in *PRIOCEILING the mutex prioceiling attribute in *ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_getprioceiling</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutexattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function">     __restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">int</span> *__restrict __prioceiling)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the mutex prioceiling attribute in *ATTR to PRIOCEILING.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_setprioceiling</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">int</span> __prioceiling)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Get the robustness flag of the mutex attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_getrobust</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutexattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> *__robustness)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_getrobust_np</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_mutexattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> *__robustness)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Set the robustness flag of the mutex attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_setrobust</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> __robustness)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_mutexattr_setrobust_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_mutexattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> __robustness)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Functions for handling read-write locks.  */</span><br><br><span class="hljs-comment">/* Initialize read-write lock RWLOCK using attributes ATTR, or use</span><br><span class="hljs-comment">   the default values if later is NULL.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__restrict __rwlock,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_rwlockattr_t</span> *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">__attr)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy read-write lock RWLOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__rwlock)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Acquire read lock for RWLOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_rdlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__rwlock)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Try to acquire read lock for RWLOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_tryrdlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__rwlock)</span></span><br><span class="hljs-function">  __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Try to acquire read lock for RWLOCK or return after specfied time.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_timedrdlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__restrict __rwlock,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">const</span> struct timespec *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">       __abstime)</span> __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Acquire write lock for RWLOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_wrlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__rwlock)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Try to acquire write lock for RWLOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_trywrlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__rwlock)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Try to acquire write lock for RWLOCK or return after specfied time.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_timedwrlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__restrict __rwlock,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">const</span> struct timespec *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function">       __abstime)</span> __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/* Unlock RWLOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlock_unlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlock_t</span> *__rwlock)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Functions for handling read-write lock attributes.  */</span><br><br><span class="hljs-comment">/* Initialize attribute object ATTR with default values.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlockattr_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlockattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy attribute object ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlockattr_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlockattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Return current setting of process-shared attribute of ATTR in PSHARED.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlockattr_getpshared</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_rwlockattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function">  __restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> *__restrict __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set process-shared attribute of ATTR to PSHARED.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlockattr_setpshared</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlockattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Return current setting of reader/writer preference.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlockattr_getkind_np</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_rwlockattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function">  __restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> *__restrict __pref)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set reader/write preference.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_rwlockattr_setkind_np</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_rwlockattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span> __pref)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling conditional variables.  */</span><br><br><span class="hljs-comment">/* Initialize condition variable COND using attributes ATTR, or use</span><br><span class="hljs-comment">   the default values if later is NULL.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *__restrict __cond,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_condattr_t</span> *__restrict __cond_attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy condition variable COND.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *__cond)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Wake up one thread waiting for condition variable COND.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_signal</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *__cond)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Wake up all threads waiting for condition variables COND.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_broadcast</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *__cond)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Wait for condition variable COND to be signaled or broadcast.</span><br><span class="hljs-comment">   MUTEX is assumed to be locked before.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_wait</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *__restrict __cond,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">pthread_mutex_t</span> *__restrict __mutex)</span></span><br><span class="hljs-function">     __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Wait for condition variable COND to be signaled or broadcast until</span><br><span class="hljs-comment">   ABSTIME.  MUTEX is assumed to be locked before.  ABSTIME is an</span><br><span class="hljs-comment">   absolute time specification; zero is the beginning of the epoch</span><br><span class="hljs-comment">   (00:00:00 GMT, January 1, 1970).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_cond_timedwait</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_cond_t</span> *__restrict __cond,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">pthread_mutex_t</span> *__restrict __mutex,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> struct timespec *__restrict __abstime)</span></span><br><span class="hljs-function">     __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span></span>;<br><br><span class="hljs-comment">/* Functions for handling condition variable attributes.  */</span><br><br><span class="hljs-comment">/* Initialize condition variable attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_condattr_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_condattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy condition variable attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_condattr_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_condattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Get the process-shared flag of the condition variable attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_condattr_getpshared</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_condattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function">__restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> *__restrict __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the process-shared flag of the condition variable attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_condattr_setpshared</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_condattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> __pshared)</span> __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Get the clock selected for the condition variable attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_condattr_getclock</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_condattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function">      __restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">__clockid_t</span> *__restrict __clock_id)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the clock selected for the condition variable attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_condattr_setclock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_condattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">__clockid_t</span> __clock_id)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Functions to handle spinlocks.  */</span><br><br><span class="hljs-comment">/* Initialize the spinlock LOCK.  If PSHARED is nonzero the spinlock can</span><br><span class="hljs-comment">   be shared between different processes.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_spin_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_spinlock_t</span> *__lock, <span class="hljs-keyword">int</span> __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy the spinlock LOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_spin_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_spinlock_t</span> *__lock)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Wait until spinlock LOCK is retrieved.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_spin_lock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_spinlock_t</span> *__lock)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Try to lock spinlock LOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_spin_trylock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_spinlock_t</span> *__lock)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Release spinlock LOCK.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_spin_unlock</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_spinlock_t</span> *__lock)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Functions to handle barriers.  */</span><br><br><span class="hljs-comment">/* Initialize BARRIER with the attributes in ATTR.  The barrier is</span><br><span class="hljs-comment">   opened when COUNT waiters arrived.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_barrier_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_barrier_t</span> *__restrict __barrier,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_barrierattr_t</span> *__restrict</span></span><br><span class="hljs-params"><span class="hljs-function"> __attr, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __count)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy a previously dynamically initialized barrier BARRIER.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_barrier_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_barrier_t</span> *__barrier)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Wait on barrier BARRIER.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_barrier_wait</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_barrier_t</span> *__barrier)</span></span><br><span class="hljs-function">     __THROWNL __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><br><span class="hljs-comment">/* Initialize barrier attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_barrierattr_init</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_barrierattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy previously dynamically initialized barrier attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_barrierattr_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_barrierattr_t</span> *__attr)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Get the process-shared flag of the barrier attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_barrierattr_getpshared</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">pthread_barrierattr_t</span> *</span></span><br><span class="hljs-params"><span class="hljs-function">   __restrict __attr,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> *__restrict __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span></span>;<br><br><span class="hljs-comment">/* Set the process-shared flag of the barrier attribute ATTR.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_barrierattr_setpshared</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_barrierattr_t</span> *__attr,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">int</span> __pshared)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling thread-specific data.  */</span><br><br><span class="hljs-comment">/* Create a key value identifying a location in the thread-specific</span><br><span class="hljs-comment">   data area.  Each thread maintains a distinct thread-specific data</span><br><span class="hljs-comment">   area.  DESTR_FUNCTION, if non-NULL, is called with the value</span><br><span class="hljs-comment">   associated to that key when the key is destroyed.</span><br><span class="hljs-comment">   DESTR_FUNCTION is not called if the value associated is NULL when</span><br><span class="hljs-comment">   the key is destroyed.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_key_create</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_key_t</span> *__key,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">void</span> (*__destr_function) (<span class="hljs-keyword">void</span> *))</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span></span>;<br><br><span class="hljs-comment">/* Destroy KEY.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_key_delete</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_key_t</span> __key)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Return current value of the thread-specific data slot identified by KEY.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">pthread_getspecific</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_key_t</span> __key)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Store POINTER in the thread-specific data slot identified by KEY. */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_setspecific</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_key_t</span> __key,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__pointer)</span> __THROW </span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Get ID of CPU-time clock for thread THREAD_ID.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_getcpuclockid</span> <span class="hljs-params">(<span class="hljs-keyword">pthread_t</span> __thread_id,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">__clockid_t</span> *__clock_id)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Install handlers to be called when a new process is created with FORK.</span><br><span class="hljs-comment">   The PREPARE handler is called in the parent process just before performing</span><br><span class="hljs-comment">   FORK. The PARENT handler is called in the parent process just after FORK.</span><br><span class="hljs-comment">   The CHILD handler is called in the child process.  Each of the three</span><br><span class="hljs-comment">   handlers can be NULL, meaning that no handler needs to be called at that</span><br><span class="hljs-comment">   point.</span><br><span class="hljs-comment">   PTHREAD_ATFORK can be called several times, in which case the PREPARE</span><br><span class="hljs-comment">   handlers are called in LIFO order (last added with PTHREAD_ATFORK,</span><br><span class="hljs-comment">   first called before FORK), and the PARENT and CHILD handlers are called</span><br><span class="hljs-comment">   in FIFO (first added, first called).  */</span><br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pthread_atfork</span> <span class="hljs-params">(<span class="hljs-keyword">void</span> (*__prepare) (<span class="hljs-keyword">void</span>),</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">void</span> (*__parent) (<span class="hljs-keyword">void</span>),</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">void</span> (*__child) (<span class="hljs-keyword">void</span>))</span> __THROW</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br><span class="hljs-comment">/* Optimizations.  */</span><br>__extern_inline <span class="hljs-keyword">int</span><br>__NTH (pthread_equal (<span class="hljs-keyword">pthread_t</span> __thread1, <span class="hljs-keyword">pthread_t</span> __thread2))<br>&#123;<br>  <span class="hljs-keyword">return</span> __thread1 == __thread2;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">/* pthread.h */</span></span><br></code></pre></div></td></tr></table></figure><p>参考：《Linux C 一站式编程》</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标准 C 语言头文件</title>
    <link href="/2021/04/25/%E6%A0%87%E5%87%86-C-%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2021/04/25/%E6%A0%87%E5%87%86-C-%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="ISO-C-标准定义的头文件（24-项）"><a href="#ISO-C-标准定义的头文件（24-项）" class="headerlink" title="ISO C 标准定义的头文件（24 项）"></a>ISO C 标准定义的头文件（24 项）</h2><ol><li><p><code>&lt;assert.h&gt;</code> 验证程序断言</p></li><li><p><code>&lt;complex.h&gt;</code> 支持复数算术运算</p></li><li><p><code>&lt;ctype.h&gt;</code> 字符类型</p></li><li><p><code>&lt;errno.h&gt;</code> 出错码</p></li><li><p><code>&lt;fenv.h&gt;</code> 浮点环境</p></li><li><p><code>&lt;float.h&gt;</code> 浮点常量</p></li><li><p><code>&lt;inttypes.h&gt;</code> 整型格式转换</p></li><li><p><code>&lt;iso646.h&gt;</code> 替代关系操作符宏</p></li><li><p><code>&lt;limits.h&gt;</code> 实现常量</p></li><li><p><code>&lt;locale.h&gt;</code> 局部类别</p></li><li><p><code>&lt;math.h&gt;</code> 数学常量</p></li><li><p><code>&lt;setjmp.h&gt;</code> 非局部goto</p></li><li><p><code>&lt;signal.h&gt;</code> 信号</p></li><li><p><code>&lt;stdarg.h&gt;</code> 可变参数表</p></li><li><p><code>&lt;stdbool.h&gt;</code> 布尔类型和值</p></li><li><p><code>&lt;stddef.h&gt;</code> 标准定义</p></li><li><p><code>&lt;stdint.h&gt;</code> 整型</p></li><li><p><code>&lt;stdio.h&gt;</code> 标准I/O库</p></li><li><p><code>&lt;stdlib.h&gt;</code> 实用程序库函数</p></li><li><p><code>&lt;string.h&gt;</code> 字符串操作</p></li><li><p><code>&lt;tgmath.h&gt;</code> 通用类型数学宏</p></li><li><p><code>&lt;time.h&gt;</code> 日期和时间</p></li><li><p><code>&lt;wchar.h&gt;</code> 宽字符支持</p></li><li><p><code>&lt;wctype.h&gt;</code> 宽字符分类和映射支持</p></li></ol><h2 id="POSIX-标准规定的必须的头文件（26-项）"><a href="#POSIX-标准规定的必须的头文件（26-项）" class="headerlink" title="POSIX 标准规定的必须的头文件（26 项）"></a>POSIX 标准规定的必须的头文件（26 项）</h2><ol><li><p><code>&lt;dirent.h&gt;</code> 目录项</p></li><li><p><code>&lt;fcntl.h&gt;</code> 文件控制</p></li><li><p><code>&lt;fnmatch.h&gt;</code> 文件名匹配类型</p></li><li><p><code>&lt;glob.h&gt;</code> 路径名模式匹配类型</p></li><li><p><code>&lt;grp.h&gt;</code> 组文件</p></li><li><p><code>&lt;netdb.h&gt;</code> 网络数据库操作</p></li><li><p><code>&lt;pwd.h&gt;</code> 口令文件</p></li><li><p><code>&lt;regex.h&gt;</code> 正则表达式</p></li><li><p><code>&lt;tar.h&gt;</code> tar归档值</p></li><li><p><code>&lt;termios.h&gt;</code> 终端I/O</p></li><li><p><code>&lt;unistd.h&gt;</code> 符号常量</p></li><li><p><code>&lt;utime.h&gt;</code> 文件时间</p></li><li><p><code>&lt;wordexp.h&gt;</code> 字扩展类型</p></li><li><p><code>&lt;arpa/inet.h&gt;</code> Internet定义</p></li><li><p><code>&lt;net/if.h&gt;</code> 套接字本地接口</p></li><li><p><code>&lt;netinet/in.h&gt;</code> Internet地址族</p></li><li><p><code>&lt;netinet/tcp.h&gt;</code> 传输控制协议定义</p></li><li><p><code>&lt;sys/mman.h&gt;</code> 内存管理声明</p></li><li><p><code>&lt;sys/select.h&gt;</code> select函数</p></li><li><p><code>&lt;sys/socket.h&gt;</code> 套接字接口</p></li><li><p><code>&lt;sys/stat.h&gt;</code> 文件状态</p></li><li><p><code>&lt;sys/times.h&gt;</code> 进程时间</p></li><li><p><code>&lt;sys/types.h&gt;</code> 基本系统数据类型</p></li><li><p><code>&lt;sys/un.h&gt;</code> UNIX域套接字定义</p></li><li><p><code>&lt;sys/utsname.h&gt;</code> 系统名</p></li><li><p><code>&lt;sys/wait.h&gt;</code> 进程控制</p></li></ol><h2 id="POSIX-标准定义的-XSI-扩展头文件（26-项）"><a href="#POSIX-标准定义的-XSI-扩展头文件（26-项）" class="headerlink" title="POSIX 标准定义的 XSI 扩展头文件（26 项）"></a>POSIX 标准定义的 XSI 扩展头文件（26 项）</h2><ol><li><p><code>&lt;cpio.h&gt;</code> cpio归档值</p></li><li><p><code>&lt;dlfcn.h&gt;</code> 动态链接</p></li><li><p><code>&lt;fmtmsg.h&gt;</code> 消息显示结构</p></li><li><p><code>&lt;ftw.h&gt;</code> 文件树漫游</p></li><li><p><code>&lt;iconv.h&gt;</code> 代码集转换实用程序</p></li><li><p><code>&lt;langinfo.h&gt;</code> 语言信息常量</p></li><li><p><code>&lt;libgen.h&gt;</code> 模式匹配函数定义</p></li><li><p><code>&lt;monetary.h&gt;</code> 货币类型</p></li><li><p><code>&lt;ndbm.h&gt;</code> 数据库操作</p></li><li><p><code>&lt;nl_types.h&gt;</code> 消息类别</p></li><li><p><code>&lt;poll.h&gt;</code> 轮询函数</p></li><li><p><code>&lt;search.h&gt;</code> 搜索表</p></li><li><p><code>&lt;strings.h&gt;</code> 字符串操作</p></li><li><p><code>&lt;syslog.h&gt;</code> 系统出错日志记录</p></li><li><p><code>&lt;ucontext.h&gt;</code> 用户上下文</p></li><li><p><code>&lt;ulimit.h&gt;</code> 用户限制</p></li><li><p><code>&lt;utmpx.h&gt;</code> 用户帐户数据库</p></li><li><p><code>&lt;sys/ipc.h&gt;</code> IPC</p></li><li><p><code>&lt;sys/msg.h&gt;</code> 消息队列</p></li><li><p><code>&lt;sys/resource.h&gt;</code> 资源操作</p></li><li><p><code>&lt;sys/sem.h&gt;</code> 信号量</p></li><li><p><code>&lt;sys/shm.h&gt;</code> 共享存储</p></li><li><p><code>&lt;sys/statvfs.h&gt;</code> 文件系统信息</p></li><li><p><code>&lt;sys/time.h&gt;</code> 时间类型</p></li><li><p><code>&lt;sys/timeb.h&gt;</code> 附加的日期和时间定义</p></li><li><p><code>&lt;sys/uio.h&gt;</code> 矢量I/O操作</p></li></ol><h2 id="POSIX-标准定义的可选头文件（8-项）"><a href="#POSIX-标准定义的可选头文件（8-项）" class="headerlink" title="POSIX 标准定义的可选头文件（8 项）"></a>POSIX 标准定义的可选头文件（8 项）</h2><ol><li><p><code>&lt;aio.h&gt;</code> 异步I/O</p></li><li><p><code>&lt;mqueue.h&gt;</code> 消息队列</p></li><li><p><code>&lt;pthread.h&gt;</code> 线程</p></li><li><p><code>&lt;sched.h&gt;</code> 执行调度</p></li><li><p><code>&lt;semaphore.h&gt;</code> 信号量</p></li><li><p><code>&lt;spawn.h&gt;</code> 实时spawn接口</p></li><li><p><code>&lt;stropts.h&gt;</code> XSI STREAMS接口</p></li><li><p><code>&lt;trace.h&gt;</code> 时间跟踪</p></li></ol><p>注：POSIX 的全称是 Portable Operating System Interface，意思是<strong>可移植操作系统接口</strong>，不过，这里的移植，主要是针对各种 Unix 系统来说的，而 X 则表明其对 Unix API 的传承。</p>]]></content>
    
    
    <categories>
      
      <category>C 语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C 语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于计数排序的稳定性及其对于基数排序的影响</title>
    <link href="/2021/04/22/%E5%85%B3%E4%BA%8E%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%8F%8A%E5%85%B6%E5%AF%B9%E4%BA%8E%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <url>/2021/04/22/%E5%85%B3%E4%BA%8E%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%8F%8A%E5%85%B6%E5%AF%B9%E4%BA%8E%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇博客的主要目的是记录以下对于计数排序稳定性及其对基数排序的影响的理解，故对于算法本身不会作详细描述。</p><h3 id="计数排序的稳定性"><a href="#计数排序的稳定性" class="headerlink" title="计数排序的稳定性"></a>计数排序的稳定性</h3><p>在《算法导论》中，计数排序的大概思路是</p><ul><li>1、利用一个辅助数组 C 记录原数组 A 的各个元素的计数</li><li>2、对辅助数组 C 进行处理，即 <code>C[i] = C[i] + C[i - 1]</code></li><li>3、对原数组 A 从后往前依次进行重新放置元素到结果数组 B 中，使之到达有序状态</li></ul><p>伪代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422164501.png" alt="20210422164501"></p><p>下面我们具体来解释一下计数排序的稳定性问题。</p><p>首先，我们要弄清楚一件事情，就是稳定性的定义是什么？所谓排序的稳定性，是指如果数组中有重复的元素（值相等），那么数组在排完序的前后，这些重复的元素的相对位置保持不变。简单一点讲，就是，比如原来的数组 A 中有两个相等的元素 <code>A[i]</code> 和 <code>A[j]</code>，并且 <code>A[i]</code> 在 <code>A[j]</code> 的前面，那么，排完序之后，<code>A[i]</code> 还是在 <code>A[j]</code> 的前面。我们称能保持这种性质的排序是稳定的。</p><p>在上面的伪代码中，第 10 到 12 行，也就是最后处理数组的一步，对于 j，我们是从后往前进行遍历的，那么，这样可以保证排序是稳定的。</p><p>我们借助书中的例子来理解这一点。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422165446.png" alt="20210422165446"></p><p>原数组 A 中有 3 个 <code>3</code>，我们假设排好序的数组中放置所有 <code>3</code> 的区域是 <code>B[i..j]</code>，那么，我们按照书中的次序，即从后往前往结果数组 <code>B</code> 中放置元素时，可以保证所有的 <code>3</code> 维持原来在 <code>A</code> 数组中的相对次序。</p><p>相应地，如果我们最后一步是从前往后处理数组的元素的话，那么，所有的 <code>3</code> 的相对位置会正好反过来。这与稳定性的要求相悖。</p><p>需要说明的一点是，对于计数排序本身，不管采用具有稳定性的排序或是采用不具有稳定性的排序，对于最后排序结果的正确性是没有影响的。</p><h3 id="计数排序稳定性对于基数排序的影响"><a href="#计数排序稳定性对于基数排序的影响" class="headerlink" title="计数排序稳定性对于基数排序的影响"></a>计数排序稳定性对于基数排序的影响</h3><p>书上的基数排序是先按最低有效位进行排序的，排序的示例过程如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422170446.png" alt="20210422170446"></p><p>如果我们按照具有稳定性的计数排序，那么，很容易推出，基数排序是可以正常运转的。</p><p>然而，当我们采用另一种不具有稳定性的计数排序来给数据的每一位进行排序的话，那么最后排序的正确性是无法得到保证的。举个例子说明这一点：</p><p>我们假设有 4 个待排元素，当计数排序不稳定时，排序过程如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422173114.png" alt="20210422173114"></p><p>我们发现最后的结果是不对的。</p><p>我们只需要稍微回想一下基数排序的排序过程，应该就能明白针对单位数字排序的稳定性对于基数排序的重要性了。</p><h3 id="计数排序的代码实现"><a href="#计数排序的代码实现" class="headerlink" title="计数排序的代码实现"></a>计数排序的代码实现</h3><p>计数排序的 <code>Python</code> 实现</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_sort</span>(<span class="hljs-params">A: <span class="hljs-built_in">list</span>, B: <span class="hljs-built_in">list</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计数排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param B: 排好序的结果数组</span><br><span class="hljs-string">    :param k: A 中元素最大值</span><br><span class="hljs-string">    :return: B</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    C = []<br>    <span class="hljs-comment"># 初始化 C 为 k + 1 个 0，索引是从 0 到 k</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k + <span class="hljs-number">1</span>):<br>        C.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(B)):<br>        C[A[j]] = C[A[j]] + <span class="hljs-number">1</span> <span class="hljs-comment"># 给数组 A 中的所有不同的数字计数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>        C[i] = C[i] + C[i - <span class="hljs-number">1</span>] <span class="hljs-comment"># 计算累加和</span><br>    <span class="hljs-comment"># 按从后往前的顺序从 A 中取数据，然后根据规则放入 B 中</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        B[C[A[j]] - <span class="hljs-number">1</span>] = A[j] <span class="hljs-comment"># 注意 B 的索引是从 0 开始的</span><br>        C[A[j]] = C[A[j]] - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br>    B = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A))]<br>    k = <span class="hljs-built_in">max</span>(A)<br>    count_sort(A, B, k)<br>    <span class="hljs-built_in">print</span>(B)<br><span class="hljs-comment"># output: [2, 2, 3, 3, 3, 4, 5, 10]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>算法导论</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏（去掉）Hexo 命令行执行 hexo d 时出现的 warning LF will be replaced by CRLF 警告信息</title>
    <link href="/2021/04/21/%E9%9A%90%E8%97%8F%EF%BC%88%E5%8E%BB%E6%8E%89%EF%BC%89Hexo-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C-hexo-d-%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84-warning-LF-will-be-replaced-by-CRLF-%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF/"/>
    <url>/2021/04/21/%E9%9A%90%E8%97%8F%EF%BC%88%E5%8E%BB%E6%8E%89%EF%BC%89Hexo-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C-hexo-d-%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84-warning-LF-will-be-replaced-by-CRLF-%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Hexo 在部署到 Github 上时，即执行 <code>hexo d</code> 命令时，命令行出现这样的警告</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210421221511.png" alt="20210421221511"></p><p>这个警告表示 Git 会把 <code>LF</code> 替换为 <code>CRLF</code>，这个警告并没有什么不好的影响，所以我决定把它给隐藏掉。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>Git 命令行输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git config --global core.autocrlf <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更改 VSCode 的缩进空格数</title>
    <link href="/2021/04/14/%E6%9B%B4%E6%94%B9-VSCode-%E7%9A%84%E7%BC%A9%E8%BF%9B%E7%A9%BA%E6%A0%BC%E6%95%B0/"/>
    <url>/2021/04/14/%E6%9B%B4%E6%94%B9-VSCode-%E7%9A%84%E7%BC%A9%E8%BF%9B%E7%A9%BA%E6%A0%BC%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>VSCode 出现了一个吊诡的 Bug，之前按 Tab 键一直是好好的 4 个空格的大小，今天突然就变成了 2 个空格大小，而且改 Preference 中的设置竟然没有作用，</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414133831.png" alt="20210414133831"></p><p>于是乎，寻找到了一种新的方法。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>我们可以直接点击下面的状态栏，然后 change view，</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134152.png" alt="20210414134152"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134121.png" alt="20210414134121"></p><p>将 2 改成 4 即可</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134233.png" alt="20210414134233"></p><p>改完后状态栏是这样的</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134013.png" alt="20210414134013"></p><p>这下就 ok 了。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这里附上打开和关闭下方状态栏的方法</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134451.png" alt="20210414134451"></p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django.template.exceptions.TemplateSyntaxError: staticfiles is not a registered tag library. 问题解决</title>
    <link href="/2021/04/14/django-template-exceptions-TemplateSyntaxError-staticfiles-is-not-a-registered-tag-library-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/04/14/django-template-exceptions-TemplateSyntaxError-staticfiles-is-not-a-registered-tag-library-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Django 在加载静态文件时报了一个错误</p><div class="hljs code-wrapper"><pre><code>django.template.exceptions.TemplateSyntaxError: staticfiles is not a registered tag library.</code></pre></div><p>导致加载不出来 html 页面</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>把模板文件（即 html 文件）中的</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;% load staticfiles %&#125;<br>&#123;% load static from staticfiles %&#125;<br>&#123;% load admin_static %&#125;<br></code></pre></div></td></tr></table></figure><p>改成</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;% load static %&#125;<br></code></pre></div></td></tr></table></figure><p>按：出现这样原因其实是版本的问题，现在用的是 Django 3.0 版本，而之前则是 Django 2.0。</p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django 编写 URL 相关（普通和正则）</title>
    <link href="/2021/04/13/Django-%E7%BC%96%E5%86%99-URL-%E7%9B%B8%E5%85%B3%EF%BC%88%E6%99%AE%E9%80%9A%E5%92%8C%E6%AD%A3%E5%88%99%EF%BC%89/"/>
    <url>/2021/04/13/Django-%E7%BC%96%E5%86%99-URL-%E7%9B%B8%E5%85%B3%EF%BC%88%E6%99%AE%E9%80%9A%E5%92%8C%E6%AD%A3%E5%88%99%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>正规详细的参考资料可以参考官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/topics/http/urls/">https://docs.djangoproject.com/zh-hans/3.2/topics/http/urls/</a></p><p>这里仅仅是记录一下几个我在学习过程中的例子和踩过的坑。</p><h3 id="示例一：编写一个简单的-URL"><a href="#示例一：编写一个简单的-URL" class="headerlink" title="示例一：编写一个简单的 URL"></a>示例一：编写一个简单的 URL</h3><p>首先，在站点目录的 <code>url.py</code> 中编写 URL 规则</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413195445.png" alt="20210413195445"></p><p>这个是创建项目（使用 PyCharm）时自动生成的目录。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;index.urls&#x27;</span>)), <span class="hljs-comment"># 函数 include() 允许引用其它 URLconfs，URL 为空，代表网站的域名是 localhost(127.0.0.1:8000)，通常是网站的首页</span><br>]<br></code></pre></div></td></tr></table></figure><p>说明</p><ul><li><code>from django.urls import include</code> 这行代码对应 <code>path(&#39;&#39;, include(&#39;index.urls&#39;))</code>，使用自己加的 APP 的文件下的 <code>urls.py</code> 必须要这样做</li></ul><p>然后在 index 文件夹下编写 <code>urls.py</code>，上面引用的 <code>index.urls</code> 就是这个文件</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413200431.png" alt="20210413200431"></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>]<br></code></pre></div></td></tr></table></figure><p>说明</p><ul><li>这里的 <code>from . import views</code> 表示引用当前文件夹下的 <code>views.py</code></li></ul><p>然后我们需要在 <code>views.py</code> 文件中编写 <code>index()</code> 函数</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>注释下面的代码即后加的代码。</p><p>最后，我们可以运行项目，然后在浏览器中打开 <code>http://127.0.0.1:8000/</code> 测试一下了</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413200846.png" alt="20210413200846"></p><p>因为我们之前的 <code>path()</code> 第一个参数设置的是空字符串，所以，我们在浏览器地址栏输入的地址后，就会最终执行 <code>index()</code> 函数，然后显示相关信息。</p><h3 id="示例二，带变量的-URL"><a href="#示例二，带变量的-URL" class="headerlink" title="示例二，带变量的 URL"></a>示例二，带变量的 URL</h3><p>注意，下面的操作全部是在 <code>index</code> 文件夹下。</p><h4 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>    <span class="hljs-comment"># 添加带有字符类型、整型和 slug 的 URL</span><br>    path(<span class="hljs-string">&#x27;&lt;year&gt;/&lt;int:month&gt;/&lt;slug:day&gt;&#x27;</span>, views.mydate), <span class="hljs-comment"># 这里的 year </span><br>]<br></code></pre></div></td></tr></table></figure><p>然后编写 <code>mydate()</code> 函数</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mydate</span>(<span class="hljs-params">request, year, month, day</span>):</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-built_in">str</span>(year) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(month) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(day))<br></code></pre></div></td></tr></table></figure><p>接下来的操作没什么不同。</p><h4 id="正则表达式写法"><a href="#正则表达式写法" class="headerlink" title="正则表达式写法"></a>正则表达式写法</h4><p>这也是我踩坑的写法。</p><p><code>urls.py</code> 文件</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>    <span class="hljs-comment"># 添加带有字符类型、整型和 slug 的 URL</span><br>    <span class="hljs-comment"># path(&#x27;&lt;year&gt;/&lt;int:month&gt;/&lt;slug:day&gt;&#x27;, views.mydate), # 这里的 year 相当于 str:year</span><br>    re_path(<span class="hljs-string">&#x27;(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;).html$&#x27;</span>, views.mydate),<br>]<br></code></pre></div></td></tr></table></figure><p>说明</p><ul><li>这里正则表达式最好要以 <code>$</code> 结尾，不然，在 <code>.html</code> 后面输入无限长的字符串程序也能正常访问。</li></ul><p>然后编写 <code>mydate()</code> 函数</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mydate</span>(<span class="hljs-params">request, year, month, day</span>):</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-built_in">str</span>(year) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(month) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(day))<br></code></pre></div></td></tr></table></figure><p>然后运行，</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413201701.png" alt="20210413201701"></p><p>这里是正确的写法。我踩的坑其实是把正则表达式给写错了，具体就是多写了一个花括号 <code>&#125;</code>，然后访问 URL 时就总是 404。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在写上面的正则表达式时，我测试过这样一种写法</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">re_path(<span class="hljs-string">&#x27;(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.mydate),<br></code></pre></div></td></tr></table></figure><p>即，利用正则表达式的规则，强制 URL 必须以正斜杠结尾，但是，实际测试时，发现结尾不写正斜杠也能够正常访问。原因是 Django 中有这样一个配置 <code>APPEND_SLASH</code>，它的默认值是 <code>True</code>，作用是如果 URL 结尾没有正斜杠，那么 Django 会默认把它加在末尾。这个变量我们可以在 <code>django/conf/global_settings</code> 中找到。如果我们想要更改其为 <code>False</code>，只需要在项目的站点目录下的 <code>settings.py</code> 中写下如下代码即可</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">APPEND_SLASH = <span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><p><code>APPEND_SLASH</code> 在源码中的位置 ↓</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413202800.png" alt="20210413202800"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413202721.png" alt="20210413202721"></p><p>参考：<a href="https://stackoverflow.com/questions/45784191/django-is-append-slash-set-to-true-even-if-not-in-settings-py">stackoverflow</a> <a href="https://www.osgeo.cn/django/topics/http/urls.html">文档</a> <a href="https://docs.djangoproject.com/zh-hans/3.2/topics/http/urls/">官方文档</a> 《玩转 Django 2.0 - 黄永祥》</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Linux 下，编写脚本或批处理。功能：在指定目录中全部 txt 文件的末尾追加一行，写入今天日期时间</title>
    <link href="/2021/04/09/%E5%9C%A8-Linux-%E4%B8%8B%EF%BC%8C%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E3%80%82%E5%8A%9F%E8%83%BD%EF%BC%9A%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%85%A8%E9%83%A8-txt-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%AB%E5%B0%BE%E8%BF%BD%E5%8A%A0%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%86%99%E5%85%A5%E4%BB%8A%E5%A4%A9%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <url>/2021/04/09/%E5%9C%A8-Linux-%E4%B8%8B%EF%BC%8C%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E3%80%82%E5%8A%9F%E8%83%BD%EF%BC%9A%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%85%A8%E9%83%A8-txt-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%AB%E5%B0%BE%E8%BF%BD%E5%8A%A0%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%86%99%E5%85%A5%E4%BB%8A%E5%A4%A9%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>脚本如下</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>filenames=$(ls <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>*.txt)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$filenames</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-variable">$filenames</span><br><span class="hljs-keyword">do</span><br>        regular=$(tail -n 1 $1<span class="hljs-variable">$file</span>)<br>        <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$regular</span>&quot;</span> =~ [0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;* ]];<span class="hljs-keyword">then</span><br>                sed -i <span class="hljs-string">&#x27;$d&#x27;</span> $1<span class="hljs-variable">$file</span><br>                <span class="hljs-built_in">echo</span> `date +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>` &gt;&gt; $1<span class="hljs-variable">$file</span><br>        <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">echo</span> `date +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>` &gt;&gt; $1<span class="hljs-variable">$file</span><br>        <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware 安装 Ubuntu 18.04</title>
    <link href="/2021/04/08/VMware-%E5%AE%89%E8%A3%85-Ubuntu-18-04/"/>
    <url>/2021/04/08/VMware-%E5%AE%89%E8%A3%85-Ubuntu-18-04/</url>
    
    <content type="html"><![CDATA[<p>首先，准备好 Ubuntu 的镜像，然后开始。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194653.png" alt="20210318194653"></p><p>这里选择自定义</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194751.png" alt="20210318194751"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194849.png" alt="20210318194849"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194907.png" alt="20210318194907"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195103.png" alt="20210318195103"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195341.png" alt="20210318195341"></p><p>这里分配了 4 GB 内存</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195416.png" alt="20210318195416"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195454.png" alt="20210318195454"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195518.png" alt="20210318195518"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195529.png" alt="20210318195529"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195559.png" alt="20210318195559"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195702.png" alt="20210318195702"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195718.png" alt="20210318195718"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195738.png" alt="20210318195738"></p><p>然后点击完成即可。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195911.png" alt="20210318195911"></p><p>之后启动虚拟机即可。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318200211.png" alt="20210318200211"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318200238.png" alt="20210318200238"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318200405.png" alt="20210318200405"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202515.png" alt="20210318202515"></p><p>这里的清空磁盘只是清空虚拟磁盘，所以不必在意。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202646.png" alt="20210318202646"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202727.png" alt="20210318202727"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202824.png" alt="20210318202824"></p><p>注意，安装完毕之后，重启时出现 <code>please remove the installation...</code>，解决办法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318203601.png" alt="20210318203601"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 下为 Linux 内核增加 2 个新的系统调用，并启用新的内核</title>
    <link href="/2021/04/07/Ubuntu-%E4%B8%8B%E4%B8%BA-Linux-%E5%86%85%E6%A0%B8%E5%A2%9E%E5%8A%A0-2-%E4%B8%AA%E6%96%B0%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%8C%E5%B9%B6%E5%90%AF%E7%94%A8%E6%96%B0%E7%9A%84%E5%86%85%E6%A0%B8/"/>
    <url>/2021/04/07/Ubuntu-%E4%B8%8B%E4%B8%BA-Linux-%E5%86%85%E6%A0%B8%E5%A2%9E%E5%8A%A0-2-%E4%B8%AA%E6%96%B0%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%8C%E5%B9%B6%E5%90%AF%E7%94%A8%E6%96%B0%E7%9A%84%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h3 id="下载内核"><a href="#下载内核" class="headerlink" title="下载内核"></a>下载内核</h3><p>首先，到官网（<a href="https://www.kernel.org/">https://www.kernel.org/</a>）下载内核。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407193656.png" alt="20210407193656"></p><p>因为之前编译过一次内核，所以这次没有选择最新的 <code>5.11.11</code> 版本。</p><p>下载完之后，直接拖进虚拟机的任意一个目录即可。</p><h3 id="解压内核压缩包"><a href="#解压内核压缩包" class="headerlink" title="解压内核压缩包"></a>解压内核压缩包</h3><p>进入刚刚放置内核文件的目录，右键解压，或者在命令行解压</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar -Jxvf linux-5.11.11.tar.xz<br></code></pre></div></td></tr></table></figure><p>注意，<code>tar -Jxvf</code> 的 <code>J</code> 要大写。</p><p>然后，将解压好的文件从当前目录移动到 <code>/usr/src/</code> 目录下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo mv linux-5.10.27/ /usr/src/<br></code></pre></div></td></tr></table></figure><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><p>安装前，先执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><p>然后，依次安装下面的依赖</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get install libncurses5-dev openssl libssl-dev<br>$ sudo apt-get install build-essential openssl<br>$ sudo apt-get install pkg-config<br>$ sudo apt-get install libc6-dev<br>$ sudo apt-get install bison<br>$ sudo apt-get install flex<br>$ sudo apt-get install libelf-dev<br>$ sudo apt-get install zlibc minizip<br>$ sudo apt-get install libidn11-dev libidn11<br></code></pre></div></td></tr></table></figure><p>如果以前有安装过这些依赖，则跳过这一步。</p><h3 id="添加自定义的系统调用"><a href="#添加自定义的系统调用" class="headerlink" title="添加自定义的系统调用"></a>添加自定义的系统调用</h3><p>进入相关目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/src/linux-5.10.27/<br></code></pre></div></td></tr></table></figure><p>打开可以向其中添加自定义系统调用号的文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit arch/x86/entry/syscalls/syscall_64.tbl <br></code></pre></div></td></tr></table></figure><p>如图所示，442 和 443 是自己添加的系统调用的调用号</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408222421.png" alt="20210408222421"></p><p>保存后关闭窗口。</p><p>需要注意的一点是，这里的第三列的内容是和后面的 <code>sys_</code> 后面的内容是一致的，千万不要把它们搞错了！我就是因为这个问题导致后面内核编译到最后一步时，报了一个找不到我自己定义的函数的引用。</p><p>还有，这里使用 <code>sudo gedit</code> 会报一些 warning，这个不要理会，这个是 gedit 本身的问题，它在命令行调用就会出现这样的警告。</p><p>然后输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit include/linux/syscalls.h <br></code></pre></div></td></tr></table></figure><p>编辑文件，添加函数声明，这里的函数声明应该与上一步定义的系统调用中的函数一致</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408222944.png" alt="20210408222944"></p><p>添加系统调用的函数定义</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit kernel/sys.c<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* My own system calls */</span><br>SYSCALL_DEFINE0(first)<br>&#123;<br>        printk(<span class="hljs-string">&quot;My first system call\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>SYSCALL_DEFINE1(second, <span class="hljs-keyword">int</span>, number)<br>&#123;<br>        printk(<span class="hljs-string">&quot;My second system call\n&quot;</span>);<br>        printk(<span class="hljs-string">&quot;The number you enter is %d\n&quot;</span>, number);<br>        <span class="hljs-keyword">return</span> number;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408223101.png" alt="20210408223101"></p><p>这里的两个函数就是自己增加的系统调用。</p><p>使用虚拟机的朋友，建议在这里拍一个快照。</p><h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><p>首先，输入以下命令并执行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo make mrproper<br>sudo make clean<br></code></pre></div></td></tr></table></figure><p>注意，这里因为执行了 <code>clean</code>，所以下面的编译时间会有点长，大概五十分钟到一个小时不等。</p><p>然后执行以下命令，进入图形配置界面</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ make menuconfig<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407202347.png" alt="20210407202347"></p><p>这里我们直接 Save，然后退出即可，然后开始编译</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make -j4<br></code></pre></div></td></tr></table></figure><p><code>-j4</code> 表示将编译工作分成 4 个 jobs，每一个 job 分别在单独的核上运行。当然，前提是我们的机器得是多核的才行。比如，我的机器是 4 核的，这里就用 <code>-j4</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407171823.png" alt="20210407171823"></p><p>以上表示编译好了（只要最后不报错，就是编译成功了）。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make modules_install<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172434.png" alt="20210407172434"></p><p>以上表示模块安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make install<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172707.png" alt="20210407172707"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408223657.png" alt="20210408223657"></p><p>最后执行 <code>reboot</code>（即重启），然后开机检查内核版本，发现变成了我们安装的 <code>5.11.11</code>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ uname -r<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408223858.png" alt="20210408223858"></p><h3 id="检验添加的系统调用"><a href="#检验添加的系统调用" class="headerlink" title="检验添加的系统调用"></a>检验添加的系统调用</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit test.c<br></code></pre></div></td></tr></table></figure><p>然后写入以下内容</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 442 long sys_first(void)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;System call sys_first return %ld\n&quot;</span>, syscall(<span class="hljs-number">442</span>));<br><br>    <span class="hljs-comment">//443 long sys_second(int)</span><br>    <span class="hljs-keyword">long</span> temp;<br>    temp = syscall(<span class="hljs-number">443</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;System call sys_second return %ld\n&quot;</span>, temp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408224750.png" alt="20210408224750"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gcc -o <span class="hljs-built_in">test</span> test.c<br>$ sudo ./<span class="hljs-built_in">test</span><br></code></pre></div></td></tr></table></figure><p>运行结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408225000.png" alt="20210408225000"></p><p>再输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo dmesg<br></code></pre></div></td></tr></table></figure><p>查看系统进程，可以看到系统调用的输出</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408225140.png" alt="20210408225140"></p><p>可以发现，这里打印了我们之前 <code>printk</code> 中的语句。</p><p>到这里，就大功告成了。</p><p>参考：<a href="https://blog.csdn.net/weixin_44224230/article/details/89945899?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1329187.422.16177947900639469&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control">操作系统作业：Ubuntu编译一个新内核以及添加系统调用</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>操作系统作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 下编译新的 Linux 内核</title>
    <link href="/2021/04/07/Ubuntu-%E4%B8%8B%E7%BC%96%E8%AF%91%E6%96%B0%E7%9A%84-Linux-%E5%86%85%E6%A0%B8/"/>
    <url>/2021/04/07/Ubuntu-%E4%B8%8B%E7%BC%96%E8%AF%91%E6%96%B0%E7%9A%84-Linux-%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是一次操作系统布置的作业。本来第一次是布置的课后作业，只是说让编译一个新的 Linux 内核，然后我就按照本文的步骤编译并启用了新的内核。后来做实验时布置的任务又说是 “裁剪内核并编译”，真是有点懵逼。实验之前，一直在纠结裁减内核，究竟怎么裁剪嘛！因为在编译内核的过程中，有一个步骤是 <code>$ sudo make menuconfig</code>，这个里面可以选择或者去掉内核的模块，其实这里就是相当于裁剪内核了，而且我们就是在不知道裁剪内核这个概念的情况下一路走下去，最后安装的内核也是裁剪之后的内核。</p><p>最后老师在实验之前，讲了，裁剪内核这个实验我们之前做过。好吧，果然，在他眼里，裁剪内核和编译一个新的内核没有什么本质的区别。</p><h3 id="下载内核"><a href="#下载内核" class="headerlink" title="下载内核"></a>下载内核</h3><p>首先，到官网（<a href="https://www.kernel.org/">https://www.kernel.org/</a>）下载内核。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407133515.png" alt="20210407133515"></p><p>下载好之后，因为我这个 Ubuntu 是 Windows 下的虚拟机，所以，直接将文件拖入虚拟机的任意一个文件夹即可。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407134031.png" alt="20210407134031"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407134159.png" alt="20210407134159"></p><h3 id="解压-tar-xz-包"><a href="#解压-tar-xz-包" class="headerlink" title="解压 tar.xz 包"></a>解压 tar.xz 包</h3><p>进入刚刚放置内核文件的目录，右键解压，或者在命令行解压</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar -Jxvf linux-5.11.11.tar.xz<br></code></pre></div></td></tr></table></figure><p>注意，<code>tar -Jxvf</code> 的 <code>J</code> 要大写。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>安装之前，先执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><p>一般来说，安装下面的 9 个依赖就好了</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get install libncurses5-dev openssl libssl-dev<br>$ sudo apt-get install build-essential openssl<br>$ sudo apt-get install pkg-config<br>$ sudo apt-get install libc6-dev<br>$ sudo apt-get install bison<br>$ sudo apt-get install flex<br>$ sudo apt-get install libelf-dev<br>$ sudo apt-get install zlibc minizip<br>$ sudo apt-get install libidn11-dev libidn11<br></code></pre></div></td></tr></table></figure><h3 id="开始编译新的内核"><a href="#开始编译新的内核" class="headerlink" title="开始编译新的内核"></a>开始编译新的内核</h3><h4 id="进入解压出来的目录"><a href="#进入解压出来的目录" class="headerlink" title="进入解压出来的目录"></a>进入解压出来的目录</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> linux-5.11.11/<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407164541.png" alt="20210407164541"></p><p>这里可以给虚拟机拍一个快照。这是为了后续出错时，可以回到这个点。（如果不知道快照，可以自行搜索引擎搜索，这个真的很方便）</p><h4 id="使用现存内核的配置文件"><a href="#使用现存内核的配置文件" class="headerlink" title="使用现存内核的配置文件"></a>使用现存内核的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo cp /boot/config-5.11.7 .config<br></code></pre></div></td></tr></table></figure><h4 id="应用现存配置文件"><a href="#应用现存配置文件" class="headerlink" title="应用现存配置文件"></a>应用现存配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make oldconfig<br></code></pre></div></td></tr></table></figure><p>这个命令的作用是，读取现有的 <code>.config</code>（注意，这个是隐藏文件，使用 <code>ls</code> 命令无法查看）文件，并提示用户输入当前内核源中在文件中找不到的选项。 当采用现有配置并将其移至新内核时，这很有用。</p><p>遇到需要选择的选项直接选 <code>y</code> 或者回车即可。</p><h4 id="仅安装已有-module"><a href="#仅安装已有-module" class="headerlink" title="仅安装已有 module"></a>仅安装已有 module</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make localmodconfig<br></code></pre></div></td></tr></table></figure><h4 id="配置其他编译选项"><a href="#配置其他编译选项" class="headerlink" title="配置其他编译选项"></a>配置其他编译选项</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make menuconfig<br></code></pre></div></td></tr></table></figure><p>这个命令执行完之后会出现一个图形界面，如果需要裁剪内核，那么，我们需要对这里的选项进行一些配置。这里我们直接使用右方向键，跳到 <code>Exit</code> 选项，然会回车退出即可。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407202347.png" alt="20210407202347"></p><h4 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h4><p>输入以下命令开始编译</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make -j4<br></code></pre></div></td></tr></table></figure><p>这里的 <code>-j</code> 选项后面的数字表示使用多进程并发编译的意思，我这里选择 4，也可以选择 2 或者不要 <code>-j4</code> 这个选项。我这里因为使用了 4 个进程，所以编译基本在两分钟以内就完成了。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407171823.png" alt="20210407171823"></p><p>以上表示 make 好了。</p><h3 id="安装-Linux-内核"><a href="#安装-Linux-内核" class="headerlink" title="安装 Linux 内核"></a>安装 Linux 内核</h3><h4 id="返回上一级目录，然后将文件夹移动到-src-目录"><a href="#返回上一级目录，然后将文件夹移动到-src-目录" class="headerlink" title="返回上一级目录，然后将文件夹移动到 src 目录"></a>返回上一级目录，然后将文件夹移动到 src 目录</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ..<br>$ sudo mv linux-5.11.11/ /usr/src/<br></code></pre></div></td></tr></table></figure><h4 id="进入新目录，然后安装-modules"><a href="#进入新目录，然后安装-modules" class="headerlink" title="进入新目录，然后安装 modules"></a>进入新目录，然后安装 modules</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/src/linux-5.11.11/<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make modules_install<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172434.png" alt="20210407172434"></p><p>以上表示 modules 安装完成。</p><h4 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make install<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172707.png" alt="20210407172707"></p><p>以上表示新内核安装完成。</p><h3 id="检验安装成果"><a href="#检验安装成果" class="headerlink" title="检验安装成果"></a>检验安装成果</h3><p>执行以下命令检查内核版本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ uname -r<br></code></pre></div></td></tr></table></figure><p>之前是 <code>5.11.7</code></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172819.png" alt="20210407172819"></p><p>重启 Ubuntu 18.04.5 系统并检查内核版本，结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407173212.png" alt="20210407173212"></p><p>发现内核版本变成了 <code>5.11.11</code>，表明安装内核成功。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未排序数组中累加和小于或等于给定值的最长子数组长度</title>
    <link href="/2021/04/06/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E5%B0%8F%E4%BA%8E%E6%88%96%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/"/>
    <url>/2021/04/06/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E5%B0%8F%E4%BA%8E%E6%88%96%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个无序数组 arr，其中元素可正、可负、可 0。给定一个整数 k，求 arr 所有的子数组中累加和小于或等于 k 的最长子数组长度。</p><p>例如：arr = [3, -2, -4, 0, 6]，k = -2，相加和小于或等于 -2 的最长子数组为 {3, -2, -4, 0}，所以结果返回 4。</p><p>要求：时间复杂度为 $O(N)$。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>首先是 $O(NlogN)$ 时间复杂度的解法，这个解法和之前的求解未排序数组中累加和为给定值的最长数组系列问题类似。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 时间复杂度为 O(NlogN)，额外空间复杂度为 O(N)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] helpArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 辅助数组</span><br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    helpArr[<span class="hljs-number">0</span>] = sum; <span class="hljs-comment">// 第一个元素为 0，表示当没有任何数时的累加和为 0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != arr.length; i++) &#123;<br>        sum += arr[i];<br>        helpArr[i + <span class="hljs-number">1</span>] = Math.max(sum, helpArr[i]);<br>    &#125;<br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pre = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != arr.length; i++) &#123;<br>        sum += arr[i];<br>        <span class="hljs-comment">// 最关键之处</span><br>        <span class="hljs-comment">// 找到 helpArr 中大于等于 sum - k 第一次出现的位置，</span><br>        <span class="hljs-comment">// 这个位置等价于以 i 为结尾位置的长度最长的符合要求的子数组</span><br>        pre = getLessIndex(helpArr, sum - k);<br>        len = pre == -<span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : i - pre + <span class="hljs-number">1</span>;<br>        res = Math.max(res, len);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">// 二分查找，查找 arr 数组中第一次出现的大于等于 num 的索引位置，如果没找到，则返回 -1</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLessIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> high = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> mid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>        mid = low + (high - low) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] &gt;= num) &#123;<br>            res = mid;<br>            high = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>完美的 $O(N)$ 的解法，这种解法也可以看成是 “滑动窗口” 的应用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 时间复杂度为 O(N) 的解法，额外空间复杂度为 O(N) 的解法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxLengthAwesome</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span>[] minSums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length]; <span class="hljs-comment">// minSums[i] 表示必须以 arr[i] 开头的所有子数组中，能</span><br>    <span class="hljs-keyword">int</span>[] minSumEnds = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length]; <span class="hljs-comment">// minSumEnds[i] 表示得到了最小累加和的子数组的右边界</span><br>    minSums[arr.length - <span class="hljs-number">1</span>] = arr[arr.length - <span class="hljs-number">1</span>];<br>    minSumEnds[arr.length - <span class="hljs-number">1</span>] = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 从右向左遍历，填充 minSums 和 minSumEnds 的值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>        <span class="hljs-keyword">if</span> (minSums[i + <span class="hljs-number">1</span>] &lt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果 i 的右面的元素的最小累加和小于等于 0（原书这里没有等于号，但是加上等于号</span><br>            minSums[i] = arr[i] + minSums[i + <span class="hljs-number">1</span>];<br>            minSumEnds[i] = minSumEnds[i + <span class="hljs-number">1</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            minSums[i] = arr[i];<br>            minSumEnds[i] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> end = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// i 是窗口的最左位置，end 是窗口最右位置的下一个位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// 如果 end 没有越界，且当前子数组还可以继续往右扩</span><br>        <span class="hljs-keyword">while</span> (end &lt; arr.length &amp;&amp; sum + minSums[end] &lt;= k) &#123;<br>            sum += minSums[end];<br>            end = minSumEnds[end] + <span class="hljs-number">1</span>;<br>        &#125;<br>        res = Math.max(res, end - i);<br>        <span class="hljs-keyword">if</span> (end &gt; i) &#123; <span class="hljs-comment">// 窗口内还有数</span><br>            sum -= arr[i];<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 窗口已经没有数了，说明从 i 开头的所有子数组累加和都不可能小于或等于 k</span><br>            end = i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">// 测试</span><br>    GetMaxLengthAwesome_11 gmla = <span class="hljs-keyword">new</span> GetMaxLengthAwesome_11();<br>    System.out.println(gmla.maxLengthAwesome(arr, k));<br>    System.out.println(gmla.maxLength(arr, k));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code>55</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个怪异的 Bug：Press ENTER or type command to continue</title>
    <link href="/2021/04/05/%E4%B8%80%E4%B8%AA%E6%80%AA%E5%BC%82%E7%9A%84-Bug%EF%BC%9APress-ENTER-or-type-command-to-continue/"/>
    <url>/2021/04/05/%E4%B8%80%E4%B8%AA%E6%80%AA%E5%BC%82%E7%9A%84-Bug%EF%BC%9APress-ENTER-or-type-command-to-continue/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405234503.png" alt="20210405234503"></p><p>问题就是，我进入了这个 vim 的配置文件之后，敲了几下键盘，然后就陷入了出不来的死循环之中。</p><p>然而，最后，根据 vim 的命令行的提示，是使用了如下的命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">:qa!<br></code></pre></div></td></tr></table></figure><p>才成功退出来。</p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Bugs</tag>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux ls -l 命令输出结果中的 total 的含义</title>
    <link href="/2021/04/05/Linux-ls-l-%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84-total-%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2021/04/05/Linux-ls-l-%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84-total-%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405224205.png" alt="20210405224205"></p><p>我们观察这个 total 的值，显然，如果我们简单地把下面的所有文件的第五列的文件字节大小给加起来，得到的结果和这个 total 是不能画等号的。</p><p>那么，问题就来了，这个 total 究竟指的是什么呢？</p><p>我们使用 <code>ls -lh</code> 命令来查看文件的具体大小</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405224059.png" alt="20210405224059"></p><p>注意，这个命令列出来的文件大小的单位是 <code>K</code>，即 <code>KB</code>（不满 1.0 KB 的还是以字节为单位，并显示其以字节为单位应该显示的数字），但是，我们再重新加一下，发现其结果还是和 <code>total</code> 不相等。原因什么呢？</p><p>这是因为，Linux 中有一个概念，叫做 <code>Block</code>，我们可以把这个 <code>Block</code> 想象成一个容器，这个容器的容量是固定的，假设是 <code>unit_size</code>，那么，<code>total</code> 的算法是这样的，它会对每一个文件进行计算，根据文件的大小计算其需要多少个这样的容器，对于不满 <code>unit_size</code> 的我们要向上取整。注意，这里是每一个文件计算一次。</p><p>下面，举一个具体的例子。</p><p>我们首先执行一个命令，查看当前系统的 <code>Block Size</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> -<span class="hljs-built_in">fc</span> %s .<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405225101.png" alt="20210405225101"></p><p>这里发现我的系统的 <code>Block Size</code> 为 4096，单位是字节，转换成 <code>KB</code> 也就是 <code>4KB</code>，那么，我们分别来计算上面列出来的文件各自需要多少个这样的 <code>Block Size</code>。</p><ul><li>首先是 <code>_config.lanscape.yml</code>，文件大小为 0，故需要 0 个 <code>Block</code></li><li>对于 <code>_config.yml</code>，文件大小为 2.5K，故需要 1 个 <code>Block</code>，这里因为不满 4K 要取整，故最后需要 1 个 <code>Block</code>，下同</li><li>对于 <code>db.json</code>，文件大小为 22K，故需要 6 个 <code>Block</code></li><li>……</li><li>对于 <code>test.c</code>，注意这里的文件大小是 78B，也就是 78 个字节，向上取整，故需要 1 个 <code>Block</code></li><li>对于 <code>themes</code>，文件大小为 4.0K，故需要 1 个 <code>Block</code></li></ul><p>我们把所有的 <code>Block</code> 列式相加，再乘以每个 <code>Block</code> 的大小，得 </p><script type="math/tex; mode=display">(0 + 1 + 6 + 1 + 1 + 15 + 1 + 1 + 1 + 1 + 1 + 1) \times 4 = 120K</script><p>这样，结果就对得上了。</p><p>参考：<a href="https://stackoverflow.com/questions/7401704/why-doesnt-total-from-ls-l-add-up-to-total-file-sizes-listed#comment117527984_7401744">StackOverflow 相关</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux 命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有用的一些非常用的 Linux 命令</title>
    <link href="/2021/04/05/%E6%9C%89%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%B8%B8%E7%94%A8%E7%9A%84-Linux-%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/04/05/%E6%9C%89%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%B8%B8%E7%94%A8%E7%9A%84-Linux-%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="查看-Linux-的-Block-Size-的命令"><a href="#查看-Linux-的-Block-Size-的命令" class="headerlink" title="查看 Linux 的 Block Size 的命令"></a>查看 Linux 的 Block Size 的命令</h4><p>命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> -<span class="hljs-built_in">fc</span> %s .<br></code></pre></div></td></tr></table></figure><p>作用是查看 Block Size 的数值。具体效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405222210.png" alt="20210405222210"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux 命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常见命令学习与备忘</title>
    <link href="/2021/04/05/Linux-%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%87%E5%BF%98/"/>
    <url>/2021/04/05/Linux-%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%87%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h4><p><code>cat</code>，即 concatenate，中文是连接的意思。因此，如果有多个文件的话，它会把这些文件的内容拼接起来显示。</p><p>使用格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cat file1 file2...<br></code></pre></div></td></tr></table></figure><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cat _config.yml<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405185854.png" alt="20210405185854"></p><h4 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h4><p><code>ls</code>，即 list，作用是显示指定目录的内容，默认参数为当前目录。</p><p>选项参数说明</p><ul><li><code>-l</code>：list with long format，<code>l</code> 表示 long 的意思，作用是显示详细的列表</li><li><code>-F</code>：add one char of “<em>/=&gt;@|” to entries，即在列出的文件名称后加一个符号，显示文件类型信息，例如可执行文档加 `</em><code>，目录则加</code>/`</li><li><code>-lh</code>：list long format with readable file size，即列出带有具有可读性的文件大小数据的信息</li></ul><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ls -l<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405193525.png" alt="20210405193525"></p><p>上面列出的文件中，第一列表示文件模式和权限，第二列表示链接数（即 link count，不过，这里的 link 是 hard link），第三列是文件的所有者，第四列是用户组，第五列是文件大小，后面是文件最后更改的日期、时间以及文件名。</p><h4 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h4><p><code>cp</code>，即 copy，用来复制文件。</p><p>选项参数说明</p><ul><li><code>-r</code>：copy directories recursively。递归地复制文件夹。</li></ul><p>使用格式</p><p>将文件 <code>file1</code> 复制到文件 <code>file2</code>，如果 <code>file2</code> 不存在，则会自动创建:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cp file1 file2<br></code></pre></div></td></tr></table></figure><p>将多个文件（<code>file1 ... fileN</code>）复制到目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cp file1 ... fileN dir<br></code></pre></div></td></tr></table></figure><p>使用范例</p><p>将 <code>a.txt</code> 复制到 <code>b.txt</code> 中，<code>b.txt</code> 本来并不存在</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cp a.txt b.txt<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406130519.png" alt="20210406130519"></p><p>将 <code>a.txt</code> 和 <code>b.txt</code> 复制到 <code>new</code> 这个新目录中，<code>new</code> 目录必须存在，因为 <code>cp</code> 命令不会自动创建它（如果它本来不存在的话）。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406130728.png" alt="20210406130728"></p><p>附：使用 <code>cp a.txt b.txt</code> 命令时，如果 <code>b.txt</code> 中原来有内容，那么，复制完之后，<code>b.txt</code> 中原来的内容将会被 <code>a.txt</code> 中的内容覆盖掉。</p><h4 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h4><p><code>mv</code>，即 move。<code>mv</code> 主要用来将一个或多个文件或者目录从一个地方移动到另一个地方。它有两个不同的功能：</p><ul><li>(i) 重命名一个文件或者文件夹</li><li>(ii) 移动一组文件到另一个不同的文件夹中</li></ul><p>使用格式</p><p>将文件名从 <code>file1</code> 重命名为 <code>file2</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ mv file1 file2<br></code></pre></div></td></tr></table></figure><p>将多个文件（<code>file1 ... fileN</code>）移动到目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ mv file1 ... fileN dir<br></code></pre></div></td></tr></table></figure><p>使用范例</p><p>将 <code>a.txt</code> 重命名为 <code>c.txt</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ mv a.txt c.txt<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406132001.png" alt="20210406132001"></p><p>将 <code>a.txt</code> 和 <code>c.txt</code> 移动到 <code>new</code> 目录中：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ mv a.txt c.txt new<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406132402.png" alt="20210406132402"></p><h4 id="touch-命令"><a href="#touch-命令" class="headerlink" title="touch 命令"></a>touch 命令</h4><p><code>touch</code>，并不是缩写。<code>touch</code> 命令用来创建文件。如果文件已经存在，则该命令会更新文件的时间戳。</p><p>使用格式</p><p>创建一个新的文件，内容为空：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ touch file<br></code></pre></div></td></tr></table></figure><h4 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h4><p><code>rm</code>，即 remove here。<code>rm</code> 命令用来删除文件，文件一旦被删除通常无法恢复（也就是说，通过某种手段，是可以恢复的）。</p><p>默认情况下，它不会删除目录。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406133409.png" alt="20210406133409"></p><p>使用格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ rm file<br></code></pre></div></td></tr></table></figure><p>选项参数说明</p><ul><li><code>-f</code>：force deletion。强制删除。</li><li><code>-r</code>：recursive deletion。递归删除。当使用这个选项时，<code>rm</code> 可以删除目录。</li></ul><p>使用范例</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406133915.png" alt="20210406133915"></p><p>这里 <code>*</code> 表示通配符，表示匹配当前目录下的任意文件或者文件夹。</p><h4 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h4><p><code>echo</code> 命令将它的参数显示到标准输出。</p><p>使用范例</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406133206.png" alt="20210406133206"></p><h4 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h4><p><code>cd</code>，即 change directory。<code>cd</code> 命令用来设置当前工作目录。当前工作目录是指我们的进程和 shell 当前所在的目录。</p><p>使用格式</p><p>进入目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> dir<br></code></pre></div></td></tr></table></figure><p>如果不带 <code>dir</code> 参数，<code>cd</code> 命令会返回我们的个人主目录，即我们登录系统后进入的目录。</p><h4 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h4><p><code>mkdir</code>，即 make directory。<code>mkdir</code> 命令用来创建新目录。</p><p>使用格式</p><p>创建目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ mkdir dir<br></code></pre></div></td></tr></table></figure><h4 id="rmdir-命令"><a href="#rmdir-命令" class="headerlink" title="rmdir 命令"></a>rmdir 命令</h4><p><code>rmdir</code>，即 remove directory。<code>rmdir</code> 命令用来删除目录（空目录）。如果要删除的目录里面有内容（文件和其他目录），命令会执行失败。我们可以使用 <code>rm -rf</code> 来删除一个目录以及其中的所有内容。</p><p>使用格式</p><p>删除目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ rmdir dir<br></code></pre></div></td></tr></table></figure><h3 id="中级命令"><a href="#中级命令" class="headerlink" title="中级命令"></a>中级命令</h3><h4 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h4><p><code>grep</code>，即 global regular expression print 的缩写。</p><p>使用范例</p><p>显示文件 <code>/etc/passwd</code> 中包含文本 root 的所有行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ grep root /etc/passwd<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405153031.png" alt="20210405153031"></p><p>查看目录 <code>/etc</code> 中所有包含 root 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ grep root /etc/*<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405153146.png" alt="20210405153146"></p><p><code>grep</code> 有几个重要的选项：</p><ul><li><code>-i</code>：不区分大小写</li><li><code>-v</code>：反转匹配，即匹配所有不匹配的行</li><li><code>-r</code>：递归查找，意思是在当前目录下递归搜索某个内容</li><li><code>-n</code>：在结果里显示行号</li></ul><p>我具体使用过的案例是在某一个文件夹下需要递归查找 <code>footer</code> 这个字符串，并且需要显示行号，所用命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">grep footer ./themes/ -n -r<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405154002.png" alt="20210405154002"></p><h4 id="less-命令"><a href="#less-命令" class="headerlink" title="less 命令"></a>less 命令</h4><p><code>less</code> 命令可以将内容分屏显示，按 <code>空格键</code> 可查看下一屏，<code>B</code> 键查看上一屏幕，<code>Q</code> 键退出。</p><p>我们可以在 <code>less</code> 命令的输出结果中进行搜索。</p><ul><li>使用 <code>/word</code> 从当前位置向前（这里的向前，代表的是向下的意思）搜索 <code>word</code> 这个词</li><li>使用 <code>?word</code> 从当前位置向后（这里的向后，代表的是向上的意思）搜索。当找到一个匹配时，按 <code>N</code> 键跳到下一个匹配，按 <code>B</code> 键跳到上一个匹配</li></ul><p>使用范例</p><p>使用 <code>less</code> 查看输出结果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ grep ie /usr/share/dict/words | less<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405160912.png" alt="20210405160912"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405160831.png" alt="20210405160831"></p><h4 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h4><p><code>pwd</code>，即 Print Working Directory 的缩写。</p><p>功能是打印当前的工作目录名。</p><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405161309.png" alt="20210405161309"></p><h4 id="diff-命令"><a href="#diff-命令" class="headerlink" title="diff 命令"></a>diff 命令</h4><p><code>diff</code> 命令用来查看两个文件之间的不同。</p><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ diff _config.yml _config.landscape.yml<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405161628.png" alt="20210405161628"></p><h4 id="file-命令"><a href="#file-命令" class="headerlink" title="file 命令"></a>file 命令</h4><p><code>file</code> 命令用来查看一个文件的格式信息。</p><p>使用范例</p><p>查看文件 <code>_config.yml</code> 的格式信息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ file _config.yml<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405162651.png" alt="20210405162651"></p><h4 id="find-和-locate-命令"><a href="#find-和-locate-命令" class="headerlink" title="find 和 locate 命令"></a>find 和 locate 命令</h4><p><code>find</code> 命令用来在目录中寻找文件。</p><p>使用格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ find dir -name filename -<span class="hljs-built_in">print</span><br></code></pre></div></td></tr></table></figure><p>关于参数的说明</p><ul><li><code>-name filename</code>：表示查找名为 <code>filename</code> 的文件</li><li><code>-print</code>：表示显示文件的路径名。注意，这个选项是默认存在的，也就是说，上面的命令其实是等价于 <code>find dir -name filename</code> 的</li></ul><p>使用范例</p><p>查找当前目录下的 <code>_config.yml</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find . -name _config.yml -<span class="hljs-built_in">print</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405170544.png" alt="20210405170544"></p><p>这里的 <code>.</code> 和 <code>./</code> 等价，表示在当前目录下查找。注意，这个 <code>find</code> 命令是递归查找所有文件的。</p><p><code>locate</code> 命令是另外一个用来查找的命令。只是，它是在系统创建的文件索引中查找文件（因此速度更快）。有时候可能查找不到新文件，因为系统还没有将新文件加入到索引中。</p><h4 id="head-和-tail-命令"><a href="#head-和-tail-命令" class="headerlink" title="head 和 tail 命令"></a>head 和 tail 命令</h4><p><code>head</code> 命令显示文件前 10 行内容。</p><p><code>tail</code> 命令显示文件最后 10 行内容。</p><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ head /etc/passwd<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tail /etc/passwd<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405171404.png" alt="20210405171404"></p><h4 id="sort-命令"><a href="#sort-命令" class="headerlink" title="sort 命令"></a>sort 命令</h4><p><code>sort</code> 命令将文件内所有行按照字典序快速排序。</p><p>选项参数说明</p><ul><li><code>-n</code>：按照数字顺序排序哪些以数字开头的行</li><li><code>-r</code>：反向排序</li></ul><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sort _config.yml<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405172428.png" alt="20210405172428"></p><h3 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h3><h4 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h4><p><code>tar</code>，即 tape archive。<code>tar</code> 用来解压文件。</p><p>选项参数说明</p><ul><li><code>-f</code>：确定要解压的文件名，即后面要有将被解压的文件的名称</li><li><code>-v</code>：输出命令执行过程中的详细信息</li><li><code>-x</code>：extract files from an archive file。提取一个压缩文件</li><li><code>-J</code>：Use archive through <code>xz</code></li></ul><p>使用范例</p><p>解压 Linux 内核文件到当前文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar -Jxvf linux-5.11.11.tar.xz<br></code></pre></div></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="apt-命令相关"><a href="#apt-命令相关" class="headerlink" title="apt 命令相关"></a>apt 命令相关</h4><p><code>apt</code>，即 advanced package tool。</p><p>命令格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt update<br>$ sudo apt upgrade<br></code></pre></div></td></tr></table></figure><p>也可以使用 <code>apt-get</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><p>官方现在建议是使用 <code>apt</code>。</p><h3 id="常用命令示例"><a href="#常用命令示例" class="headerlink" title="常用命令示例"></a>常用命令示例</h3><h4 id="locate-命令"><a href="#locate-命令" class="headerlink" title="locate 命令"></a>locate 命令</h4><p>用于定位某一个文件的位置，如，寻找 <code>sys/types.h</code> 这个文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ locate sys/types.h<br></code></pre></div></td></tr></table></figure><h4 id="whereis-命令"><a href="#whereis-命令" class="headerlink" title="whereis 命令"></a>whereis 命令</h4><p>寻找 stdio.h 的位置</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ whereis stdio.h<br></code></pre></div></td></tr></table></figure><p>但是这个命令没有 <code>locate</code> 命令好用。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux 命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未排序数组中累加和为给定值的最长子数组系列问题</title>
    <link href="/2021/04/05/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/05/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个无序数组 arr，其中元素可正、可负、可 0。给定一个整数 k，求 arr 所有的子数组中累加和为 k 的最长子数组长度。</p><p>补充问题 1：给定一个无序数组 arr，其中元素可正、可负、可 0。求 arr 所有的子数组中正数与负数个数相等的最长子数组长度。</p><p>补充问题 2：给定一个无序数组 arr，其中元素只是 1 或 0。求 arr 所有的子数组中 0 和 1 个数相等的最长子数组长度。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>这题的主要思想是利用了这样一个数据 <code>s(i))</code>，其中，<code>i</code> 表示数组的索引，<code>s(i)</code> 表示从数组开头累加到 <code>i</code> 索引处的累加值。</p><p>其次，使用了哈希表这一数据结构，我们用 <code>map</code> 来表示，<code>map</code> 里存储的就是存储第一次出现的 <code>s(i)</code> 以及 <code>i</code>。这里要注意的一点就是 <code>map</code> 中键为 <code>0</code> 的键值对中存储的值是 <code>-1</code>，表示起始时 <code>s(i)</code> 为 <code>0</code>。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 原问题</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// map 的 key 是 sum，i 是 s(i)，即从索引为 0 处一直累加到 i 处的值的结果</span><br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 下标从 -1 开始，初始时，放进 map 中的 sum 为 0</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        sum += arr[i];<br>        <span class="hljs-comment">// 这里相当于以 i 为终点，向前寻找最远的满足 arr[j..i] 的累加和为 k 的索引 j</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(sum - k)) &#123;<br>            len = Math.max(i - map.get(sum - k), len);<br>        &#125;<br>        <span class="hljs-comment">// 如果 map 中没有包含 sum，那就加入，否则不作任何操作，这样</span><br>        <span class="hljs-comment">// 可以保证 map 中存储的 i 是使得 s(i) 的值为 sum 的最小的索引</span><br>        <span class="hljs-keyword">if</span> (!map.containsKey(sum)) &#123;<br>            map.put(sum, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br><span class="hljs-comment">// 补充问题 1</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxLength_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        arr[i] = arr[i] &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> getMaxLength(arr, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">// 补充问题 2</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxLength_3</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        arr[i] = arr[i] == <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> getMaxLength(arr, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-comment">// 测试</span><br>    GetMaxLength_10 gml = <span class="hljs-keyword">new</span> GetMaxLength_10();<br>    System.out.println(gml.getMaxLength(arr, <span class="hljs-number">6</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code>5</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未排序正数数组中累加和为给定值的最长子数组长度</title>
    <link href="/2021/04/04/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%AD%A3%E6%95%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/"/>
    <url>/2021/04/04/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%AD%A3%E6%95%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个数组 arr，该数组无序，但每个值均为正数，再给定一个正数 k。求 arr 的所有子数组中所有元素相加和为 k 的最长子数组长度。例如，arr = [1，2，1，1，1]，k = 3。累加和为3的最长子数组为 [1，1，1]，所以结果返回 3。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>这道题可以使用暴力求解的方法，直接来一个双循环即可，问题是，这显然不是好的解决方案。所以，我们需要借助双指针来求解。这里，我们使用 <code>left</code> 和 <code>right</code> 分别来代替左指针和右指针。用 <code>sum</code> 来代表从 <code>arr[left]</code> 到 <code>arr[right]</code> 的累加值。</p><p>首先，它们的起始位置都是 <code>0</code> 这个索引，然后，移动的规则是：</p><ul><li><p>1、如果 <code>sum &lt; k</code>，那么，<code>right</code> 指针向右移动一格。这一步很好理解，我们在作暴力破解时，第二层循环也是这么做的，这里 <code>right</code> 指针的作用就相当于暴力破解的第二层循环。</p></li><li><p>2、如果 <code>sum == k</code>，那么，<code>left</code> 指针向右移动一格。类比暴力破解，这里就相当于 <code>left</code> 对应的在第二层循环中 <code>right</code> 指针后面的元素都直接被跳过了。为什么可以这样呢？原因就在于如果 <code>right</code> 指针向右移动的话，那么，这些所有被跳过的元素都是不符合情况的，因为无论怎么移动都会使得 <code>sum</code> 比 <code>k</code> 要大。所以只好是 <code>left</code> 指针向右移动一格了，这就相当于暴力循环中的第一层循环的索引加一。</p></li><li><p>3、如果 <code>sum &gt; k</code>，那么，<code>left</code> 指针向右移动一格。这样做的原因是 <code>right</code> 指针后面的元素都不符合要求。那么，还有一个问题，就是我们 <code>left</code> 向右移动完一格之后，我们可以注意到，当前的 <code>left</code> 到 <code>right</code> 之间的元素都被跳过了（类比于暴力破解的话），为什么可以这样呢？这也是同样的道理，在当前 <code>left</code> 的情况下，无论 <code>right</code> 指向哪些被跳过元素中的哪一个，都是不合要求的，它们都会使 <code>sum</code> 小于 <code>k</code>。</p></li></ul><p>我们按照上面的规则，不断地进行移动，直到 <code>right</code> 指针到达了右边界为止。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span> || k &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sum = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right &lt; arr.length) &#123;<br>        <span class="hljs-keyword">if</span> (sum == k) &#123; <span class="hljs-comment">// 等于 k 的情况，左指针向右移动格，因为 right 右面的情况已经可以全部排除</span><br>            len = Math.max(len, right - left + <span class="hljs-number">1</span>);<br>            sum -= arr[left++];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; k) &#123; <span class="hljs-comment">// 小于 k 的情况，右指针向右移动一格，如果 right 到达了尽头，则说明接下来的所有情况都不符合，直接跳出循环即可</span><br>            right++;<br>            <span class="hljs-keyword">if</span> (right == arr.length) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            sum += arr[right];<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// sum &gt; k 的情况</span><br>            sum -= arr[left--];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    GetSubArrMaxLen_9 gsaml = <span class="hljs-keyword">new</span> GetSubArrMaxLen_9();<br>    <span class="hljs-keyword">int</span> res = gsaml.getMaxLength(arr, <span class="hljs-number">3</span>);<br>    System.out.println(res);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code>3</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遍历二叉树的神级方法（Morris 遍历）</title>
    <link href="/2021/04/04/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A5%9E%E7%BA%A7%E6%96%B9%E6%B3%95%EF%BC%88Morris-%E9%81%8D%E5%8E%86%EF%BC%89/"/>
    <url>/2021/04/04/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A5%9E%E7%BA%A7%E6%96%B9%E6%B3%95%EF%BC%88Morris-%E9%81%8D%E5%8E%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一棵二叉树的头节点 head，完成二叉树的先序、中序和后序遍历。如果二叉树的节点数为 N，则要求时间复杂度为 O(N)，额外空间复杂度为 O(1)。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>要想使得遍历二叉树的额外空间复杂度为 O(1)，那么就需要使用 Morris 遍历方法。</p><p>Morris 方法的思路，讲得最好的我认为是这一篇博客：<a href="https://www.cnblogs.com/anniekim/archive/2013/06/15/morristraversal.html">https://www.cnblogs.com/anniekim/archive/2013/06/15/morristraversal.html</a></p><p>其中，最核心的是它讲述的步骤，Morris 遍历的原始版本其实是中序遍历，步骤如下</p><ol><li><p>如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。</p></li><li><p>如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点（predecessor）。找到前驱节点之后，关于前驱节点，又要分为以下两种情况来处理：</p><ul><li><p>2.1、如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。</p></li><li><p>2.2、如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。</p></li></ul></li><li><p>重复以上 1、2 直到当前节点为空。</p></li></ol><p>下面就是 Java 代码的全部实现</p><p><strong>原始不打印节点的版本</strong></p><p><code>Node</code> 数据结构</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span> Node left;<br>    <span class="hljs-keyword">public</span> Node right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 初始版本的 morris 遍历，没有作任何打印</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">morris</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Node cur = head; <span class="hljs-comment">// cur 初始时为头节点</span><br>    Node mostRight = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 这个其实就是当前节点 cur 的前驱节点（predecessor）</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 如果当前 cur 有左子树</span><br>            <span class="hljs-comment">// 找到左子树上最右边的节点，即前驱（predecessor）节点</span><br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-comment">// 从上面的 while 里出来后，mostRight 就是 cur 左子树上最右的节点</span><br>            <span class="hljs-keyword">if</span> (mostRight == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 如果 mostRight.right 指向 null，说明是第一次访问这个节点</span><br>                mostRight.right = cur; <span class="hljs-comment">// 让 mostRight 的右指针指向当前 cur 节点</span><br>                cur = cur.left; <span class="hljs-comment">// cur 向左移动</span><br>                <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 回到最外层的 while，继续判断 cur 的情况</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果 mostRight.right 是指向 cur 的</span><br>                mostRight.right = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 将 mostRight 的右指针指向恢复为 null</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// a、cur 如果没有左子树，cur 向右移动</span><br>        <span class="hljs-comment">// b、或者 cur 左子树上最右节点的右指针是指向 cur 的，cur 向右移动</span><br>        cur = cur.right;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>前序遍历版本</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 先序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">morrisPre</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Node cur = head;<br>    Node mostRight = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 当前节点左孩子不为 null 的情况</span><br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-comment">// 根据上面循环截止的两个条件，分两种情况进行处理</span><br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-keyword">null</span>) &#123;<br>                mostRight.right = cur;<br>                System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 因为是先序遍历，所以要先打印</span><br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 某个节点第二次被访问时，这里不作打印操作，仅仅把 mostRight 的右指针恢复为 null</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 当前节点左孩子为 null 则直接打印当前节点</span><br>            System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 打印节点</span><br>        &#125;<br>        <span class="hljs-comment">// a、cur 如果没有左子树，cur 向右移动</span><br>        <span class="hljs-comment">// b、或者 cur 左子树上最右节点的右指针是指向 cur 的，cur 向右移动</span><br>        cur = cur.right; <span class="hljs-comment">// 当前节点往右走</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>中序遍历版本</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">morrisIn</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Node cur = head;<br>    Node mostRight = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-keyword">null</span>) &#123;<br>                mostRight.right = cur;<br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// a、cur 如果没有左子树，先打印 cur 的值，然后 cur 向右移动</span><br>        <span class="hljs-comment">// b、或者 cur 左子树上最右节点的右指针是指向 cur 的，先打印 cur 的值，然后 cur 向右移动</span><br>        System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>);<br>        cur = cur.right;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>后序遍历版本</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 后序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">morrisPost</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Node cur = head;<br>    Node mostRight = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-keyword">null</span> &amp;&amp; mostRight.ri<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-keyword">null</span>) &#123;<br>                mostRight.right = cur;<br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-keyword">null</span>;<br>                printEdge(cur.left);<br>            &#125;<br>        &#125;<br>        cur = cur.right;<br>    &#125;<br>    printEdge(head);<br>    System.out.println();<br>&#125;<br><span class="hljs-comment">// 打印左子树的右边界时调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printEdge</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    Node tail = reverseEdge(head); <span class="hljs-comment">// 这个 tail 其实是反转之后的头</span><br>    Node cur = tail;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>);<br>        cur = cur.right;<br>    &#125;<br>    reverseEdge(tail); <span class="hljs-comment">// 恢复反转的右边界</span><br>&#125;<br><span class="hljs-comment">// 反转右边界</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">reverseEdge</span><span class="hljs-params">(Node from)</span> </span>&#123;<br>    Node pre = <span class="hljs-keyword">null</span>;<br>    Node next;<br>    <span class="hljs-keyword">while</span> (from != <span class="hljs-keyword">null</span>) &#123;<br>        next = from.right; <span class="hljs-comment">// 先把 next 保存起来</span><br>        from.right = pre; <span class="hljs-comment">// 反转</span><br>        pre = from; <span class="hljs-comment">// 更新 pre</span><br>        from = next; <span class="hljs-comment">// 更新 from</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>后序版本稍微有点复杂，主要是多了一个逆转左子树的右边界的做法。</p><p><strong>测试 <code>main</code> 方法</strong></p><p>测试所用的二叉树</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210404144053.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 构建测试用的二叉树</span><br>    Node head = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">6</span>);<br>    head.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">2</span>);<br>    head.left.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">1</span>);<br>    head.left.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">4</span>);<br>    head.left.right.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">3</span>);<br>    head.left.right.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">5</span>);<br>    head.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">7</span>);<br>    head.right.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">9</span>);<br>    head.right.right.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">8</span>);<br>    <span class="hljs-comment">// 测试</span><br>    Moris_5 ms = <span class="hljs-keyword">new</span> Moris_5();<br>    ms.morrisPre(head);<br>    System.out.println(<span class="hljs-string">&quot;\n----------&quot;</span>);<br>    ms.morrisIn(head);<br>    System.out.println(<span class="hljs-string">&quot;\n----------&quot;</span>);<br>    ms.morrisPost(head);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-section">6 2 1 4 3 5 7 9 8 </span><br><span class="hljs-section">----------</span><br><span class="hljs-section">1 2 3 4 5 6 7 8 9 </span><br><span class="hljs-section">----------</span><br>1 3 5 4 2 8 9 7 6 <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树生成测试备用</title>
    <link href="/2021/04/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E5%A4%87%E7%94%A8/"/>
    <url>/2021/04/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E5%A4%87%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>二叉树数据结构</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span> Node left;<br>    <span class="hljs-keyword">public</span> Node right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>二叉树 01：</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210404144053.png" alt="20210404144053"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Node head = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">6</span>);<br>head.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">2</span>);<br>head.left.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">1</span>);<br>head.left.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">4</span>);<br>head.left.right.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">3</span>);<br>head.left.right.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">5</span>);<br>head.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">7</span>);<br>head.right.right = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">9</span>);<br>head.right.right.left = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">8</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于递归的一点思考</title>
    <link href="/2021/04/03/%E5%85%B3%E4%BA%8E%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <url>/2021/04/03/%E5%85%B3%E4%BA%8E%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>今天在阅读二叉树的边界打印过程中，由于多要使用递归，什么先序遍历啦，什么尾递归啦，关于二叉树，递归真是无处不在。</p><p>由此，也产生了一点想法。</p><p>以前在做递归的题目，或者说看递归的代码时，真是一头懵，妥妥的愣头青一个。在经过在我看来不算少的递归的题目的冲击和洗涤之后，如今多少算是有点感觉了。当初，递归的过程我是百思不得其解，现今，在纸上模拟递归的过程自然是不在话下，更重要的一点，在脑中直接模拟递归的过程似乎也不再是那么困难的事情。遇到问题，想一想递归，估计是可以想得出来的，这个想，指的是纯粹地依靠我自己。然后，将递归转化为非递归，如果是利用栈这个数据结构，我觉得也还 ok 啦。</p>]]></content>
    
    
    <categories>
      
      <category>编程杂感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程杂感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于使用不同网络下 ssh -T git@github.com 可能连接失败的一个 bug</title>
    <link href="/2021/04/02/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E4%B8%8B-ssh-T-git-github-com-%E5%8F%AF%E8%83%BD%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%80%E4%B8%AA-bug/"/>
    <url>/2021/04/02/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E4%B8%8B-ssh-T-git-github-com-%E5%8F%AF%E8%83%BD%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%80%E4%B8%AA-bug/</url>
    
    <content type="html"><![CDATA[<p>今天遇到一个奇怪的错误。</p><p>今天在同学租的房子里，使用房东的 WiFi，然后在执行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></div></td></tr></table></figure><p>时出现连接超时的情况。真是日了狗了。</p><p>因为这个错误，我无法使用 <code>hexo d</code> 命令，导致我以为是今天使用 WebStorm 打开博客根目录然后 WebStorm 给文件根目录加了一个 <code>.idea</code> 文件的缘故，然后我又重新配置了 GitHub 的 SSH 相关内容，因为我在同一台电脑上搭建了两个 Hexo 博客，工作量可想而知，真是日了狗了！！！</p><p>然后重新配置好了 SSH 之后，测试刚刚那个命令结果还是超时，我日，然后，我将网络换成手机的热点，日了狗了，好了，可以连上了！干你娘！竟然是网络的问题，亏我还给 Git 配置了代理。哔了狗了。</p>]]></content>
    
    
    <categories>
      
      <category>bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NexT 主题更改页脚内容的颜色（由 ... 强力驱动）</title>
    <link href="/2021/04/02/NexT-%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%94%B9%E9%A1%B5%E8%84%9A%E5%86%85%E5%AE%B9%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%88%E7%94%B1-%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8%EF%BC%89/"/>
    <url>/2021/04/02/NexT-%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%94%B9%E9%A1%B5%E8%84%9A%E5%86%85%E5%AE%B9%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%88%E7%94%B1-%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>我们需要修改页面底部的颜色信息，如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161712.png" alt="20210402161712"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先，找到在站点目录下的 <code>themes/next/source/css/_common/outline/footer</code> 的文件夹，然后，打开 <code>footer.styl</code> 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161200.png" alt="20210402161200"></p><p>我们需要更改两个地方。</p><p>第一处</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161534.png" alt="20210402161534"></p><p>这里将 color 换成我们需要的颜色的十六进制码即可。</p><p>这里的效果是更改页脚的文字的颜色（不包括链接）。</p><p>第二处</p><p>在文件尾部添加一段代码</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 后加的改变页脚颜色的文件<br><span class="hljs-selector-class">.theme-link</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#71ffe5</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161847.png" alt="20210402161847"></p><p>这里的颜色随便设定，效果是将页脚的链接的颜色更改为我们设定的值。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
      <tag>Next</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18 安装搜狗输入法</title>
    <link href="/2021/03/31/Ubuntu-18-%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <url>/2021/03/31/Ubuntu-18-%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224044.png" alt="20210331224044"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224133.png" alt="20210331224133"></p><p>把中文（简体）勾选上</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224223.png" alt="20210331224223"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224315.png" alt="20210331224315"></p><p>这里选择 <code>fcitx</code></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224356.png" alt="20210331224356"></p><p>如果在键盘输入法系统中，没有 “fcitx” 选项时，建议先打开终端手动安装 <code>fcitx</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install fcitx<br></code></pre></div></td></tr></table></figure><p>等安装成功之后再执行上述步骤。</p><p>然后到搜狗拼音官网下载安装包</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224618.png" alt="20210331224618"></p><p>我这里是下载在了 Downloads 目录下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224737.png" alt="20210331224737"></p><p>然后在命令行执行安装命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo dpkg -i sogoupinyin_2.4.0.3469_amd64.deb<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224911.png" alt="20210331224911"></p><p>但是我这里出现了一些问题，就是缺少一些依赖包</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224944.png" alt="20210331224944"></p><p>此时，我们可以执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt -f install<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225145.png" alt="20210331225145"></p><p>此时，发现已经安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225238.png" alt="20210331225238"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225636.png" alt="20210331225636"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225819.png" alt="20210331225819"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225843.png" alt="20210331225843"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225926.png" alt="20210331225926"></p><p>然后，测试一下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331230017.png" alt="20210331230017"></p><p>大功告成。</p><p>参考：<a href="https://pinyin.sogou.com/linux/help.php">搜狗官方教程</a> <a href="https://zhuanlan.zhihu.com/p/34270907">知乎辅助排坑</a></p><p><strong>注</strong>：安装过程中遇到需要确认的选项，我这里一律选择 <code>y</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>安装软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中通过 &#39;\u&#39; 给 char 类型变量赋值</title>
    <link href="/2021/03/31/Java-%E4%B8%AD%E9%80%9A%E8%BF%87-u-%E7%BB%99-char-%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/"/>
    <url>/2021/03/31/Java-%E4%B8%AD%E9%80%9A%E8%BF%87-u-%E7%BB%99-char-%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>在 Java 中，可以使用 <code>\u0031</code> 这样形式的值给 char 类型变量赋值，其中，<code>\u</code> 表示 Unicode 码，后面的四位数字即具体的 Unicode 码。</p><p>部分 Unicode 码如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331004349.png" alt="20210331004349"></p><p>下面是 Java 中打印通过 Unicode 码赋值的 char 类型变量</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> a = <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>    <span class="hljs-keyword">char</span> b = <span class="hljs-string">&#x27;\u0040&#x27;</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;\u0041&#x27;</span>;<br>    System.out.println(a);<br>    System.out.println(b);<br>    System.out.println(c);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出为</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331005101.png" alt="20210331005101"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的 &#39;\u0000&#39;</title>
    <link href="/2021/03/31/Java-%E4%B8%AD%E7%9A%84-u0000/"/>
    <url>/2021/03/31/Java-%E4%B8%AD%E7%9A%84-u0000/</url>
    
    <content type="html"><![CDATA[<p>Java 中的 char 类型初始值是 <code>\u0000</code>，这个表示 Unicode 码中的 <code>0000</code> 号字符，但是这个是非打印字符，所以哦我们通过 Java 打印这个字符一般只能看到一个字符。这个在 Java 中一般表示 null char。</p><p>Unicode 表部分如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331004349.png" alt="20210331004349"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的 Block 代码块</title>
    <link href="/2021/03/30/Java-%E4%B8%AD%E7%9A%84-Block-%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <url>/2021/03/30/Java-%E4%B8%AD%E7%9A%84-Block-%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>Java 中的 Block 就是使用花括号括起来来的一段代码块。</p><p>示例如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210330234610.png" alt="20210330234610"></p><p>Block 中的代码按顺序执行，需要注意的是，Block 中的变量是本地变量（local variables），也可以叫局部变量。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的三种变量</title>
    <link href="/2021/03/30/Java-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E5%8F%98%E9%87%8F/"/>
    <url>/2021/03/30/Java-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>Java 中一共有三种变量，分别是</p><ul><li><p>类变量（Class Variables）：类变量也叫静态（static）变量。直接在类体中使用 <code>static</code> 关键字声明的变量。这中变量的特点是只会在程序第一次加载类时初始化一次，然后所有该类的实例化对象都会共享这一份变量。</p></li><li><p>实例变量（Instance Variables）：实例变量即类中的没有使用 <code>static</code> 关键字创建的变量。每实例化一个对象，该对象都会持有只属于它的一份实例变量。</p></li><li><p>本地变量（Local Variables）：在方法体中、构造器中、代码块（block）中声明的变量。也可以叫做局部变量。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中变量的初始值</title>
    <link href="/2021/03/30/Java-%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%80%BC/"/>
    <url>/2021/03/30/Java-%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>程序中的每一个变量在使用前都应该有一个值。</p><p>每一个 <code>类变量（class variable）</code>、<code>实例变量（instance variable）</code> 或 <code>数组变量（array component）</code> 在被创建（声明）时都会被初始化一个默认值。各个类型的默认值如下。</p><ul><li><p>byte: 0，即 <code>(byte)0</code></p></li><li><p>short: 0，即 <code>(short)0</code></p></li><li><p>int: 0</p></li><li><p>long: 0，即 <code>0L</code></p></li><li><p>float: 0，即 <code>0.0f</code></p></li><li><p>double: 0，即 <code>0.0d</code></p></li><li><p>char: null，即 <code>\u0000</code></p></li><li><p>boolean: false</p></li><li><p>所有的引用类型：null</p></li></ul><p>附注一：Java 中数字常量默认为 int 类型，所以给 long 类型的数据赋值时数字结尾要加 <code>L</code> 或 <code>l</code>，给取值范围小于 int 的 byte 和 short 类型赋值时，一般直接赋值即可，或者可以进行显式的类型转换。而小数常量默认为 double 类型，所以一般可以将不加后缀的小数常量赋给 double 类型的变量，而给 float 数据赋值时必须要加 <code>F</code> 或 <code>f</code> 后缀。</p><p>参考：<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.12.5">Java 文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 备份或删除所有库的命令</title>
    <link href="/2021/03/29/Python-%E5%A4%87%E4%BB%BD%E6%88%96%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%BA%93%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/03/29/Python-%E5%A4%87%E4%BB%BD%E6%88%96%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%BA%93%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>命令一</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip freeze <br></code></pre></div></td></tr></table></figure><p>作用：查看 Python 通过 <code>pip</code> 安装的所有包（不包括 <code>pip</code> 包本身）。</p><p>命令二</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip freeze &gt; requirements.txt<br></code></pre></div></td></tr></table></figure><p>作用：将当前的所有的库备份到当前目录下的 <code>requirements.txt</code>（如果没有则会自动新建一个）中。</p><p>下面是我备份的示例</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329233624.png" alt="20210329233624"></p><p>命令三</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip install -r requirements.txt<br></code></pre></div></td></tr></table></figure><p>作用：安装 <code>requirements.txt</code> 文件中列出的包。</p><p><code>-r</code>：与 <code>--requirements</code> 等价，表示安装 requirements 文件中列出的所有包，该选项可以重复添加，按照惯例，需求文件名为 requirements.txt。</p><p>命令四</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip uninstall -r requirements.txt -y<br></code></pre></div></td></tr></table></figure><p>作用：删除 <code>requirements.txt</code> 文件中列出的包。</p><p><code>-r &lt;file&gt;</code>：与 <code>--requirements &lt;file&gt;</code> 等价，删除 requirements 文件中列出的所有包，该选项可以重复添加多次。</p><p><code>-y</code>：与 <code>--yes</code> 等价，在卸载遇到确认的情况时，一律选择 <code>yes</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pip</tag>
      
      <tag>Python 命令行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断一个链表是否是回文结构</title>
    <link href="/2021/03/29/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/"/>
    <url>/2021/03/29/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个链表的头节点 head，请判断该链表是否为回文结构。</p><p>例如</p><div class="hljs code-wrapper"><pre><code>1-&gt;2-&gt;1, 返回 true。1-&gt;2-&gt;2-&gt;1, 返回 true。15-&gt;6-&gt;15, 返回 true。1-&gt;2-&gt;3, 返回 false。</code></pre></div><p>进阶要求</p><div class="hljs code-wrapper"><pre><code>如果链表长度为 N，时间复杂度要求达到 O(N)，额外空间复杂度达到 O(1)。</code></pre></div><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p><strong>方法一</strong></p><p>利用栈来判断，将所有节点压入栈中，然后弹出时就是按照逆序来弹出的，在弹出的同时与正序的原来的链表的相应的元素作比较，这样就很容易判断出是否是回文结构了。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome1</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    Node cur = head;<br>    <span class="hljs-comment">// 将所有节点入栈</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        stack.push(cur);<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-comment">// 将栈中元素一个个弹出与原链表中的每一个元素作比较</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (head.value != stack.pop().value) &#123; <span class="hljs-comment">// pop 是移除并返回栈顶元素</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法一的时间复杂度为 $O(N)$，额外空间复杂度为 $O(N)$。</p><p><strong>方法二</strong></p><p>这个方法本质上和方法一没有区别，只是，这个压栈操作有些变化，方法一是将所有的元素全部压入一个栈中，而这个方法则是先将栈给对半切割了，然后只是将右半部分的元素给压栈，然后再弹出和原链表的左半部分元素进行比较。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome2</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    Node right = head.next;<br>    Node cur = head;<br>    <span class="hljs-comment">// 利用快慢指针，快速将 right 移动到链表中点的位置</span><br>    <span class="hljs-comment">// 设链表节点数为 N，</span><br>    <span class="hljs-comment">// 则当 N 为偶数时，cur 指针最终走到 N - 1 处，right 走了 (N - 2) / 2 步，最终走到 N / 2 的下一个位置</span><br>    <span class="hljs-comment">// 当 N 为奇数时，cur 指针最终走到 N 处，right 走了 (N - 1) / 2 步，最终走到 (N + 1) / 2 这个位置，即正好是正中间的位置</span><br>    <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-keyword">null</span> &amp;&amp; cur.next.next != <span class="hljs-keyword">null</span>) &#123;<br>        right = right.next;<br>        cur = cur.next.next;<br>    &#125;<br>    <span class="hljs-comment">// 把右半部分的节点给压入堆栈</span><br>    Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (right != <span class="hljs-keyword">null</span>) &#123;<br>        stack.push(right);<br>        right = right.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (head.value != stack.pop().value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法二的时间复杂度为 $O(N$，额外空间复杂度为 $O(N)$。</p><p><strong>方法三</strong></p><p>方法三的主要思想是将链表从中间截断，然后使中间节点指向 <code>null</code>，然后逆转右半部分的链表，然后左边和右边分别并同时从最左边的和最右边的节点进行遍历，比较它们每一个节点是否相同。最后，要将逆转的链表恢复原状。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome3</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    Node n1 = head;<br>    Node n2 = head;<br>    <span class="hljs-comment">// N 为偶数，n1 走到 N / 2 位置</span><br>    <span class="hljs-comment">// N 为奇数，n1 走到 N / 2 位置</span><br>    <span class="hljs-keyword">while</span> (n2.next != <span class="hljs-keyword">null</span> &amp;&amp; n2.next.next != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 利用快慢指针查找中间节点</span><br>        n1 = n1.next; <span class="hljs-comment">// n1 -&gt; 中部</span><br>        n2 = n2.next.next; <span class="hljs-comment">// n2 -&gt; 尾部</span><br>    &#125;<br>    n2 = n1.next; <span class="hljs-comment">// n2 -&gt; 右部分第一个节点</span><br>    n1.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// mid.next -&gt; null</span><br>    Node n3 = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (n2 != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 右半区反转</span><br>        n3 = n2.next; <span class="hljs-comment">// n3 -&gt; 保存下一个节点</span><br>        n2.next = n1;<br>        n1 = n2; <span class="hljs-comment">// n1 移动</span><br>        n2 = n3; <span class="hljs-comment">// n2 移动</span><br>    &#125;<br>    n3 = n1; <span class="hljs-comment">// n3 -&gt; 保存最后一个节点</span><br>    n2 = head; <span class="hljs-comment">// n2 -&gt; 左边第一个节点</span><br>    <span class="hljs-keyword">boolean</span> res = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">while</span> (n1 != <span class="hljs-keyword">null</span> &amp;&amp; n2 != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 反转之后的检查回文</span><br>        <span class="hljs-keyword">if</span> (n1.value != n2.value) &#123;<br>            res = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 因为之后要恢复被反转的链表，所以要先将结果存储起来，不能直接返回</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        n1 = n1.next; <span class="hljs-comment">// 从左到中部</span><br>        n2 = n2.next; <span class="hljs-comment">// 从右到中部</span><br>    &#125;<br>    n1 = n3.next; <span class="hljs-comment">// 这里的 n3 是原来链表的最后一个节点，n3.next 即倒数第二个节点</span><br>    n3.next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (n1 != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 恢复链表</span><br>        n2 = n1.next; <span class="hljs-comment">// 保存下一个节点</span><br>        n1.next = n3; <span class="hljs-comment">// 反转</span><br>        n3 = n1; <span class="hljs-comment">// 移动 n3</span><br>        n1 = n2; <span class="hljs-comment">// 移动 n1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环形单链表的约瑟夫（Josephus）问题</title>
    <link href="/2021/03/29/%E7%8E%AF%E5%BD%A2%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BA%A6%E7%91%9F%E5%A4%AB%EF%BC%88Josephus%EF%BC%89%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/29/%E7%8E%AF%E5%BD%A2%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BA%A6%E7%91%9F%E5%A4%AB%EF%BC%88Josephus%EF%BC%89%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>据说著名犹太历史学家 Josephus 有过以下故事：在罗马人占领乔塔帕特后，39 个犹太人与 Josephus 及他的朋友躲到一个洞中，39 个犹太人决定宁愿死也不要被敌人抓到，于是决定了一种自杀方式，41 个人排成一个圆圈，由第1个人开始报数，报数到 3 的人就自杀，然后再由下一个人重新报 1，报数到 3 的人再自杀，这样依次下去，直到剩下最后一个人时，那个人可以自由选择自己的命运。这就是著名的约瑟夫问题。现在请用单向环形链表描述该结构并呈现整个自杀过程。</p><div class="hljs code-wrapper"><pre><code>输入：一个环形单向链表的头节点 head 和报数的值 m。返回：最后生存下来的节点</code></pre></div><p>进阶问题：如果链表节点数为 $N$，想在时间复杂度为 $O(N)$ 时完成原问题的要求，该怎么实现？</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p><strong>方法一</strong></p><p>直接模拟，这个按部就班写代码即可。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 直接法模拟约瑟夫环的删除过程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head 环形单向链表的头节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m 每隔 m 个节点删除一次</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 最后的幸存者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">josephusKill</span><span class="hljs-params">(Node head, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == head || m &lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 输入不合理</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    Node last = head;<br>    <span class="hljs-comment">// 找出最后一个节点 last</span><br>    <span class="hljs-keyword">while</span> (last.next != head) &#123;<br>        last = last.next;<br>    &#125;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (head != last) &#123;<br>        <span class="hljs-keyword">if</span> (++count == m) &#123; <span class="hljs-comment">// 如果报数到了 m</span><br>            last.next = head.next; <span class="hljs-comment">// 删除节点</span><br>            count = <span class="hljs-number">0</span>; <span class="hljs-comment">// count 重又归零</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            last = last.next; <span class="hljs-comment">// last 往后移动一位</span><br>        &#125;<br>        head = last.next; <span class="hljs-comment">// 移动 head 指针，使 head 指针始终保持是 last 指针的下一位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法一的时间复杂度为 $O(N \times m)$，$N$ 是节点数。</p><p><strong>方法二</strong></p><p>公式法。通过找规律，直接利用递推公式来求解。注意，这个公式法并不是书上介绍的方法，而是上个学期在上数据结构课程时老师讲述的方法。具体思路如下。</p><p>首先，我们给出公式</p><blockquote><p>J(n, m) = J(J(n - 1, m) + m) \% n, if n &gt; 1,<br>J(1, m) = 0</p></blockquote><p>下面，我们就来简单证明一下这个算法。</p><p>举例，我们用数字表示每一个人：</p><script type="math/tex; mode=display">1,2,3,4,5,6,7,8,9,10,11</script><p>一共 11 个人，他们排成一排，假设报到 3 的人被杀掉。</p><ul><li>刚开始时，头一个人编号是1，从他开始报数，第一轮被杀掉的是编号3的人。</li><li>编号4的人从1开始重新报数，这时候我们可以认为编号4这个人是队伍的头。第二轮被杀掉的是编号6的人。</li><li>编号7的人开始重新报数，这时候我们可以认为编号7这个人是队伍的头。第三轮被杀掉的是编号9的人。</li><li>……</li><li>第九轮时，编号2的人开始重新报数，这时候我们可以认为编号2这个人是队伍的头。这轮被杀掉的是编号8的人。</li><li>下一个人还是编号为2的人，他从1开始报数，不幸的是他在这轮被杀掉了。</li><li>最后的胜利者是编号为7的人。</li></ul><p>表格演示(表头代表数组的下标)：</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center"><strong>3</strong></td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center"><strong>6</strong></td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center"><strong>9</strong></td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">7</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center"><strong>5</strong></td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">10</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center"><strong>10</strong></td><td style="text-align:center">11</td><td style="text-align:center">2</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">2</td><td style="text-align:center"><strong>4</strong></td><td style="text-align:center">7</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center"><strong>11</strong></td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">7</td><td style="text-align:center"><strong>8</strong></td></tr><tr><td style="text-align:center"><strong>2</strong></td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">7</td></tr></tbody></table></div><p>我们用上面的数据验证一下公式的正确性，其中，J(n, m) 表示的是幸存者在这一轮的下标位置：</p><ul><li>$J(1, 3) = 0$；只有一个人，此人是最后的幸存者，其在数组中的下标为 0</li><li>$J(2, 3) = 1 = (J(1, 3) + 3) \% 2$；还剩 2 个人时</li><li>$J(3, 3) = 1 = (J(2, 3) + 3) \% 3$；还剩 3 个人时</li><li>$J(4, 3) = 0 = (J(3, 3) + 3) \% 4$</li><li>$J(5, 3) = 3 = (J(4, 3) + 3) \% 5$</li><li>…</li><li>$J(11, 3) = 6 = (J(10, 3) + 3) \% 11$；最终计算出待求的情况</li></ul><p>我们通过实例只是验证了这一种情况是成立的，这能够很好地辅助我们理解，但是，我们还需要这个公式的具体推导，下面，就以问答的方式来推导这个公式。</p><p><strong>问题1</strong>：假设我们已经知道 11 个人时，幸存者的下标位置为 6，那么下一轮 10 个人时，幸存者下标的位置是多少？</p><p><strong>答</strong>：我们在第 1 轮杀掉第 3 个人时，后面的人都往前面移动了 3 位，幸存者也往前移动了 3 位，所以他的下标由 6 变成了 3。</p><p><strong>问题2</strong>：假设我们呢已经知道 10 个人时，幸存者的下标位置为 3，那么上一轮 11 个人时，幸存者下标的位置是多少？</p><p><strong>答</strong>：这可以看成是上一个问题的逆过程，所以由 10 变成 11 个人时，所有人都往后移动 3 位，所以 $J(11, 3) = J(10, 3) + 3$，不过数组可能会越界，我们可以想象成数组的首尾是相接的环，那么越界的元素就要重新回到开头，所以这个式子还要模取当前的人数(注意，这里是当前数组，在这里就是人数为 11 的这个数组)：$J(11,3) = (J(10, 3) + 3) \% 11$。</p><p><strong>问题3</strong>：推及到一般情况，人数为 n，报到 m 时，把那个人杀掉，那么数组又是怎么移动的？</p><p><strong>答</strong>：由上面的推导，我们应该很容易就能得出，若已知 n - 1 个人时，幸存者的下标位置为 $J(n - 1, m)$，那么 n 个人的时候，就是往后移动 m 位，同样的，因为可能数组越界，所以式子要变成：$J(n, m) = (J(n - 1, m) + 3) \% n$。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用公式法求解最后幸存的节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head 单向环状链表头节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m 报数到 m 就删去一个节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 最后生存的节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">JosephusKillFormula</span><span class="hljs-params">(Node head, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; <span class="hljs-comment">// n 表示链表的长度</span><br>    Node last = head;<br>    <span class="hljs-keyword">while</span> (last.next != head) &#123;<br>        n++;<br>        last = last.next;<br>    &#125;<br>    n++;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>; <span class="hljs-comment">// 只剩一个人时，数组下标为 0</span><br>    <span class="hljs-comment">// 这个循环就是关键的核心</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        p = (p + m) % i; <span class="hljs-comment">// i 是当前的人数</span><br>    &#125;<br>    p += <span class="hljs-number">1</span>; <span class="hljs-comment">// 因为 p 是从 0 开始，所以最后要加一</span><br>    <span class="hljs-keyword">while</span> (--p != <span class="hljs-number">0</span>) &#123;<br>        last = last.next;<br>        head = head.next;<br>    &#125;<br>    last.next = <span class="hljs-keyword">null</span>;<br>    head.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 只取最后的 head 这一个节点，其他都舍去</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单位上三角矩阵的定义</title>
    <link href="/2021/03/29/%E5%8D%95%E4%BD%8D%E4%B8%8A%E4%B8%89%E8%A7%92%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    <url>/2021/03/29/%E5%8D%95%E4%BD%8D%E4%B8%8A%E4%B8%89%E8%A7%92%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>关于单位上三角矩阵的定义，我在教材中没有找到，遂搜索于网络。</p><p>在百度百科和维基百科找到了定义，但是它们让我困惑的有一点，就是 “系数” 这个名词，如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329091316.png" alt="20210329091316"></p><p>我想，这应该是指矩阵中元素的意思，然后查看英文版 Wiki 得以确认</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329091519.png" alt="20210329091519"></p><p>这里用了 <code>entry</code> 这个单词，翻译过来就是条目的意思，我这个翻译也不太好，具体看一个 <a href="https://www.mathwarehouse.com/algebra/matrix/">英文网站</a> 的解释</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329091840.png" alt="20210329091840"></p><p>尤其注意这里的一句话</p><blockquote><p>Each item in a matrix is called an entry.</p></blockquote><p>对于 <code>item</code> 我们是理解的，所以，上三角（下三角类似）单位矩阵的定义，简单来说，就是</p><p><strong>主对角线上的元素全部为 1 的矩阵</strong>.</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转部分单向链表</title>
    <link href="/2021/03/29/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/03/29/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个单向链表的头节点 head，以及两个整数 from 和 to，在单向链表上把第 from 个节点到第 to 个节点这一部分进行反转。</p><p>例如</p><div class="hljs code-wrapper"><pre><code>1-＞2-＞3-＞4-＞5-＞null, from=2, to=4调整结果为：1-＞4-＞3-＞2-＞5-＞null1-＞2-＞3-＞null, from=1, to=3调整结果为：3-＞2-＞1-＞null</code></pre></div><p>要求</p><div class="hljs code-wrapper"><pre><code>1. 如果链表长度为 N，时间复杂度要求为 O(N)，额外空间复杂度要求为 O(1)。2. 如果不满足 1 &lt;= from &lt;= to &lt;= N，则不用调整。</code></pre></div><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>这里主要要注意 from 是否为第一个节点，即是否为头节点的问题。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">reversePart</span><span class="hljs-params">(Node head, <span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    Node node1 = head;<br>    Node fPre = <span class="hljs-keyword">null</span>;<br>    Node tPos = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 遍历链表，找到 from 的前一个节点</span><br><span class="hljs-comment">        * 和 to 的后一个节点</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-keyword">while</span> (node1 != <span class="hljs-keyword">null</span>) &#123;<br>        len++;<br>        fPre = len == from - <span class="hljs-number">1</span> ? node1 : fPre;<br>        tPos = len == to + <span class="hljs-number">1</span> ? node1 : tPos;<br>        node1 = node1.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (from &gt; to || from &lt; <span class="hljs-number">1</span> || to &gt; len) &#123; <span class="hljs-comment">// 输入不合理，注意，from = 1 和 to = len 是合法的情况</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">// 下面进行反转</span><br>    node1 = fPre == <span class="hljs-keyword">null</span> ? head : fPre.next; <span class="hljs-comment">// 如果 fPre 等于 null，则说明 from = 1，否则直接将 fPre 的下一个节点赋给 node1</span><br>    Node node2 = node1.next; <span class="hljs-comment">// 保存 node1.next</span><br>    node1.next = tPos; <span class="hljs-comment">// 先将部分链表的头节点给转了，所以下面不需要再处理将反转好的 “部分链表” 的尾部给接到 tPos 的操作了</span><br>    Node next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (node2 != tPos) &#123;<br>        next = node2.next; <span class="hljs-comment">// 保存下一个节点</span><br>        node2.next = node1;<br>        node1 = node2;<br>        node2 = next;<br>    &#125; <span class="hljs-comment">// node1 是最后一个 “部分链表” 的最后一个节点</span><br>    <span class="hljs-keyword">if</span> (fPre != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 如果 fPre 不是 null，即 from != 1</span><br>        fPre.next = node1; <span class="hljs-comment">// 直接接上就好</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-keyword">return</span> node1; <span class="hljs-comment">// 这是 from 为头节点的情况</span><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给定链表的头节点 head，实现删除链表的中间节点的函数</title>
    <link href="/2021/03/29/%E7%BB%99%E5%AE%9A%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E8%8A%82%E7%82%B9-head%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <url>/2021/03/29/%E7%BB%99%E5%AE%9A%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E8%8A%82%E7%82%B9-head%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定链表的头节点 head，实现删除链表的中间节点的函数。</p><p>例如：</p><div class="hljs code-wrapper"><pre><code>1-＞2，删除节点1；1-＞2-＞3，删除节点2；1-＞2-＞3-＞4，删除节点2；1-＞2-＞3-＞4-＞5，删除节点3；</code></pre></div><p>进阶：给定链表的头节点 head、整数 a 和 b，实现删除位于 a/b 处节点的函数。</p><p>例如：</p><div class="hljs code-wrapper"><pre><code>链表：1-＞2-＞3-＞4-＞5，假设a/b的值为r。如果r等于0，不删除任何节点；如果r在区间（0，1/5]上，删除节点1；如果r在区间（1/5，2/5]上，删除节点2；如果r在区间（2/5，3/5]上，删除节点3；如果r在区间（3/5，4/5]上，删除节点4；如果r在区间（4/5，1]上，删除节点5；如果r大于1，不删除任何节点。</code></pre></div><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><strong>原问题</strong></p><p>整体思路是利用快慢指针。只是要注意一些细节问题。我们将小于等于 2 个节点的链表直接作硬编码处理。然后处理大于 2 个节点的情况。首先初始化快慢指针，快指针初始时指向第 3 个节点，慢指针初始时指向第 1 个节点。然后开始移动，每一次移动，快指针走两个节点，慢指针走一个节点。终止条件是快指针到达了倒数第一个或者倒数第二个节点。</p><p>至于为何快指针和慢指针走的规则是这样的，我们可以分两种情况来看。我们假定链表节点数为 $N, N \geqslant 3$。</p><ul><li>$N$ 是偶数。快指针最后是停在了倒数第二个节点的位置。则慢指针走了 $\frac{N - 3 - 1}{2}$ 步，即 $\frac{N}{2} - 1$ 步。很显然，最后慢指针的位置是在该删除节点的前一个位置。</li><li>$N$ 是奇数。快指针最后是停在了倒数第一个位置。则慢指针走了 $\frac{N - 3}{2}$ 步，即 $\frac{N - 1}{2} - 1$，而慢指针从头节点开始走 $\frac{N - 1}{2}$ 步正好会走到中间的节点的地方。因此，最后慢指针的位置是中间节点的前一个位置。</li></ul><p>代码</p><p>节点类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>函数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 删除链表的中间节点，很显然，利用的是快慢指针</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">removeMidNode</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 如果是空链表或者是只有一个节点的链表</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head.next.next == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 如果只有两个节点，那么，就删除第一个节点</span><br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br>    Node pre = head;<br>    Node cur = head.next.next;<br>    <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-keyword">null</span> &amp;&amp; cur.next.next != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 如果快指针没有走到倒数第一个或者倒数第二个节点</span><br>        pre = pre.next; <span class="hljs-comment">// 慢指针</span><br>        cur = cur.next.next; <span class="hljs-comment">// 快指针</span><br>    &#125;<br>    pre.next = pre.next.next; <span class="hljs-comment">// 删除中间节点</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>进阶问题</strong></p><p>这个主要是要计算出待删除节点的序号，如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">n = (<span class="hljs-keyword">int</span>) Math.ceil((<span class="hljs-keyword">double</span>) (n * a) / (<span class="hljs-keyword">double</span>) b);<br></code></pre></div></td></tr></table></figure><p>完整函数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 删除位于 a/b 处的节点</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">removeByRatio</span><span class="hljs-params">(Node head, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">1</span> || a &gt; b) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    Node cur = head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 计算出节点的个数</span><br>        n++;<br>        cur = cur.next;<br>    &#125;<br>    n = (<span class="hljs-keyword">int</span>) Math.ceil((<span class="hljs-keyword">double</span>) (n * a) / (<span class="hljs-keyword">double</span>) b); <span class="hljs-comment">// 向上取整，之所以将计算出来的值仍用 n 存储，是为了节省空间</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;<br>        cur = head;<br>        <span class="hljs-keyword">while</span> (--n != <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 找到待删除节点的前一个节点</span><br>            cur = cur.next;<br>        &#125;<br>        cur.next = cur.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-NexT-文章页面去掉页首的描述（description）</title>
    <link href="/2021/03/29/Hexo-NexT-%E6%96%87%E7%AB%A0%E9%A1%B5%E9%9D%A2%E5%8E%BB%E6%8E%89%E9%A1%B5%E9%A6%96%E7%9A%84%E6%8F%8F%E8%BF%B0%EF%BC%88description%EF%BC%89/"/>
    <url>/2021/03/29/Hexo-NexT-%E6%96%87%E7%AB%A0%E9%A1%B5%E9%9D%A2%E5%8E%BB%E6%8E%89%E9%A1%B5%E9%A6%96%E7%9A%84%E6%8F%8F%E8%BF%B0%EF%BC%88description%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>如下图，我们想去掉页首显示的这个 description，因为这个 description 只在首页显示就够了。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329001641.png" alt="20210329001641"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在 <code>..\themes\next\layout\_macro\post.swig</code> 文件中搜索 <code>description</code>，找到下面这段代码，删去即可。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&#123;%- if post<span class="hljs-selector-class">.description</span> and (not theme<span class="hljs-selector-class">.excerpt_description</span> or not is_index) %&#125;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;post-description&quot;&gt;&#123;&#123; post<span class="hljs-selector-class">.description</span> &#125;&#125;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&#123;%- endif %&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329001034.png" alt="20210329001034"></p><p>效果</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329001856.png" alt="20210329001856"></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>NexT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/28/hello-world/"/>
    <url>/2021/03/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>草稿</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex 中的空格（空白）表示方法（知其然并知其所以然）</title>
    <link href="/2021/03/28/LaTex-%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC%EF%BC%88%E7%A9%BA%E7%99%BD%EF%BC%89%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95%EF%BC%88%E7%9F%A5%E5%85%B6%E7%84%B6%E5%B9%B6%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%89/"/>
    <url>/2021/03/28/LaTex-%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC%EF%BC%88%E7%A9%BA%E7%99%BD%EF%BC%89%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95%EF%BC%88%E7%9F%A5%E5%85%B6%E7%84%B6%E5%B9%B6%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="LaTex-中的单位"><a href="#LaTex-中的单位" class="headerlink" title="LaTex 中的单位"></a>LaTex 中的单位</h3><p>首先我们来了解一下之后我们在使用空格时需要用到的 LaTex 中的单位。</p><ul><li><code>cm</code>：1 厘米</li><li><code>em</code>：大致等于一个当前字体的 <code>M</code> 的宽度</li><li><code>mu</code>：等于 1/18 <code>em</code> 的数学单位</li></ul><h3 id="LaTex-显示空格"><a href="#LaTex-显示空格" class="headerlink" title="LaTex 显示空格"></a>LaTex 显示空格</h3><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><ul><li><code>\hspace&#123;1cm&#125;</code>：插入 1cm 的水平空白，这里也可以使用其他的 LaTex 单位。如 <code>pt、mm、cm、in、ex、em、mu</code>。这个指令是可以很精确地控制显示多少空白的。</li><li><code>\quad</code>：大致和当前字体的 <code>M</code> 等宽的空白（= 18 mu = 1 em）</li><li><code>\,</code>：等于 3/18 个 <code>\quad</code>（= 3 mu）</li><li><code>\:</code>：等于 4/18 个 <code>\quad</code>（= 4 mu）</li><li><code>\;</code>：等于 5/18 个 <code>\quad</code>（= 5 mu）</li><li><code>\!</code>：等于 -3/18 个 <code>quad</code>（= -3 mu）</li><li><code>\</code>(在反斜杠后面跟一个空格)：等于正常文本中的一个空格</li><li><code>\qquad</code>：两倍的 <code>quad</code>（= 36 mu）</li></ul><h4 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h4><p>LaTex 代码</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex">$$\begin&#123;align&#125;<br>&amp; 0-&gt;a \hspace&#123;2cm&#125;bcd \\<br>&amp; 0-&gt;a \hspace&#123;1em&#125;bcd \\<br>&amp; 0-&gt;a \hspace&#123;18mu&#125;bcd \\<br>&amp; 1-&gt;a \quad bcd \\<br>&amp; 2-&gt;a \, bcd \\<br>&amp; 3-&gt;a \: bcd \\<br>&amp; 4-&gt;a \; bcd \\<br>&amp; 5-&gt;a \! bcd \\<br>&amp; 6-&gt;a \  bcd \\<br>&amp; 7-&gt;a \qquad bcd \\<br>&amp; 8-&gt;abcd<br>\end&#123;align&#125;$$<br></code></pre></div></td></tr></table></figure><p>效果</p><script type="math/tex; mode=display">\begin{align}& 0->a \hspace{2cm}bcd \\& 0->a \hspace{1em}bcd \\& 0->a \hspace{18mu}bcd \\& 1->a \quad bcd \\& 2->a \, bcd \\& 3->a \: bcd \\& 4->a \; bcd \\& 5->a \! bcd \\& 6->a \  bcd \\& 7->a \qquad bcd \\& 8->abcd\end{align}</script><p>参考：<a href="">hspace 相关</a>， <a href="https://www.overleaf.com/learn/latex/Spacing_in_math_mode#Reference_guide">quad 相关</a>，<a href="https://www.overleaf.com/learn/latex/Lengths_in_LaTeX">LaTex 单位</a></p><p>附注一：关于 quad 的解释</p><blockquote><p>The word “quad” is a traditional term in typography. It comes from Italian “quadratone” (big square). In old fashioned metal typography it meant a square piece of metal lower than type height that could be inserted between types for spacing them. In Italian typography it’s still called “spazio quadratone”.<br>It’s commonly as wide and high as an uppercase “M”, since this is usually the widest letter in a font and occupies a square area.<br>The command \quad takes its name from this traditional name; \qquad just means ”two quads”. However in TeX the \quad has no height, but only width.(来自：<a href="https://tex.stackexchange.com/questions/119068/meaning-of-quad#:~:text=In%20the%20Not%20so%20Short,is%20the%20space%20of%20MM%20.">stackexchange</a>)</p></blockquote><p>附注二：这里使用的 LaTex 解析器是 mathjax。</p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
      <tag>MathJax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改 Hexo-NexT 的 mathjax 配置，配置公式不要自动渲染编号</title>
    <link href="/2021/03/28/%E4%BF%AE%E6%94%B9%20Hexo-NexT%20%E7%9A%84%20mathjax%20%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%A6%81%E8%87%AA%E5%8A%A8%E6%B8%B2%E6%9F%93%E7%BC%96%E5%8F%B7/"/>
    <url>/2021/03/28/%E4%BF%AE%E6%94%B9%20Hexo-NexT%20%E7%9A%84%20mathjax%20%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%A6%81%E8%87%AA%E5%8A%A8%E6%B8%B2%E6%9F%93%E7%BC%96%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>修改 Hexo-NexT 的 mathjax 配置，配置公式不要自动渲染编号，具体操作如下</p><p>找到相关配置文件，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210328210344.png" alt="20210328210344"></p><p>这里将 <code>tags: &#39;ams&#39;</code> 这一行删掉即可。</p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>NexT</tag>
      
      <tag>MathJax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>证明严格对角占优矩阵经一步 Gauss 消元后仍为严格对角矩阵</title>
    <link href="/2021/03/28/%E8%AF%81%E6%98%8E%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E5%8D%A0%E4%BC%98%E7%9F%A9%E9%98%B5%E7%BB%8F%E4%B8%80%E6%AD%A5-Gauss-%E6%B6%88%E5%85%83%E5%90%8E%E4%BB%8D%E4%B8%BA%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E7%9F%A9%E9%98%B5/"/>
    <url>/2021/03/28/%E8%AF%81%E6%98%8E%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E5%8D%A0%E4%BC%98%E7%9F%A9%E9%98%B5%E7%BB%8F%E4%B8%80%E6%AD%A5-Gauss-%E6%B6%88%E5%85%83%E5%90%8E%E4%BB%8D%E4%B8%BA%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>设矩阵 $\mathbf{A} = (a<em>{ij}) \in \mathbf{R}^{n \times n}$ 满足 $a</em>{11} \neq 0$，且其经一步 Gauss 消元后成为</p><script type="math/tex; mode=display">\begin{pmatrix}a_{11} & \pmb{a}_{1}^{T} \\\pmb{0} & \pmb{A}_2 \\\end{pmatrix}</script><p>证明：若 $\pmb{A}$ 为严格对角占优矩阵，则经一次 Gauss 消元之后的 $\pmb{A}^{(1)}$ 也是严格对角矩阵.</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>注意到矩阵 $\pmb{A}^{(1)}$ 的 $i$ 行 $j$ 列元素为</p><script type="math/tex; mode=display">a_{ij}^{(1)} = a_{ij} - a_{i1} \frac{a_{1j}}{a_{11}}, \quad i, j = 2, 3, ..., n.</script><p>要证严格对角占优矩阵 $\mathbf{A}$ 经过一步 Gauss 消元后的矩阵 $\mathbf{A}^{(1)}$ 仍是严格对角占优矩阵，即证</p><script type="math/tex; mode=display">\left| a_{ii} - a_{i1} \frac{a_{1i}}{a_{11}} \right| > \sum_{j = 2, \\ j \neq i}^{n} \left| a_{ij} - a_{i1} \frac{a_{1j}}{a_{11}} \right|</script><p>然后，对不等式进行放缩，把左边缩小为</p><script type="math/tex; mode=display">\left| a_{ii} \right| - \left| a_{ii} \right| \frac{\left| a_{1i} \right|}{\left| a_{11} \right|}</script><p>右边放大为</p><script type="math/tex; mode=display">\sum_{j = 2, \\ j \neq i}^{n} \left( \left| a_{ij} \right| + \frac{\left| a_{1j} \right|}{\left| a_{11} \right|} \left| a_{i1} \right| \right)</script><p>放缩后的左边减去右边得</p><script type="math/tex; mode=display">\begin{equation}\begin{split}& \left| a_{ii} \right| - \left| a_{ii} \right| \frac{\left| a_{1i} \right|}{\left| a_{11} \right|} - \sum_{j = 2, \\ j \neq i}^{n} \left| a_{ij} \right| - \sum_{j = 2, \\ j \neq i}^{n} \frac{\left| a_{1j} \right|}{\left| a_{11} \right|} \left| a_{i1} \right| \\ & = \left| a_{ii} \right| - \sum_{j = 2, \\ j \neq i}^{n} \left| a_{ij} \right| - \sum_{j = 2}^{n} \frac{\left| a_{1j} \right|}{\left| a_{11} \right|} \left| a_{i1} \right| \nonumber \\ & > \left| a_{i1} \right| - \left| a_{i1} \right| \sum_{j = 2}^{n} \frac{\left| a_{1j} \right|}{\left| a_{11} \right|} \\ & > 0 \end{split}\end{equation}</script><p>所以，$\mathbf{A}^{(1)}$ 仍是严格对角占优矩阵。</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>线性代数</tag>
      
      <tag>计算方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的递归遍历空间复杂度为 O(logN) 问题</title>
    <link href="/2021/03/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA-O-logN-%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA-O-logN-%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在阅读《程序员面试代码指南 第 2 版》的第二章的 “将搜索二叉树转换成双向链表” 这一节时，书中有一个递归的代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ReturnType <span class="hljs-title">process</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReturnType(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    ReturnType leftList = process(head.left);<br>    ReturnType rightList = process(head.right);<br>    <span class="hljs-keyword">if</span> (leftList.end != <span class="hljs-keyword">null</span>) &#123;<br>        leftList.end.right = head;<br>    &#125;<br>    head.left = leftList.end;<br>    head.right = rightList.start;<br>    <span class="hljs-keyword">if</span> (rightList.start != <span class="hljs-keyword">null</span>) &#123;<br>        rightList.start.left = head;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReturnType(leftList.start != <span class="hljs-keyword">null</span> ? leftList.start : head, rightList.end != <span class="hljs-keyword">null</span> ? rightList.end : head);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码的作用是使用递归的方法嫁给你二叉搜索树转换成双向链表。</p><p>书中有这样一句话来描述其空间复杂度</p><blockquote><p>process 递归函数最多占用二叉树高度为 h 的栈空间，所以额外空间复杂度为 O(h)。</p></blockquote><p>这里的 $O(h)$ 即 $O(logN)$，其中，$N$ 为二叉树的节点个数。</p><p>一开始我并不理解为什么空间复杂度是 $O(logN)$，后来几经周折，终于想通。遂记录之。</p><p>我们可以这样理解，一个函数调用栈就是一个 “空间单位”，然后我们这个递归函数即使是调用到二叉树的最下面的一层，所耗费的函数调用栈的个数也不会超过 $logN$，因此，这个递归调用的空间复杂度是 $O(logN)$。</p><p>这里要注意一个<strong>误区</strong>，就是不要在计算函数调用栈的时候把函数执行过程中从头到尾的所有调用栈的数量认为是所耗费的空间数量。事实上，我们只需要函数执行到当前这一步时，程序所耗费的调用栈。我们可以把函数调用栈等价成一个 <code>int</code> 变量来理解，<code>int</code> 变量在程序执行的过程中可能会被重新赋值，但是，一个单个的 <code>int</code> 变量，无论它在程序执行的过程中被重新赋值多少次，它所占的空间始终是只有一个固定的数量，而不应该在每一次这个 <code>int</code> 值变化的时候都把它所占的空间再加一遍。</p><p>我们借助 IDEA 的调试工具看一下函数调用栈来加深理解</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210326192112.png" alt="20210326192112"></p><p>上图是一个二叉树的递归先序遍历，同时遍历到达最后一层时的递归调用栈。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>二叉树</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法》第 4 版 Java 环境搭建问题</title>
    <link href="/2021/03/25/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%E7%AC%AC-4-%E7%89%88-Java-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/25/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%E7%AC%AC-4-%E7%89%88-Java-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在阅读《算法》第 4 版时，由于程序的运行需要依赖书中提供的程序库，遂到官网下载之。</p><p>第一次下载的是 <code>stdlib.jar</code>，然后导入这个 jar 包到 IDEA 中后，发现无法在程序中 <code>import</code>，尝试了三种导入 jar 包的方法，都没有奏效。</p><p>最后解决的办法是，重新下载了全书所有的依赖整合成的依赖集 <code>algs4.jar</code>，然后重新导入到 IDEA，这下就解决了。这里说明一下，<code>stdlib.jar</code> 中的内容是 <code>algs4.jar</code> 的一部分。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325230522.png" alt="20210325230522"></p><p>附注：IDEA 导入 <code>jar</code> 包的一种方法</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325230821.png" alt="20210325230821"></p><p>然后将 <code>algs4.jar</code> 文件复制到 lib 文件中，</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325231159.png" alt="20210325231159"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325231223.png" alt="20210325231223"></p><p>发现 IDEA 可以智能提示了，说明已经导入成功了。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Bugs</tag>
      
      <tag>《算法4》</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steffensen 方法的推导及其二阶收敛的证明</title>
    <link href="/2021/03/23/Steffensen-%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%85%B6%E4%BA%8C%E9%98%B6%E6%94%B6%E6%95%9B%E7%9A%84%E8%AF%81%E6%98%8E/"/>
    <url>/2021/03/23/Steffensen-%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%85%B6%E4%BA%8C%E9%98%B6%E6%94%B6%E6%95%9B%E7%9A%84%E8%AF%81%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="Steffensen-方法的推导"><a href="#Steffensen-方法的推导" class="headerlink" title="Steffensen 方法的推导"></a>Steffensen 方法的推导</h3><p>由于 Steffensen 方法是由弦截法改造来的，所以，这里先给出弦截法的迭代公式</p><script type="math/tex; mode=display">x_{k + 1} = x_k - \frac{x_k - x_{k - 1}}{f(x_k) - f(x_{k - 1})} f(x_k), \quad k = 1, 2,... \ .</script><p>弦截法的定义及推导比较简单，这里不再赘述，然后我们来看如何将弦截法改造成 Steffensen 方法：若弦截法产生的迭代序列 ${ x<em>k }$ 充分接近于精确解 $x^*$，则 $x_k - x</em>{k - 1}$ 与 $f(x<em>k)$ 均充分接近于零。因此，我们可以近似地置 $x_k - x</em>{k - 1} \approx f(x<em>k)$，然后将弦截法迭代公式中的 $x</em>{k - 1}$ 给代换掉，就得到了 <strong>Steffensen</strong> 方法</p><script type="math/tex; mode=display">x_{k + 1} = x_k - \frac{f^2(x_k)}{f(x_k) - f(x_k - f(x_k))}, \quad k = 1, 2,... \ .</script><h3 id="证明-Steffensen-方法的二阶收敛性"><a href="#证明-Steffensen-方法的二阶收敛性" class="headerlink" title="证明 Steffensen 方法的二阶收敛性"></a>证明 Steffensen 方法的二阶收敛性</h3><p><strong>给定条件</strong>：设 $f(x) = 0$ 有根 $x_<em>$，其中 $f(x)$ 在 $x^</em>$ 的某邻域 $S(x^*, \delta)$ 内二阶连续可微，且 $f^{‘} (x) \neq 0$.</p><p><strong>证明：</strong></p><p>由 Steffensen 迭代公式，有</p><script type="math/tex; mode=display">\varphi(x) = x - \frac{f(x)}{f(x) - f(x - f(x))}</script><p>对 $f(x - f(x))$ 进行泰勒展开，得</p><script type="math/tex; mode=display">\displaystyle f(x - f(x)) = f(x) - f^{'}(x)f(x) + \frac{1}{2}f^{''}(\xi)f^{2}(x) ，</script><p>其中，$\xi$ 是 $x$ 和 $x - f(x)$ 之间的一个值。</p><p>于是，有</p><script type="math/tex; mode=display">g(x) = \frac{f(x) - f(x - f(x))}{f(x)} = \frac{f^{'}(x)f(x) - \frac{1}{2}f^{''}f^{2}(x)}{f(x)} = f^{'}(x) - \frac{1}{2} f^{''}(\xi) f(x) .</script><p>进而，</p><script type="math/tex; mode=display">\varphi (x) = x - \frac{f^{2} (x)}{f(x) - f(x - f(x))} = x - \frac{f(x)}{f^{'} (x) - \frac{1}{2} f^{''} (\xi) f(x)}.</script><p>因此，</p><script type="math/tex; mode=display">\frac{\varphi(x) - \varphi(x^*)}{x - x^*} = \frac{x - \frac{f(x)}{f^{'} (x) - \frac{1}{2} f^{''} (\xi) f(x)} - x^*}{x - x^*} = \frac{x - x^* - \frac{f(x)}{f^{'} (x) - \frac{1}{2} f^{''} (\xi) f(x)}}{x - x^*} = 1 - \frac{f(x) - f(x^*)}{x - x^*} \frac{1}{f^{'} (x) - \frac{1}{2} f^{''} (\xi) f(x)}</script><p>所以，</p><script type="math/tex; mode=display">\varphi^{'} (x^*) = \lim_{x \to x^*} \frac{\varphi(x) - \varphi(x^*)}{x - x^*} = 1 - f^{'} (x^*) \frac{1}{f^{'} (x^*)} = 0.</script><p>因为 $f^{‘}(x^*) \neq 0$，所以，Steffensen 方法至少是二阶收敛的。</p><p>注意，Steffensen 方法是严格二阶收敛的，但是，证明这个所需的知识不在学习范围内，暂时不作证明。</p><p>按：本文给出的 Steffensen 方法是华科的计算方法课本上的。网上还有其他的形式，在符号上略有区别，但是证明方法相同，而且，英文的证明在网上比较多。</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>证明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 命令行使用代理 VPN</title>
    <link href="/2021/03/23/Git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86-VPN/"/>
    <url>/2021/03/23/Git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86-VPN/</url>
    
    <content type="html"><![CDATA[<p>参考一：<a href="https://www.yixuju.cn/other/talking-about-proxy/">https://www.yixuju.cn/other/talking-about-proxy/</a></p><p>参考二：<a href="http://www.beiliangshizi.com/?p=532">http://www.beiliangshizi.com/?p=532</a></p><p>首先查看我们使用的 “相关” 软件的端口设置：</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210223012913.png" alt="20210223012913"></p><p>然后在 Git Bash 中敲入设置全局代理的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:4781&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:4781&#x27;</span><br></code></pre></div></td></tr></table></figure><p>上面的命令，一个是设置 http，另一个是设置 https。</p><p>设置完之后 git clone 一个仓库进行测试，发现速度飙到了 5.5 mb/s，而原来的速度是只有十几 kb/s 的。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210223012957.png" alt="20210223012957"></p><p>记录遇到的坑：</p><p>一开始我是使用的命令是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;http://127.0.0.1:4780&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;https://127.0.0.1:4780&#x27;</span><br></code></pre></div></td></tr></table></figure><p>这里的端口就对应上面的 http(s) 端口，然而，几经测试，发现都是没有效果，最后换成了 socks5，问题才得到解决。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Python 和 sympy 库来求逻辑函数的真值表</title>
    <link href="/2021/03/22/%E5%88%A9%E7%94%A8-Python-%E5%92%8C-sympy-%E5%BA%93%E6%9D%A5%E6%B1%82%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8/"/>
    <url>/2021/03/22/%E5%88%A9%E7%94%A8-Python-%E5%92%8C-sympy-%E5%BA%93%E6%9D%A5%E6%B1%82%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>一份可以作为模板的代码：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : simply_purefile.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/3/21</span><br><br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br>A, B, C, D, F, F2 = symbols(<span class="hljs-string">&#x27;A, B, C, D, F, F2&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N   A  B  C  D  |  F&#x27;</span>)<br><br><span class="hljs-comment"># 将 1 到 16 的二进制计算出来，然后转化成 bool 类型的值</span><br>bool_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    tmp_list = []<br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#123;0:0&gt;4b&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)<br>    <span class="hljs-comment"># print(str, end=&#x27;&#x27;)</span><br>    <span class="hljs-comment"># print(&#x27;  &#x27;, end=&#x27;&#x27;)</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>[j])<br>        tmp_list.append(num)<br>    bool_list.append(tmp_list)<br><span class="hljs-comment"># print(bool_list)</span><br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> eachone <span class="hljs-keyword">in</span> bool_list:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;4&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(num), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> eachone:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(j), end=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment"># 0 表示索引，&lt; 表示左对齐，3 表示占 3 个格子</span><br>    F = (A | B | (C &amp; D)).subs(&#123;A:eachone[<span class="hljs-number">0</span>], B:eachone[<span class="hljs-number">1</span>], C:eachone[<span class="hljs-number">2</span>], D:eachone[<span class="hljs-number">3</span>]&#125;)<br>    each_res = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> F == <span class="hljs-literal">True</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;|&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(each_res), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></div></td></tr></table></figure><p>输出是：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">N</span>   A  B  C  D  |  F<br><span class="hljs-attribute">0</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">0</span>  <br><span class="hljs-attribute">1</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">0</span>  <br><span class="hljs-attribute">2</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">0</span>  <br><span class="hljs-attribute">3</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">4</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">5</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">6</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">7</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">8</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">9</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">10</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">11</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">12</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">13</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">14</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">15</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br></code></pre></div></td></tr></table></figure><p>对于四元逻辑函数，我们在求不同函数的真值表时，只需要更换下面这一行代码即可</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">F = (A | B | (C &amp; D)).subs(&#123;A:eachone[<span class="hljs-number">0</span>], B:eachone[<span class="hljs-number">1</span>], C:eachone[<span class="hljs-number">2</span>], D:eachone[<span class="hljs-number">3</span>]&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Sympy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo NexT 使用 pandoc 插件渲染图片问题</title>
    <link href="/2021/03/22/Hexo-NexT-%E4%BD%BF%E7%94%A8-pandoc-%E6%8F%92%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/22/Hexo-NexT-%E4%BD%BF%E7%94%A8-pandoc-%E6%8F%92%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322232830.png" alt="20210322232830"></p><p>这个图片的原来的 <code>Markdown</code> 文本为</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">![<span class="hljs-string">20210321222711</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222711.png</span>)<br></code></pre></div></td></tr></table></figure><p>显然，<code>pandoc</code> 是将 <code>[]</code> 中的内容给渲染到图片的下方了。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>找到站点目录下的 <code>_configure.yml</code> 文件，并在末尾添加如下代码</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">pandoc:</span><br>  <span class="hljs-attr">extensions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-implicit_figures&#x27;</span><br></code></pre></div></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo s<br></code></pre></div></td></tr></table></figure><p>检验成效</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322233357.png" alt="20210322233357"></p><p>发现多余的文字已经消失了。</p><p>参考：<a href="https://wylu.me/posts/7bd83fc5/">https://wylu.me/posts/7bd83fc5/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandoc</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-NexT 首页和其他页面设置分页</title>
    <link href="/2021/03/22/Hexo-NexT-%E9%A6%96%E9%A1%B5%E5%92%8C%E5%85%B6%E4%BB%96%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5/"/>
    <url>/2021/03/22/Hexo-NexT-%E9%A6%96%E9%A1%B5%E5%92%8C%E5%85%B6%E4%BB%96%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<p>Hexo 分页的相关设置在站点目录下的 <code>_config.yml</code> 文件中，</p><p>首页文章数量分页设置</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Home page setting</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br></code></pre></div></td></tr></table></figure><p>归档、标签、分类等页面分页设置</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Pagination</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br></code></pre></div></td></tr></table></figure><p>上面的 <code>per_page</code> 就是设置每隔多少页就进行分页的变量。</p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试数学公式是否能正常显示</title>
    <link href="/2021/03/22/%E6%B5%8B%E8%AF%95%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%98%AF%E5%90%A6%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA/"/>
    <url>/2021/03/22/%E6%B5%8B%E8%AF%95%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%98%AF%E5%90%A6%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>测试一条数学公式</p><p>$x^2 + y ^2 = z^2$</p><p>复杂一点的</p><script type="math/tex; mode=display">\sum_{i = 1}^{100} i = 5050.</script><p>测试公式编号：</p><script type="math/tex; mode=display">\begin{align}-4 + 5x &= 2+y  \\ w+2 &= -1+w \\ ab &= cb\end{align}</script><script type="math/tex; mode=display">\begin{align}-4 + 5x &= 2+y \nonumber  \\ w+2 &= -1+w \\ ab &= cb\end{align}</script><p>附注：我这里在配置文件中关闭了标签显示，所以这里的测试无效。</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>草稿</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github 搭建个人博客</title>
    <link href="/2021/03/22/Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/03/22/Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里假设我们所有的准备工作都已经做好了，比如 npm 的安装、hexo 的安装等等。</p></blockquote><h2 id="基本部署"><a href="#基本部署" class="headerlink" title="基本部署"></a>基本部署</h2><p>执行下面的命令进行初始化。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo init<br></code></pre></div></td></tr></table></figure><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321221904.png" alt="20210321221904"></p><p>然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo g<br></code></pre></div></td></tr></table></figure><p>生成静态文件，命令执行后文件夹如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222053.png" alt="20210321222053"></p><p>然后，执行 <code>hexo s</code> 命令，在本地浏览器预览一下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222858.png" alt="20210321222858"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222821.png" alt="20210321222821"></p><p>之后，配置根目录下的 <code>_config.yml</code> 文件</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:fanlumaster/fanlumaster.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222711.png" alt="20210321222711"></p><h3 id="安装插件和部署到-Github"><a href="#安装插件和部署到-Github" class="headerlink" title="安装插件和部署到 Github"></a>安装插件和部署到 Github</h3><p>安装插件命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>部署命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo d<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321224721.png" alt="20210321224721"></p><p>可以访问 <a href="https://fanlumaster.github.io">https://fanlumaster.github.io</a> 来检验是否部署成功，下面是部署成功的页面</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321224948.png" alt="20210321224948"></p><p>我们再看一下我们的 Github 仓库</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322002245.png" alt="20210322002245"></p><p>发现多了好多文件，到这里，基本的部署就完成了，接下来就是要学习如何美化博客了。</p><h2 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h2><p>首先，我们选择的是 <code>NextT</code> 主题，第一步，先将其代码克隆到根目录下的 themes 文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure><p>这里要注意，这个仓库名是最新的，以前有些博客搭建教程上的已经过期。</p><p>这里我们使用 git 的好处是之后的更新可以使用 <code>git pull</code> 来快速更新。</p><p>然后，启用主题。打开根目录下站点配置文件 <code>_config.yml</code>，找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>，如下</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321225901.png" alt="20210321225901"></p><p>然后，打开主题的 <code>_config.yml</code> 文件，不是<strong>站点文件</strong>，找到 <code>Scheme Settings</code></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321230047.png" alt="20210321230047"></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321230228.png" alt="20210321230228"></p><p><code>next</code> 主题有四个样式，想用哪一个，就把其注释给取消即可，这里使用的是 <code>Gemini</code> 主题。</p><p>在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存，以免出现一些莫名其妙的问题。</p><p>然后重新执行 <code>hexo g</code> 以及 <code>hexo s</code> 来重新生成本地预览，如下</p><p>注意，这里有一个<strong>坑</strong>，修改主题的 <code>_config.yml</code> 配置时，这里是更换 <code>scheme</code>，没有将原来的 <code>scheme</code> 给注释掉，导致会出现 <code>ERROR Theme config load failed.</code></p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321232200.png" alt="20210321232200"></p><p>解决完坑之后，我们重新执行那三条指令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br>hexo g <span class="hljs-comment"># 生成静态文件</span><br>hexo s <span class="hljs-comment"># 生成本地预览</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321233034.png" alt="20210321233034"></p><p>到这里，主题就更换成功了。</p><h4 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h4><p>打开站点根目录下的 <code>_config.yml</code>，设置如下内容</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210401231748.png" alt="20210401231748"></p><p>参数说明：</p><ul><li>title: 网站标题</li><li>subtitle: 网站副标题</li><li>description: 网站描述</li><li>keywords: 关键字</li><li>author: 作者</li><li>language: 网站使用的语言</li><li>timezone: 网站时区。Hexo 默认使用您电脑的时区</li></ul><p>其中，language 一定要设置为主题能够识别的语言（不然中文可能出现乱码），在 <code>\themes\next\languages\</code> 中可以找到，中文有两种格式，<code>zh-CN</code>、<code>zh-hk</code>、<code>zh-tw</code> 可选。</p><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><h4 id="创建一篇博文"><a href="#创建一篇博文" class="headerlink" title="创建一篇博文"></a>创建一篇博文</h4><p>执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new <span class="hljs-string">&#x27;blog_name&#x27;</span> <span class="hljs-comment"># blog_name 填入文章名称</span><br></code></pre></div></td></tr></table></figure><p>Hexo 会帮我们在 <code>..\source\_posts</code> 下生成相关 <code>md</code> 文件</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321234534.png" alt="20210321234534"></p><h4 id="config-yml-文件"><a href="#config-yml-文件" class="headerlink" title="_config.yml 文件"></a>_config.yml 文件</h4><p>网站配置信息，也就是本文所称的<strong>站点配置文件</strong>，可以在此配置大部分的参数。我们之前也在这个文件里面配置了一些基本的配置。</p><h4 id="scaffolds-文件"><a href="#scaffolds-文件" class="headerlink" title="scaffolds 文件"></a>scaffolds 文件</h4><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321234856.png" alt="20210321234856"></p><p>模板文件夹，新建文章时，Hexo 会根据 <code>scaffolds</code> 来建立文件。默认的模板有三种 <code>draft.md</code>、<code>page.md</code>、<code>post.md</code>，我们也可以在该文件夹下创建属于自己定制的模板，推荐格式如下：</p><ul><li>title: 测试模板文件</li><li>date: 1616344047000</li><li>tags:</li><li>categories:</li><li>description:</li></ul><p>然后，输入 <code>hexo new blog &#39;文章名&#39;</code> 进行测试。</p><p>按：这里并没有进行真正的测试，命令的使用也有点模糊，比如，如果需要使用某个模板，那么，在新建文章时，是否需要再加必要的参数？</p><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>该文件夹中的内容最终将被 <code>push</code> 到 <code>Github</code> 仓库中。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方，除 <code>_posts</code> 文件夹之外，开头命名为 <code>_(下划线)</code> 的文件 / 文件夹将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝到 <code>public</code> 文件夹。</p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>主题文件夹，下载的主题都保存在此文件夹下。Hexo 会根据主题来生成静态页面。</p><p>另外主题的配置也有很多高级技巧，更多可以参考 Next 的官方网站。</p><p>还有许多个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能High功能、404网页设置等，可以参看：</p><ul><li>主题配置 - NexT 使用文档</li><li>第三方服务集成 - NexT 使用文档</li><li>内置标签 - NexT 使用文档</li><li>进阶设定 - NexT 使用文档</li><li>High功能特效 - Next 主题网站推荐博主的文章</li></ul><h4 id="寻找图床"><a href="#寻找图床" class="headerlink" title="寻找图床"></a>寻找图床</h4><p>我这里本身也是使用 <code>Github</code> 搭建的图床。免费且稳定。</p><h2 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h2><h4 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h4><ol><li>hexo new ‘postName’ # 新建文章</li><li>hexo clean # 清除缓存</li><li>hexo generate # 生成静态页面至 public 目录</li><li>hexo server # 开启预览访问端口（默认端口是 4000,‘Ctrl + C’ 关闭 server）</li><li>hexo deploy # 部署到 Github</li><li>hexo help # 查看帮助</li><li>hexo version # 查看 Hexo 的版本</li></ol><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><ol><li>hexo n == hexo new</li><li>hexo g == hexo generate</li><li>hexo s == hexo server</li><li>hexo d == hexo deploy</li></ol><h4 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h4><ol><li>hexo s -g # 生成本地预览</li><li>hexo d -g # 生成并上传</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322002245.png" alt="20210322002245"></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
