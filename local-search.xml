<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0417-0423 周读总结</title>
    <link href="/2023/04/23/0417-0423-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/23/0417-0423-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>本周没啥要紧事儿，就还是两本。《灵山》和《芙蓉镇》。高行健和古华的，这两个作家我想大部分学生都没有了解过，包括我在看之前也不知道，高行健是得过诺奖的，以一个法国华人的身份。古华是茅盾文学奖，这个是我可以去找来看的，因为最近重温路遥的作品，情绪依旧受到很大的震动，就顺带着找一下其他的茅奖作品。谈起路遥，陕西人艺的话剧路遥传，其实没有到非常好的程度，是一般好。最近，让我觉得非常好的作品是1984年的电影，人生。周里京和吴玉芳两个演员的演绎深得我心。这部电影，我可以当成传家宝，传给我的孩子看。好吧，实际的情况是，我并没有把这个电影看完，连小说我都无法将自己的情绪给抑制住去读那一行行触目惊心的文字，更何况是如此动人的影视作品呢？</p><p>今晚，在打球时，被问到一个问题，说是高考是否没考好，我说，那就是我真实的水平。大部分人这么问的时候，我会这么说，只有一个人例外，那就是我的母亲，我的母亲爱面儿，对子女来说，也并不是很不好的习惯，所以，我会说是，当时没发挥好，不然，如果和邻村的某某某(亲戚)一样复读一年，也可以考上某某大学。</p><p>现在的学校，我爱得深切，不在老师，在于整体一个浑然的氛围，在于对我的可以称得上是另一次我认可的塑造，自由的思想，无畏的精神。此番暂时按下不表。</p><h2 id="灵山">灵山</h2><p>我看不懂。小说的行文结构太过松散，故事性不是很强，一个一个，貌似也是双线结构？一个去寻找灵山，另一个是去游历。</p><p>从四川那里开始游历。像是游记，胡说一通。想到什么说什么，这个样子的话，那不是和我等普通人写随笔没什么两样了嘛。你呢，带有一些政治性的见解，倒也不是很多、很出格。讲掌故，讲历史，也捉摸不透。</p><p>你也写脏话，描写男女之间的原始的生理活动，他奶奶的，离开了这个，作品就不能获奖吗？</p><h2 id="芙蓉镇">芙蓉镇</h2><p>这个镇子似乎还真的有，在书中描绘的那个地方。</p><p>古华的文笔，很多人说不好，妈的，也不想想他是什么年代，学习读书的时间有咱多吗？你的文笔有人家好？这个文笔，我说了，我喜欢。最近读到的很难得的、有正气充盈其中的作品。</p><p>善有善报，恶有恶报，古华对那个时代的看法，倒是和曹文轩有点类似，并没有过度地去批判。人间自还有温情在的。</p><p>这种文风，才是八十年代应有的文风，他妈的，莫言真是一个异类。</p><p>无论在什么样的一种环境下，我们都不可以丧失对生活的希望，秦癫子，在运动中变成老油条，这未尝不是一件好事情。</p><p>最后的“郎心挂在妹心头”，虽说是南方的表述，也极为动人。</p><p>来讲一下这两部书在编辑排版上带给我的感觉，灵山，由于无法在大陆出版，所以，其编辑上的一些小错误还是挺多的，多到了影响阅读体验的地步。而芙蓉镇则是由于年代过于久远，可能会随着时间渐渐被埋没在历史的尘埃之中，在这个简体字版本中，夹杂着一些繁体字，错误、谬误什么的倒是不多，寥寥几处。</p><p>再谈一下两部小说中的人物，没有很有灵性的人物。我在现实中也经常观察，我有我的一套标准，只对几个人稍微阐述了一点，经过交流，他们把这个叫作ranking，不讨喜。所以，以后尽量针对文学作品中的人物发表我的一点点不成熟的看法。男性，都是那个样子，没有说会有卢云、秦仲海或者说高加林那样给我带来很大的心灵上的震动的人物。女性呢，由于我最近整理辞典，偶然间发现一个词汇，叫作冰雪心，用来形容女子的，国语辞典给出的含义有点单调，我认为可以再赋予其更加剔透的一层见解，然后我就开始寻觅，寻觅是否在文学作品中存在这样的女性人物，一番搜索，不太好找。本周这两本里面的女性，尤其是灵山里面的女性，太过庸俗。而像胡玉音那样的乡下女子，其性格比较淳朴，不符合冰雪的特性。找来找去，在重温人生这个小说和电影的时候，发现巧珍是独独适合于这个词语的。我相信，现今，任何一个有着类似的成长环境的年轻人，是不会不喜欢上巧珍的。也可以说是幻想，这样的人，在现实中当然是不存在的。忽又想起程灵素，终不如巧珍。</p>]]></content>
    
    
    
    <tags>
      
      <tag>马拉松</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0410-0416 周读总结</title>
    <link href="/2023/04/18/0410-0416-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/18/0410-0416-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>周末去南京玩了一圈，读书没有落下，高铁上的时间毕竟很多嘛。</p><p>拢共还是读了两本，标准的周阅读量。之前那一周的《红高粱家族》如果也算在内的话，那应该是三本。不算的话，就还是两本：《贫穷的质感》和《酒国》。</p><p>红高粱家族和红高粱的区别是，红高粱家族包含了红高粱，红高粱是一部中篇小说，大概五六万字左右，和儿童小说的篇幅差不多，看完之后，我去找红高粱这本书，发现里面只有这么一个中篇，我的室友赵桑读的应该是这个版本，所以我和他谈起后面的狗道、奇死等等，他并无印象。</p><h2 id="红高粱家族">红高粱家族</h2><p>东北高密乡，书的扉页的几句话比较矫情，什么切碎，什么酱油。别整这么矫情呀。</p><blockquote><p>我愿扒出我的被酱油腌透了的心，切碎，放在三个碗里...</p></blockquote><p>故事性比较浅，父亲，爷爷余占鳌，奶奶戴小九，二奶奶恋儿，其他的人物，不记也罢。几十万字的小说，情节非常之少，但是语言又非常之妙。莫言对他的山东家乡是很有感情的，我对我的苏北家乡也很有感情，要是我来写家乡，那肯定是不及老莫同志的万分之一。</p><p>莫言的文字风格呢，如果让不明世事的初中、高中生来评价，两个字——变态，变态吧。于我，至少这个红高粱系列还好，什么性方面的描写，各种各样的粗鄙之语，乡下人骂战的词句，等等等等。再看另外一面，文字的魅力，国语的功底，不愧摘过茅奖和诺奖。</p><p>老莫自己也说，他的文字不愿意去抄来摘去，混一个文抄公，字里行间，深有体会。举个例子，人家骂人都说，我操你妈，他说，我操死你活妈。人家说惶惶如丧家之犬，他说，急急如丧家之狗，忙忙如漏网之鱼。(偏一下，这个“惶惶如丧家之犬”，我觉得武汉大学的张星久读起来最有意思，在他的讲中国古代政治的课程里面)</p><p><img src="https://i.imgur.com/p9g5Ywe.png" /></p><p>这个典故在古典通俗小说里面经常出现，也是，老一辈的作家读的通俗小说肯定是不好的，这就和我们现在的大学生读的网络小说数量很大一个道理。</p><p>故事从头到尾叙述的不过是上个世纪国、共、日的一些事情，有些东西，我们是要深切地铭记的。在故事之外，吸引我的是老莫那天才的想象，连同那令人妒忌的对于语言的掌控自如。简单举几个例子，</p><blockquote><p>爷爷的眼像墨水河边的猫眼石一样，颜色瞬息万变。</p></blockquote><blockquote><p>父亲躲在门后，看着二奶奶那两扇在灯光下呈现出琥珀颜色、并像琥珀一样透明的双耳，心里荡漾着一种五颜六色的神秘感。</p></blockquote><p>一些谶语呢，倒不是很出格，连批判的东西，也是以一种很隐晦的手法去写，这就要到后面的《酒国》再讲了，</p><blockquote><p>日本狗，中国狗，三十年后遍地走。</p></blockquote><blockquote><p>而一个党管一个国，七嘴八舌，公公嫌凉，婆婆嫌热，到头倒弄成了七零八落。</p></blockquote><p>一个小小的我个人感知到的小细节，老莫喜欢使用“漶散”这个词儿，我更多的时候听到这个音想到的是“涣散”。</p><p>莫言自己给自己的故事定性——最英雄好汉最王八蛋，嗯，你自己写的文字也是这个风格。</p><p>这部小说读过也就读过了，又不是写我的故乡的。</p><h2 id="贫穷的质感">贫穷的质感</h2><p>我来给这个集子定个性，现代时髦女性的对于英国的一个时髦视角。</p><p>这个时髦，不是先天时髦，她的阶层先天并不好。所以，她的文字中还是有一些贫苦的多少年前的气息，同类不难察觉。</p><p>艺术生，搞文字不是很熟练，有时候也能有一些我觉得眼前一亮的修辞或者对文字的运用，平时应该是有阅读的习惯。</p><p>这些观察的真实性我并不能去肯定，英国的底层人民生活真的会差到这种地步？让我印象很深刻的一点是，英国大学的教师要在编制与小时雇工之间风雨飘摇了？</p><p>我们这里的穷人吃粗粮，我觉得还好，就如我的家乡，即使生活现在好了太多，依然是会把煎饼作为主食之一，这种食物如果可以果腹，那么对于身体反而是有益的，而书中的例子是什么，吃的是糖，母亲为了省下面包给孩子吃，自己就去吃白砂糖，富人阶级说，你们穷人那么胖，都是管不住自己的嘴，吃那么多糖，我认为这是和中国的“何不食肉糜”的道理是一样的。</p><p>其他的，如英国的福利制度，似乎是没我门想象得那么美好，英国的脱欧，呵，大学的一个政治老师，说，我的女儿在英国读书，投了脱欧的一票。我不知是好是坏，她自己很开心。也正是这个老师，说什么网球是贵族运动，这个用词好吗？不太清楚。也还是这个老师，说她本该退休了，已经用脚丈量完中国的大地了，如果不是有疫情，那么，她要丈量完世界的大地，趾高气昂。无怪乎，我在HUST里经常可以听到同侪们大声谈论政治、阶级等等。今天中午就有听到，应该是大一大二的学生，在谈论阶级，谈论社会的制度，公平正直，革命。多少年了，劣根性还是摆在那里。</p><p>举一个我认同作者的语言的例子，</p><blockquote><p>她在两面夹壁间，偻步潜行，百死一生。</p></blockquote><p>总的来说，这本书的视角是从一个穷人的那里出发的。我想，大部分人是可以产生一定的共鸣的。</p><h2 id="酒国">酒国</h2><p>在南京的周日的夜里，我躺在高中同学王桑的床上，我说，我给你讲两个吃人的故事吧，一个是鲁迅的狂人日记，话还没说完，他就说停停，恐怖，不听。</p><p>妈的，你还挺机灵，莫言的这个故事确实是挺瘆人的。</p><p>真的恶心，小说的结构很新颖，我觉得很好，比村上的《世界尽头与冷酷仙境》的双线结构要高级许多，每一章基本上有四节，第一节是莫言所写，二三节是莫言和李一斗的通信，第四节是李一斗的大作，李一斗和莫言当然都是虚构的。酒国也是虚构，哈哈迷迷，梅梅痴痴。</p><p>尤其是那一道叫作龙凤呈祥的菜，他妈的，一根什么，然后一扇什么，公驴和母驴的性器官他狗日的直接拿出来写，妈的，不管是什么年纪，我都要说一句，变态，你他娘的一点都不加遮掩的就直接写出来，我惹。我眼睛脏了。</p><p>吃小孩也是，写得那么逼真，偏偏来一个好像是小孩，又好像不是小孩，妈的，到底是不是呢？我就是不说，好像是在批判官场，又好像没有批判，有一手的。不得不佩服这英雄好汉王八蛋的手法。采燕那里，脑浆炸裂，在年幼的师母面前。你他娘的肯定看过杀人的场景，至少录像肯定看过。搞这么真。</p><p>语言当然还是好坏参半，习惯乡言的人可能会认为十全十美，</p><p>各种各样的批判呢，管中窥豹一下，</p><blockquote><p>走遍天下都不怕。你们不是盼着出国吗？只要掌握了这道超水平大菜，你们就等于领到了永久签证，你们就能征服洋人，无论是美国佬、德国佬还是别的什么佬。</p></blockquote><p>按：人家古人是庖丁解牛，这里解的是什么呢？小孩，送到餐桌上的小孩。好骂。</p><p>再来，</p><blockquote><p>“我要肏遍酒国的美女！”</p></blockquote><p>粗俗。偏偏说此话的人，前面还有一点正面性。</p><p>再来，算了，不来了。其他什么“妖精现实主义”、人肉的味道，诸如此类，读者诸君，感兴趣的，自行翻阅去喽。</p><p>总体来讲呢，莫言算是一个文坛流氓，但是他的才华旁人是羡慕不来的，他是我目前见过的最不文抄公的一个，我多么希望他不是出生在高密乡，而是苏北的我们那个乡，这样，我的心愿就换个形式实现了。</p><p>2022.04.18 夜</p>]]></content>
    
    
    
    <tags>
      
      <tag>马拉松</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows C++ 获取任意一个窗口的文本光标 caret 的坐标</title>
    <link href="/2023/04/12/Windows-C-%E8%8E%B7%E5%8F%96%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E7%9A%84%E6%96%87%E6%9C%AC%E5%85%89%E6%A0%87-caret-%E7%9A%84%E5%9D%90%E6%A0%87/"/>
    <url>/2023/04/12/Windows-C-%E8%8E%B7%E5%8F%96%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E7%9A%84%E6%96%87%E6%9C%AC%E5%85%89%E6%A0%87-caret-%E7%9A%84%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>国家不幸诗家幸，乒乓不好程序好。</p><p>嗯，昨天话还没写完，夜里就把问题给解决了。夜里 12点钟爬上床，心里还是放不下，手机上不太想用 chatgpt，就用传统的Google，搜索一二，一二再变三四，好，点开一个 stackoverflow 的页面，</p><blockquote><p>How to use CHILDID_SELF?</p></blockquote><p><ahref="https://stackoverflow.com/questions/73911444/how-to-use-childid-self"class="uri">https://stackoverflow.com/questions/73911444/how-to-use-childid-self</a></p><p>这个小子，把我想问的问题给问出来了，问得还挺认真的，他提到的那篇微软的帖子，我也看过，</p><blockquote><p>How to get caret position in ANY application from C#?</p></blockquote><p><ahref="https://learn.microsoft.com/en-us/answers/questions/818647/how-to-get-caret-position-in-any-application-from"class="uri">https://learn.microsoft.com/en-us/answers/questions/818647/how-to-get-caret-position-in-any-application-from</a></p><p>C# 和 C++ 不分家的，而且，最后，人家给的是一个完整的 C/C++程序，我运行了一下，发现是可以直接跑通的。于是，夜里十二点半，我告诉赵桑，能不能给我五分钟，下床，测试，测试成功，五分钟后，上床，我对赵桑说，赵桑，我的毕业设计结束了，就两行代码，解决了我的问题！激动地辗转反侧，书也不读了，看比赛，乒乓球比赛。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;oleacc.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;Oleacc.lib&quot;</span>)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">long</span> x;<br>    <span class="hljs-type">long</span> y;<br>    <span class="hljs-type">long</span> w;<br>    <span class="hljs-type">long</span> h;<br>&#125; Rect;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    HWND hwnd;<br>    DWORD pid;<br>    DWORD tid;<br><br>    <span class="hljs-built_in">CoInitialize</span>(<span class="hljs-literal">nullptr</span>); <span class="hljs-comment">// &lt;-- add this</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>        GUITHREADINFO info;<br>        info.cbSize = <span class="hljs-built_in">sizeof</span>(GUITHREADINFO);<br><br>        hwnd = <span class="hljs-built_in">GetForegroundWindow</span>();<br>        tid = <span class="hljs-built_in">GetWindowThreadProcessId</span>(hwnd, &amp;pid);<br><br>        <span class="hljs-built_in">GetGUIThreadInfo</span>(tid, &amp;info);<br><br>        IAccessible* object = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(<span class="hljs-built_in">AccessibleObjectFromWindow</span>(info.hwndFocus, OBJID_CARET, IID_IAccessible, (<span class="hljs-type">void</span>**)&amp;object))) &#123;<br>            Rect rect;<br><br>            VARIANT varCaret;<br>            varCaret.vt = VT_I4;<br>            varCaret.lVal = CHILDID_SELF;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(object-&gt;<span class="hljs-built_in">accLocation</span>(&amp;rect.x, &amp;rect.y, &amp;rect.w, &amp;rect.h, varCaret))) &#123;<br>                std::cout &lt;&lt; rect.x &lt;&lt; std::endl;<br>            &#125;<br><br>            object-&gt;<span class="hljs-built_in">Release</span>();<br>        &#125;<br><br>        <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">CoUninitialize</span>(); <span class="hljs-comment">// &lt;-- add this</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>魔法的两行是：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">CoInitialize</span>(<span class="hljs-literal">nullptr</span>); <span class="hljs-comment">// &lt;-- add this</span><br><span class="hljs-built_in">CoUninitialize</span>(); <span class="hljs-comment">// &lt;-- add this</span><br></code></pre></div></td></tr></table></figure><p>都说 Windows 里面有很多黑魔法，Windows 外面也不少嘛，该死！你就在一个<code>GetCaretPos</code>函数里面把所有的东西都给我封装好，不可以吗？</p><p>马龙输掉了，输给了林昀儒，我觉得可以接受，林的反手很好，其为人更是讨人喜欢，带有一点腼腆，英语好，有礼貌。</p><p>第二天上午，在钩子程序中测试，发现是不可以在钩子程序中使用，程序如下，</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;oleacc.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;Oleacc.lib&quot;</span>)</span><br><br>HHOOK g_hook = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 全局钩子句柄</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getCaret</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>        <span class="hljs-type">long</span> x;<br>        <span class="hljs-type">long</span> y;<br>        <span class="hljs-type">long</span> w;<br>        <span class="hljs-type">long</span> h;<br>    &#125; Rect;<br><br>    HWND hwnd;<br>    DWORD pid;<br>    DWORD tid;<br><br>    <span class="hljs-built_in">CoInitialize</span>(<span class="hljs-literal">nullptr</span>);  <span class="hljs-comment">// &lt;-- add this</span><br><br>    <span class="hljs-comment">// system(&quot;cls&quot;);</span><br><br>    GUITHREADINFO info;<br>    info.cbSize = <span class="hljs-built_in">sizeof</span>(GUITHREADINFO);<br><br>    hwnd = <span class="hljs-built_in">GetForegroundWindow</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hwnd test =&gt; &quot;</span> &lt;&lt; hwnd &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    tid = <span class="hljs-built_in">GetWindowThreadProcessId</span>(hwnd, &amp;pid);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;tid test =&gt; &quot;</span> &lt;&lt; tid &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    <span class="hljs-built_in">GetGUIThreadInfo</span>(tid, &amp;info);<br><br>    IAccessible *object = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(<span class="hljs-built_in">AccessibleObjectFromWindow</span>(info.hwndFocus, OBJID_CARET, IID_IAccessible, (<span class="hljs-type">void</span> **)&amp;object))) &#123;<br>        Rect rect;<br><br>        VARIANT varCaret;<br>        varCaret.vt = VT_I4;<br>        varCaret.lVal = CHILDID_SELF;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(object-&gt;<span class="hljs-built_in">accLocation</span>(&amp;rect.x, &amp;rect.y, &amp;rect.w, &amp;rect.h, varCaret))) &#123;<br>            std::cout &lt;&lt; rect.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; rect.y &lt;&lt; std::endl;<br>        &#125;<br><br>        object-&gt;<span class="hljs-built_in">Release</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// Sleep(500);</span><br><br>    <span class="hljs-built_in">CoUninitialize</span>();  <span class="hljs-comment">// &lt;-- add this</span><br>&#125;<br><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">KeyboardProc</span><span class="hljs-params">(<span class="hljs-type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;<br>    <span class="hljs-comment">// 取出钩子</span><br>    KBDLLHOOKSTRUCT *s = <span class="hljs-built_in">reinterpret_cast</span>&lt;KBDLLHOOKSTRUCT *&gt;(lParam);<br>    <span class="hljs-keyword">if</span> (nCode &gt;= <span class="hljs-number">0</span> &amp;&amp; wParam == WM_KEYDOWN) &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">GetAsyncKeyState</span>(VK_CONTROL) &amp; <span class="hljs-number">0x8000</span>) &amp;&amp; (s-&gt;vkCode == VK_SPACE)) &#123;<br>            <span class="hljs-built_in">getCaret</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_hook, nCode, wParam, lParam);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    g_hook = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD_LL, KeyboardProc, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 安装钩子</span><br><br>    MSG msg;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessage</span>(&amp;msg, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">TranslateMessage</span>(&amp;msg);<br>        <span class="hljs-built_in">DispatchMessage</span>(&amp;msg);<br>    &#125;<br><br>    <span class="hljs-built_in">UnhookWindowsHookEx</span>(g_hook);  <span class="hljs-comment">// 卸载钩子</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>经过研究，发现这是钩子程序本身的问题，它的线程不一样，具体是怎么样一种道理我暂时还没搞明白，折腾了两三个小时之后，我决定直接把这个模块给上到我的输入法程序中，因为在我的输入法程序中，这个获取caret 的模块是跑在主函数中的，线程一致，所以，试验了一下，果然可以！</p><p>我的输入法仓库如下，</p><p><a href="https://github.com/fanlumaster/FullIME"class="uri">https://github.com/fanlumaster/FullIME</a></p><p>大体上，上面就是我解决这个问题的心路历程，这个博客更多还是写给将来的我来回忆的吧。我在昨天白天也研究出了另一种方法，那个方法如我前一篇博客所说，只能解决像word、notepad、文件管理器这种使用 wpf、winform技术的经典应用程序中的获取 caret 的问题。</p><p>下面，总结一下我目前的两种方法吧，</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;oleacc.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;oleacc.lib&quot;</span>)</span><br><br><span class="hljs-function">std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">getCaretPosByGUIThreadInfo</span><span class="hljs-params">()</span> </span>&#123;<br>    std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; caretPos;<br>    HWND target_window = <span class="hljs-built_in">GetForegroundWindow</span>();<br>    GUITHREADINFO info;<br>    info.cbSize = <span class="hljs-built_in">sizeof</span>(GUITHREADINFO);<br>    BOOL result = <span class="hljs-built_in">GetGUIThreadInfo</span>(<span class="hljs-built_in">GetWindowThreadProcessId</span>(target_window, <span class="hljs-literal">NULL</span>), &amp;info) &amp;&amp; info.hwndCaret;<br>    <span class="hljs-keyword">if</span> (!result) &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> error log</span><br>    &#125;<br>    POINT pt;<br>    pt.x = info.rcCaret.left;<br>    pt.y = info.rcCaret.top;<br>    <span class="hljs-built_in">ClientToScreen</span>(info.hwndCaret, &amp;pt);  <span class="hljs-comment">// 转化成以整个屏幕为坐标系的坐标</span><br>    <span class="hljs-keyword">if</span> (pt.x == <span class="hljs-number">0</span> &amp;&amp; pt.y == <span class="hljs-number">0</span>) &#123;<br>        caretPos.first = <span class="hljs-number">20</span>;<br>        caretPos.second = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">return</span> caretPos;<br>    &#125;<br>    caretPos.first = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(pt.x);<br>    caretPos.second = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(pt.y + <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">return</span> caretPos;<br>&#125;<br><br><span class="hljs-function">std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">getCaretPosByAcc</span><span class="hljs-params">()</span> </span>&#123;<br>    std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pos = std::<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>        <span class="hljs-type">long</span> x;<br>        <span class="hljs-type">long</span> y;<br>        <span class="hljs-type">long</span> w;<br>        <span class="hljs-type">long</span> h;<br>    &#125; Rect;<br><br>    HWND hwnd;<br>    DWORD pid;<br>    DWORD tid;<br><br>    <span class="hljs-built_in">CoInitialize</span>(<span class="hljs-literal">nullptr</span>);  <span class="hljs-comment">// &lt;-- add this to init COM</span><br><br>    GUITHREADINFO info;<br>    info.cbSize = <span class="hljs-built_in">sizeof</span>(GUITHREADINFO);<br><br>    hwnd = <span class="hljs-built_in">GetForegroundWindow</span>();<br>    tid = <span class="hljs-built_in">GetWindowThreadProcessId</span>(hwnd, &amp;pid);<br><br>    <span class="hljs-built_in">GetGUIThreadInfo</span>(tid, &amp;info);<br><br>    IAccessible *object = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(<span class="hljs-built_in">AccessibleObjectFromWindow</span>(info.hwndFocus, OBJID_CARET, IID_IAccessible, (<span class="hljs-type">void</span> **)&amp;object))) &#123;<br>        Rect rect;<br><br>        VARIANT varCaret;<br>        <span class="hljs-comment">// varCaret.n1.n2.vt = VT_I4;</span><br>        <span class="hljs-comment">// varCaret.n1.n2.n3.lVal = CHILDID_SELF;</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            这里代码提示会报错，但是其实这个代码是正确且可以正常编译运行的</span><br><span class="hljs-comment">        */</span><br>        varCaret.vt = VT_I4;<br>        varCaret.lVal = CHILDID_SELF;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(object-&gt;<span class="hljs-built_in">accLocation</span>(&amp;rect.x, &amp;rect.y, &amp;rect.w, &amp;rect.h, varCaret))) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                加上这个 8 主要是为了解决 VSCode 的光标捕捉在使用 vim 插件的情况下有时会不准确的问题</span><br><span class="hljs-comment">            */</span><br>            pos.first = rect.x + <span class="hljs-number">8</span>;<br>            pos.second = rect.y + rect.h;<br>        &#125;<br><br>        object-&gt;<span class="hljs-built_in">Release</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">CoUninitialize</span>();  <span class="hljs-comment">// &lt;-- add this to release COM</span><br>    <span class="hljs-keyword">return</span> pos;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>关于那两行魔法代码，即初始化和释放 COM 的代码，可以放在 main函数中，这样就不用每次都初始化和释放了。</p><p>附一点点生活的小事儿，今天重看了异邦人·无皇刃潭，最后那段打斗及配乐依旧令我震撼。</p><p><img src="https://i.imgur.com/Wq6rGTK.png" /></p><hr /><p>参考：</p><p>1、<ahref="https://stackoverflow.com/questions/73911444/how-to-use-childid-self"class="uri">https://stackoverflow.com/questions/73911444/how-to-use-childid-self</a><br />2、<ahref="https://learn.microsoft.com/en-us/answers/questions/818647/how-to-get-caret-position-in-any-application-from"class="uri">https://learn.microsoft.com/en-us/answers/questions/818647/how-to-get-caret-position-in-any-application-from</a><br />3、<ahref="https://baohaojun.github.io/blog/2013/10/04/0-Win32-IME-Programming.html"class="uri">https://baohaojun.github.io/blog/2013/10/04/0-Win32-IME-Programming.html</a><br />4、<ahref="https://lindexi.gitee.io/post/WPF-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E6%B3%95-IME-%E8%B7%9F%E9%9A%8F%E5%85%89%E6%A0%87.html"class="uri">https://lindexi.gitee.io/post/WPF-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E6%B3%95-IME-%E8%B7%9F%E9%9A%8F%E5%85%89%E6%A0%87.html</a><br />5、ChatGPT</p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>输入法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fany Full&#39;s Ping Pong Day of Shame</title>
    <link href="/2023/04/11/Fany-Full-s-Ping-Pong-Day-of-Shame/"/>
    <url>/2023/04/11/Fany-Full-s-Ping-Pong-Day-of-Shame/</url>
    
    <content type="html"><![CDATA[<p>吭，一个左正蹬，一个右鞭腿，一个左刺拳，我全没防出去啊。</p><p>来骗，来，偷袭，我一个快毕业的老同志，这好吗？这很好。</p><p>根宝说，又不是没赢过你，我上我都可以嬴。</p><p>他奶奶的。算了，输了就是输了。恢复锻炼才是正事儿。服了，正手也能拉丢。</p><p>不说这个了，今天算是解决了一个之前觉得比较困难的问题，即，获取Windows 下的前景窗口，或者说聚焦的窗口的 caret的坐标位置，当然，只解决了大概一半，另一半的问题出在了 chrome 浏览器和electron 系的软件中，解决问题的关键大概在 AccessibleObjectFromWindow这里。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0403-0409 周读总结</title>
    <link href="/2023/04/09/0403-0409-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/09/0403-0409-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>昨晚喝酒的时候，我的室友，ZH 桑说，L桑，你是不是很久没有更新博客了。</p><p>他奶奶的，又是一个抓住我那一个博客不放的，也好，ZH桑也知道我是一个比较注重隐私的人，就没有多说。后面也只是一个劲儿地针对来我这个单人宿舍蹭床位这件事向我致歉，我一边想着，太客气了，没有必要，一边也稍微有点觉得，人与人之间保持一定的距离似乎要更好一点。</p><p>喝酒的间隙，在路边的商店买到一包软金万宝路，尝尝就尝尝吧。</p><p>烟瘾是被这个星期看的话剧勾起来的，陕西人艺的《路遥传》。这个剧是好剧，然后又去搜集有没有《繁花》，还是找不到，无意间看到《尘埃落定》的话剧，小伙子长得挺标致，又突然来这么一句，手里举着望远镜，</p><blockquote><p>我看见卓玛的大奶子了。</p></blockquote><p>好，就拾起以前放下的《尘埃落定》，花了两天读完。另一本莫言的《红高粱家族》还留了一点尾巴，好在给我的阅读体验渐至佳境。</p><p>那么，来谈一谈阿来的这本尘埃落定。</p><p>小时候，初中时候在遇到的，这是阅读软件里面的一本免费的书。翻开，第一章没坚持读下去，少爷的故事，还是一个傻子少爷的故事，有什么好看。过了多少年了，捡起来，同样是这些文字，给我的感觉全然不似原先那般枯燥。我原先很不懂人情世故，在生活中浸染了这么多年，懂了之后，却也并不在意，倒是喜欢看这些类型的，也是因为这个原因，我觉得日本的动漫对我的吸引力小了，就是巨人，它的一些场景也偶尔让我扶额尴尬。尘埃落定呢，藏族风俗小说，土司家族的故事，不似中原的钩心斗角那般错综复杂，该有的那一套也还是一点不少。</p><p>傻子并不是真傻，似乎也不是装傻。最后对于自己被刺杀也并不害怕。整体的氛围带有一点魔幻主义色彩，和我当时看的网络小说藏地密码有些地方对得上。藏地的佛教，麦其土司，带有一种寓言意味的叙述，令我着迷。</p><p>鸦片，和我预想的对剧情的作用不一样，它甚至没有那么重要，程度可以和现代人的香烟作类比。</p><p>麦其土司，他什么都懂，一个小封地领主似的人物，两个继承人，大儿子和傻子，聪明人和傻瓜，看到后面，我在宿舍里面大笑，傻子当然一直都是很聪明的。</p><p>各种各样的修辞，令我最满意的肯定还是书里面的奇妙的比喻。这样的小说，即使它沾了一点魔幻现实主义，我依然会赞同它获得茅盾文学奖。</p><blockquote><p>儿子啊，你要记住，你可以把他们当马骑，当狗打，就是不能把他们当人看。</p></blockquote><blockquote><p>她嘻嘻一笑，撩起长裙盖住自己的脸。我就看见她双腿之间那野兽的嘴巴了。</p></blockquote><blockquote><p>吃东西时，我的嘴里照样发出很多声音。卓玛说，就像有人在烂泥里走路。</p></blockquote><blockquote><p>不想凡事都赢的人是聪明人，说老实话，虽然我自己傻，但喜欢聪明人。</p></blockquote><blockquote><p>在这片土地上，没有任何土司会把希望寄托在别人发慈悲上。只有可怜的百姓，才会有如此天真的想法。</p></blockquote><blockquote><p>我又告诉她，泪水挂在她乳房上就像露水挂在苹果上一样。她就破涕为笑了。</p></blockquote><blockquote><p>她又叹息了一声，使我心都碎了。要是她一直叹气的话，会要了我的性命的。</p></blockquote><blockquote><p>美丽无比的塔娜，她使我伤心了。</p></blockquote><blockquote><p>是的，要是说把一个姑娘压在下面，把手放在她乳房上，把自己的东西刺进她的肚子里，并使她流血，就算得到了的话，那我得到她了。</p></blockquote><blockquote><p>我突然对塔娜说：“你不爱我，就走开好了。去找你爱的男人，我不会要你母亲还我粮食。”</p></blockquote><blockquote><p>她真把我当成一个傻子了。她为了麦子嫁给我，但不爱我。这没有关系。因为她那么漂亮，因为我爱她。但我绝对不要她对我这样。一个仇人都不能把我怎么样，她还能把我怎么样。于是，我重重地给了她一个耳光。这个美女尖叫一声，她用十分吃惊的眼神看着我，接下来，我有点不知道该怎么办了。</p></blockquote><blockquote><p>每当有不寻常的事情发生时，总会有一个人出来诠释，大家都沉默着在等待，等待那个诠释者。</p></blockquote><blockquote><p>短短的一刻，他的脸上变出了一年四季与风雨雷电。</p></blockquote><blockquote><p>因为睡了一个晚上，更因为不肯讲话，我一直闭着的嘴开始发臭了。我哈出一股臭气，她就把鼻子掩起来，出门去了。我像个濒死的动物，张着嘴，大口大口哈出嘴里的臭气。直到嘴里没有臭气了，我才开始想自己的问题：我是谁？我在哪里？我躺在床上想啊，想啊，望着墙角上挂满灰尘和烟火色的蛛网，后来，那些东西就全部钻到我脑子里来了。</p></blockquote><blockquote><p>翁波意西口里还有舌头时，我问过他历史是什么。他告诉我，历史就是从昨天知道今天和明天的学问。</p></blockquote><blockquote><p>在我心里，又一次涌起了对她的爱，是的，从开始时我就知道，她是那么漂亮，举世无双，所以，不管她犯下什么过错，只要肯回心转意，我都会原谅她的。</p></blockquote><blockquote><p>你妻子的美貌举世无双。</p></blockquote><blockquote><p>她在床上放肆地大叫，过足了瘾，便光着身子蜷在我怀里睡着了。就像她从来没有在我最困难的时候，投入到别的男人——而这个男人恰好又是我的哥哥和对手——怀里一样。她睡着了，平平稳稳地呼吸着。</p></blockquote><blockquote><p>我说：“一刀扎在肚子上，不光是血，屎也流出来了。”</p></blockquote><blockquote><p>老尔依说：“要是屎没有流出来，就能。”尔依很干脆地说：“父亲的意思是说，大少爷会叫自己的粪便毒死。</p></blockquote><blockquote><p>我说：“要是有人挂念土司，那是挂念土司的位子。”</p></blockquote><blockquote><p>绝色女子总有男人打主意，这个我知道。要是他们来抢，我能竭尽全力保护。但她甘心情愿到别人床上，那谁也没有办法。</p></blockquote><blockquote><p>我想，汉人跟我们还是很相像的。比如，一件不好的事，直接说出来，不好听，而且叫人难受，就换一个说法，一个好听的说法，一个可以不太触动神经的说法。他们不说我的叔叔给炸死了，死了，还连尸体都找不到了，而只是用轻轻巧巧的两个字：失踪。</p></blockquote><blockquote><p>她的阴部都被这焦灼烤干了，粗糙而干涩，像个苦行者呆的山洞，再不是使人开心的所在了。</p></blockquote><blockquote><p>我听人说过，跟阴部不湿润的女人睡觉要折损寿命的。</p></blockquote><blockquote><p>我说：“父亲从门上走开吧，不然的话，我的白天都变成夜晚了。”</p></blockquote><blockquote><p>有哲人说过，这样的女人不是一个深渊就是一付毒药。</p></blockquote><blockquote><p>没有颜色的汉人来到这个地方，纯粹只是为了赚点银子，像那些生意人，或者就只是为了活命，像师爷本人一样。但有颜色的就不一样了。他们要我们的土地染上他们的颜色。</p></blockquote><blockquote><p>要是一个东西人人都想要，我也想要，要是什么东西别人都不要，我也就不想要了。女人也是一样，哪怕她是天下最美丽的女人，哪怕以后我再也见不到这样美丽的女人。</p></blockquote><p>傻子一点不傻，这并不能让读者喜欢他，至少我只是喜欢他说话，心理活动，这些东西都是一些很通透的想法，对于了解中国的聪明人的想法是很有帮助的，在乡下人眼中，是少不少窍的问题。傻子的话就是很好听呀，放在如今，就是和别人吵架也用得上，机锋毕露。</p><p>有很多西藏那边的民俗的讲究，我觉得是比较有趣的。我的地方民俗也比较多，大多是乡里面老人、老妇人在一起交换情报的时候张口就来的，我们这些年轻人大多连了解都不去了解，遑论去老老实实地遵守，而我也仅仅是去了解，这就是我很喜欢和家里的外婆她们聊天的原因，外婆的脑中也是装了很多奇妙的比喻的，混杂在许许多多的时代的记忆之中。</p><p>书里面的人也吵架，吵的内容也和我亲身经历的家乡相似，这一点很好玩。家里面叫蹭、刺挠人，其实就是讽刺的偏乡土一点的说法。</p><p>女人的地位在那个时候当然是比较低的，我讨厌塔娜，她很漂亮，也很放荡，在使男人伤心这一块，她做得真是非常好，傻子并不是傻子，怎么到了这个时候，漂亮女人就不聪明了呢？我当然也讨厌把漂亮女人描画成这个鬼样子的阿来，艺术就一定要去很刻意地去伤害美丽之物吗？</p><p>政治这个话题，好吧，小说成书于九十年代，那个年代对于政治的话题应提尽提，无所顾忌，这也是我喜欢读九十年代的散文的原因之一。白衣之邦和黑衣之邦，谈这个我觉得没问题，白色的汉人和红色的汉人也可以放肆地议论，不加掩饰，直抒胸臆，这是一件有点危险的事情呀。</p><p>讲道理，阿来通过傻子给我们讲道理，我觉得可以接受，书记官呢，我也喜欢，他让我想起了风之影里面的一个饱经沧桑而又学识渊博同时也很风趣的一个人。翁波意西这个人，对于某些东西的坚持让我很喜欢。</p><p>书中对于性的描写很有意思，是我没见过的一种新鲜的描写，新鲜之外只有很小很小的一丝波澜，如果是高中时候，那我可以把它和小波同志的黄金时代放在一起。</p><p>再说回语言，阿来说，读者对于阅读的期许正被导往浅与陋，而不是深与雅。我同意，因为我翻遍全书，并没有发现傻子说过话剧里面的那一句台词，</p><blockquote><p>我看见卓玛的大奶子了。</p></blockquote><p>后面再去看话剧，其表演功底太差，四川人艺的水平和陕西的就相差这么大吗？</p><p>另一本书，还没看完，这里就少谈一点吧，主要是莫言的文字，一大本书都快看完了，才体会到这种语言的魅力。下一本还是莫言的，酒国，ZH桑说，他读这个像是在做梦。那我就得看看究竟是不是在做梦。</p><p>此外，今天有一些值得记叙的事情。华锦赛，挺好玩儿的。大一的 H小同志拿了女单第五，嗯，我觉得应该是近几年我们学院取到的最好的成绩。提起H 小同志，昨天喝酒的时候，ZH 桑说有人加他QQ，似乎觉得有点莫名其妙，我打了个哈哈，我说的，我的球友，关照一下，后来W桑也和我说，小同志加他，他奶奶的，你也莫名其妙是吧，人家还小，大一的小同志，俺们都是老同志啦。晚上和社会学院的学弟打球，打了大概八九个大局，只丢了一个小局，看来每天的训练还是有效果的嘛，当然啦，也是有代价的——嗓子哑了。回去的时候，L学弟问了我一件事情，他还记着，瞎扯八扯。我心里用这几句英雄志里面的话来回答，</p><blockquote><p>爷爷生在天地间，逍遥世间无人管，举刀乱杀随我心，明朝便死有何妨？</p></blockquote><p>瞎讲。</p><p>X 桑今天来我宿舍借手机，看到我的 Youtube Music听歌，让我分享一下，我就在这里分享，看他可不可以找得到，</p><p><ahref="https://music.youtube.com/playlist?list=PLuyd-PXot6oM29xZw9uyzzk_yyRInNqOp&amp;feature=share"class="uri">https://music.youtube.com/playlist?list=PLuyd-PXot6oM29xZw9uyzzk_yyRInNqOp&amp;feature=share</a></p><p>本周有什么事情呢？嗯，清明去爱广后面的踏青，遇到一只野猪，和中国奇谭里面的小妖怪还挺像的，对视了十几秒，它走了。另外，也探明了我们学校里外很多的那种挂着喇叭花的树，叫泡桐。也探明了爱广的后山在往后走是一块墓地。</p><p><img src="https://i.imgur.com/Y7DB2Og.jpg" /></p><p><img src="https://i.imgur.com/XzxktqC.jpg" /></p><p><img src="https://i.imgur.com/vbRC4ge.jpg" /></p><p><img src="https://i.imgur.com/hduKTRs.jpg" /></p><p><img src="https://i.imgur.com/Q1MLqNh.jpg" /></p><p><img src="https://i.imgur.com/js166f0.jpg" /></p><p>2023.04.09</p>]]></content>
    
    
    
    <tags>
      
      <tag>马拉松</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何证明两个数的最大公因数和最小公倍数的乘积等于这两个数的乘积</title>
    <link href="/2023/04/07/%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF%E7%AD%89%E4%BA%8E%E8%BF%99%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/"/>
    <url>/2023/04/07/%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF%E7%AD%89%E4%BA%8E%E8%BF%99%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<p>这个可以算是初等数论里面的知识的。</p><p>我是在给家里的小同志讲小学奥数的时候遇到的。老师告诉他会用就行，我作为一个长辈，有必要给他讲一讲其中的原理。</p><p>这个问题给我来证明，得分为两点。</p><h2 id="主体">主体</h2><blockquote><p>求证：两个自然数的最大公因数和最小公倍数的乘积等于这两个数的乘积。</p></blockquote><p><strong>证明：</strong></p><p>不妨设两个自然数分别为 <spanclass="math inline">\(M、N\)</span>，</p><p>易证，任意一个自然数 <span class="math inline">\(N\)</span>可以被分解成多个质数因子的乘积，且这样的分解唯一，所以，</p><p><span class="math display">\[M = p_1^{i_1} p_2^{i_2} \dots p_k^{i_k} \dots p_m^{0} \dots\]</span></p><p><span class="math display">\[N = p_1^{j_1} p_2^{j_2} \dots p_k^{j_k} \dots p_n^{0} \dots\]</span></p><p>我们把 <span class="math inline">\(M\)</span> 和 <spanclass="math inline">\(N\)</span> 分别记作，</p><p><span class="math display">\[M = (i_1, i_2, i_3, \dots, i_m, 0, \dots)\]</span></p><p><span class="math display">\[N = (j_1, j_2, j_3, \dots, j_n, 0, \dots)\]</span></p><p>则，最大公因数和最小公倍数分别为，</p><p><span class="math display">\[gcd(M, N) = (min\{i_1, j_1\}, min\{i_2, j_2\}, min\{i_3, j_3\}, \dots)\]</span></p><p><span class="math display">\[lcm(M, N) = (max\{i_1, j_1\}, max\{i_2, j_2\}, max\{i_3, j_3\}, \dots)\]</span></p><p>而，</p><p><span class="math display">\[min\{i, j\} + max\{i, j\} = i + j\]</span></p><p>因此，得证。</p><h2 id="附加">附加</h2><p>关于 gcd 和 lcm 我没有证过上面的形式，所以这里证明一下。</p><p>不妨设，</p><p><span class="math display">\[M = p_1^{i_1} p_2^{i_2} \dots p_k^{i_k}\]</span></p><p><span class="math display">\[N = p_1^{j_1} p_2^{j_2} \dots p_k^{j_k}\]</span></p><blockquote><p>求证：</p></blockquote><p><span class="math display">\[g = gcd(M, N) = (min\{i_1, j_1\}, min\{i_2, j_2\}, min\{i_3, j_3\},\dots, min\{i_k, j_k\})\]</span></p><p>注：这里借用了上面的形式。</p><p><strong>证明：</strong></p><p>先证必要性：显然，<span class="math inline">\(g \mid a\)</span> 且<span class="math inline">\(g \mid b\)</span>。</p><p>再证充分性：</p><p>不妨假设设 <span class="math inline">\(m = g \timesp_n\)</span>，其中，<span class="math inline">\(p_n\)</span>是上面任意一个质数，</p><p>再不妨设 <span class="math inline">\(i_n &lt; j_n\)</span>，</p><p>因此，<span class="math inline">\(min(i_n, j_n) = i_n\)</span>，</p><p>所以 <span class="math inline">\(m\)</span> 中由 <spanclass="math inline">\(i_n + 1\)</span> 个质因子，</p><p>故 <span class="math inline">\(m \nmid a\)</span> 不为 <spanclass="math inline">\(M, N\)</span> 公因数。</p><p>原命题得证。</p><hr /><p>参考：</p><p>1、<a href="https://www.zhihu.com/question/326472814"class="uri">https://www.zhihu.com/question/326472814</a><br />2、<a href="https://www.cnblogs.com/JustinRochester/p/12355660.html"class="uri">https://www.cnblogs.com/JustinRochester/p/12355660.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>数论</tag>
      
      <tag>小学</tag>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 一个代码提示上屏的问题</title>
    <link href="/2023/04/06/VSCode-%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA%E4%B8%8A%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/04/06/VSCode-%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA%E4%B8%8A%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>所遇到的问题：在引号里面的代码提示出现时，如果按下<code>/</code>，那么，代码提示框中的第一个选项会自动上屏。</p><p>我的需求：取消这种行为。</p><p>解决：经过询问 chatgpt，发现这个是 Intellisense的问题，我们只需要在设置中把<code>Editor: Accept Suggestion On Commit Character</code>给取消勾选即可，</p><p><img src="https://i.imgur.com/FNLXsPy.png" /></p><p>如果是直接在 <code>settings.json</code>中修改的话，配置是这个样子的，</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.acceptSuggestionOnCommitCharacter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怀念 Vamei</title>
    <link href="/2023/04/04/%E6%80%80%E5%BF%B5-Vamei/"/>
    <url>/2023/04/04/%E6%80%80%E5%BF%B5-Vamei/</url>
    
    <content type="html"><![CDATA[<p>最近这几天，由于要使用 Python 进行调试 sqlite，想起了 Vamei。</p><p>Vamei 是我 Python路上的引路人，也是我编程路上的启明灯，在照亮了我等平庸之辈后，自己却先一步把自己燃烧殆尽，为什么会这样呢？难道真的是抑郁症吗？</p><p>这个清明，我最先想到的是两个人，其中一个就是 Vamei。</p><p>我原来对计算机并没有那么多的自信，有的只是一些虚无缥缈的兴趣。我出身平凡，家里人际关系单薄，选择计算机也不过是取的当时的最优解，在这个复杂而又美好的年代。转专业的时候，面试时问我为什么要转过来，我当时回答，人家印度的软件写得比我们要好，我不服气，我要为国家贡献自己的力量。细究起来，这不过是套用高中一个同学答校长的发言。用现在的眼光评价当时的我，天真幼稚、初生牛犊。所以后面遇到了一些专业方面的坎坷，现在看来轻飘飘，那时对我来说却是沉甸甸。面对困难，无数的选择在我的脑海飘来飘去，去混一个老师当当吧，轻松一点，定居在中部城市吧，压力小一点。心里这样想没问题，手中该做的活计是不能停的。那个阶段是在学习数据结构和算法，C/C++底子薄弱，先琢磨一下 Python，于是就遇到了博客园的Vamei，准确地说，是他在博客园写的文章。之后我在博客园写过相当一段时间的博客，也是Vamei 的缘故。</p><p>Vamei，台风画眉，Vamei 在豆瓣的自述，是这个样子，</p><blockquote><p>Vamei是赤道附近一个台风的名字。按照气象规律，台风不常出现在赤道。所以，Vamei是一个离群的风，无所顾忌地生长，不着边际地游荡。</p></blockquote><p>我那时对自由的追求在他的影响下进一步激烈扩张，“野蛮生长”。</p><p>Vamei 的博客我是从 Python系列看起的，其他的依次陆续读完，连带着豆瓣上的文章，也读了大部分，可以说，Vamei是我在互联网上遇到的对待读者最诚恳的博客作者。Vamei自述，来自内地小城，非计算机专业，仅仅是有兴趣，毕业设计做了相关内容，被导师批评过代码，去新加坡读博在别人的建议下学习Python，之后以一种极其诚恳和细致的态度撰写 Python 的博客。Vamei的经历都在博客园和豆瓣的文章中，读其文而知其人。</p><p>好的文章是不够读的，技术博客也是这个道理，Vamei的文字，“哈”的一下，就全部读完了。读完之后，Python算是真的入了门。后来再去看《Fluent Python》，并不会很吃力。至于其他的Python 领域的国内外的经典作品，就放到了一边。</p><p>后来再去接触什么 Java、C/C++、js之流，感觉就已经是度过了那个奇点一般。什么前端、后端，这个语言、那个语言，这个框架、那个框架，我都是带着一种轻松的心态去接触，去了解，去学习。我在手机上几乎不玩游戏，主机游戏玩得也不多，所以，大部分的时光就都花在了这个专业上面，从一开始的懵懵懂懂，到如今多少算是进了这个门，我感觉我是幸运的，而这份幸运，是由Vamei 传递给我。</p><p>我现今的心态没有 Vamei那么平和，预测在五年以内还是会保持一种放纵的生活态度，再来一个五年，而立之后应该可以慢慢沉淀下来。</p><p>斯人已去，我又何必徒然戚戚呢？何不把目光更多地投向此时在门外徘徊的同志呢？</p><p>嗯么。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0327-0402 周读总结</title>
    <link href="/2023/04/02/0327-0402-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/02/0327-0402-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>本周的阅读量算是达标。一共阅读了三册，《人到中年》，谌容，《四叠半与时光布鲁斯》，森见登美彦，《现代性的隐忧·需要被挽救的本真理想》，查尔斯·泰勒。</p><p>人到中年的渊源是张承志的那个中篇集子，一套丛书里面的，见编者对谌容的这本书评价较高，遂去zlib 取来一读。</p><p>四叠半，不用说了，没找到电子版，于是到主图去借阅，唯一的不足就是这类轻小说的很漂亮的封面被图书馆放到了别的地方，估计不好找。好吧，能读到已经很幸运了。</p><p>现代性的隐忧，说起来有点久远，这本书还是去年接近暑假的时候，社会学院的学弟(同志)赠予我的，这个纸质版一直拖到今天也没有翻完，但是，由于最近的阅读时间比较宽泛，就在moon reader里面把这本书很轻松地翻完了。可能是最近的思想发生了一些转变，周遭的环境也起了一些变化，所以再读这本书，里面的观点和我现在的一些里面是比较契合的。</p><p><img src="https://i.imgur.com/r193MJT.jpg" /></p><p><img src="https://i.imgur.com/ekGZXAS.jpg" /></p><p><img src="https://i.imgur.com/QV2xuI5.jpg" /></p><p>没有时间去专门写周记和日记，我的日记流目前是借用了一种取巧的方式隐匿在一个没有他人知晓的角落，不过，人作为社会关系的一部分，总要拿出一点东西示人的，就在这个读书记录里面潦草几句好了。</p><p>去年的时候，社会学院的 L同志问我，学长你的博客好像很久没更新了，我想了一下，他浏览的应该是我的另一个博客，我以前经常重装系统，于是很多东西都分散在不同的博客上面，有时甚至会完全忘掉一个博客的存在。今天也和本院的大一的一个小同志聊到这个问题，狡兔三窟，我建造的洞窟似乎有点偏多了，近期大体上还是在这一个根据地记录我的日常轨迹。</p><p>这一周大体上没什么波澜，这一点我相当满意。我的父亲给我的教导是，小心谨慎，恪守中庸，从他一个生意人的角度来看，这是无可厚非的一件事情，早先我是有点不以为然的，经历了一些事情之后，我也慢慢体会到"隐"这个字所代表的意义，其本质是中庸，无论内在是如何地波涛汹涌，我们始终要以一种平静委婉的态度去展示自己。海顿似乎就是这样的一个人，嗯，有时间可以把海顿的传记拿过来翻一翻，正好也可以检验一下之前从音乐中推测的此人是否真如我想象的那般。</p><p>先简单捋一下外面的事情。</p><ul><li>网络上，阮(xnhr)同志的陷落再一次掀起国内外的热议。不置可否。</li><li>上海徐汇中学的一次小事件，网上的争吵依旧是那个样子，谁也不让谁。</li><li>马英九来大陆，写的字还行，比起其他台湾人则多有不如。</li><li>张继科出现问题，和景甜、赌博有关。不知真假，不想去分辨真假。</li></ul><p>我自己的事情。</p><p>最近两天，曾经的小学同学联络了我，我当然很开心，小时候啥也不懂，主要家里也穷，就不敢去考虑学习之外的事情。如今也不是很后悔，即使是初中一直延续到高中的心中的那一份无可奈何的情绪，以及始终不可触及之人，和H同志讲出之时，也多是以一种怀念和唏嘘的态度来进行陈述。现在则是自己不会给自己留机会来遗憾了。只能说以前小时候的视野实在是太狭窄，当然，那时候，能正儿八经地去获取和阅读自己渴望的读物都要耗费甚巨，无论是金钱上的还是其他方面。</p><p>今天有一件事情让我觉得比较有趣。江西这一块的人对于高中或者初中的生活似乎是比较满意的。对于学校的集体归属感也比较强烈。这是由大一的小同志的一句话想到的。我以前的那些个江西室友，嗯，一个宿舍四个人，其他三人都是江西人，我很少见他们说以前学校的坏话。他们的学校没有体罚，你体罚，人家就跳楼，你稍微骂几句，人家也跳楼，我们呢，则是跳楼无效。我高三时候3班有跳楼的，留下一个字条，某某老师如何如何，你们逼死了我，可是最后那个男生并没有死掉，而是内脏像豆腐块一样从中间碎掉，然后躺在医院苟延残喘，模样大概是有些狼狈。老师自然是没有事，更有甚者，语文老师，把这个当成是一个新鲜的事情，当成是一个小品讲给班上的学生听，然后那个班的好友再讲给我们听，那时的姿态是谈笑风生，论及老师和学校，无可奈何。如果我遇到有人抹黑我的学校，甚至是在网络上动用某种手段去攻击学校，那么，很可能可能会是我。那些老师不过是一群狗不吃的东西罢了。该说，是地产那边传过去的？似乎带有一点土地财政的流毒，但，人性的泯灭不可忽视，不可掩饰，不可含糊，不许儿戏待之。</p><p>还是讲回来吧。和小学同学聊天。出身于微末，身边的朋友也大多是微末，绕来绕去在乡下那块地儿大抵只有一两个从小玩到大的朋友，此番也见面不多，现在大致可以多上一个，过年的时候吃饭喝酒，不局限于家里的相聚，那肯定会很开心的。和高中同学似乎有些不太关系紧密了，高中的好朋友应该也是有的，大抵也只有一个，只是物是人非，酒肉朋友如今我是不想继续酒肉，没人可以聊我想聊的事情，大家所关注的点还是那一套，学历再高又如何？总结下来几个字，善良而无意义的稚嫩。但是，不小了呀，大部分都是二十二三的岁数。</p><p>我之前所遇到的生活作风出了一点点小问题的同志，目前似乎可以解除密切关注期了。比他更危险的大有人在，但是他的其他方面的品质不是一般人可比。冲塔、谨慎、异类、潇洒、古板、黑色，类似于杜罗夫的黑色作风。比我还北的北方，只要不是和编制公职沾边的，我认为人的品质不会差到哪里去。南方不行。南方的Y前辈可以。广州可以出这样的人，我感到不可思议，主干很稳，生活环境带来的细枝末节目前瑕不掩瑜。</p><p>人是社会关系的总和。如果有些人太油腻的话，那这社会关系又要它何用？混账东西。</p><p>好吧，多说无益。还是聊一聊读书。</p><p>四叠半。</p><p>“终成眷属的恋情，不提也罢。”</p><p>梦断四叠半。不过是我和明石之间的暧昧。四叠半神话大系里面有很多端倪，现今在时光布鲁斯里面拍板，大三，呵，最初看这一系列的时候没想到会还有别的延续，这样以来，这个在我心中就是不是kuso了呀。多少还是带有一点幻想性的，从某种意义上讲，这个就不可以归类为轻小说了，是有一点文学的色彩。</p><p>人到中年。陆文婷，带有文化大革命的印记，硬骨头，中年骨干，国家的柱梁。谌容写这个，我感觉是可以激起青年人的一些内在的感动的，现在不一样喽，如果陆文婷被现在的思想灌输一下，那时必然要和姜亚芬一起“润”的。抛开其他不谈，陆和傅家杰的恋爱观我是稍微满意的，不扯一些幺蛾子，老式的朴素，带有一点英雄主义的意思。最后无论是悲剧还是原本的这种善意的结局，我没有任何意见。比这更幸运的或者更晦气的比比皆是。</p><p>这一周让我觉得最满意的书是现代性的隐忧·需要被挽救的本真思想。</p><p>现代的人呀，用北方的话来讲，是精过分了。</p><p>现代人实在是太自我主义了，我同意书里的观点，古早的英雄主义已经被扫进历史的垃圾桶了吗？现代的自我主义，所谓的自由，应该是过分的自恋主义吧。我也得反思一下自己，我曾经确实也是出现过类似的情绪——世界以我为中心。那时，大概“先天下之忧而忧，后天下之乐而乐”这种论调在我的心中是可笑的。</p><blockquote><p>不再有更高的目标感，不再感到有某种值得以死相趋的东西。</p></blockquote><p>这是可悲的。太自私了。我们身边所谓的女权和一些流于表面的润学，正是如此。</p><blockquote><p>现代文化陷入了相对主义、享乐主义和自恋主义的歧途。</p></blockquote><blockquote><p>生活被平庸化和狭隘化，与之相联的是变态和可悲的自我专注。</p></blockquote><p>我震惊于国外竟然可以有这样的思想家，我不会再随意地轻视国外搞社会科学和哲学的同志们，他们是可以和我们的古老的哲学相提并论的。</p><p>不得不感谢赠我此本小册的社会学院的同志，在其他方面我是他的学长，但是在社会科学这个方面，我应向他讨教的还有很多。</p><p>如果让我对过去的自己进行一下内省，那么，批评是无可避免的。</p><p>我知道，仅仅批评的作用不大，我的阅读量需要提升了。之前可以说是囿于工作，现今是没有借口的。如同魔术的根源漩涡，想要认识这个世界，我现在所理解的东西远远不够。</p><p>附：周日晚上重读《人生》，再次惊叹于路遥对生活的捕捉和把握。同样是生活，我想到了严歌苓的小顾艳传，乐而不淫、哀而不伤，这一点路遥把握得更好，小顾涂了太多的脂粉啦。</p><p>于 2023-04-03 晚 23 点。</p>]]></content>
    
    
    
    <tags>
      
      <tag>马拉松</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bilibili 如何使用 OBS 进行直播</title>
    <link href="/2023/03/30/Bilibili-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-OBS-%E8%BF%9B%E8%A1%8C%E7%9B%B4%E6%92%AD/"/>
    <url>/2023/03/30/Bilibili-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-OBS-%E8%BF%9B%E8%A1%8C%E7%9B%B4%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<p>之前有使用 OBS 来进行这个 B站直播，那是以前的账号的事情了。这里就是简单记录一下，其实是蛮简单的。</p><p>这个是 OBS 的设置页面，</p><p><img src="https://imgur.com/jcUMzCK.png" /></p><p>我们需要在 B站的直播设置里面找到相关的填充物，来到个人中心的直播中心，</p><p><img src="https://imgur.com/0KXwHzh.png" /></p><p><img src="https://imgur.com/lu49Hrf.png" /></p><p>找到两个相应的字符串进行填充，之后点这里的直播即可，</p><p><img src="https://imgur.com/kGwYVVZ.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>直播</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0320-0326 周读总结</title>
    <link href="/2023/03/26/0320-0326-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2023/03/26/0320-0326-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天的一个主要的基调是物是人非。</p><p>学院一起打球的大一的女同志也是南昌人，不免想起我曾经的室友，和我当时的政治观念算是相合，一起看鬼畜，一起和另外的室友斗嘴，好吧，夜里打游戏很烦也是真的。当年的马保国回来了，我的记忆也随之而来。</p><p>本周原定阅读的两本书是，</p><ul><li>《遥远的救世主》</li><li>《失控》</li></ul><p>失控，看不下去了，弃之，论坛里面推荐这本书的同志，是何居心呢？你他娘的自己到底看完了没有呀，国外的作品，国内吹，是不行的呀。从技术杂谈来看，目前看过的，也就是《黑客与画家》和《暗网》这两本，其内容的新鲜程度和最近的现实的适配性是比较好的。其他的怎么说呢，四不像，专业的人读了食之无味，我们嘛，去之，反正我是不觉得可惜。</p><p>救世主这部小说呀，当时读完的心绪都在这里了，</p><blockquote><p>文笔确乎是高中生的样子，使用了大量的“说”，这一点我一开始是觉得不太好。后面浸入其中的时候倒是还好。</p><p>人物的对话很有魅力。</p><p>有点像都市类型的网络小说，这一点不能否认，我们在读这个书的时候，它的吸引力是可以让我们一直读下去的。网络小说并非不好，这是我的观点。</p><p>故事的最后安排使得这个作品和网络小说区分了开来。小丹的腿被炸掉的时候，我的眼皮子跳了一下，真是敢写呀，这可就不是一般的爱情或者说带有简单商界意味、故弄玄虚意思的流于表面的通俗小说了。</p><p>小丹给人的感觉越来越灵动，直至最后死掉的时候，我相信，没有一个读者是不被其触动的，然而，就我读小说的经验来讲，这个安排是最合理的。前面，小丹或许早在那一颗哑弹的时候就应该死去，此部小说就此也可以封住，后面的一系列勾连。</p><p>小丹确乎讨人喜欢，好多人都说小丹是天生的灵性、洒脱。这一点我是同意的，以小丹的家境，哪里去不得？献身于中国的刑警事业，是个人的一种跳脱。干几年刑警，然后再去德国读书。我再来扯一扯这个阶层的说法，只谈我这个阶层，我是一个典型的无产阶级，或许是这个样子，总之就是乡下户口，没什么钱，我觉得如果一个远高于我这个阶层的人，摆脱了追求低级需求的烦恼之后，能够去从事一种高尚的职业，这是很令我敬佩的。</p><p>丁元英此人，我不好评价，如果说清华那种学校竟然能够培养出这样一种人，即使是在小说里，那么，清华给我的印象也算是稍有改观。我的本性是非常厌恶清华这个学校的，搞金融而不是深入科技的本质，这是让人很不齿的，我们不需要那么多人空手套取劳动人民的东西。此人在书中类似于一种天道遁去的那个一，这就是小说的戏剧性所在了。</p><p>其他形形色色的人，多少是能够让我们瞥见九十年代的那些不平的风浪的。我不懂商界，不知书中的叙述是否和现实贴近，给人带来的想象总归是不错的。</p><p>杀富济贫，这是书中的一个命题。“你厌烦我了吗？”这又是近于网络语言的一种伪命题，而且，这话由元英口中吐出，就给他增了几分人性，与此同时，去掉的是几分魔性。</p><p>死掉的几个人，林雨峰我觉得是比较可惜的，此人带有一种民族精神，在商业之外有自己的执着，也似不拘泥于黑道白道。书中的女人，亚文是武汉人，武汉这个地方也算是深不可测。古城究竟是哪里呢？这个应该部不难猜的。</p><p>元英元英，元自红英。李雪的文笔是描不出那些机锋的，其背后难道真是如别人所猜测的红英吗？</p><p>不可思议。不可思议在书中也有新解，这个像是网上的段子。“奸”和“歌”这两个字解得不好，不灵巧。</p><p>对于中国共产党，元英的观点是不可归结于这个处于幼年时期的政党，我们的文化属性是几千年的事情了，且一直磨灭不去。这倒是给我一些新鲜的思路。我的思想在最近一段安逸的时期的流向不太清晰，我也没什么心思去具体把它理顺。只好去研究一下古代的政治制度，权当是一种工作时间的cpu 时间片轮转的一页。</p><p>元英的酒话可不是胡话，至少，这也代表了相当一批人的观点。</p><p>HiFi 这个概念，或许作者身边的人真的有是在烧这个东西的。</p><p>拿钱去敲佛门，敲开就不是佛门，也有类似的经典的故事，我最近读的东西太少了，眼界、肚中都不太好用啦。</p><p>书中的主要人物，在现在的我看来，归结为两个字——潇洒。别的我说不出来太多。</p></blockquote><p>至于失控，我不想说太多了，对现实可以说是一点指导意义都没有。</p><p>无奈，新开了另一本书，《为政》其枯燥性是当然的，毕竟是结合古文来谈中国古代的一些政治思想，然，好说歹说，这是中国文化，中国古典的文化，读起来当作一种消遣当然是不错的。挺好。没读完。</p><p>前天在床上躺了一天，疑是第二次新冠，额，一天好了，导火索是前一天晚上的两盒友芝友鲜牛奶，我他妈，最近一个月晚上的鲜牛奶，还是戒掉吧。</p><p>由于是在床上，没有精神，腰也像新冠那时候一样地疼，所以，就打起了精神毒品——网络小说的主义。这一本是《极道天魔》，滚开的书。也是论坛(程序员论坛)里面别人推荐的，连着好几本了，都是比较偏邪性的，早期的那种正气凛然的味道可以说是很淡了。人们心中的正道也随着世道在变呀。</p><p>我的时间是没有用来打发的，网络小说在刺激人的精神这一块却是没的说，疗治肉体也是有一套的。接下来工作步入正轨是脱不了它的干系的。</p><p>最近是有了量化生活的想法，每天做的事情，有一定的量化还是比较好的。我现在喜欢拍照——当然是随手拍，无所谓质量，也是出于记录生活的需要。照片的话，肯定是不可以一天一整理的，但是每一天流淌在Obsidian 和 telegram中的闲言碎语，这个倒是可以每天挑一点记录在博客中。</p><p>这几天白天在写毕业设计之余或许可以尝试一下。</p><p>刚刚翻了一下我的主要的三个博客的据点，最早的博客已经可以追溯到两年以前了，这也算是一种物是人非吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>马拉松</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0313-0319 周读总结</title>
    <link href="/2023/03/18/0313-0319-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2023/03/18/0313-0319-%E5%91%A8%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>张承志的小说我是第一次读。读的机缘是在看 B站的一个视频，叫作“可可托海的牧羊人”，其实是一首音乐，歌声很真挚动人，视频所用的背景是电影《黑骏马》，蒙古的，其原作小说便是张承志所创作的中篇小说《黑骏马》。于是，这一周的两本书之一，就落在了张承志的作品上。</p><p>读的集子是《北方的河》，书中给的张承志的图像是一个典型的新中国的老式人物，面相很粗粝。我想，他的作品应该也是带有明显的北方的特色的吧，干燥的风，直来直去的性子，火急火燎的做事风格。事实上，他的小说在我读完后，给我留下的印象和之前的猜测基本贴合。没有技巧，没有太多的弯弯肠子，是什么就是什么，明白畅快，燕赵之地的人本该如此。</p><p>我并不是从他的《黑骏马》开始读的。这部集子里主要收录只有两篇作品——《北方的河》和《黑骏马》。先读《北方的河》，以为会不尽兴，不料，所写的内容正合我的心思。心中似乎随时都揣着一股子火气儿，这一点和我自身都有点像，大河，北方的大河，黄河，湟河，永定河，黑龙江，一股子北方的气质洋溢其中，硬汉，用硬汉来形容此人是一点也不为过的。上山下乡，去的是鄂尔多斯，回来，回的是北京，不愿服从安排去计划生育办，偏要去考研究生，黄河，幼年游过去一次，如今再游，凭借心中的不甘与激荡，再次证明自己是河的儿子，黄河的儿子。大江大河的气质，不愿服输地去学习外语，去大河调研，又因母亲和家里的责任放弃去黑龙江实地考查，爱情，爱情又算得了什么，就让给徐华北好了。那些歌词唱得是很入心的，</p><p>说多了反而似乎有点不太自然。那，这里就仅仅谈一谈我的浮光掠影。以下的涓涓细流都是随心所欲。</p><p>张承志此人，深得我心。那个时代的人，怎能不合我的心意呢？我们的生活环境大体上是不会差很多的，小时候，我们都是在乡村的环境中。性格，那自然是乡下的环境所赐予的，这是很多城里长大的我们这一代的同志所不能体会的。</p><p>大河，大河的品质。冈林信康的歌，我一开始还以为信康此人是一个蒙古人的名字，今天搜索了一下这个歌手，原来是日本人，承志是会日语的，也在日本生活学习过，还在日本出过书，他俩还是好朋友，这是我之前没有了解过的背景所带来的一系列效应。</p><p>“我”没有名字，有的只是令我印象深刻的品质。集子后面，承志在访谈中也提到自己没有写小说的那个天才的特质，这一点我也感受到了，事实上确实是如此的。本周读的另一本书是严歌苓的，严歌苓的技巧是相当强的。承志兄的小说，很散，但是其中的精神，却是很饱满地撑起了这一部小说。</p><p>黑骏马，没有令我惊艳，从小说的赏析层面来讲，这部小说的描写、技巧都不是一部我们说比较经典，或者说是一部大师之作。其精神内核却是令人感动，蒙古的古老旧俗一样的东西，也有一定的自由在里面，这个是当然的，草原的生活，我们中原人是不容易想象的。悲剧，也像是打不破的循环，一次又一次地在这个广袤的区域演绎。</p><p>多少还是令我攒聚了一些泪的。这是男人阅读男人的眼泪，与阅读严歌苓是不一样的。</p><p>另一部作品，严歌苓的《角儿》，也是一部小说集子，短篇小说。</p><p>第一篇令我感受最深。写国外的不太喜欢。那个黄毛女的背叛，前面的诡谲铺垫的太多，匠气太重。</p><p>有一个新鲜的题材，九十年代的四川山里的姑娘被拐卖的悲剧。谁家有女初长成。和这个名字完全不搭干。立意是好的，揭露社会现实。说实话，看完之后，结合之前去过深圳遇到过路上的混混，深圳依然可怕得紧。</p><p>严歌苓的文笔，这个我是很喜欢的。很细腻。随着阅历的加深，读起来还是另有一番味道的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>马拉松</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用 cmake 来构建 win32 和 direct2d 程序</title>
    <link href="/2023/03/03/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-cmake-%E6%9D%A5%E6%9E%84%E5%BB%BA-win32-%E5%92%8C-direct2d-%E7%A8%8B%E5%BA%8F/"/>
    <url>/2023/03/03/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-cmake-%E6%9D%A5%E6%9E%84%E5%BB%BA-win32-%E5%92%8C-direct2d-%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>我还是舍不得离开 VSCode 的 vim 环境呀。本来，这个是可以直接使用Visual Studio 的，但是 VS 这个 IDE用起来实在是不顺手，然后，我们知道，本身在命令行编译和运行 win32 +direct2d 编写的程序是没有问题的，所以，使用 cmake来构建当然是没有问题的，问题就在于能不能把 lib文件给链接对，网上现有的资料还挺少的，所以我在这里记录一下。</p><p>主要在于这个 CMakeLists.txt 文件，</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.0</span>.<span class="hljs-number">0</span>)<br><span class="hljs-keyword">project</span>(fullcpp VERSION <span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">add_compile_options</span>(<span class="hljs-string">&quot;$&lt;$&lt;C_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)<br><span class="hljs-keyword">add_compile_options</span>(<span class="hljs-string">&quot;$&lt;$&lt;CXX_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)<br><br><span class="hljs-comment"># Use unicode versions of functions</span><br><span class="hljs-comment"># add_definitions(-DUNICODE=1 -D_UNICODE=1)</span><br><br><span class="hljs-comment"># Don&#x27;t include unneccessary things in &lt;Windows.h&gt;</span><br><span class="hljs-keyword">add_definitions</span>(-DWIN32_LEAN_AND_MEAN)<br><br><span class="hljs-keyword">include_directories</span>(.)<br><span class="hljs-comment"># link_directories(&quot;C:/Program Files (x86)/Windows Kits/10/Lib/10.0.22621.0/um/x64&quot;)</span><br><br><span class="hljs-comment"># 开启了 dpi 感知的设定</span><br><span class="hljs-keyword">add_executable</span>(fullcpp WIN32 <span class="hljs-string">&quot;main.cpp&quot;</span> <span class="hljs-string">&quot;DeclareDPIAware.manifest&quot;</span>)<br><span class="hljs-comment"># target_link_libraries(fullcpp &quot;C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.22621.0\\um\\x64\\d2d1.lib&quot;)</span><br><span class="hljs-comment"># set(LIBS d2d1 d3d9 d3d11 d3dcompiler)</span><br><span class="hljs-keyword">set</span>(LIBS d2d1)<br><span class="hljs-keyword">target_link_libraries</span>(fullcpp <span class="hljs-variable">$&#123;LIBS&#125;</span>)<br><br></code></pre></div></td></tr></table></figure><p>主要注意这里，</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"># <span class="hljs-built_in">set</span>(LIBS d2d1 d3d9 d3d11 d3dcompiler)<br><span class="hljs-built_in">set</span>(LIBS d2d1)<br><span class="hljs-built_in">target_link_libraries</span>(fullcpp $&#123;LIBS&#125;)<br></code></pre></div></td></tr></table></figure><p>这里的写法是这个样子的，如果是使用 d2d1 的 lib文件的绝对路径，这里反而会出错。原因暂时不详。</p><p>这里把 DeclareDPIAware.manifest 文件也记录一下，</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span> <span class="hljs-attr">manifestVersion</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:asmv3</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">asmv3:application</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">asmv3:windowsSettings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/SMI/2005/WindowsSettings&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dpiAware</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">dpiAware</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">asmv3:windowsSettings</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">asmv3:application</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>我的 main.cpp，</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    有 dpi 感知</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> UNICODE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UNICODE</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;d2d1.h&gt;</span></span><br><span class="hljs-comment">// #include &quot;main.h&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SAFE_RELEASE(P) \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (P)              \</span><br><span class="hljs-meta">    &#123;                   \</span><br><span class="hljs-meta">        P-&gt;Release();   \</span><br><span class="hljs-meta">        P = NULL;       \</span><br><span class="hljs-meta">    &#125;</span><br><br><span class="hljs-comment">// 这是资源的声明</span><br>ID2D1Factory *g_pD2DFactory = <span class="hljs-literal">NULL</span>;            <span class="hljs-comment">// Direct2D factory</span><br>ID2D1HwndRenderTarget *g_pRenderTarget = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// Render target</span><br>ID2D1SolidColorBrush *g_pBlackBrush = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">// A black brush, reflect the line color</span><br>ID2D1SolidColorBrush *g_pRedBrush = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">// A red brush, reflect the line color</span><br><br><span class="hljs-function">VOID <span class="hljs-title">CreateD2DResource</span><span class="hljs-params">(HWND hWnd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!g_pRenderTarget)<br>    &#123;<br>        HRESULT hr;<br><br>        hr = <span class="hljs-built_in">D2D1CreateFactory</span>(D2D1_FACTORY_TYPE_SINGLE_THREADED, &amp;g_pD2DFactory);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>        &#123;<br>            <span class="hljs-built_in">MessageBox</span>(hWnd, <span class="hljs-string">L&quot;Create D2D factory failed!&quot;</span>, <span class="hljs-string">L&quot;Error&quot;</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Obtain the size of the drawing area</span><br>        RECT rc; <span class="hljs-comment">// Render area</span><br>        <span class="hljs-built_in">GetClientRect</span>(hWnd, &amp;rc);<br><br>        <span class="hljs-comment">// Create a Direct2D render target</span><br>        hr = g_pD2DFactory-&gt;<span class="hljs-built_in">CreateHwndRenderTarget</span>(<br>            D2D1::<span class="hljs-built_in">RenderTargetProperties</span>(),<br>            D2D1::<span class="hljs-built_in">HwndRenderTargetProperties</span>(<br>                hWnd,<br>                D2D1::<span class="hljs-built_in">SizeU</span>(rc.right - rc.left, rc.bottom - rc.top)),<br>            &amp;g_pRenderTarget);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>        &#123;<br>            <span class="hljs-built_in">MessageBox</span>(hWnd, <span class="hljs-string">L&quot;Create render target failed!&quot;</span>, <span class="hljs-string">L&quot;Error&quot;</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Create a black brush</span><br>        hr = g_pRenderTarget-&gt;<span class="hljs-built_in">CreateSolidColorBrush</span>(D2D1::<span class="hljs-built_in">ColorF</span>(D2D1::ColorF::Black), &amp;g_pBlackBrush);<br>        <span class="hljs-comment">// fany: Create a red brush</span><br>        g_pRenderTarget-&gt;<span class="hljs-built_in">CreateSolidColorBrush</span>(D2D1::<span class="hljs-built_in">ColorF</span>(D2D1::ColorF::Red), &amp;g_pRedBrush);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>        &#123;<br>            <span class="hljs-built_in">MessageBox</span>(hWnd, <span class="hljs-string">L&quot;Create brush failed!&quot;</span>, <span class="hljs-string">L&quot;Error&quot;</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">DrawRectangle</span><span class="hljs-params">(HWND hwnd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">CreateD2DResource</span>(hwnd);<br><br>    g_pRenderTarget-&gt;<span class="hljs-built_in">BeginDraw</span>();<br><br>    <span class="hljs-comment">// Clear background color to White</span><br>    g_pRenderTarget-&gt;<span class="hljs-built_in">Clear</span>(D2D1::<span class="hljs-built_in">ColorF</span>(D2D1::ColorF::White));<br><br>    <span class="hljs-comment">// Draw Black Rectangle</span><br>    <span class="hljs-comment">// g_pRenderTarget-&gt;DrawRectangle(D2D1::RectF(100.f, 100.f, 500.f, 500.f), g_pBlackBrush);</span><br>    <span class="hljs-comment">// fany: Draw Red Rectangle</span><br>    g_pRenderTarget-&gt;<span class="hljs-built_in">DrawRectangle</span>(D2D1::<span class="hljs-built_in">RectF</span>(<span class="hljs-number">100.f</span>, <span class="hljs-number">100.f</span>, <span class="hljs-number">500.f</span>, <span class="hljs-number">500.f</span>), g_pRedBrush);<br><br>    HRESULT hr = g_pRenderTarget-&gt;<span class="hljs-built_in">EndDraw</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;Draw failed!&quot;</span>, <span class="hljs-string">L&quot;Error&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">Cleanup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">SAFE_RELEASE</span>(g_pRenderTarget);<br>    <span class="hljs-built_in">SAFE_RELEASE</span>(g_pBlackBrush);<br>    <span class="hljs-built_in">SAFE_RELEASE</span>(g_pD2DFactory);<br>&#125;<br><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">WndProc</span><span class="hljs-params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (message)<br>    &#123;<br>    <span class="hljs-keyword">case</span> WM_PAINT:<br>        <span class="hljs-built_in">DrawRectangle</span>(hwnd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">case</span> WM_KEYDOWN:<br>    &#123;<br>        <span class="hljs-keyword">switch</span> (wParam)<br>        &#123;<br>        <span class="hljs-keyword">case</span> VK_ESCAPE:<br>            <span class="hljs-built_in">SendMessage</span>(hwnd, WM_CLOSE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> WM_DESTROY:<br>        <span class="hljs-built_in">Cleanup</span>();<br>        <span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProc</span>(hwnd, message, wParam, lParam);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="hljs-type">int</span> iCmdShow)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    WNDCLASSEX winClass;<br><br>    winClass.lpszClassName = <span class="hljs-string">L&quot;Direct2D&quot;</span>;<br>    winClass.cbSize = <span class="hljs-built_in">sizeof</span>(WNDCLASSEX);<br>    winClass.style = CS_HREDRAW | CS_VREDRAW;<br>    winClass.lpfnWndProc = WndProc;<br>    winClass.hInstance = hInstance;<br>    winClass.hIcon = <span class="hljs-literal">NULL</span>;<br>    winClass.hIconSm = <span class="hljs-literal">NULL</span>;<br>    winClass.hCursor = <span class="hljs-built_in">LoadCursor</span>(<span class="hljs-literal">NULL</span>, IDC_ARROW);<br>    winClass.hbrBackground = <span class="hljs-literal">NULL</span>;<br>    winClass.lpszMenuName = <span class="hljs-literal">NULL</span>;<br>    winClass.cbClsExtra = <span class="hljs-number">0</span>;<br>    winClass.cbWndExtra = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">RegisterClassEx</span>(&amp;winClass))<br>    &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;This program requires Windows NT!&quot;</span>), <span class="hljs-string">L&quot;error&quot;</span>, MB_ICONERROR);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    HWND hwnd = <span class="hljs-built_in">CreateWindowEx</span>(<span class="hljs-literal">NULL</span>,<br>                               <span class="hljs-string">L&quot;Direct2D&quot;</span>,         <span class="hljs-comment">// window class name</span><br>                               <span class="hljs-string">L&quot;Draw Rectangle&quot;</span>,   <span class="hljs-comment">// window caption</span><br>                               WS_OVERLAPPEDWINDOW, <span class="hljs-comment">// window style</span><br>                               CW_USEDEFAULT,       <span class="hljs-comment">// initial x position</span><br>                               CW_USEDEFAULT,       <span class="hljs-comment">// initial y position</span><br>                               <span class="hljs-number">938</span>,                 <span class="hljs-comment">// initial x size</span><br>                               <span class="hljs-number">1000</span>,                <span class="hljs-comment">// initial y size</span><br>                               <span class="hljs-literal">NULL</span>,                <span class="hljs-comment">// parent window handle</span><br>                               <span class="hljs-literal">NULL</span>,                <span class="hljs-comment">// window menu handle</span><br>                               hInstance,           <span class="hljs-comment">// program instance handle</span><br>                               <span class="hljs-literal">NULL</span>);               <span class="hljs-comment">// creation parameters</span><br><br>    <span class="hljs-built_in">ShowWindow</span>(hwnd, iCmdShow);<br>    <span class="hljs-built_in">UpdateWindow</span>(hwnd);<br><br>    MSG msg;<br>    <span class="hljs-built_in">ZeroMemory</span>(&amp;msg, <span class="hljs-built_in">sizeof</span>(msg));<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessage</span>(&amp;msg, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-built_in">TranslateMessage</span>(&amp;msg);<br>        <span class="hljs-built_in">DispatchMessage</span>(&amp;msg);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> msg.wParam;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这个就是 win32 的经典写法了。</p><hr /><p>参考，</p><p>1、<a href="https://www.cnblogs.com/h2zZhou/p/6295455.html"class="uri">https://www.cnblogs.com/h2zZhou/p/6295455.html</a><br />2、<ahref="https://github.com/holy-shit/clion-directx-example/blob/master/CMakeLists.txt"class="uri">https://github.com/holy-shit/clion-directx-example/blob/master/CMakeLists.txt</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>C++</tag>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>p8597 和 p8615</title>
    <link href="/2023/02/07/p8597-%E5%92%8C-p8615/"/>
    <url>/2023/02/07/p8597-%E5%92%8C-p8615/</url>
    
    <content type="html"><![CDATA[<p>这是两道水题。好吧，其实学名叫作普及题。</p><p>看到有人直播写的，就顺便写了一下。</p><p>原来蓝桥杯的题目长这个样子，那确实不值得报名。</p><p>p8597，</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string a, b;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-comment">// a = &quot;*o**o***o***&quot;;</span><br>    <span class="hljs-comment">// b = &quot;*o***o**o***&quot;;</span><br>    <span class="hljs-comment">// a = &quot;**********&quot;;</span><br>    <span class="hljs-comment">// b = &quot;o****o****&quot;;</span><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b[i] &amp;&amp; flag == <span class="hljs-number">1</span>)<br>        &#123;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[i] != b[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>)<br>            &#123;<br>                cnt++;<br>            &#125;<br>            flag = !flag;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>p8651，</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> attemp = (<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(n);<br>    <span class="hljs-keyword">return</span> attemp * attemp == n;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRight</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isPerfectSquare</span>(n))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp = (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10.0</span>, (<span class="hljs-type">double</span>)i);<br>        <span class="hljs-keyword">if</span> (tmp &gt;= n)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n % tmp != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> right = n % tmp;<br>            <span class="hljs-type">int</span> left = (n - right) / tmp;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isPerfectSquare</span>(left) &amp;&amp; <span class="hljs-built_in">isPerfectSquare</span>(right))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> a, b;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a; i &lt;= b; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRight</span>(i))<br>        &#123;<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的 VSCode 基本设置</title>
    <link href="/2023/02/06/%E6%88%91%E7%9A%84-VSCode-%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"/>
    <url>/2023/02/06/%E6%88%91%E7%9A%84-VSCode-%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>应 B 站小伙伴的请求，我给我目前的 VSCode 的整体设置和快捷键设置的json 文件的每一行都加上了注释，如下，</p><p>settings.json，</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 是否要确认是否信任新打开的文件</span><br>  <span class="hljs-attr">&quot;security.workspace.trust.untrustedFiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;open&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// redhat 遥测设置</span><br>  <span class="hljs-attr">&quot;redhat.telemetry.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// xml 设置，这是自动生成的</span><br>  <span class="hljs-attr">&quot;xml.server.binary.trustedHashes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;75545f1685acea66aed67cb886c59e49cbbf0f51c25c89baad76cf0a3ee962a7&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 编辑器设置在保存时自动格式化</span><br>  <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 图标主题</span><br>  <span class="hljs-attr">&quot;workbench.iconTheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;material-icon-theme&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 不要弹出确认拖放</span><br>  <span class="hljs-attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 不要弹出确认删除</span><br>  <span class="hljs-attr">&quot;explorer.confirmDelete&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置编辑器的字体</span><br>  <span class="hljs-attr">&quot;editor.fontFamily&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#x27;CaskaydiaCove NF Mono&#x27;, &#x27;Cascadia Mono&#x27;, &#x27;Source Han Sans CN&#x27;, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 开启编辑器的连字符设置</span><br>  <span class="hljs-attr">&quot;editor.fontLigatures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 开始的编辑器</span><br>  <span class="hljs-attr">&quot;workbench.startupEditor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 智能提交</span><br>  <span class="hljs-attr">&quot;git.enableSmartCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// git 不要弹窗确认是否同意 sync</span><br>  <span class="hljs-attr">&quot;git.confirmSync&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// python 对 formatter 的设置</span><br>  <span class="hljs-attr">&quot;python.formatting.autopep8Args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;--ignore&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;E402&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// python 对某些语法分析的设置</span><br>  <span class="hljs-attr">&quot;python.analysis.diagnosticSeverityOverrides&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;reportUnsupportedDunderAll&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置 html 的 formatter</span><br>  <span class="hljs-attr">&quot;[html]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vscode.html-language-features&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// unicode 高亮设置</span><br>  <span class="hljs-attr">&quot;editor.unicodeHighlight.allowedLocales&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;zh-hans&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;zh-hant&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 光标的动画效果</span><br>  <span class="hljs-attr">&quot;editor.cursorBlinking&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;smooth&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.cursorSmoothCaretAnimation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 指定默认的 termimal</span><br>  <span class="hljs-attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PowerShell&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置 terminal 的字体</span><br>  <span class="hljs-attr">&quot;terminal.integrated.fontFamily&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CaskaydiaCove NF Mono&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置 markdown 预览的字体</span><br>  <span class="hljs-attr">&quot;markdown.preview.fontFamily&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CaskaydiaCove NF Mono, -apple-system, BlinkMacSystemFont, &#x27;Segoe WPC&#x27;, &#x27;Segoe UI&#x27;, system-ui, &#x27;Ubuntu&#x27;, &#x27;Droid Sans&#x27;, sans-serif&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 关闭编辑器的自动检测缩进设置</span><br>  <span class="hljs-attr">&quot;editor.detectIndentation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置不同语言的 tab 大小</span><br>  <span class="hljs-attr">&quot;[javascript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[css]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[jsonc]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[json]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[lua]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[javascriptreact]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[scss]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[java]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 行包裹设置</span><br>  <span class="hljs-attr">&quot;editor.wordWrap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// python 设置在文件所在目录进行执行</span><br>  <span class="hljs-attr">&quot;python.terminal.executeInFileDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 终端的限制</span><br>  <span class="hljs-attr">&quot;terminal.integrated.bellDuration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100000</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 不要高亮一些看不见的 unicode 字符</span><br>  <span class="hljs-attr">&quot;editor.unicodeHighlight.invisibleCharacters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;workbench.colorCustomizations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 光标的颜色设置</span><br>    <span class="hljs-attr">&quot;editorCursor.foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#16C60C&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 当前行的背景颜色设置</span><br>    <span class="hljs-attr">&quot;editor.lineHighlightBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#292e42&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 状态栏颜色设置</span><br>    <span class="hljs-attr">&quot;statusBar.background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#1e1e1e&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;statusBar.foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#9b9b8f&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;statusBar.border&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#333a48&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 隐藏 minimap</span><br>  <span class="hljs-attr">&quot;editor.minimap.autohide&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.minimap.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 在某些情况下隐藏光标</span><br>  <span class="hljs-attr">&quot;editor.hideCursorInOverviewRuler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 以下三行是为了隐藏滚动栏</span><br>  <span class="hljs-attr">&quot;editor.scrollbar.horizontal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hidden&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.scrollbar.vertical&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hidden&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.scrollbar.verticalScrollbarSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 布局控制</span><br>  <span class="hljs-attr">&quot;workbench.layoutControl.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 渲染行高的风格</span><br>  <span class="hljs-attr">&quot;editor.renderLineHighlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;line&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 取消 occurrence 和 selection 的高亮</span><br>  <span class="hljs-attr">&quot;editor.occurrencesHighlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.selectionHighlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 以下是 vim 的设置</span><br>  <span class="hljs-comment">// vim 使用系统剪贴板</span><br>  <span class="hljs-attr">&quot;vim.useSystemClipboard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 开启 vim 的 easymotion</span><br>  <span class="hljs-attr">&quot;vim.easymotion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 当输入一个搜索字符时，显示下一个匹配的结果</span><br>  <span class="hljs-attr">&quot;vim.incsearch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// vim 来接管 ctrl 键</span><br>  <span class="hljs-attr">&quot;vim.useCtrlKeys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 高亮搜索结果</span><br>  <span class="hljs-attr">&quot;vim.hlsearch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置 vim 的 leader 键为空格键</span><br>  <span class="hljs-attr">&quot;vim.leader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;space&gt;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置 vim 不接管某些快捷键</span><br>  <span class="hljs-attr">&quot;vim.handleKeys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;&lt;C-a&gt;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;&lt;C-f&gt;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// vim normal 模式下的键位设置</span><br>  <span class="hljs-attr">&quot;vim.normalModeKeyBindings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-comment">// 侧边栏的显示和隐藏的快捷键，我映射成了 leader + e</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;e&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.toggleSidebarVisibility&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// cmake 快速编译和运行文件，我映射成了 leader + l，这个和直接点击底部状态栏的运行按钮效果是一样的</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;l&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clear \u000D&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmake.launchTarget&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 在左侧的文件管理器中打开当前文件</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;f&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;revealInExplorer&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 取消高亮，比如我们在当前文件中搜索之后可以使用这个快捷键</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;h&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;:noh&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 关闭当前的 tab</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;c&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;:q&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 保存当前的文件</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;w&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;:w&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 显示和隐藏左侧的活动栏</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;a&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.toggleActivityBarVisibility&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 显示和隐藏底部的状态栏</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;b&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.toggleStatusbarVisibility&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 快速在底部的 terminal 中运行 python 文件</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;y&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;workbench.action.files.saveAll&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clear \u000D&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;workbench.action.terminal.focus&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python &#x27;$&#123;file&#125;&#x27;\u000D&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;workbench.action.focusActiveEditorGroup&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 快速在底部的 terminal 中运行 autohotkey</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;k&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;k&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;workbench.action.files.saveAll&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clear \u000D&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;workbench.action.terminal.focus&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;file&#125; \u000D&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;workbench.action.focusActiveEditorGroup&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 这个和 Ctrl + P 效果是等同的，即，快速搜索打开文件</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;g&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.quickOpen&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 在当前打开的项目中搜索文本</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;f&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.view.search&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 快速运行 java 代码</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;j&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;a&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.debug.runJavaFile&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 快速执行 VSCode 的 debug 命令</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;leader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;r&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.debug.start&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// vim 的 visual 模式下的键位绑定</span><br>  <span class="hljs-attr">&quot;vim.visualModeKeyBindings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-comment">// 向右缩进，可以重复使用</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;&gt;&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;editor.action.indentLines&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 向左缩进，可以重复使用</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;&lt;&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;editor.action.outdentLines&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// vim 在 normal 模式下非递归的键位绑定</span><br>  <span class="hljs-attr">&quot;vim.normalModeKeyBindingsNonRecursive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-comment">// 将 u 和 VSCode 自身的撤销动作绑定</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;u&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;undo&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 将 Ctrl + r 和 VSCode 自身的重做动作绑定</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;C-r&quot;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;redo&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// vim 的 easymotion 插件的高亮字符的前景色</span><br>  <span class="hljs-attr">&quot;vim.easymotionMarkerForegroundColorOneChar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DF5452&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 关闭 snippet 的阻止快速建议的行为</span><br>  <span class="hljs-attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 禁止一些括号设置</span><br>  <span class="hljs-attr">&quot;editor.guides.bracketPairs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.guides.bracketPairsHorizontal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 开启 vim-surround</span><br>  <span class="hljs-attr">&quot;vim.surround&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 扩展忽视建议</span><br>  <span class="hljs-attr">&quot;extensions.ignoreRecommendations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// cmake 配置</span><br>  <span class="hljs-attr">&quot;cmake.configureOnOpen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 编辑器内联的建议</span><br>  <span class="hljs-attr">&quot;editor.inlineSuggest.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 关闭 terminal 中的多行粘贴的警告</span><br>  <span class="hljs-attr">&quot;terminal.integrated.enableMultiLinePasteWarning&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 窗口的缩放程度</span><br>  <span class="hljs-attr">&quot;window.zoomLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 关闭不明 unicode 字符的高亮</span><br>  <span class="hljs-attr">&quot;editor.unicodeHighlight.ambiguousCharacters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 修改窗口的风格为 windows 原生风格</span><br>  <span class="hljs-attr">&quot;window.titleBarStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;native&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 标签栏和面包屑的显示和隐藏</span><br>  <span class="hljs-attr">&quot;workbench.editor.showTabs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;breadcrumbs.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 修改窗口标题的显示文字</span><br>  <span class="hljs-attr">&quot;window.title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;💖$&#123;folderName&#125;-FanyFull&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 我们在文件管理器中使用 vscode 打开文件时，确保其会在新的 vscode 窗口中打开</span><br>  <span class="hljs-attr">&quot;window.openFilesInNewWindow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 将 manifest 文件关联到 xml 文件，这样，manifest 文件就可以使用 xml 的语法高亮了</span><br>  <span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;*.manifest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xml&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 大文件的最大可使用内存</span><br>  <span class="hljs-attr">&quot;files.maxMemoryForLargeFilesMB&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8192</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 关闭 tab 标签的 X 按钮</span><br>  <span class="hljs-attr">&quot;workbench.editor.tabCloseButton&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 隐藏 tab 标签的 X 按钮，当然，如果 CloseButton 被隐藏了，那么这个设置其实是无所谓</span><br>  <span class="hljs-attr">&quot;workbench.editor.tabSizing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shrink&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// accessibility</span><br>  <span class="hljs-attr">&quot;editor.accessibilitySupport&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;git.openRepositoryInParentFolders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 设置 python 在输入的时候进行格式化，也就是说，自动缩进</span><br>  <span class="hljs-attr">&quot;[python]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 隐藏菜单栏</span><br>  <span class="hljs-attr">&quot;window.menuBarVisibility&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hidden&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;workbench.statusBar.visible&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;workbench.activityBar.visible&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><p>keybindings.json，</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// Place your key bindings in this file to override the defaultsauto[]</span><br><span class="hljs-punctuation">[</span><br>  <span class="hljs-comment">// new file in explorer</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+n&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorer.newFile&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorerViewletFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 以下是 vim 绑定的键位</span><br>  <span class="hljs-comment">// 当光标在编辑器中聚焦时，显示和隐藏底部的 panel</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+j&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.togglePanel&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;editorTextFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 编写代码时的智能提示框的上下选择</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+j&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;selectNextSuggestion&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vim.active &amp;&amp; suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+k&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;selectPrevSuggestion&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vim.active &amp;&amp; suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 在 quickOpen 的对话框中上下跳转</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+j&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.quickOpenSelectNext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vim.active &amp;&amp; inQuickOpen&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+k&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.quickOpenSelectPrevious&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vim.active &amp;&amp; inQuickOpen&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 当光标聚焦在编辑器中且 vim 处于 normal 模式时，进行 tab 栏目的左右跳转</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shift+h&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.previousEditor&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;editorTextFocus &amp;&amp; vim.mode == &#x27;Normal&#x27;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shift+l&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.nextEditor&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;editorTextFocus &amp;&amp; vim.mode == &#x27;Normal&#x27;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 在不同的组件之间进行跳转</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+h&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.navigateLeft&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+l&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.navigateRight&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+k&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.navigateUp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminal.active &amp;&amp; terminalFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 跳转到 terminal 中</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+\\&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.toggleTerminal&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// vim 模式下的左侧的文件管理器的操作</span><br>  <span class="hljs-comment">// 在文件管理器中搜索</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;list.find&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;listFocus &amp;&amp; listSupportsFind &amp;&amp; !inputFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 新建一个文件</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorer.newFile&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 新建一个文件夹</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shift+a&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorer.newFolder&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 给文件重命名</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;r&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;renameFile&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 删除文件</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;d&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleteFile&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 在不同的 terminal 之间进行跳转</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+alt+j&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.focusNext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus &amp;&amp; terminalHasBeenCreated &amp;&amp; !terminalEditorFocus || terminalFocus &amp;&amp; terminalProcessSupported &amp;&amp; !terminalEditorFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+alt+k&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.focusPrevious&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus &amp;&amp; terminalHasBeenCreated &amp;&amp; !terminalEditorFocus || terminalFocus &amp;&amp; terminalProcessSupported &amp;&amp; !terminalEditorFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// codeAction 上下选择</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;j&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;selectNextCodeAction&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;codeActionMenuVisible&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;selectPrevCodeAction&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;codeActionMenuVisible&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// terminal 中上下滚动</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+j&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.scrollDown&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+k&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.scrollUp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 关闭 terminal</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+w&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.kill&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 调整底部的 panel 的大小</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+k&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.resizePaneUp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+j&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.resizePaneDown&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 最大化 terminal</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+win+`&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.toggleMaximizedPanel&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;terminalFocus&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tzoj6101 简单做过</title>
    <link href="/2023/02/06/tzoj6101-%E7%AE%80%E5%8D%95%E5%81%9A%E8%BF%87/"/>
    <url>/2023/02/06/tzoj6101-%E7%AE%80%E5%8D%95%E5%81%9A%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>题目链接，</p><p><ahref="http://tzcoder.cn/acmhome/problemdetail.do?&amp;method=showdetail&amp;id=6101"class="uri">http://tzcoder.cn/acmhome/problemdetail.do?&amp;method=showdetail&amp;id=6101</a></p><p>这道题是今晚在看直播的时候某个同志遇到的题目，我觉得比较有趣，就也尝试了一下。</p><p>发现是用贪心，嗯，做的时候比较有趣，但是这个似乎也不太好有严谨的证明，就直接用所谓的势来理解了。就当是简单锻炼一下思维了。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 贪心，我只是按照势来理解，并没有很严谨的证明</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">108</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">comp</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt; y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-type">int</span> numsA[maxn];<br>    <span class="hljs-type">int</span> numsB[maxn];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n), n != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            cin &gt;&gt; numsA[i];<br>            numsB[i] = numsA[i];<br>        &#125;<br>        m = n;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">sort</span>(numsA, numsA + n, comp);<br>        <span class="hljs-built_in">sort</span>(numsB, numsB + m);<br>        <span class="hljs-keyword">while</span> (n &gt;= <span class="hljs-number">2</span>)<br>        &#123;<br>            numsA[n - <span class="hljs-number">2</span>] = numsA[n - <span class="hljs-number">2</span>] * numsA[n - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            n--;<br>            <span class="hljs-built_in">sort</span>(numsA, numsA + n, comp);<br>        &#125;<br>        <span class="hljs-keyword">while</span> (m &gt;= <span class="hljs-number">2</span>)<br>        &#123;<br>            numsB[m - <span class="hljs-number">2</span>] = numsB[m - <span class="hljs-number">2</span>] * numsB[m - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            m--;<br>            <span class="hljs-built_in">sort</span>(numsB, numsB + m);<br>        &#125;<br>        cout &lt;&lt; numsA[<span class="hljs-number">0</span>] - numsB[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>oj</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>侠客行赏析</title>
    <link href="/2023/02/04/%E4%BE%A0%E5%AE%A2%E8%A1%8C%E8%B5%8F%E6%9E%90/"/>
    <url>/2023/02/04/%E4%BE%A0%E5%AE%A2%E8%A1%8C%E8%B5%8F%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="本体">本体</h2><p>李白的诗。</p><p>赵客缦(màn)胡缨(yīnɡ)，吴钩霜雪明。<br />银鞍照白马，飒沓(tà)如流星。<br />十步杀一人，千里不留行。<br />事了拂(fú)衣去，深藏身与名。<br />闲过信陵饮，脱剑膝前横。<br />将炙啖(dàn)朱亥(hài)，持觞劝侯嬴(yíng)。<br />三杯吐然诺，五岳倒为轻。<br />眼花耳热后，意气素霓生。<br />救赵挥金槌(chuí)，邯郸(hán dān)先震惊。<br />千秋二壮士，烜(xuǎn)赫大梁城。<br />纵死侠骨香，不惭世上英。<br />谁能书阁下，白首太玄经。</p><p>大意：</p><p>燕赵的侠士，头上系着侠士的武缨，腰佩吴越闪亮的弯刀。骑着银鞍白马，在大街上驰骋就像天上的流星一样迅疾。他们武艺盖世，十步可斩杀一人，千里之行，无人可挡。他们大事做成后，拂袖而去将功劳和美名隐藏起来。想当年，侯嬴、朱亥与信陵君结交，与之脱剑横膝，交相欢饮。与朱亥、侯赢一同大口吃肉，大碗饮酒。几杯热酒下肚，便慷慨许诺，愿为知己两肋插刀，一诺重于泰山。酒后眼花耳热，意气勃勃劲生，感动苍天，可贯长虹。朱亥为信陵君救赵，挥起了金槌，使赵都邯郸上下，都为之震惊。二位壮士的豪举，千秋之后仍然在大梁城传为美谈。他们纵然死去而侠骨犹香，不愧为一世英豪、英雄。谁能像扬雄一样，在书阁里研究《太玄经》到老，而一辈子无所作为呢？</p><p>注释：</p><p>这是一首描写和歌颂侠客的古体五言诗，是李白乐府三一首中的一首。行，这里不是行走的行，而是歌行体的行，等于说“侠客的歌”。-赵客：燕赵之地的侠客。自古燕赵多慷慨悲歌之士。《庄子·说剑》：“昔赵文王好剑，剑士夹门而客三千余人。”缦，没有花纹。胡缨，古时将北方少数民族通称为胡；缨，系冠帽的带子。缦胡缨，即少数民族做工粗糙的没有花纹的带子。这句写侠客的冠带。- 吴钩：宝刀名。霜雪明，谓宝刀的锋刃像霜雪一样明亮。 -飒沓：迅疾的样子。 -信陵：信陵君，战国四公子之一，为人礼贤下士，门下食客三千余人。 -朱亥、侯嬴：都是信陵君的门客。朱本是一屠夫，侯原是魏国都城大梁东门的门官，两人都受到信陵君的礼遇，都为信陵君所用。炙，烤肉。啖，吃。- 啖朱亥：让朱亥来吃。 -“三杯”两句：说几杯酒下肚就作出了承诺，并且把承诺看得比五岳还重。 -素霓：白虹。古人认为，凡要出现不寻常的大事，就会有不寻常的天象出现，如“白虹贯日”。- 烜赫：形容声名盛大。大梁城：魏国都城，今河南开封。 -太玄经：西汉扬雄的一部哲学著作。扬雄曾在皇帝藏书的天禄阁任校刊工作。</p><p>赏析：</p><p>李白这一首《侠客行》古风，抒发了他对侠客的倾慕，对拯危济难、用世立功生活的向往。</p><p>前四句从侠客的装束、兵刃、坐骑描写侠客的外貌。</p><p>第二个四句写侠客高超的武术和淡泊名利的行藏。</p><p>在渲染侠客精神后，“闲过”两句是承上启下的过渡，将侠客与战国时期信陵君这样的“明主”联系起来。李白正是想结识像信陵君这样的明主以成就自己“申管晏之谈，谋帝王之术，奋其智能，愿为辅弼，使寰区大定，海县靖一”的政治抱负。接着十句写信陵君救赵用两位侠客的故事。写信陵君款待侯嬴和朱亥，两位侠客为信陵君的大义和感情所感动，意气慷慨激昂如白虹贯日，许下比五岳还重的诺言。赞扬朱亥挥锤击杀晋鄙而震惊赵国，虽然侯嬴和朱亥都死去，但在魏都留下盛大声名，侠骨传香，不愧为当世英雄。诗人不仅在热烈地颂唱侯嬴和朱亥“二壮士”，同时也对校书天禄阁草《太玄经》的扬雄辈，无情地加以蔑视：“谁能书阁下，白首《太玄经》？”末二句以扬雄反衬侠客精神的崇高和伟大。</p><p>有人认为这首《侠客行》仅仅是写朱亥、侯嬴，是不对的。前八句写的侠客的形象就与朱、侯两人不符。朱并不会剑术，而是力气大、勇敢。侯主要是智谋取胜。一句“闲过信陵饮”不过是将侠客与信陵君这样的“明君”联系起来罢了，因朱、侯都不是以这种方式结识信陵君的。李白正是想结识像信陵君这样的明主以成就自己“申管晏之谈，谋帝王之术，奋其智能，愿为辅弼，使寰区大定，海县靖一”的政治抱负。</p><p>前人有曰：借他人故事，浇自己块垒。李白这首诗亦当如是！</p><p>我们知道，唐代游侠之风颇为盛行，这是与唐代西域交通发达，全国经济日益繁荣，城市商业兴旺的盛唐时代有关，所以，下仅是燕赵传统的多任侠而已。特别是关陇一带的风习“融胡汉为一体，文武不殊途。”（陈寅恪：《唐代政治史述论论稿》）更促成了少年喜剑术、尚任侠的风气。李白少年时代，颇受关陇文化风习的影响，因此，他自幼勤苦读书“观百家”外，“十五好剑术”（《与韩州书》）“高冠佩雄剑”（《忆襄阳旧游赠马少府巨》）甚至，他一生都不离剑的：“抚剑夜吟啸，雄心日千里。”（《赠张相镐》其二）“长剑一杯酒，男儿方寸心。”（《赠崔侍御》）堪称是“文武不殊途”，兼备于李白一身了。那么，诗人李白何以如此爱剑呢？这和他轻财重义，尚任侠分不开。他说；“十五好剑术，遍干诸侯。”正是当时任侠流行的社会意识，为了事业心和抱负的驱使，尚任侠的少年都企求干一番豪纵、快意的事，得到社会上的普遍赞誉。李白这首《侠客行》就是以这任侠意识为旨的。</p><p>《侠客行》是诗人李白以夸张的笔墨，从游侠的服饰开始：“赵客缦胡缨，吴钩霜雪明。银鞍照白马，飒沓如流星。”仅二十个字，仿佛全是写物而不写人。但当时游侠儿的气势、风貌，就栩栩如生的展现在目前了。因为诗人并不是为物而夸张的写物，而是处处着眼于人的精神气势而写物。“缦胡”的“缨’，“霜雪明”的”吴钩”，“飒沓如流星”的“白马”这些当时流行的任侠服饰，不仅具有典型性，而且流露出主人豪纵、慷慨之气，把物都写活了。</p><p>诗人进而写游侠的行为：“十步杀一人，千里不留行。事了拂衣去，深藏身与名。”也仅是二十字，就高度概括了排忧解难、不图名利、尚义气、重承诺等等的高尚人格。诗人是以“纵死侠骨香，不惭世上英”的思想，加以歌赞的。事实上，诗人之所以少好任侠，乃是以此为理想人格而向往的，故能把一般的任侠社会意识，写得如此深刻而生动。</p><p>最后，诗人以战国时“窃符救赵夺晋鄙军”中的侯赢、朱亥”二壮士”例，阐明“纵死侠骨香，不惭世上英”之旨。“闲过信陵饮，脱剑膝前横。将炙啖朱亥，持觞劝侯赢。三杯吐然诺，五岳倒为轻。眼花耳热后，意气素霓生。救赵挥金槌，邯郸先震惊。千秋二壮士，烜赫大梁城。纵死侠骨香，不惭世上英”这“三杯吐然诺，五岳为之轻。眼花耳热后，意气素霓生。”重然诺，尚意气的任侠，真是“慷慨成素霓，啸咤起清风。”（张华《壮士篇》）的。震撼了大梁城：“千秋二壮士”，是当之而不愧。“不惭世上英”！诗人对“二壮士”叹服不已，情见于词了。</p><p>然而，诗人不仅在热烈的颂唱“二壮士”，同时也对校书天禄阁草《太玄经》的扬雄辈，无情地加以蔑视：“谁能书阁下，白首《太玄经》”是为壮夫所不为！</p><p>李白《侠客行》一诗虽在礼赞侠客精神，但由于诗人就是尚任侠的，所以此诗也是诗人的自我写照，诗人的豪情壮志在诗中表现无遗。</p><h2 id="讲义">讲义</h2><h3 id="字词注释">字词注释</h3><p>赵：</p><p>古國名。戰國七雄之一。開國君主趙烈侯與魏、韓三家分晉，建立趙國。疆域有今山西中部，陝西東北角及河北西南部。</p><p>燕：</p><p>周代姬姓諸侯國，故址在今大陸地區河北、遼寧及韓國北部。為戰國七雄之一，後為秦所滅。</p><p>fany：所谓燕赵之地多侠客。</p><p>縵　màn　ㄇㄢˋ 《廣韻》莫半切，去換，明。 《廣韻》謨晏切，去諫，明。17畫 糸部11畫 統一碼：7E35 大五碼：C167 國標擴：BF7A 1 無文飾的繒帛。 漢董仲舒《春秋繁露・度制》：「庶人衣縵。」《資治通鑒・隋文帝開皇二十年》：「悉屏暱美姬于別室，唯留老醜者，衣以縵綵，給事左右。」參見「縵帛」。2 泛指無文飾之物。《周禮・春官・巾車》：「服車五乘，孤乘夏篆，卿乘夏縵。」賈公彥疏：「縵者，亦如縵帛無文章。」《左傳・成公五年》：「君爲之不舉，降服，乘縵。」孔穎達疏：「乘縵，車無文。」《文選・張協〈七命〉》：「神器化成，陽文陰縵。」李善注：「陽曰干將，而作龜文，陰曰莫邪，而漫理。」 3雜樂。《禮記・學記》：「不學操縵，不能安弦。」鄭玄注：「操縵，雜弄。」一說，縵謂琴瑟之弦。見《禮記・學記》陳澔集說。參見「縵樂」。4 見「縵縵」。 5 通「慢」。舒緩；疏慢。《莊子・列禦寇》：「人者厚貌深情……有堅而縵，有緩而釬。」成玄英疏：「縵，緩也。」 郭慶藩集釋引俞樾曰：「縵，慢之假字。」 6通「幔」。 《周書・韋孝寬傳》：「孝寬乃縫布爲縵，隨其所向則張設之。」 唐白居易《江南喜逢蕭九徹因話長安舊游》詩：「怕聽鐘聲坐，羞明映縵藏。」 清俞樾《茶香室三鈔・便帽》：「此兩種帽，今皆用之，但轉無其華美也，帽後垂紅縵。」7 通「漫」。 唐 劉禹錫《畬田行》：「何處好畬田，團團縵山腹。」 宋張先《定西番》詞之一：「秀眼縵生千媚，釵玉重，髻雲低。」 清魏源《聖武記》卷七：「陽被陰伏，則爲瘴癘；陰隨陽解，則山澤之氣不得不上升，升則不得不爲縵空五色之祥雲。」</p><p>这里应该取无文饰之物之意。</p><p>胡：</p><p>古代稱北方和西方的民族如匈奴等爲胡。</p><p>缨：</p><p>1 繫冠的帶子。以二組繫於冠，結在頷下。《禮記・玉藻》：「玄冠朱組纓，天子之冠也。」《孟子・離婁上》：「滄浪之水清兮，可以濯我纓。」 三國 魏曹植《七啟》：「華組之纓，從風紛紜。」 清孫枝蔚《贈別張牧公》詩之三：「臨岐折椏淚沾纓，愁對踟躕馬不行。」</p><p>吴钩：</p><p>鉤，兵器，形似劍而曲。春秋 吳人善鑄鉤，故稱。後也泛指利劍。</p><p>沓：</p><p>【副】 眾多而重複。例 如：「雜沓」、「紛至沓來」。</p><p>飒沓：</p><p>先看飒的意思，</p><p>1 象聲詞。風聲。《文選・宋玉〈風賦〉》：「有風颯然而至，王迺披襟而當之。」李善注引《說文》：「颯，風聲。」參見「颯颯」。 2 迅疾貌。 唐杜甫《大雨》詩：「風雷颯萬里，霈澤施蓬蒿。」 清袁枚《新齊諧・搜河都尉》：「是夜風雨颯至，河不掘而成者三十餘丈。」 3形容迅速而至。 明李東陽《上元後一日亨父席上得合字》：「忽聞好事邀，詩興翩已颯。」 4大風吹物。 唐 杜甫《桔柏渡》詩：「連笮動嫋娜，征衣颯飄颻。」 宋袁文《瓮牖閑評》卷四引徐安人《秋扇》詩：「西風颯高梧，枕簟淒以清。」 明湯顯祖《牡丹亭・診祟》：「夢初回，燕尾翻風，亂颯起湘簾翠。」 5指風微微吹過。 《敦煌變文集・維摩詰經講經文》：「徐行時若風颯芙蓉。」 6拂拭而過。 唐盧綸《渾贊善東齋戲贈陳歸》詩：「長裾珠履颯輕塵，閒以琴書列上賓。」 元郝經《望京府賞紅梅》詩：「玉銜徑踏黃河水，貂帽颯簷掀紫錦。」 7衰敗零亂。 晉 潘岳《秋興賦》：「斑鬢髟以承弁兮，素髮颯以垂領。」 南朝 齊謝朓《落日同何儀曹煦》詩：「一賞桂樽前，寧傷蓬鬢颯。」 南朝 梁陸倕《思田賦》：「歲聿忽其云暮，庭草颯以萎黃。」 唐皮日休《九諷・端憂》：「篔簹颯兮雨岸，杜若死兮霜洲。」 8 忽；頓然。 唐李白《游謝氏山亭》詩：「謝公池塘上，春草颯已生。」 唐胡曾《詠史詩・陽臺》：「楚國城池颯已空，陽臺雲雨過無蹤。」</p><p>这里是有几个可以符合的。</p><p>拂：</p><p>甩動、抖動。例如：「拂袖而去」。◇《西遊記》第七一回：「那菩薩將柳枝連拂幾點甘露，霎時間，煙火俱無，黃沙絕跡。」</p><p>信陵君：</p><p>魏无忌。</p><p>人名。（？～西元前243）戰國時魏昭王的幼子、魏安釐王的異母弟。天性仁厚，好養士，有賢名，曾用侯嬴計，卻秦救趙；秦伐魏時，率領五國兵歸救魏，大破秦兵，聲名威振天下。後被讒廢用，遂抑鬱不樂沉迷於酒色，不久即因飲醇酒多近婦女，病酒而死。與齊孟嘗君、趙平原君、楚春申君並稱為戰國四公子。因魏安釐王封其地在信陵，故也稱為「信陵君」。</p><p>戰國 魏安厘王異母弟，名無忌，封信陵君。禮賢下士，有食客三千人。大梁夷門監者侯嬴老而賢明，信陵君『從車騎，虛左，自迎』侯生，至家，奉爲座上客。魏安厘王二十年，秦圍趙邯鄲，趙求救於魏，信陵君用侯嬴計，使如姬竊得兵符，擊殺將軍晉鄙，奪得兵權，救趙卻秦。後留趙十年，歸魏，率五國之兵大破秦軍，直至函谷關。終因讒毀，爲魏王所忌，乃謝病不朝。見《史記・魏公子列傳》。郭沫若《＜虎符＞後話》：「漢高祖是崇拜信陵君的，信陵君假使有後，他照理會加以封贈。」亦省稱「信陵」。三國魏 吳質《答東阿王書》：「屢獲信陵虛左之德，又無侯生可述之美。」 唐王昌齡《答武陵田太守》詩：「曾爲大梁客，不負信陵恩。」</p><p>朱亥：</p><p>人名。生卒年不詳。戰國時魏人，以屠為業。時秦圍趙邯鄲，魏遣晉鄙率軍救趙，因懼秦兵，便留軍於鄴，逗留觀望。魏公子無忌得侯嬴獻計盜得兵符，侯嬴又薦朱亥與之同行。至魏營，晉鄙疑信陵君有詐，朱亥即出袖中鐵椎擊殺晉鄙，奪得兵權，破秦師，遂解邯鄲之圍。</p><p>魏：</p><p>國名。戰國時的一國，其故址約在今河南省北部、山西省西南部一帶，後滅於秦。</p><p>啖：</p><p>給人食物吃。</p><p>嬴：</p><p>有剩餘的。例 如：「嬴利」、「嬴餘」。</p><p>素蜺：</p><p>亦作「素霓」。 白虹。 而白虹又是什么呢，日月周圍的白色暈圈。</p><p>邯郸：</p><p>就是今天河北省的一个地方。</p><p>烜xuǎn，又读xuān。</p><p>① 火勢旺盛。◇《玉篇・火部》：「烜，火盛貌。」② 明亮、顯著。◇《爾雅・釋訓》：「赫兮烜兮，威儀也。」</p><p>大梁城：</p><p>魏国都城，今河南开封。</p><h3 id="句子整体">句子整体</h3><p>这首诗老师是绝对不会教的。因为这里面杀气太重。</p><p>另外，有一部小说，也是这个名字，可以看一下。</p><p>十步杀一人，很夸张了。</p><p>唐代那个时候确实是比较崇尚游侠精神的。</p><p>什么叫作深藏身与名，其实和闷声发大财是类似的。好吧，其实是为了发更多的财，这个和献忠的原理是一致的。</p><p>元微之《侠客行》云：“侠客不怕死，怕死事不成，（事成）不肯藏姓名。”二公寓意不同。</p><p>闲过信陵饮，这个其实我也不知道。书上也查不到。我的理解是这个样子的，诗呢，写到这里就转向描写朱亥和侯嬴的故事了，这个“闲过信陵饮”应该指的是侠客到信陵君家里饮酒。</p><p>意气。</p><h2 id="闲叙">闲叙</h2><p>这首诗我是给家里的小孩讲的，表弟、表妹和姨弟等。</p><p>和讲陈涉世家是一个道理，所谓“苟富贵，毋相忘”，以及我们作为一个中国人，心中应该坚守的正义究竟是什么。在此过程中，我也意识到我当年背的这首诗竟然竟然有错误。</p><p>讲的古文古诗不多，主要是带他们入个门。我一直以为，读诗主要是想象，想象其表达的画面，我的一个喜欢钻研的表弟想一直抠它的翻译，我都有点火气了。数学我倒是很乐意他拼命去钻研。</p><p>可惜的是，给他们讲的小学奥数不多，没经过系统连续的训练，理解起来当然不是那么快。</p><hr /><p>参考：</p><ol type="1"><li>古诗文网。<br /></li><li>百度百科。<br /></li><li>教育部国语辞典。<br /></li><li>汉语大词典。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Windows 下 VSCode Vim 输入中文闪烁的问题</title>
    <link href="/2023/02/03/%E8%A7%A3%E5%86%B3-Windows-%E4%B8%8B-VSCode-Vim-%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%97%AA%E7%83%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/02/03/%E8%A7%A3%E5%86%B3-Windows-%E4%B8%8B-VSCode-Vim-%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%97%AA%E7%83%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>首先，看一下输入的效果吧，这里我没有录制gif，但是，输入法的候选框确实是不闪的，</p><p><img src="https://i.imgur.com/TuBcJpq.png" /></p><p>这个问题呢，可以说得上是由来已久呀。如果是 arch linux 下，kde的桌面环境下的 fcitx5 输入法在 VSCode 中的表现是没有问题的。Mac设备的话，我没有，但是它也是有问题的，具体详情可以看这个 issue，</p><p><a href="https://github.com/VSCodeVim/Vim/issues/7496"class="uri">https://github.com/VSCodeVim/Vim/issues/7496</a></p><p>大概就是这个问题，类似的 issue还有几个，这里就不放了，都不知道晾了多少个月了。</p><p>令人疑惑的是，VSCode 或者 VSCode Vim 就是不修复这个 bug。</p><p>真是令人头疼呀。</p><p>所以就没办法啦，只能自己动手尝试解决啦。最终的解决方案就是影子输入法。嗯，我采取的方法是换输入法。</p><p>难道事情就这么简单吗？当然不是。</p><p>我是尝试了各种各样的输入法的，最终才锁定了影子输入法的。</p><p>一开始，影子输入法有以下几个缺点：</p><ol type="1"><li><p>4k 屏幕下，这个位置会出现严重偏移。这个问题猜测应该是 ahk自己的获取光标位置的函数问题导致的。</p></li><li><p>4k 屏幕下，高分屏的显示效果不行。</p></li><li><p>随着输入文字的增多，这个软件占用的内存会不断变大。</p></li><li><p>软件一开始启动的时候，第一次打字会有卡顿的现象。</p></li><li><p>字体渲染似乎不够锐利。</p></li></ol><p>经过一段时间的努力，最终是得到以下的处理方案：</p><ul><li>第一个问题，我们可以把两块显示器的缩放比例调成一致的，比如，我现在两块屏幕的缩放都是150% 的，那么，这个问题就可以得到解决。这个问题确实是 ahk 官方的<ahref="https://www.autohotkey.com/boards/viewtopic.php?t=67645">问题</a>，这个也是有他们自己的考量。</li><li>第二个问题，解决方法同上。</li><li>第三个问题，经过更长时间的使用，发现它其实是可以自己整理内存占用的。</li><li>第四个问题，这个暂时先将就一下，毕竟第一次之后就会变得异常顺滑。</li><li>第五个问题，这个可以通过修改源码来解决，我将源码放入了我的<ahref="https://github.com/fanlumaster/YingziIME">仓库</a>。由于这个输入法的界面是使用Gdip 来渲染的，所以我的解决思路就是去修改相关函数中的抗锯齿参数。</li></ul><p>好吧，到这里其实问题就已经解决了。剩余的就是代码的不断优化了。</p><p>之后就是这一段时间的折腾的简单记录。</p><p>这一切的缘起是我关于对 VSCode 的全键盘操作的想法。而一旦选择了 VSCode作为我的主力代码编辑器，那么，其 Vim下的中文输入就是一个绕不开的问题。</p><p>之后开始换输入法。尝试过的输入法有：</p><ul><li>微软输入法，这个就不多说了，自带的，可配置的东西不多。</li><li>小鹤双拼，小鹤官网下的，这个是使用多多输入法的框架生成的。尝试了小鹤双拼和小鹤音形，最终因为输入法的美观性和是否开源这一个方面以及不能解决VSCode 的输入问题而放弃。</li><li>小狼毫，试过小鹤双拼和自带的全拼，使用的是 GitHub 上的<ahref="https://github.com/iDvel/rime-ice">雾凇</a>方案，也是解决不了VSCode 的中文输入问题。而且，年久失修。</li><li>搜狗输入法，在 VSCode 和 VSCode-Insider 表现竟然都不一样，而且，由于VSCode Vim的问题，一般的输入法捕捉光标都会出现问题，搜狗输入法也不例外，这就导致了在VSCode中输入时输入时，候选框会把光标给盖住。还有一个缺点，它不能够主动控制拼音的是否上屏，我向官方反映了这个问题，然后有加入了官方群反映问题，都不给解决，呵呵。更何况搜狗还是出了名的私自搜集用户隐私和流氓广告。遂弃之。</li><li>百度输入法，基本能够解决 VSCode中文输入的问题，但是，其界面年久失修，尤其是在任务栏的图标，然后就是，它的光标捕也是不行，另外，百度的产品，心得是有多大的人才敢去使用呢？</li></ul><p>光标捕捉这一块儿，小狼毫倒是做得不错，但是它在输入的时候，会私自修改光标，并且在光标的右下角添加一个下横线，这就注定了在光标附近无法解决VSCode 的闪烁问题。</p><p>然后又去找其他的开源的输入法，这一块儿能找到的其实不多。于是就聚焦在解决影子输入法的问题上，由于ahk 是一门脚本语言，学起来和 Python差不多，所以对于影子输入法这一开源的输入法，如果我想自己定制的话，相对来说是比较容易的。</p><p>所以最终是解决了一定的问题。顺带着，我觉得进入了 ahk这一领域，也向是打开了一扇新的大门。其实为了解决输入法的问题，我最近几天甚至在带着学习Win32 编程，想着，如果最后实在没有满意的输入法，我就自己使用最底层的 api来自己实现一个吧。不过，Win32 这一领域的相关材料可谓是真的少呀。而 ahk此时又有一个优点凸显了出来，那就是它这个脚本语言可以很方便地调用 Win32的接口，本来这个就是为 Windows 量身定制的嘛。至于Python，它当然也有封装的库，但是残废，不是这一行的。</p><p>最后，再贴一下原来的影子输入法和我微修过的影子输入法仓库：</p><p><a href="https://github.com/fanlumaster/YingziIME"class="uri">https://github.com/fanlumaster/YingziIME</a></p><p>这下，难道还不能在 VSCode 中编写一切吗？</p><p>对了，我的影子个人词库的来源也是 rime-ice，也就是 rime 的<ahref="https://github.com/iDvel/rime-ice">雾凇</a>方案。然后拼音方案则是小鹤双拼。影子输入法也是支持辅助码的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微软商店的网络问题</title>
    <link href="/2022/10/06/%E5%BE%AE%E8%BD%AF%E5%95%86%E5%BA%97%E7%9A%84%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/06/%E5%BE%AE%E8%BD%AF%E5%95%86%E5%BA%97%E7%9A%84%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>以前只是单纯地认为微软的网络真 TM 地差，微软的开发人员怎么不去 hell呢？</p><p>现在是找到了差的原因。比如这个微软应用商店，使用那个该死的 UWP开发的，所以对于本地的 <code>127.0.0.1</code>的网络回环是默认不支持的。</p><p>然后我平时使用的 cfw(clash forwindows)，这个是使用本地的网络回环来代理的，因此，也就是说，这该死的微软商店是不走这个代理的，然后就需要把梯子关掉？呵，关掉，不扶墙你想使用国外的网络服务？那不是笑话嘛。</p><p>所以还是得想个办法让软件的网络走代理才行呀。</p><p>好在 cfw 是提供了这个选项的，虽然它是用的 fidder 的技术。</p><p><img src="https://i.imgur.com/ZV064bh.png" /></p><p><img src="https://i.imgur.com/eTsmGjj.png" /></p><p>这里全部勾选上或者选择你需要解除回环限制的软件将其勾选上都可以的。</p><p>再多说两句，不解除这个限制，连微软的部分网站(比如那个什么该死的没什么用的answer.microsoft，还有微软的下载链接)都不能够正常访问，大陆的原生网络更是TM 跟吃了 shit 一样。都给我下 hell去，那些搞了这玩意儿的不方不圆的东西。</p><hr /><p>参考：</p><p><a href="https://hk.v2ex.com/t/824125"class="uri">https://hk.v2ex.com/t/824125</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vim 如何在多个 tab 标签页之间快速切换</title>
    <link href="/2022/10/05/vim-%E5%A6%82%E4%BD%95%E5%9C%A8%E5%A4%9A%E4%B8%AA-tab-%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%B9%8B%E9%97%B4%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2/"/>
    <url>/2022/10/05/vim-%E5%A6%82%E4%BD%95%E5%9C%A8%E5%A4%9A%E4%B8%AA-tab-%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%B9%8B%E9%97%B4%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>如果只是会使用 <code>gt</code> 和 <code>gT</code>的话，效率还是太低了。</p><p>在这两个命令的基础之上，我们可以使用 <code>ngt</code>的方式来跳转到指定顺序的标签页，比如 <code>1gt</code>就是跳转到第一个标签页，<code>5gt</code> 就是跳转到第五个标签页。</p><p>如果是 <code>ngT</code> 这种命令，就是往前跳转 <code>n</code>个标签页。比如 <code>3gT</code> 是往前跳转 3 个标签页。</p><p>还有两个快捷命令，分别是跳转到所有标签页开头和结尾的：<code>:tabfirst</code>和 <code>:tablast</code>，它们的缩写分别是 <code>:tabr</code> 和<code>:tabm</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 导入自己定义的包</title>
    <link href="/2022/10/05/Python-%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8C%85/"/>
    <url>/2022/10/05/Python-%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>他娘的，今天又遇到了这个问题。</p><p>stackoverflow 上有这个<ahref="https://stackoverflow.com/questions/43728431/relative-imports-modulenotfounderror-no-module-named-x">question</a>，该死，像是设置环境变量的的方法在PowerShell中竟然不管用，那个命令执行不了，浪费了不少时间，没有时间去仔细查看那个命令的文档，所以就采用了py代码中解决的方式，思路是一样的，就是把相关的模块给添加到系统的环境变量中去，使得可以获得类似于Python 自带的包一样的效果。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>sys.path.insert(<span class="hljs-number">0</span>, os.path.abspath(<br>    os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;..&#x27;</span>))) <span class="hljs-comment"># 这里的路径要根据实际需求来改，主要是把当前项目的根路径要添加到 path 中去</span><br></code></pre></div></td></tr></table></figure><p>我的测试包的引入的文件结构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">C:.<br>│  functionality<span class="hljs-selector-class">.py</span><br>│  <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br>│  <br>├─anothermodule<br>│      test<span class="hljs-selector-class">.py</span><br>│      __init__<span class="hljs-selector-class">.py</span><br>│      <br>└─othermodule<br>    │  second<span class="hljs-selector-class">.py</span><br>    │  third<span class="hljs-selector-class">.py</span><br>    │  __init__<span class="hljs-selector-class">.py</span><br>    │  <br>    └─submodule<br>            fouth.py<br></code></pre></div></td></tr></table></figure><p>以上是解决我今天遇到问题的方法，其实这个问题就是运行别人的代码给我提示找不到module，真是该死。</p><p>今天更新了 22H2，果然有不少bug，最难以忍受的一个是一个视频或者音乐暂停一会儿之后再去播放会出现很刺耳的一个电流声。</p><p>然后就是复习一下 Python 中的自定义的包的引用了。</p><p>主要是两个点，一个点上面已经说过了，另一个基础的点就是<code>__init__.py</code> 文件的使用。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><br><span class="hljs-comment"># first approach</span><br>__all__ = [<span class="hljs-string">&quot;second&quot;</span>, <span class="hljs-string">&quot;third&quot;</span>]<br><br><span class="hljs-comment"># second approach</span><br><span class="hljs-keyword">from</span> .second <span class="hljs-keyword">import</span> myfunction<br><span class="hljs-keyword">from</span> .third <span class="hljs-keyword">import</span> another_function<br></code></pre></div></td></tr></table></figure><p>想让别的文件夹下的 py 文件引入某一个文件夹下的某个 py文件下的代码，我们就要定义这个 <code>__init__.py</code>。</p><p>如果是根目录下的代码想要引入模块，直接引入就可以了，如果是其他的目录下的代码想要引入模块，那么就得想上面那样，先将项目的根路径添加到系统的环境变量中。</p><p><img src="https://i.imgur.com/K3KoEtv.png" /></p><p><img src="https://i.imgur.com/NoZAbyn.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Exception 中的序列化问题</title>
    <link href="/2022/10/03/Java-Exception-%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/03/Java-Exception-%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近在看 GitHub 上的一个解析 epub 的库，然后再次遇到这个<code>serialVersionUID</code>，是在自定义的异常类里面，每一个自定义的异常类里面都会有一个静态的final 变量<code>serialVersionUID</code>，这是用来标记类的版本的，方便在存储类的时候序列化和反序列化，方便向下兼容。</p><p>对于继承了 Exception的来说，有这个变量并不奇怪，因为它的一层父类是实现了 Serializable接口的。但是这里需要我们自己声明这个变量就感觉很奇怪，网上看到的博客也是说我们自定义的异常类要声明这个变量。</p><p>暂时就当这个是一个规范吧。我们自己需要定义这个变量的时机其实我还是没有搞懂。</p><p>然后还有一个问题，这个值我们应该怎么给呢？我们可以看到很多别人的代码中的这个变量都是很长的一串long 类型的数字，这是他们自己想出来的吗？当然不是，这个是利用 IDE生成的。我们可以在 IDEA 中进行设置，</p><p>首先把这个警告勾选上，</p><p><img src="https://i.imgur.com/xLDRO0g.png" /></p><p>然后我们就可以在警告的地方使用 IDEA的自动建议来给我们自动生成这个变量了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Python 详细计算 Windows 的内存占用情况</title>
    <link href="/2022/09/29/%E5%88%A9%E7%94%A8-Python-%E8%AF%A6%E7%BB%86%E8%AE%A1%E7%AE%97-Windows-%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/"/>
    <url>/2022/09/29/%E5%88%A9%E7%94%A8-Python-%E8%AF%A6%E7%BB%86%E8%AE%A1%E7%AE%97-Windows-%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<p>其实是利用了 Python 调用 PowerShell 的命令<code>tasklist</code>，然后手动计算。</p><p>所以，这篇博客的关键词还可以是如何在 Python 中执行 PowerShell的命令。</p><p>代码是比较简单的，也是想放在 Gist 上的本来，可惜，不太方便呀。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> locale<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> sys<br><br>p = subprocess.Popen([<span class="hljs-string">&#x27;C:\\Program Files\\PowerShell\\7\\pwsh&#x27;</span>, <span class="hljs-string">&#x27;-Command&#x27;</span>, <span class="hljs-string">&#x27;tasklist &gt; tmp.txt&#x27;</span>],<br>                     stdout=sys.stdout, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>p.communicate()<br><br>locale.setlocale(locale.LC_ALL, <span class="hljs-string">&#x27;en_US.UTF-8&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./tmp.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><br>numsList = []<br>index = <span class="hljs-number">0</span><br>totalSize = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">3</span>):<br>        index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    curLine = line.split()<br>    numsList.append(curLine[-<span class="hljs-number">2</span>])<br>    curNum = locale.atoi(curLine[-<span class="hljs-number">2</span>])<br>    totalSize += curNum<br>    index += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The memory usesage:&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span> + <span class="hljs-built_in">str</span>(totalSize) + <span class="hljs-string">&quot; KB&quot;</span>)<br>totalSizeMB = totalSize / <span class="hljs-number">1024</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span> + <span class="hljs-built_in">str</span>(totalSizeMB) + <span class="hljs-string">&quot; MB&quot;</span>)<br>totalSizeGB = totalSize / (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span> + <span class="hljs-built_in">str</span>(totalSizeGB) + <span class="hljs-string">&quot; GB&quot;</span>)<br>percentage = totalSizeGB / <span class="hljs-number">64</span> * <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span> + <span class="hljs-built_in">str</span>(percentage) + <span class="hljs-string">&quot;%&quot;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提升幸福感的一些 PowerShell 小命令</title>
    <link href="/2022/09/29/%E6%8F%90%E5%8D%87%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E4%B8%80%E4%BA%9B-PowerShell-%E5%B0%8F%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/09/29/%E6%8F%90%E5%8D%87%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E4%B8%80%E4%BA%9B-PowerShell-%E5%B0%8F%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>好吧，本来是想利用那个 GitHub Gist来记录一下这个零碎的知识点的，因为这些知识点就是纯粹的肌肉记忆罢了，但是，那个Gist 它做得不好呀。检索很不方便。</p><p>额，其实也是我没有看过它是否有自己的 api提供。这个之后再说吧，先解决当下的问题。</p><p>第一个命令，从 Windows Terminal 中打开回收站，</p><figure class="highlight ps1"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ps1"><span class="hljs-built_in">start</span> shell:RecycleBinFolder<br></code></pre></div></td></tr></table></figure><p>这个 <code>start</code> 的作用和 <code>explorer.exe</code>的作用是类似的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>PowerShell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 0~10 值得记录的题目</title>
    <link href="/2022/09/27/leetcode-0-10-%E5%80%BC%E5%BE%97%E8%AE%B0%E5%BD%95%E7%9A%84%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/09/27/leetcode-0-10-%E5%80%BC%E5%BE%97%E8%AE%B0%E5%BD%95%E7%9A%84%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="leet04">leet04</h2><p>哎，灰飞烟灭。</p><p>说是困难题，这个二分其实是比较简单的。可能是边界条件比较难搞？嗯，好吧，可能是那一层转化是比较考验人的，怎么说呢，看到这个时间复杂度的限制，就应该想到二分法，但是具体的转换，能够把转换的细节处理好，这需要耗费一定的时间。嗯。</p><p>还是来这个草稿吧。</p><p><img src="https://i.imgur.com/VQQWzSl.jpg" /></p><p>然后是 Java 和 C++ 的代码，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums2.length;<br><br>        <span class="hljs-keyword">if</span> ((m + n) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> (m + n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> findKthSortedArrays(nums1, nums2, k);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> (m + n) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> (findKthSortedArrays(nums1, nums2, k) + findKthSortedArrays(nums1, nums2, k + <span class="hljs-number">1</span>)) / <span class="hljs-number">2.0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthSortedArrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums2.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// edge situation</span><br>            <span class="hljs-keyword">if</span> (index1 == m) &#123;<br>                <span class="hljs-keyword">return</span> nums2[index2 + k - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (index2 == n) &#123;<br>                <span class="hljs-keyword">return</span> nums1[index1 + k - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> Math.min(nums1[index1], nums2[index2]);<br>            &#125;<br><br>            <span class="hljs-comment">// normal situation</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">newIndex1</span> <span class="hljs-operator">=</span> Math.min(index1 + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, m - <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">newIndex2</span> <span class="hljs-operator">=</span> Math.min(index2 + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums1[newIndex1] &lt; nums2[newIndex2]) &#123;<br>                k = k - (newIndex1 - index1 + <span class="hljs-number">1</span>);<br>                index1 = newIndex1 + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[newIndex1] &gt; nums2[newIndex2]) &#123;<br>                k = k - (newIndex2 - index2 + <span class="hljs-number">1</span>);<br>                index2 = newIndex2 + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                k = k - (newIndex1 - index1 + <span class="hljs-number">1</span>);<br>                index1 = newIndex1 + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">solu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        <span class="hljs-type">int</span>[] nums1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">int</span>[] nums2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>&#125;;<br><br>        nums1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>        nums2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> solu.findMedianSortedArrays(nums1, nums2);<br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// to make the time complexity equals to O(log(m+m))</span><br><span class="hljs-comment">// we need to dichotomy</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums1, vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> m = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> ((m + n) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">findKthSortedArrays</span>(nums1, nums2, (m + n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> left = <span class="hljs-built_in">findKthSortedArrays</span>(nums1, nums2, (m + n) / <span class="hljs-number">2</span>);<br>            <span class="hljs-type">int</span> right = <span class="hljs-built_in">findKthSortedArrays</span>(nums1, nums2, (m + n) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> (left + right) / <span class="hljs-number">2.0</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// this k starts from 1, not 0, notice here</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findKthSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums1, vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums2, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> m = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> index1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> index2 = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>            <span class="hljs-comment">// edge situation</span><br>            <span class="hljs-comment">// out of the bound</span><br>            <span class="hljs-keyword">if</span> (index1 == m)<br>            &#123;<br>                <span class="hljs-keyword">return</span> nums2[index2 + k - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (index2 == n)<br>            &#123;<br>                <span class="hljs-keyword">return</span> nums1[index1 + k - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">// k == 1</span><br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(nums1[index1], nums2[index2]);<br>            &#125;<br><br>            <span class="hljs-comment">// normal situation</span><br>            <span class="hljs-type">int</span> newIndex1 = <span class="hljs-built_in">min</span>(index1 + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, m - <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> newIndex2 = <span class="hljs-built_in">min</span>(index2 + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums1[newIndex1] &lt; nums2[newIndex2])<br>            &#123;<br>                k = k - (newIndex1 - index1 + <span class="hljs-number">1</span>);<br>                index1 = newIndex1 + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[newIndex1] &gt; nums2[newIndex2])<br>            &#123;<br>                k = k - (newIndex2 - index2 + <span class="hljs-number">1</span>);<br>                index2 = newIndex2 + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                k = k - (newIndex1 - index1 + <span class="hljs-number">1</span>);<br>                index1 = newIndex1 + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    Solution solu;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums1&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums2&#123;<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">double</span> res = solu.<span class="hljs-built_in">findMedianSortedArrays</span>(nums1, nums2);<br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    nums1 = vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>    nums2 = vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>    res = solu.<span class="hljs-built_in">findMedianSortedArrays</span>(nums1, nums2);<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="leet05">leet05</h2><p>思路呢，就用草稿上的吧。一看就懂。主要是自己一看就懂。</p><p><img src="https://i.imgur.com/Hblj2Th.jpg" /></p><p><img src="https://i.imgur.com/td50ZcT.jpg" /></p><p>代码就放在 GitHub 的仓库里面。Java。</p><h2 id="leet06">leet06</h2><p>思路，</p><p><img src="https://i.imgur.com/9NYAQNx.jpg" /></p><p>代码见仓库。</p><h2 id="leet10">leet10</h2><p>思路，</p><p><img src="https://i.imgur.com/3f6NRJV.jpg" /></p><p><img src="https://i.imgur.com/KWLPAhn.jpg" /></p><p>代码见仓库。</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 虚拟环境的另一种创建方法</title>
    <link href="/2022/09/14/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E6%B3%95/"/>
    <url>/2022/09/14/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>以前写过用 python 自带的 venv 模块创建虚拟环境的<ahref="https://fanyfull.github.io/2021/06/02/Python-3-8-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3(Windows10)">博客</a>，然后就是个人其实更加偏爱另一种方式，那个是在youtube 的一个 django 的教程中看到的，用的是 virtualenv模块，需要我们自己安装，</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">pip install virtualenv<br></code></pre></div></td></tr></table></figure><p>然后我们想创建虚拟环境的化，就使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">virtualenv env_name<br></code></pre></div></td></tr></table></figure><p><code>env_name</code> 就是我们自己取的名字，随便取。</p><p>之后就可以愉快地开发了。</p><p>需要注意的是，激活虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">env_name/Scripts/activate<br></code></pre></div></td></tr></table></figure><p>退出虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">deactivate<br></code></pre></div></td></tr></table></figure><p>然后是在虚拟环境下安装包的命令必须得使用下面的格式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python -m pip install package_name<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fcitx5 如何设置数字和英文键后面不要自动跟上半角字符</title>
    <link href="/2022/09/14/fcitx5-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%95%B0%E5%AD%97%E5%92%8C%E8%8B%B1%E6%96%87%E9%94%AE%E5%90%8E%E9%9D%A2%E4%B8%8D%E8%A6%81%E8%87%AA%E5%8A%A8%E8%B7%9F%E4%B8%8A%E5%8D%8A%E8%A7%92%E5%AD%97%E7%AC%A6/"/>
    <url>/2022/09/14/fcitx5-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%95%B0%E5%AD%97%E5%92%8C%E8%8B%B1%E6%96%87%E9%94%AE%E5%90%8E%E9%9D%A2%E4%B8%8D%E8%A6%81%E8%87%AA%E5%8A%A8%E8%B7%9F%E4%B8%8A%E5%8D%8A%E8%A7%92%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>首先呢，我们要找到 fcitx5 的配置文件。在<code>~/.config/ftitx5</code> 下面。</p><p>在 fcitx4 中，我们可以直接修改这个 config 文件，但是在这个 fcitx5 的config 文件中，我们似乎无法直接在 config文件中修改这个数字和英文后面自动跟上半角符号的设置。</p><p>所以，我们可以在 <code>~/.config/fcitx5/conf</code> 这个目录下找到<code>punctuation.conf</code> 这个配置文件，修改：</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt"># Half width punctuation after latin letter or number<br>HalfWidthPuncAfterLetterOrNumber=False<br></code></pre></div></td></tr></table></figure><p>这个选项默认是 True 的，我们改一下就可以了。</p><p>注意，修改这个配置的时候必须先把 fcitx5退出掉，否则这个配置会被运行中的 fcitx5 覆写为默认的情况。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 本地空仓库与远程仓库建立连接</title>
    <link href="/2022/09/14/Git-%E6%9C%AC%E5%9C%B0%E7%A9%BA%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/"/>
    <url>/2022/09/14/Git-%E6%9C%AC%E5%9C%B0%E7%A9%BA%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>今天遇到了一个需求，我的其中一个博客需要在两个电脑之间进行同步，由于用的是Hexo，所以想利用 GitHub进行同步，这样我在两台设备之间就可以进行同步了。</p><p>如果一台电脑的话，无非是创建一个私有仓库，然后把本地的仓库和远程仓库建立连接，然后push 一下就可以了。</p><p><img src="https://i.imgur.com/Khvu75Z.png" /></p><p>但是这里涉及到另一台电脑，步骤基本还是一样的，我是先把这台电脑的文件夹下的内容给清空，然后再执行以下操作，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git init<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git remote add origin + // 远程仓库地址<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git pull origin master --allow-unrelated-histories<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git branch --set-upstream-to=origin/master<br></code></pre></div></td></tr></table></figure><p>之后我们就可以执行 <code>git pull</code>命令把这个当前的空仓库给填充满了。</p><p>今天还发现了另外一个有趣的事情，两台电脑，一个是 Win11，另一个是Manjaro Linux，如果把 Windows 上的 git 仓库复制到 Linux 中，在 ssh相同的情况下，可以直接 push 到 GitHub 上面。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 使用 vimgrep 在当前文件夹下搜索所有文件</title>
    <link href="/2022/09/12/vim-%E4%BD%BF%E7%94%A8-vimgrep-%E5%9C%A8%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%90%9C%E7%B4%A2%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
    <url>/2022/09/12/vim-%E4%BD%BF%E7%94%A8-vimgrep-%E5%9C%A8%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%90%9C%E7%B4%A2%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>好吧，还没学会怎么使用 linux 中的 grep 命令，现在不得不学习 nvim 中的vimgrep 命令了。这是没有办法的事情，今天是因为要修改一些博客的 tag这个需求，以后这种需求肯定是会不少的，索性今天就记录一下吧。</p><p>首先，我们使用 <code>nvim .</code> 打开当前的目录，</p><p>然后，执行命令：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">:<span class="hljs-keyword">vimgrep</span> /博客园/g *<br></code></pre></div></td></tr></table></figure><p>实际使用过程中把 <code>博客园</code> 换成想要搜索的字符串即可，</p><p><img src="https://i.imgur.com/3x88HOk.png" /></p><p><img src="https://i.imgur.com/neQeRRT.png" /></p><p>我们可以看到，底下出现了搜索到了 6 个结果，</p><p>然后我们可以再执行 <code>:cope</code>命令，调出搜索出来的所有文件的分屏，</p><p><img src="https://i.imgur.com/skf80pU.png" /></p><p>然后这个分屏的操作就不用多说了，之后想怎么修改就修改去吧。</p><hr /><p>参考：</p><p>1、<a href="https://zhuanlan.zhihu.com/p/148280898"class="uri">https://zhuanlan.zhihu.com/p/148280898</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 多窗口操作</title>
    <link href="/2022/09/12/vim-%E5%A4%9A%E7%AA%97%E5%8F%A3%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/12/vim-%E5%A4%9A%E7%AA%97%E5%8F%A3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>其实就是类似于 IDE 中的分屏操作。但是在 vim中这个所有的分屏操作都是可以用键盘解决的，所以就比较方便。不过，我遇到这个痛点不是因为主动去寻求多窗口的便捷，而是遇到了不得不学的场景。</p><p>这个场景就是使用 vimgrep这个命令搜索当前目录下的所有文件时出现的问题。</p><p>具体一点，是我在写博客的时候，需要修改一个标签，这个标签在多个文件中都有出现，然后我写博客都是用这个nvim 嘛，所以就也想着就直接使用 vimgrep好了。结果就是搜索出来之后当然会有分屏的，一个放搜索的结果，另一个是放当前打开的文件。</p><p>好吧，就只好整理一下 vim 分屏的操作了。</p><h2 id="关闭当前的这个分屏">关闭当前的这个分屏</h2><p>直接使用 <code>:q</code> 命令即可。</p><h2 id="在多个屏幕之间的切换">在多个屏幕之间的切换</h2><p>最简单的方法就是 <code>Ctrl + w</code>，然后按四个 vim 方向键，就是<code>hjkl</code> 这四个键啦，左下上右。</p><p>其他的以后再说。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows11 的 Chrome 在最大化和最小化之间切换会闪白的问题</title>
    <link href="/2022/09/12/Windows11-%E7%9A%84-Chrome-%E5%9C%A8%E6%9C%80%E5%A4%A7%E5%8C%96%E5%92%8C%E6%9C%80%E5%B0%8F%E5%8C%96%E4%B9%8B%E9%97%B4%E5%88%87%E6%8D%A2%E4%BC%9A%E9%97%AA%E7%99%BD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/12/Windows11-%E7%9A%84-Chrome-%E5%9C%A8%E6%9C%80%E5%A4%A7%E5%8C%96%E5%92%8C%E6%9C%80%E5%B0%8F%E5%8C%96%E4%B9%8B%E9%97%B4%E5%88%87%E6%8D%A2%E4%BC%9A%E9%97%AA%E7%99%BD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>这个问题在我使用 60Hz的屏幕的时候就注意到了，我以为是我的硬件比较差的原因。好吧，那台机器的1050ti 的显卡确实比较差。然后现在我换了 3080 的显卡，屏幕的刷新率可是240Hz，依然是给我闪白。他娘的你又不是盘古之白，给我白个毛线。</p><p>怎么办呢？应该是系统的问题？macos 就没有这样的问题，linux也没有，只有倒霉的 Windows11 会这个样子？</p><p>好在，最近在 v站上瞎逛，逛到了一个帖子，然后一个兄弟给了我解决方案，就是把 Chrome的图形后端调成 D3D9 就 ok 了，调成 OpenGL 也可以，毕竟 OpenGL 是用nvidia 的显卡驱动的嘛。原来的默认的 D3D11 不行，看名称应该是 D3D9的后续版本，越活越回去了？呵。</p><p><img src="https://i.imgur.com/0QID1WX.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 中的 *args 和 **kwargs</title>
    <link href="/2022/09/09/Python-%E4%B8%AD%E7%9A%84-args-%E5%92%8C-kwargs/"/>
    <url>/2022/09/09/Python-%E4%B8%AD%E7%9A%84-args-%E5%92%8C-kwargs/</url>
    
    <content type="html"><![CDATA[<p>惭愧呀，这个是新手问题。咳咳。好吧，当初看过然后忘掉了。</p><p>这个问题是很简单的，<code>*args</code>是可变参数，<code>**kwargs</code> 是可变的键值对参数。</p><p>但是呢，我们在定义函数的时候，如果有固定的参数，那就严格遵守顺序喽。</p><p><code>*args</code>会收集多个参数，顺序的话，就按照正常的直觉来就可以，比如，如果固定参数在可变参数的后面的话，那么，固定参数传值就要使用键值对的形式。其他的就按照函数定义中的参数的顺序来。</p><p>然后就是，<code>**kwargs</code> 必须放在最后。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 定制 Python 运行的快捷键</title>
    <link href="/2022/09/09/VSCode-%E5%AE%9A%E5%88%B6-Python-%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/09/09/VSCode-%E5%AE%9A%E5%88%B6-Python-%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>Python 和 js 一样，都是脚本语言。好吧，Python才是我更加熟悉的脚本语言。然后，VSCode 对 Python的支持其实是很完善的，执行当前的脚本的话，我们当然可以使用默认的<code>Ctrl + F5</code>，只是，这个默认的行为是有点慢的，而 Python执行脚本不需要这么慢，我不想时间花在 Shell上面。因此，就模仿我之前的配置 nodejs 的 json <ahref="https://fanlumaster.github.io/2022/08/24/VSCode-%E5%AE%9A%E5%88%B6-nodejs-%E8%BF%90%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/">配置</a>，同样地，改造了这个<code>Ctrl + F5</code> 快捷键，直接将 <code>python filename</code>输送到 terminal 不就可以了嘛，呵，</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+f5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;extension.multiCommand.execute&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;editorTextFocus &amp;&amp; editorLangId == &#x27;python&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;sequence&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;workbench.action.files.saveAll&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clear \u000D&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;workbench.action.terminal.focus&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python &#x27;$&#123;file&#125;&#x27;\u000D&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;workbench.action.focusActiveEditorGroup&quot;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><p>这下执行 python 脚本快多了，比什么 PyCharm之流要好多了。当然啦，这个只适合执行一些小脚本，或者说，写一写算法题之类。</p>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python decorators</title>
    <link href="/2022/09/08/Python-decorators/"/>
    <url>/2022/09/08/Python-decorators/</url>
    
    <content type="html"><![CDATA[<p>最近要面试深信服了，所以准备一下这个 Python相关的内容。这是一道上半年在面试的时候遇到的题目，让我手写一个装饰器。</p><p>当然啦，Python手写装饰器还是比较简单的，但是当时我没有复习，就没有很流畅地写出来，只是把思想给讲了一遍。就是把函数当成参数嘛，我们需要环绕着给函数增加什么操作的话，可以利用装饰器来实现。</p><p>在我看来，装饰器就是一个语法糖，把函数当作一等公民传入另一个函数，然后再添加一些操作，然后调用函数，多几个括号也没什么。不过呢，用了装饰器肯定是会更加美观的嘛。</p><p>这个装饰器的话，只要看了代码，其实是很容易理解的。下面就让我用递进的顺序记录一下吧。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Called f1&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">f</span>):<br>    f()<br><br><br>f2(f1)<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Started&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ended&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br><br><br>f1(f)()<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Started&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ended&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@f1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br><br><br>f()<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Started&quot;</span>)<br>        val = func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ended&quot;</span>)<br>        <span class="hljs-keyword">return</span> val<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@f1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a, b=<span class="hljs-number">9</span></span>):<br>    <span class="hljs-built_in">print</span>(a, b)<br><br><br><span class="hljs-meta">@f1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<br></code></pre></div></td></tr></table></figure><p>下面是一些装饰器的使用场景，一些小的 example：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">before_after</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Before&quot;</span>)<br>        func(*args)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;After&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br><span class="hljs-meta">    @before_after</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;run&quot;</span>)<br><br><br>t = Test()<br>t.decorated_method()<br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-built_in">Before</span><br><span class="hljs-variable">run</span><br><span class="hljs-built_in">After</span><br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        before = time.time()<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Function took:&quot;</span>, time.time() - before, <span class="hljs-string">&quot;seconds&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    time.sleep(<span class="hljs-number">2</span>)<br><br><br>run()<br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">Function</span> <span class="hljs-title">took:</span> 2.002192258834839 seconds<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;logs.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">&quot;Called funciton with &quot;</span> +<br>                    <span class="hljs-string">&quot; &quot;</span>.join([<span class="hljs-built_in">str</span>(arg) <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args]) + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-built_in">str</span>(datetime.datetime.now()) + <span class="hljs-string">&quot;\n&quot;</span>)<br>            val = func(*args, **kwargs)<br>            <span class="hljs-keyword">return</span> val<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@log</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">a, b, c=<span class="hljs-number">9</span></span>):<br>    <span class="hljs-built_in">print</span>(a + b + c)<br><br><br>run(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, c=<span class="hljs-number">9</span>)<br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">13<br></code></pre></div></td></tr></table></figure><p>写到 <code>logs.txt</code> 中的内容是：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Called</span> funciton with <span class="hljs-number">1</span> <span class="hljs-number">3</span> at <span class="hljs-number">2022</span>-<span class="hljs-number">09</span>-<span class="hljs-number">09</span> <span class="hljs-number">17</span>:<span class="hljs-number">15</span>:<span class="hljs-number">30</span>.<span class="hljs-number">243346</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StringBuilder 和 StringBuffer 之间的区别</title>
    <link href="/2022/09/08/StringBuilder-%E5%92%8C-StringBuffer-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/09/08/StringBuilder-%E5%92%8C-StringBuffer-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>其实，主要了解哪一个是多线程安全的就可以了。</p><p>StringBuffer 是多线程安全的。</p><p>这两个字符串类所拥有的 api 都是类似的。</p><p>性能的话，肯定是线程不安全的 StringBuilder 更加安全。</p><p>就用别人的代码测试一下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">77777777</span>;<br>        <span class="hljs-type">long</span> t;<br><br>        &#123;<br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>            t = System.currentTimeMillis();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> N; i-- &gt; <span class="hljs-number">0</span>;) &#123;<br>                sb.append(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>            System.out.println(System.currentTimeMillis() - t);<br>        &#125;<br><br>        &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            t = System.currentTimeMillis();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> N; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                sb.append(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>            System.out.println(System.currentTimeMillis() - t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>output:</p><p><img src="https://i.imgur.com/AgZGx04.png" /></p><p>这么一看，这个性能的差距还是有点明显的。看来写 leetcode的时候可以多用一下这个 StringBuild，反正是单线程。</p><hr /><p>参考：</p><p><ahref="https://stackoverflow.com/questions/355089/difference-between-stringbuilder-and-stringbuffer"class="uri">https://stackoverflow.com/questions/355089/difference-between-stringbuilder-and-stringbuffer</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim(nvim) 如何进行多列编辑</title>
    <link href="/2022/09/06/vim-nvim-%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%A4%9A%E5%88%97%E7%BC%96%E8%BE%91/"/>
    <url>/2022/09/06/vim-nvim-%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%A4%9A%E5%88%97%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<p>或者也可以说，列的多光标编辑？不过这样有点不严谨，因为得对齐。</p><p>这个操作还是比较简单的的。</p><p>首先，按住 <code>Ctrl + v</code> 进行列选择，然后按住<code>Shift + i</code> 或 <code>Shift + a</code>进入插入模式，这时光标会来到某一行进行修改，修改完毕之后，按<code>Esc</code> 键退出到 Normal模式，这时，刚才选中的那些列就集体得到了修改。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 背包问题</title>
    <link href="/2022/09/03/01-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/03/01-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>这个，01背包问题，当时上课讲过呀，可惜，当时我太年轻，以为动态规划就是什么了不得的东西，导致错过了学习和巩固那些经典的动态规划的算法题的时机。好吧，其实现在也不是很晚。</p><p>这个 01背包问题，说起来，和那个最简单的爬楼梯和斐波那契数列本质上是没有区别的。嗯。无非就是多了点参数，只要挨个弄懂，很简单的。</p><p>这里就是写了两个阐述 01背包的方法，一个是样板代码，另一个我改了名字，更加方便我自己理解。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZeroOnePack</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> N   count of things</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> W   bag capcity</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wt  weight of i-th thing</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> val value of i-th thing</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">knapsack</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> W, <span class="hljs-type">int</span>[] wt, <span class="hljs-type">int</span>[] val)</span> &#123;<br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N + <span class="hljs-number">1</span>][W + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; n &lt;= N; n++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; w &lt;= W; w++) &#123;<br>                <span class="hljs-comment">// not suitable</span><br>                <span class="hljs-keyword">if</span> (w - wt[n - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>                    dp[n][w] = dp[n - <span class="hljs-number">1</span>][w];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[n][w] = Math.max(dp[n - <span class="hljs-number">1</span>][w], dp[n - <span class="hljs-number">1</span>][w - wt[n - <span class="hljs-number">1</span>]] + val[n - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[N][W];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Just the same as the method above, and just change the names of parameters to make it easier to understand.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> thingsNum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bagCapcity</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wtArr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> valArr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">anotherKnapsack</span><span class="hljs-params">(<span class="hljs-type">int</span> thingsNum, <span class="hljs-type">int</span> bagCapcity, <span class="hljs-type">int</span>[] wtArr, <span class="hljs-type">int</span>[] valArr)</span> &#123;<br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[thingsNum + <span class="hljs-number">1</span>][bagCapcity + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; n &lt;= thingsNum; n++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; c &lt;= bagCapcity; c++) &#123;<br>                <span class="hljs-keyword">if</span> (c - wtArr[n - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>                    dp[n][c] = dp[n - <span class="hljs-number">1</span>][c];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[n][c] = Math.max(dp[n - <span class="hljs-number">1</span>][c], dp[n - <span class="hljs-number">1</span>][c - wtArr[n - <span class="hljs-number">1</span>]] + valArr[n - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[thingsNum][bagCapcity];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">solu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZeroOnePack</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">W</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> solu.anotherKnapsack(N, W, wt, val);<br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我觉得，我们唯一需要理解的事情，就是 <code>dp[n][c]</code>的含义，它代表什么意思呢？</p><p>即，在容量为 c(capcity) 的情况下，从前 n个物品中选择最优解所得到的价值，这个价值其实就是最大价值。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 索引的使用</title>
    <link href="/2022/09/02/MySQL-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/02/MySQL-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.mysqltutorial.org/mysql-index/"class="uri">https://www.mysqltutorial.org/mysql-index/</a></p><p>文中使用的示例的数据库也是来自于这个网站，可以到这个网站进行下载。</p><p>MySQL使用索引来方便快速地查找具有特定的列属性值的行。没有索引的话，MySQL必须扫描整张表去定位相关的行。表的规模越大，查找的速度越慢。</p><p>在这个章节，你将学习 MySQL的索引相关，包括创建索引、移除索引、列出一张表的所有索引和其他 MySQL中的索引的重要特性。</p><h1 id="创建索引">创建索引</h1><p>导言：在这部分的教程，你将学习何为索引和如何使用 MySQL 的<code>CREATE INDEX</code> 语句来向一张表添加索引。</p><h2 id="电话簿的类比">电话簿的类比</h2><p>假设你有一个包含了一个城市的所有的人的姓名和电话号码的电话簿。让我们假定一下你想查找Bob Cat 的电话号码。已知，姓名是按字母表的顺序有序排列的，你首先查找last name <code>Cat</code> 在哪，然后你查找 <code>Bob</code>和他的电话号码。</p><p>现在，如果这个电话簿中的名字没有按照字母表的顺序来排列，你将需要浏览整个电话簿的所有页，浏览每个名字直到你找到<code>Bob Cat</code>。这就是所谓的顺序查找(SequentialSearching)。你翻遍所有的条目知道你找到你需要查找的那个人的电话号码。</p><p>从电话簿联系到数据库中的表，如果你有一张名为 <code>phonebooks</code>的表，然后你需要查找 <code>Bob Cat</code>的电话号码，你将执行下面的查询：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    phone_number<br><span class="hljs-keyword">FROM</span> <br>    phonebooks<br><span class="hljs-keyword">WHERE</span> <br>    first_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Bob&#x27;</span> <span class="hljs-keyword">AND</span> <br>    last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Cat&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>这很简单。尽管这个查询很快，数据库查询的过程还是必须去扫描整张表直到它找到了那一行。如果数据表有几百万行，没有索引的话，这个取出数据的操作将会花费很长的时间来返回结果。</p><h2 id="索引的介绍">索引的介绍</h2><p>索引是一种类似于 B树的数据结构，它的作用是用于提到取出数据的速度，当然，它要花费额外的写操作以及内存空间来维持这个数据结构。</p><p>对于一个特定的查询来说，查询优化器可能会使用索引来快速定位数据，而不需要扫描整张表。</p><p>当你使用 <code>primary key</code> 或 <code>unique key</code>创建一张表时，MySQL 会自动创建一个名为 <code>PRIMARY</code>的索引。这个索引叫做聚簇索引(clustered index)。</p><p>这个 <code>PRIMARY</code>索引是比较特别的，因为这个索引是和表中的数据存放在同一张表里面的。聚簇索引确保了表中的行的顺序。</p><p>其他的除了 <code>PRIMARY</code>的索引被称为第二类索引，或者非聚簇索引。</p><h2 id="mysql-create-index-语句">MySQL CREATE INDEX 语句</h2><p>一般来说，你可以在创建表时创建索引。例如，下面的语句创建了一个带有索引的数据表，这个索引由列<code>c2</code> 和 <code>c3</code> 组成。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t(<br>   c1 <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>   c2 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   c3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   c4 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>   INDEX (c2,c3) <br>);<br></code></pre></div></td></tr></table></figure><p>要想给一列或者说几列的集合添加一个索引，你可以使用<code>CREATE INDEX</code> 语句，如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX index_name <span class="hljs-keyword">ON</span> table_name (column_list)<br></code></pre></div></td></tr></table></figure><p>要想为一列或者几列的集合创建一个索引，你需要指明索引的名称、索引所属的表的名称和列的集合。</p><p>例如，想要为列 c4 添加一个新的索引，你可以使用下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX idx_c4 <span class="hljs-keyword">ON</span> t(c4);<br></code></pre></div></td></tr></table></figure><p>默认情况下，MySQL 会创建 B树索引，如果你不声明索引类型的话。下面展示了不同的存储引擎所允许的索引类型：</p><table><thead><tr class="header"><th style="text-align: center;">存储引擎</th><th style="text-align: center;">允许的索引类型</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">InnoDB</td><td style="text-align: center;">B 树</td></tr><tr class="even"><td style="text-align: center;">MyISAM</td><td style="text-align: center;">B 树</td></tr><tr class="odd"><td style="text-align: center;">MEMORY/HEAP</td><td style="text-align: center;">HASH, B 树</td></tr></tbody></table><p>注意，上面的 <code>CREATE INDEX</code> 语句是 MySQL 中的<code>CREATE INDEX</code>的简化版本。我们将会在接下来的教程中介绍更多的选项。</p><h2 id="mysql-create-index-范例">MySQL CREATE INDEX 范例</h2><p>下面的语句是用来查询 job title 为 <code>Sales Rep</code> 的员工：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employeeNumber,<br>       lastName,<br>       firstName<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> jobTitle <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sales Rep&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>这里是输出：</p><p><img src="https://i.imgur.com/FKNSYg8.png" /></p><p>我们查找到了 17 行，表明有 17 个员工的 job title 为 Sales Rep。</p><p>想要了解 MySQL 的内部是如何执行这个查询的，你可以在<code>SELECT</code> 语句的开头添加 <code>EXPLAIN</code>子句，如下所示：</p><p><img src="https://i.imgur.com/lL3IveZ.png" /></p><p>正如你所看到的，MySQL 必须扫描包含了 23 行的整张表来查找 job title 为<code>Sales Rep</code> 的员工。</p><p>现在，让我们使用 <code>CREATE INDEX</code> 语句为<code>jobTitle</code> 这一列创建一个索引：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX jobTitle <span class="hljs-keyword">ON</span> employees (jobTitle);<br></code></pre></div></td></tr></table></figure><p>然后，再次执行之前的语句：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">EXPLAIN<br><span class="hljs-keyword">SELECT</span> employeeNumber,<br>       lastName,<br>       firstName<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> jobTitle <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sales Rep&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>输出如下：</p><p><img src="https://i.imgur.com/pjCPCRh.png" /></p><p>如您所见，MySQL 只需按照 <code>key</code> 这一列中的指示从 jobTitle索引中定位 17 行，而无需扫描整个表。</p><p>如果想要展示表中所有的索引，你可以使用 <code>SHOW INDEXES</code>语句，例如：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> INDEXES <span class="hljs-keyword">FROM</span> employees;<br></code></pre></div></td></tr></table></figure><p>这里是输出：</p><p><img src="https://i.imgur.com/khHVgLK.png" /></p><p>在这一节的教程中，你已经学习了 MySQL以及如何为表中的一列创建索引。</p><h1 id="mysql-drop-index">MySQL DROP INDEX</h1><p>导言：在这一节的教程中，你将学习如何使用 <code>DROP INDEX</code>语句来移除表中已经存在的索引。</p><h2 id="mysql-drop-index-语句的语法">MySQL DROP INDEX 语句的语法</h2><p>若要移除一个表中存在的索引，你可以使用 <code>DROP INDEX</code>语句，如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX index_name <span class="hljs-keyword">ON</span> table_name<br>[algorithm_option <span class="hljs-operator">|</span> lock_option];<br></code></pre></div></td></tr></table></figure><p>在这个语法中：</p><ul><li>首先，要在 <code>DROP INDEX</code>关键字后面指明你想删除的索引的名字。</li><li>然后，指明索引所属的表的名称。</li></ul><h3 id="algorithm">Algorithm</h3><p>这个 <code>algorithm_option</code>允许你去指明一个特定的用于移除索引的算法。下面是<code>algorithm_option</code> 从句的语法：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">ALGORITHM [<span class="hljs-operator">=</span>] &#123;<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>INPLACE<span class="hljs-operator">|</span><span class="hljs-keyword">COPY</span>&#125;<br></code></pre></div></td></tr></table></figure><p>对于移除索引的操作，下面是受支持的算法：</p><ul><li><code>copy</code>：当前表会被一行一行地复制到新表，然后<code>DROP INDEX</code> 是在原表的复制品中执行。并发的数据操作语句，比如<code>INSERT</code> 和 <code>UPDATE</code> 是不被允许的。</li><li><code>INPLACE</code>：当前表会在原地被重新构建，而不是复制到新的表中。MySQL在索引删除操作的准备和执行阶段对表发出独占元数据锁。这个算法允许并发的数据操作语句。</li></ul><p>注意，<code>ALGORITHM</code> 子句是可选的。如果你跳过了它，MySQL会默认使用 <code>INPLACE</code>。在 <code>INPLACE</code>不受支持的情况下，MySQL 会使用 <code>COPY</code>。</p><p>使用 <code>DEFAULT</code> 的效果和省略 <code>ALGORITHM</code>子句的效果是一样的。</p><h3 id="lock">Lock</h3><p>这个 <code>lock_option</code>是用来控制索引被移除过程中的并发读写的级别。</p><p>下面是 <code>lock_option</code> 的语法：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">LOCK [<span class="hljs-operator">=</span>] &#123;<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span><span class="hljs-keyword">NONE</span><span class="hljs-operator">|</span>SHARED<span class="hljs-operator">|</span>EXCLUSIVE&#125;<br></code></pre></div></td></tr></table></figure><p>下面是受支持的锁的模式：</p><ul><li><code>DEFAULT</code>：对于给定的algorithm，这个选项允许你拥有最大的并发等级。首先，在允许的情况下，它允许并发的读写。否则，允许并发读。否则，只能强制独占。</li><li><code>NONE</code>：</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0827 美团笔试总结</title>
    <link href="/2022/08/31/0827-%E7%BE%8E%E5%9B%A2%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/08/31/0827-%E7%BE%8E%E5%9B%A2%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>该死，第四题 0 1背包忘掉了，明明数据结构课程可算法设计与分析课程里面都讲过，当时没有仔细下去看，该死。</p><h1 id="第一题">第一题</h1><h2 id="题目描述">题目描述</h2><p>小美在摆弄她的字符串。最近小团送了小美一个特殊字符<code>'*'</code>，这个字符可以和其他所有字符匹配，除了这个字符外，其他字符只能自己和自己匹配。小美先前有一个字符串<code>S</code>，长度为 <code>n</code>，现在她又新组合了一个可有特殊字符<code>'*'</code> 的字符串 <code>s</code>，长度为<code>n</code>。小美想知道有多少个位置 <code>i</code>，使得<code>S[i+j]</code> 与 <code>s[j]</code> 对于 <spanclass="math inline">\(1 \leqslant j \leqslant m\)</span>均能匹配上？其中 <code>X[y]</code> 代表字符串 <code>X</code> 中第<code>y</code> 位的字符。</p><h2 id="输入描述">输入描述</h2><p>第一行两个空格隔开的整数 <code>n</code> 和<code>m</code>，分别表示字符串 <code>S</code> 和字符串 <code>s</code>的长度。<br />接下来一行长度为 <code>n</code> 的仅包含小写英文字母的字符串<code>S</code>。<br />接下来一行长度为 <code>m</code> 的包含小写英文字母以及特殊字符<code>'*'</code> 的字符串。<br />对于所有数据，<span class="math inline">\(1 \leqslant n \leqslant m\leqslant 2000\)</span>。</p><h2 id="输出描述">输出描述</h2><p>输出一行一个整数，表示满足要求的位置数量。</p><h2 id="样例输入">样例输入</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">7</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">abcaacc</span><br><span class="hljs-attribute">a</span>*c<br></code></pre></div></td></tr></table></figure><h2 id="样例输出">样例输出</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAllCount</span><span class="hljs-params">(String S, String s, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n - m; i++) &#123;<br>            res += isEqual(s, S.substring(i, i + m));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">isEqual</span><span class="hljs-params">(String str1, String str2)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> str1.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (str1.charAt(i) != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; str1.charAt(i) != str2.charAt(i)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Main</span> <span class="hljs-variable">main</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">S</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> sc.next();<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> main.getAllCount(S, s, n, m);<br>            System.out.println(res);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="第二题">第二题</h1><h2 id="代码-1">代码</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span>[] operations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>                operations[i] = sc.nextInt();<br>            &#125;<br>            Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                map.put(i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>                map.put(operations[i], -(++count));<br>            &#125;<br>            List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(map.entrySet());<br>            Collections.sort(list, (o1, o2) -&gt; o1.getValue() - o2.getValue());<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                sb.append(list.get(i).getKey().toString());<br>                <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                sb.append(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println(sb);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="第三题">第三题</h1><h2 id="题目描述-1">题目描述</h2><p>小团最近获得了美美团团国的裁缝资格证，成为了一个裁缝！现在小团有一个长度为n 的大布料S(在这个国家布料其实是一个仅包含小写英文字母的字符串)，小团可以将布料在任意位置剪切，例如布料<code>abcd</code> 可以被裁剪为 <code>a</code> 与 <code>bcd</code> 或<code>ab</code> 与 <code>cd</code> 或 <code>abc</code> 与<code>d</code>，不过，裁剪完之后是不能拼接起来的，因为小团还不是很擅长拼接布料。现在小团想知道能不能有一种裁剪方式能让她把布料恰好裁剪成客人要求的小布料。<br />形式化地，有一个串 S，问是否能将其划分成 m个不相交的连续字串，使得这些连续字串可以要求的连续字串可以与要求的连续子串一一对应。两个串相对应是指这两个串完全相等。例如<code>"aab"="aab"</code> 但 <code>"aab"≠"baa"</code>。</p><h2 id="输入描述-1">输入描述</h2><p>第一行两个空格隔开的正整数 n 和 m，分别表示大布料 S长度和客人要求的小布料数量。<br />接下来一行一个长度为 n 的仅包含小写英文字母的串S，表示大布料的组成。<br />接下来一行 m 个空格隔开的数 <span class="math inline">\(x_1, x_2, \dots,x_m\)</span>，依次表示所要求的小布料长度。<br />接下来开始 m 行，每行一个长度为 <span class="math inline">\(x_i\)</span>的仅包含小写字母的串 <span class="math inline">\(s_i\)</span>，表示第 i个小布料的组成。<br />对于所有数据，<span class="math inline">\(1 \leq m \leq 9, \; 1 \leq n\leq 20, \; 1 \leq x_i \leq n\)</span> 且 <spanclass="math inline">\(\sum_{i = 1}^{m} x_i = n\)</span>。</p><h2 id="输出描述-1">输出描述</h2><p>如果存在这样的方案，输出方案总数。如果不存在任何方案，输出0。两个方案 A、B 不相同当且仅当方案 A中存在一个相对于原始长布料的裁剪位置 i，而方案 B 中并未在该位置 i裁剪。<br />例如 <code>aaaaaa</code> 裁剪方案 <code>aaa|aaa</code>是相同的方案。而方案 <code>aa|aaaa</code> 与方案 <code>aaaa|aa</code>是不同的方案，虽然划分出的结果都是 <code>aa</code> 与<code>aaaa</code>，但前者在第二个 a进行了裁剪，后者并没有在这里进行裁剪，所以视为不同的裁剪方案。</p><h2 id="样例输入-1">样例输入</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">6</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">aaaaaa</span><br><span class="hljs-attribute">4</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">aaaa</span><br><span class="hljs-attribute">aa</span><br></code></pre></div></td></tr></table></figure><h2 id="样例输出-1">样例输出</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure><h2 id="提示">提示</h2><p>有两种解决方案，第一种是 <code>aaaa|aa</code>，第二种是<code>aa|aaaa</code>，代表一次裁剪。</p><h2 id="代码-2">代码</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRes</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, String S, <span class="hljs-type">int</span>[] x, String[] s)</span> &#123;<br>        List&lt;String&gt; sList = Arrays.stream(s).collect(Collectors.toList());<br>        dfs(S, sList);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(String S, List&lt;String&gt; sList)</span> &#123;<br>        <span class="hljs-keyword">if</span> (S.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.count++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sList.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (S.startsWith(sList.get(i))) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> sList.get(i);<br>                sList.remove(i);<br>                dfs(S.substring(cur.length()), sList);<br>                sList.add(i, cur);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">S</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-type">int</span>[] x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>                x[i] = sc.nextInt();<br>            &#125;<br>            String[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[m];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>                s[i] = sc.next();<br>            &#125;<br><br>            <span class="hljs-type">Main</span> <span class="hljs-variable">solu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> solu.getRes(n, m, S, x, s);<br>            System.out.println(res);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="第四题">第四题</h1><h2 id="题目描述-2">题目描述</h2><p>小团正忙着用机器人收衣服！因为快要下雨了，小团找来了不少机器人帮忙收衣服。他有n 件衣服从左到右成一行排列，所在位置分别为1~n，在每个位置上已经有一个就绪的机器人可以帮忙收衣服，但第 i个位置上的机器人需要 <span class="math inline">\(p_i\)</span>的电量来启动，然后这个机器人会用 <spanclass="math inline">\(t_i\)</span>的时间来收衣服，当它收完当前衣服后，会尝试去收紧邻的右边的一件衣服(如果存在的话)，即i + 1 处的衣服，如果 i + 1处的衣服已经被其他机器人收了或者其他机器人正在收，这个机器人就会进入休眠状态，不再收衣服。不过如果机器人没有休眠，它会同样以<span class="math inline">\(t_i\)</span> 时间来收这件 i + 1处的衣服(注意，不是 <span class="math inline">\(t_{i + 1}\)</span>的时间，收衣服的时间为每个机器人固有属性)，然后它会做同样的检测来看能否继续收i + 2处的衣服，一直直到它进入休眠状态或者右边没有衣服可以收了。形象地来说，机器人会一直尝试往右边收衣服，收k 件的话就耗费 <span class="math inline">\(k * t_i\)</span>的时间，但是当它遇见其他机器人工作的痕迹，就会认为后面的事情它不用管了，开始摸鱼，进入休眠状态。<br />小团手里总共有电量 b，他准备在 0时刻的时候将所有他想启动的机器人全部一起启动，过后不再启动新的机器人，并且启动的机器人的电量之和不大于b。他想知道在最佳选择的情况下，最快多久能收完衣服。若无论如何怎样都收不完衣服，输出-1。</p><h2 id="输入描述-2">输入描述</h2><p>第一行两个正整数 n 和 b，分别表示衣服数量和小团持有电量。<br />接下来一行 n 个数 <span class="math inline">\(p_1, p_2, \dots,p_n\)</span>，含义如题所述，为机器人唤醒需求电量。<br />接下来一行 n 个数 <span class="math inline">\(t_1, t_2, \dots,t_n\)</span>，含义如题所述，为机器人收衣服所需时间。<br />数字间两两有空格隔开。<br />对于所有数据，<span class="math inline">\(1 \leq n \leq 1000, 1 \leq p_i\leq 100, 1 \leq t_i, b \leq 10^5\)</span>。</p><h2 id="输出描述-2">输出描述</h2><p>输出最短所需时间。</p><h2 id="样例输入-2">样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">5</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h2 id="样例输出-2">样例输出</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">10<br></code></pre></div></td></tr></table></figure><h2 id="提示-1">提示</h2><p>样例解释 1：</p><p>可以同时启动第一个机器人和第二个机器人，耗电量为<code>1 + 2 = 3</code>，这样花费时间为<code>max(7, 5 * 2) = 10</code>。<br />也可以同时启动第一个机器人和第三个机器人，耗电量为<code>1 + 3 = 4</code>，这样花费时间为<code>max(7 * 2, 3) = 14</code>。</p><p>输入样例 2：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">5</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>输出样例 2：</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-1</span><br></code></pre></div></td></tr></table></figure><p>样例解释 2：</p><p>因为必须要启动第一个机器人，耗电量至少为 6， 但是持有电量只有5，因此无法收完所有衣服，输出 -1。</p><h1 id="第五题">第五题</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">T</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-type">int</span>[] t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>                t[i] = sc.nextInt();<br>            &#125;<br><br>            <span class="hljs-type">int</span>[] e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                e[i] = sc.nextInt();<br>            &#125;<br><br>            Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-keyword">if</span> (e[i] == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (queue.size() == <span class="hljs-number">0</span>) &#123;<br>                        res += T;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (queue.peek() &lt; T) &#123;<br>                            res += queue.poll();<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            res += T;<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    queue.offer(t[e[i] - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>            System.out.println(res);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
      <tag>笔试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暑期实训报告</title>
    <link href="/2022/08/31/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E6%8A%A5%E5%91%8A/"/>
    <url>/2022/08/31/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>要注意，这一片博客仅仅是一篇作业。由于学院这样要求，所以是没有办法。因此，我也没有很认真去写，这本不应写的，只是这种腐朽的制度所迫。所以我也没怎么注意排版，盘古之白更是没有去注意。望周知。</p><h1 id="生产专业实习报告">生产(专业)实习报告</h1><h2 id="简介">1、简介</h2><h3 id="实习背景">1.1 实习背景</h3><p>华中科技大学软件学院(生产)专业实习过程是每一届大三学生的必修任务，今年我们大三的学生当然也不例外。这个实习，其实我们更加愿意称其为实训，主要是训练我们的动手实践的能力，更具体一点，是锻炼我们的对于项目的了解和开发的能力。我们知道，我们软件学院的正统的课程都是偏理论性的，比如数据结构、算法设计与分析、计算机组成原理、操作系统等等，即使这些课程都会有相应的课程设计，并且也都是一个个小型的项目，但是这些都还是偏学术型的，它们对于锻炼我们的思维是很有帮助的，然而，在现代的互联网企业中，却很少会用到这样的技术，尤其是对于我们软件工程的毕业生来说。</p><p>那么，公司里面会用什么呢？以及，我们学生有必要去学习那些技术吗？我们的工程实训给了我们明确的答案，那就是要，而且很有必要，所以，我们学院在这样的情况下就展开了为期将近一个月的暑期实训，以期提高我们学生在工程项目中的动手能力以及对于项目的掌控能力。现代的企业需要的是什么？我觉得是成果，如果拿不出成果，那么，学再多的底层的知识也是排不上用场的，排不上用场的话，就会被社会淘汰掉。正如我们的先贤说过并且采取过的政策一样，我们首先要把别人的东西给搬过来用，然后再慢慢钻研它们的原理，然后再去想着超越他们。我觉得，我们的工程实训所起到的目的就是先让我们培养起拥创造项目的能力，先达到第一步的要求，然后等到将来发展到一定程度之后，就可以利用我们的理论课程上所学的知识，那时，我们的底层知识只会成为我们在技术方面的助力。综合这样的目的，我觉得学院开展这样的暑期实训是很有必要的。</p><h3 id="实习情况">1.2 实习情况</h3><p>这一届的实习地点还是在软件学院的 5楼的机房。这个氛围是比较亲切的，毕竟，平时的上机都是在这里。</p><p>对于这个地方，听说去年实训的时候，空调快掉了，好多学生埋怨，今年看来似乎已经没有了这样的问题，空调是比较凉快的，而且风口的同学似乎还比较冷。仔细一看，原来空调已经是换成新的了。不得不夸赞学院的行动力。当然，也有同学们的行动力。这二者是缺一不可的。今年似乎大二的学生也来到了这里实训，往常这里是只有大三的。让然，也好，这里的教室要小一点，方便教学，空调的效果也要好一些。</p><p>就学习情况而言，我们班一共安排了两位老师轮流来讲课。说起来，第一位老师还是我的老乡，聊起家乡的事情，是有点亲切的。当然啦，授课方面的话，两位老师都还行，毕竟讲的东西就是那些嘛。然而，由于时间的限制，我觉得，这个讲课还是很有水分的。为什么这么说呢，原因是我们学习的这些东西确实不能够在短短一两周内完成教学的，老师教得仓促，学生学得当然也是很仓促了。</p><h3 id="实训内容">1.3 实训内容</h3><p>我觉得这个就应该叫做实训，而不应该叫做实习。原因是实习是应该正儿八经地到人家公司里面去，给人家干活，接触实际的生产内容，但是我们这个呢，还是在学校里面，其实际的形式也还是和学校的上课比较类似，然后小组作业，无非就是大作业罢了。</p><p>我们这一次的实训的主要学习内容还是 Java开发，与去年不同的是，去年学习的 Spring 框架那一套，就是 Spring，SpringMVC，MyBatis 那些，而今年则有了变化，今年学习的内容首先上升到了 SpringBoot 这个层面，然后相比于去年多了一些内容，比如 MyBatisPlus，SpringSecurity，Redis 和前后端分离等等。数据库方面倒还是 MySQL，没有变化。</p><p>相较而言，我觉得今年最大的变化就是前后端分离这一块了吧。这个思想是现在企业开发的主流思想，学习这项技术当然是很有必要的。</p><h2 id="java-技术的工程应用">2、Java 技术的工程应用</h2><h3 id="学习过程">2.1 学习过程</h3><h4 id="学习内容介绍">2.1.1 学习内容介绍</h4><p>首先我们是第一阶段的学习，主要学习后端开发技术。开发工具为 IDEA。</p><ol type="1"><li><p>Java 编程基础。这里呢，主要还是复习巩固 Java的基础。然后查漏补缺，针对 Java8 和 Java11 和 Java17的新特殊再进行专项的学习。这个部分进行的时间其实是不长的，毕竟之前是有基础的。主旋律是复习。复习基础内容。</p></li><li><p>Java 高级编程。这里当然就是针对 Java 的新特性了。</p></li></ol><p>这里就记录一下我的一些学习过程中的 Snippets，毕竟，林纳斯说过，"Talkis cheap, show me the code."。</p><p>将 String 类型的 List 转成 String 类型的数组。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;what&quot;</span>);<br>System.out.println(list);<br>String[] strings = list.toArray(String[]::<span class="hljs-keyword">new</span>);<br>System.out.println(Arrays.toString(strings));<br></code></pre></div></td></tr></table></figure><p>将 Integer 类型的 List 转成 String 类型的数组。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; integerList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>System.out.println(integerList);<br>String[] intStrings = integerList.stream().map(a -&gt; a.toString()).toArray(String[]::<span class="hljs-keyword">new</span>);<br>System.out.println(Arrays.toString(intStrings));<br></code></pre></div></td></tr></table></figure><p>将 <code>List&lt;Integer&gt;</code> 转为<code>List&lt;String&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; integerList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>List&lt;String&gt; stringList = integerList.stream().map(a -&gt; a.toString()).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><p>将 <code>int[]</code> 转换为 <code>List&lt;Integer&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] ints = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>List&lt;Integer&gt; list = Arrays.stream(ints).boxed().collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><p>使用流式编程声明数组。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> [] myIntArray = IntStream.range(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>).toArray(); <span class="hljs-comment">// From 0 to 99</span><br><span class="hljs-type">int</span> [] myIntArray = IntStream.rangeClosed(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>).toArray(); <span class="hljs-comment">// From 0 to 100</span><br><span class="hljs-type">int</span> [] myIntArray = IntStream.of(<span class="hljs-number">12</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">85</span>, <span class="hljs-number">28</span>, <span class="hljs-number">96</span>, <span class="hljs-number">47</span>).toArray(); <span class="hljs-comment">// The order is preserved.</span><br><span class="hljs-type">int</span> [] myIntArray = IntStream.of(<span class="hljs-number">12</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">85</span>, <span class="hljs-number">28</span>, <span class="hljs-number">96</span>, <span class="hljs-number">47</span>).sorted().toArray(); <span class="hljs-comment">// Sort </span><br></code></pre></div></td></tr></table></figure><ol start="3" type="1"><li>Web 前端开发技术，这里不再仅仅局限于简单的 html，css 和基础的js，而是使用了成熟的前端框架 Vue。</li></ol><p>Vue是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web世界是十分多样化的，不同的开发者在 Web上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，我们可以用不同的方式使用Vue：</p><ul><li>无需构建步骤，渐进式增强静态的 HTML</li><li>在任何页面中作为 Web Components 嵌入</li><li>单页应用 (SPA)</li><li>全栈 / 服务端渲染 (SSR)</li><li>Jamstack / 静态站点生成 (SSG)</li><li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li></ul><ol start="4" type="1"><li>Java Web 编程技术。</li></ol><p>到了今天，提到 Java Web，也都是 Spring Boot 了。</p><p>SpringBoot是一个构建在Spring框架顶部的项目。它提供了一种简便，快捷的方式来设置，配置和运行基于Web的简单应用程序。</p><p>它是一个Spring模块，提供了RAD(快速应用程序开发)功能。它用于创建独立的基于Spring的应用程序，因为它需要最少的Spring配置，因此可以运行。</p><p>简而言之，Spring Boot是 Spring Framework 和 嵌入式服务器的组合。</p><p>在SpringBoot不需要XML配置(部署描述符)。它使用约定优于配置软件设计范例，这意味着可以减少开发人员的工作量。</p><p>我们可以使用Spring STS IDE 或 Spring Initializr 进行开发Spring BootJava应用程序。</p><p>为什么要使用Spring Boot Framework？</p><p>我们应该使用Spring Boot Framework，因为:</p><ul><li>Spring Boot中使用了依赖项注入方法。</li><li>它包含强大的数据库事务管理功能。</li><li>它简化了与其他Java框架(如JPA/Hibernate ORM，Struts等)的集成。</li><li>它减少了应用程序的成本和开发时间。</li></ul><p>与SpringBoot框架一起，其他许多Spring姐妹项目也有助于构建满足现代业务需求的应用程序。Spring姐妹项目如下:</p><ul><li>Spring Data: 它简化了来自关系数据库和 NoSQL 数据库的数据访问。</li><li>Spring Batch: 它提供了强大的批处理处理。</li><li>Spring Security:这是一个安全框架，可为应用程序提供强大的安全性。</li><li>Spring Social: 它支持与LinkedIn等社交网络集成。</li><li>Spring Integration:它是企业集成模式的实现。使用轻量级消息传递和声明性适配器，它有助于与其他企业应用程序集成。</li></ul><p>Spring Boot的优点：</p><ul><li>它创建独立 Spring应用程序，这些应用程序可以使用Java -jar 启动。</li><li>借助不同的嵌入式 HTTP服务器(例如 Tomcat，Jetty等)，它可以轻松测试Web应用程序。我们不需要部署WAR文件。</li><li>它提供了有用的' starter 'POM，以简化我们的Maven配置。</li><li>它提供了production-ready功能，例如metrics, healthchecks和externalized configuration.。</li><li>不需要 XML 配置。</li><li>它提供了一个用于开发和测试Spring Boot应用程序的 CLI 工具。</li><li>它提供了许多插件。</li><li>它还最大限度地减少了编写多个样板代码(必须在几乎没有任何改动的情况下将其包含在许多地方)，XML配置和注释的情况。</li><li>它提高生产力并减少开发时间。</li></ul><p>Spring Boot的限制：</p><p>SpringBoot可以使用应用程序中不会使用的依赖项。这些依赖性增加了应用程序的大小。</p><p>Spring Boot的目标：</p><p>Spring Boot的主要目标是减少 开发，单元测试和 集成测试时间。</p><ul><li>提供有目的的开发方法</li><li>避免定义更多的注释配置</li><li>避免编写大量导入语句</li><li>避免XML配置</li></ul><p>通过提供或避免上述几点，Spring Boot Framework减少了开发时间，开发人员工作量并 提高了生产力。</p><ol start="5" type="1"><li>MySQL 开发基础，在这一部分，主要还是对 MySQL数据库管理系统进行了学习和使用。</li></ol><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的RDBMS(Relational Database ManagementSystem：关系数据库管理系统)应用软件之一。</p><p>什么是数据库？</p><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。</p><p>每个数据库都有一个或多个不同的 API用于创建，访问，管理，搜索和复制所保存的数据。</p><p>我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。</p><p>所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p><p>RDBMS 即关系数据库管理系统(Relational Database ManagementSystem)的特点：</p><p>1.数据以表格的形式出现 2.每行为各种记录名称3.每列为记录名称所对应的数据域 4.许多的行和列组成一张表单5.若干的表单组成database</p><p>RDBMS 术语。</p><p>我们先了解下RDBMS的一些术语：</p><ul><li>数据库: 数据库是一些关联表的集合。</li><li>数据表:表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列: 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</li><li>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性:参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><p>MySQL 为关系型数据库(Relational Database Management System),这种所谓的"关系型"可以理解为"表格"的概念,一个关系型数据库由一个或数个表格组成，</p><ul><li>表头(header): 每一列的名称;</li><li>列(col): 具有相同数据类型的数据的集合;</li><li>行(row): 每一行用来描述某条记录的具体信息;</li><li>值(value): 行的具体信息, 每个值必须与该列的数据类型相同;</li><li>键(key): 键的值在当前列中具有唯一性。</li></ul><p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于Oracle 公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL 是开源的，目前隶属于 Oracle 旗下产品。</li><li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL 使用标准的 SQL 数据语言形式。</li><li>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL 对 PHP 有很好的支持，PHP 是很适合用于 Web 程序开发。</li><li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li>MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的MySQL 系统。</li></ul><h4 id="学习过程中遇到的困难">2.1.2 学习过程中遇到的困难</h4><p>由于之前没怎么接触过这个前后端分离的思想，所以这一次上手还是遇到了一些困难的。还有就是项目本身的话，由于小组的项目经验还是不怎么够，所以合作起来还是有一些捉襟见肘的地方的。还有就是需求分析，其实在真正的生产环境中，这是产品经理的工作，但是在我们这种同学之间组队开发的形式中，所有人都要参与这个产品的需求的讨论，然后就是这个工作其实并不简单，我在公司里面实习的时候，开发小组的产品经历都是资历很深的老员工，他们都是从开发转过去的，由于对技术非常熟悉，对开发很熟悉，所以像分析需求与开发之间的关系，定义接口之类的规范，他们对这个是非常严格的，最后订出来的成果也很好，很严谨。像我们的话，技术方面没有太深的积累，导致在分析需求的时候其实并没有怎么联系实际来看，导致后面开发起来还是比较困难的。而且，前端和后端这两块，由于大家都不怎么有经验，前端的话，主要是对Vue这个框架不太熟悉，主要是以前从来没有接触过，负责前端的小伙伴的困难其实是有点大的。老师们都说Vue 很简单，那是建立在花费了一定的学习时间的情况下。如果让我花费了 500小时学习任何一门框架，我都会说它很简单，上手起来很快的，但是呢，我们的实训的教学时间实在是太短了，这么短的时间急功近利给谁看呢？不太好。两头都想讨好，结果两头都顾不到，最后白白花费了那么多时间，做出一堆毫无意义的东西。</p><p>好吧，言归正传，还是学到了一点东西的。</p><p>遇到的一些困难主要是宏观方面的。小的方面呢，也就是一些 Java的出错问题，好在这些到 StackOverflow 上一般都能够顺利解决。</p><p>然后前端方面呢，最开始的困难是不知道如何组织项目的文件，毕竟以前没有正儿八经的开发过vue 项目。然后就是一些 js方面的知识了。为什么呢？因为以前没有正儿八经的学习过js，导致有些地方甚至连语法都不太熟悉。然后就是一些具体开发过程中的问题，什么跨域问题啦，什么路由解析问题啦，什么前后端对接问题啦等等。</p><p>后端方面主要的困难是 Spring Security 问题。配置问题。</p><p>还有什么问题呢，就是 git 和 github的使用问题。由于网络原因，我们使用的是gitee，其操作大概都是一样的。然后就是整体在处理 PR的时候出现了一点问题。</p><h4 id="实践心得">2.2.3 实践心得</h4><p>实践过程中的最大收获就是团队之间的合作。</p><p>然后呢，这一次的前端方面出现了一点问题，经验，还是经验的问题，毕竟以前从来没有这方面的经验，也不能把责任全部归在这个经验上面，但是总归是有问题的。前面的需求分析，小组之间的任务分工也没有做好，这就导致了后面在开发的过程中还要抽出大量的事件来讨论这个。其实是不应该。当然，这也给了我们下一次实践的教训。我们总结了教训，就是任务的前期一定要做好需求分析，软件过程管理十分重要，还有软件体系结构，这些是课上学过的，我们应该把他们合理的应用到实践中去，这样才能够学有所得。想起陈长清老师课上的教导，我觉得还是有些惭愧的，明明上课的时候对这方面已经讲了很多了，老师也给我们指导了很多方面，也学习了很多优秀的实践，可是最后确实没有用上多少，本来是应该用上的，这些在公司的实际生产中是很重要的。从需求到产品，每一步都要严格把关。</p><p>然后，学到的经验就是遇到不会的一定要及时请教老师，这一次说起来还是很感谢熊琳老师的帮助的，她甚至牺牲了一些午休的实践帮助我们的项目，可以说是老师的典范。</p><h2 id="java-技术在-web-应用中的设计与实现">3、Java 技术在 Web应用中的设计与实现</h2><h3 id="web-技术简介">3.1 Web 技术简介</h3><h4 id="背景">3.1.1 背景</h4><p>Java Web，是用 Java 技术来解决 Web 互联网领域相关的技术总和。Web包括：Web 服务器和 Web 客户端两部分。Java 在客户端的应用有 Javaapplet，但是早就被淘汰了。Java 在服务器端的应用非常的丰富，比如Servlet，JSP 和第三方框架等。Java 技术对 Web领域的发展注入强大的动力，好吧，为 Web服务端的发展注入了强大的东西，客户端的话，脚本语言还是得看 JavaScript的。嗯。</p><p>我们现在提到 Java Web 呢，都是指 Spring Boot 啦，至于纯粹古老的 JavaWeb，早就过时啦，现在已经没有人使用了，当然，现在流行的框架，像 SpringBoot 这些，其底层还是 Java Web那一套的。这又是经典永流传的另一层体现，底层永不过时。</p><p>JSP 这些也早就过时了，像前两年还很流行 Thymeleaf 这个模板引擎来替代JSP，现在也过时啦，现在讲究的是前后端分离。</p><h4 id="前后端分离思想">3.1.2 前后端分离思想</h4><p>” 前后端分离 “已经成为互联网项目开发的业界标杆，通过Tomcat+Ngnix(也可以中间有个Node.js)，有效地进行解耦。并且前后端分离会为以后的大型分布式架构、弹性计算架构、微服务架构、多端化服务（多种客户端，例如：浏览器，车载终端，安卓，IOS等等）打下坚实的基础。</p><p>前后端分离 (解耦) 的核心思想是：前端 Html 页面通过 Ajax 调用后端的RestFul API 并使用 Json 数据进行交互。</p><p>注：【在互联网架构中，web 服务器：一般指像 nginx，apache这类的服务器，他们一般只能解析静态资源。应用服务器：一般指像tomcat，jetty，resin这类的服务器可以解析动态资源也可以解析静态资源，但解析静态资源的能力没有web 服务器好。】 一般只有 Web服务器才能被外网访问，应用服务器只能内网访问。</p><p>为什么前后端分离？</p><p>一般公司后端开发人员直接兼顾前端的工作，一边实现 API接口，一边开发页面，两者互相切换着做，而且根据不同的 url动态拼接页面，这也导致后台的开发压力大大增加。前后端工作分配不均。不仅仅开发效率慢，而且代码难以维护。</p><p>而前后端分离的话，则可以很好的解决前后端分工不均的问题，将更多的交互逻辑分配给前端来处理，而后端则可以专注于其本职工作，比如提供API 接口，进行权限控制以及进行运算工作。而前端开发人员则可以利用 nodejs来搭建自己的本地服务器，直接在本地开发，然后通过一些插件来将 api请求转发到后台，这样就可以完全模拟线上的场景，并且与后台解耦。前端可以独立完成与用户交互的整一个过程，两者都可以同时开工，不互相依赖，开发效率更快，而且分工比较均衡。</p><p>从 MVC 到前后端分离。</p><p>MVC 是一种经典的设计模式，全名为 Model-View-Controller，即 模型 -视图 - 控制器。</p><p>其中，模型 是用于封装数据的载体，例如，在 Java 中一般通过一个简单的POJO（Plain Ordinary Java Object）来表示，其本质是一个普通的 JavaBean，包含一系列的成员变量及其 getter/setter 方法。对于 视图而言，它更加偏重于展现，也就是说，视图决定了界面到底长什么样子，在 Java中可通过 JSP 来充当视图，或者通过纯 HTML的方式进行展现，而后者才是目前的主流。模型和视图需要通过 控制器来进行粘合，例如，用户发送一个 HTTP请求，此时该请求首先会进入控制器，然后控制器去获取数据并将其封装为模型，最后将模型传递到视图中进行展现。</p><p>也就是说，我们输入的是 AJAX 请求，输出的是 JSON数据，市面上有这样的技术来实现这个功能吗？答案是 REST。</p><p>REST 全称是 Representational State Transfer（表述性状态转移），它是Roy Fielding 博士在 2000年写的一篇关于软件架构风格的论文，此文一出，威震四方！国内外许多知名互联网公司纷纷开始采用这种轻量级的Web 服务，大家习惯将其称为 RESTful Web Services，或简称 REST 服务。</p><p>可见，有了 REST服务，前端关注界面展现，后端关注业务逻辑，分工明确，职责清晰。</p><p>认识 Rest 架构。</p><p>REST 本质上是使用 URL 来访问资源种方式。众所周知，URL就是我们平常使用的请求地址了，其中包括两部分：请求方式 与请求路径，比较常见的请求方式是 GET 与 POST，但在 REST中又提出了几种其它类型的请求方式，汇总起来有六种：GET、POST、PUT、DELETE、HEAD、OPTIONS。</p><p>尤其是前四种，正好与CRUD（Create-Retrieve-Update-Delete，增删改查）四种操作相对应，例如，GET（查）、POST（增）、PUT（改）、DELETE（删），这正是REST 与 CRUD 的异曲同工之妙！需要强调的是，REST 是 “面向资源”的，这里提到的资源，实际上就是我们常说的领域对象，在系统设计过程中，我们经常通过领域对象来进行数据建模。</p><p>REST 是一个 “无状态”的架构模式，因为在任何时候都可以由客户端发出请求到服务端，最终返回自己想要的数据，当前请求不会受到上次请求的影响。也就是说，服务端将内部资源发布REST 服务，客户端通过 URL 来访问这些资源，这不就是 SOA 所提倡的“面向服务” 的思想吗？所以，REST 也被人们看做是一种 “轻量级” 的 SOA实现技术，因此在企业级应用与互联网应用中都得到了广泛应用。</p><p>请求路径相同，但请求方式不同，所代表的业务操作也不同，例如，/advertiser/1这个请求，带有 GET、PUT、DELETE三种不同的请求方式，对应三种不同的业务操作。</p><p>虽然 REST 看起来还是很简单的，实际上我们往往需要提供一个 REST框架，让其实现前后端分离架构，让开发人员将精力集中在业务上，而并非那些具体的技术细节。</p><p>前后端分离意义大吗？</p><p>1、该网站前端变化远比后端变化频繁，则意义大。</p><p>2、该网站尚处于原始开发模式，数据逻辑与表现逻辑混杂不清，则意义大。</p><p>3、该网站前端团队和后端团队分属两个领导班子，技能点差异很大，则意义大。</p><p>4、该网站前端效果绚丽 / 跨设备兼容要求高，则意义大。</p><p>术业有专攻（开发人员分离）。</p><p>以前的 JavaWeb 项目大多数都是 java程序员又当爹又当妈，又搞前端（ajax/jquery/js/html/css等等），又搞后端（java/mysql/oracle 等等）。</p><p>随着时代的发展，渐渐的许多大中小公司开始把前后端的界限分的越来越明确，前端工程师只管前端的事情，后端工程师只管后端的事情。</p><p>正所谓术业有专攻，一个人如果什么都会，那么他毕竟什么都不精。</p><p>大中型公司需要专业人才，小公司需要全才，但是对于个人职业发展来说，我建议是分开。</p><p>对于后端 java 工程师：</p><p>把精力放在 java 基础，设计模式，jvm 原理，spring+springmvc原理及源码，linux，mysql事务隔离与锁机制，mongodb，http/tcp，多线程，分布式架构（dubbo，dubbox，springcloud），弹性计算架构，微服务架构（springboot+zookeeper+docker+jenkins），java性能优化，以及相关的项目管理等等。</p><p>后端追求的是：三高（高并发，高可用，高性能），安全，存储，业务等等。</p><p>对于前端工程师：</p><p>把精力放在html5，css3，jquery，angularjs，bootstrap，reactjs，vuejs，webpack，less/sass，gulp，nodejs，GoogleV8 引擎，javascript多线程，模块化，面向切面编程，设计模式，浏览器兼容性，性能优化等等。</p><p>前端追求的是：页面表现，速度流畅，兼容性，用户体验等等。</p><p>耦合时代。</p><p>几曾何时，我们的 JavaWeb 项目都是使用了若干后台框架，springmvc/struts+ spring + spring jdbc/hibernate/mybatis 等等。</p><p>大多数项目在 java后端都是分了三层，控制层（controller/action），业务层（service/manage），持久层（dao）。</p><p>控制层负责接收参数，调用相关业务层，封装数据，以及路由 &amp; 渲染到jsp 页面。</p><p>然后 jsp 页面上使用各种标签（jstl/el/struts 标签等）或者手写 java表达式（&lt;%=%&gt;）将后台的数据展现出来，玩的是 MVC 那套思路。</p><p>我们先看这种情况：需求定完了，代码写完了，测试测完了，然后呢？要发布了吧？</p><p>你需要用 maven 或者 eclipse 等工具把你的代码打成一个 war包，然后把这个 war 包发布到你的生产环境下的 web容器（tomcat/jboss/weblogic/websphere/jetty/resin）里，对吧？</p><p>发布完了之后，你要启动你的 web容器，开始提供服务，这时候你通过配置域名，dns等等相关，你的网站就可以访问了（假设你是个网站）。</p><p>那我们来看，你的前后端代码是不是全都在那个 war 包里？包括你的js，css，图片，各种第三方的库，对吧？</p><p>好，下面在浏览器中输入你的网站域名（www.xxx.com），之后发生了什么？（这个问题也是很多公司的面试题）</p><p>我捡干的说了啊，基础不好的童鞋请自己去搜。</p><p>浏览器在通过域名通过 dns 服务器找到你的服务器外网 ip, 将 http请求发送到你的服务器，在 tcp3 次握手之后（http 下面是 tcp/ip），通过 tcp协议开始传输数据，你的服务器得到请求后，开始提供服务，接收参数，之后返回你的应答给浏览器，浏览器再通过content-type 来解析你返回的内容，呈现给用户。</p><p>那么我们来看，我们先假设你的首页中有 100 张图片，此时，用户的看似一次http请求，其实并不是一次，用户在第一次访问的时候，浏览器中不会有缓存，你的100 张图片，浏览器要连着请求 100 次 http 请求（有人会跟我说 http长连短连的问题，不在这里讨论），你的服务器接收这些请求，都需要耗费内存去创建socket 来玩 tcp 传输（消耗你服务器上的计算资源）。</p><p>重点来了，这样的话，你的服务器的压力会非常大，因为页面中的所有请求都是只请求到你这台服务器上，如果1 个人还好，如果 10000个人并发访问呢（先不聊服务器集群，这里就说是单实例服务器），那你的服务器能扛住多少个tcp连接？你的带宽有多大？你的服务器的内存有多大？你的硬盘是高性能的吗？你能抗住多少IO？你给 web 服务器分的内存有多大？会不会宕机？</p><p>这就是为什么，越是大中型的 web 应用，他们越是要解耦。</p><p>理论上你可以把你的数据库 + 应用服务 + 消息队列 + 缓存 +用户上传的文件 + 日志 +等等都扔在一台服务器上，你也不用玩什么服务治理，也不用做什么性能监控，什么报警机制等等，就乱成一锅粥好了。</p><p>但是这样就好像是你把鸡蛋都放在一个篮子里，隐患非常大。如果因为一个子应用的内存不稳定导致整个服务器内存溢出而hung 住，那你的整个网站就挂掉了。</p><p>如果出意外挂掉，而恰好这时你们的业务又处于井喷式发展高峰期，那么恭喜你，业务成功被技术卡住，很可能会流失大量用户，后果不堪设想。注意：技术一定是要走在业务前面的，否则你将错过最佳的发展期。</p><p>此外，你的应用全部都耦合在一起，相当于一个巨石，当服务端负载能力不足时，一般会使用负载均衡的方式，将服务器做成集群，这样其实你是在水平扩展一块块巨石，性能加速度会越来越低，要知道，本身负载就低的功能or模块是没有必要水平扩展的，在本文中的例子就是你的性能瓶颈不在前端，那干嘛要水平扩展前端呢？？？还有发版部署上线的时候，我明明只改了后端的代码，为什么要前端也跟着发布呢？？？（引用：《架构探险- 轻量级微服务架构》，黄勇）</p><p>正常的互联网架构，是都要拆开的，你的 web服务器集群，你的应用服务器集群 + 文件服务器集群 + 数据库服务器集群 +消息队列集群 + 缓存集群等等。</p><p>JSP 的痛点。</p><p>以前的 javaWeb 项目大多数使用 jsp作为页面层展示数据给用户，因为流量不高，因此也没有那么苛刻的性能要求，但现在是大数据时代，对于互联网项目的性能要求是越来越高，因此原始的前后端耦合在一起的架构模式已经逐渐不能满足我们，因此我们需要需找一种解耦的方式，来大幅度提升我们的负载能力。</p><p>1、动态资源和静态资源全部耦合在一起，服务器压力大，因为服务器会收到各种http 请求，例如 css 的 http 请求，js 的，图片的等等。</p><p>一旦服务器出现状况，前后台一起玩完，用户体验极差。</p><p>2、UI 出好设计图后，前端工程师只负责将设计图切成 html，需要由 java工程师来将 html 套成 jsp 页面，出错率较高（因为页面中经常会出现大量的 js代码）， 修改问题时需要双方协同开发，效率低下。</p><p>3、jsp 必须要在支持 java 的 web 服务器里运行（例如tomcat，jetty，resin 等），无法使用 nginx 等（nginx 据说单实例 http并发高达 5w，这个优势要用上）， 性能提不上来。</p><p>4、第一次请求 jsp，必须要在 web 服务器中编译成servlet，第一次运行会较慢。</p><p>每次请求 jsp 都是访问 servlet 再用输出流输出的 html页面，效率没有直接使用 html 高（是每次哟，亲~）。 6、jsp内有较多标签和表达式，前端工程师在修改页面时会捉襟见肘，遇到很多痛点。</p><p>7、如果 jsp 中的内容很多，页面响应会很慢，因为是同步加载。</p><p>8、需要前端工程师使用 java 的 ide（例如eclipse），以及需要配置各种后端的开发环境，你们有考虑过前端工程师的感受吗。</p><p>基于上述的一些痛点，我们应该把整个项目的开发权重往前移，实现前后端真正的解耦！</p><p>开发模式。</p><p>以前老的方式是：</p><ul><li>产品经历 / 领导 / 客户提出需求</li><li>UI 做出设计图</li><li>前端工程师做 html 页面</li><li>后端工程师将 html 页面套成 jsp页面（前后端强依赖，后端必须要等前端的 html 做好才能套 jsp。如果 html发生变更，就更痛了，开发效率低）</li><li>集成出现问题</li><li>前端返工</li><li>后端返工</li><li>二次集成</li><li>集成成功</li><li>交付</li></ul><p>新的方式是：</p><ul><li>产品经历 / 领导 / 客户提出需求</li><li>UI 做出设计图</li><li>前后端约定接口 &amp; 数据 &amp; 参数</li><li>前后端并行开发（无强依赖，可前后端并行开发，如果需求变更，只要接口&amp; 参数不变，就不用两边都修改代码，开发效率高）</li><li>前后端集成</li><li>前端页面调整</li><li>集成成功</li><li>交付</li></ul><p>请求方式。</p><p>以前老的方式是：</p><ul><li>客户端请求</li><li>服务端的 servlet 或 controller接收请求（后端控制路由与渲染页面，整个项目开发的权重大部分在后端）</li><li>调用 service,dao 代码完成业务逻辑</li><li>返回 jsp</li><li>jsp 展现一些动态的代码</li></ul><p>新的方式是：</p><ul><li>浏览器发送请求</li><li>直接到达 html页面（前端控制路由与渲染页面，整个项目开发的权重前移）</li><li>html 页面负责调用服务端接口产生数据（通过 ajax 等等，后台返回 json格式数据，json 数据格式因为简洁高效而取代 xml）</li><li>填充 html，展现动态效果，在页面上进行解析并操作 DOM。</li></ul><p>总结一下新的方式的请求步骤：</p><p>大量并发浏览器请求 ---&gt; web 服务器集群 (nginx) ---&gt;应用服务器集群 (tomcat) ---&gt; 文件 / 数据库 / 缓存 /消息队列服务器集群</p><p>同时又可以玩分模块，还可以按业务拆成一个个的小集群，为后面的架构升级做准备。</p><p>前后分离的优势。</p><p>1、可以实现真正的前后端解耦，前端服务器使用 nginx。</p><p>前端 / WEB 服务器放的是 css，js，图片等等一系列静态资源（甚至你还可以css，js，图片等资源放到特定的文件服务器，例如阿里云的 oss，并使用 cdn加速），前端服务器负责控制页面引用 &amp; 跳转 &amp;路由，前端页面异步调用后端的接口，后端 / 应用服务器使用 tomcat（把tomcat 想象成一个数据提供者），加快整体响应速度。</p><p>这里需要使用一些前端工程化的框架比如nodejs，react，router，react，redux，webpack 2、发现bug，可以快速定位是谁的问题，不会出现互相踢皮球的现象。</p><p>页面逻辑，跳转错误，浏览器兼容性问题，脚本错误，页面样式等问题，全部由前端工程师来负责。</p><p>接口数据出错，数据没有提交成功，应答超时等问题，全部由后端工程师来解决。</p><p>双方互不干扰，前端与后端是相亲相爱的一家人。</p><p>3、在大并发情况下，我可以同时水平扩展前后端服务器，比如淘宝的一个首页就需要2000 + 台前端服务器做集群来抗住日均多少亿 + 的日均 pv。</p><p>4、减少后端服务器的并发 / 负载压力</p><p>除了接口以外的其他所有 http 请求全部转移到前端 nginx上，接口的请求调用 tomcat，参考 nginx 反向代理 tomcat。</p><p>且除了第一次页面请求外，浏览器会大量调用本地缓存。</p><p>5、即使后端服务暂时超时或者宕机了，前端页面也会正常访问，只不过数据刷不出来而已。</p><p>6、也许你也需要有微信相关的轻应用，那样你的接口完全可以共用，如果也有app相关的服务，那么只要通过一些代码重构，也可以大量复用接口，提升效率。（多端应用）</p><p>7、页面显示的东西再多也不怕，因为是异步加载。</p><p>8、nginx 支持页面热部署，不用重启服务器，前端升级更无缝。</p><p>9、增加代码的维护性 &amp;易读性（前后端耦在一起的代码读起来相当费劲）。</p><p>10、提升开发效率，因为可以前后端并行开发，而不是像以前的强依赖。</p><p>11、在 nginx 中部署证书，外网使用 https 访问，并且只开放 443 和 80端口，其他端口一律关闭（防止黑客端口扫描）， 内网使用http，性能和安全都有保障。</p><p>12、前端大量的组件代码得以复用，组件化，提升开发效率，抽出来！</p><h4 id="java-与-web-的关系">3.1.3 Java 与 Web 的关系</h4><p>一般指的是 JavaEE，开发 Web 领域的应用。</p><p>而且，一般都是有框架的。</p><p>现在呢，则是前后端分离，我们观察淘宝京东这些网站就可以知道，在请求网页的时候，一般后台都是在请求大量的json 数据，这个就是分离出来的后端返回的数据。</p><h2 id="实习的收获与体会">4、实习的收获与体会</h2><p>本次实习的收获很多。</p><p>主要是对前后端分离这个思想学到了很多。</p><p>然后就是学会了团队之间的合作。有时候，一个项目不是一个人独自就能够完成的，这时候，寻找合作的伙伴是一件很明智的事情。以后到公司里面，一个项目，一个模块，也都不是一个人单独就能够完成的。如果要自己创业，一个人能够完成的事情其实也是有限的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于华为实习申请表的导师签字或者学院盖章的问题说明</title>
    <link href="/2022/08/31/%E5%85%B3%E4%BA%8E%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7%E8%A1%A8%E7%9A%84%E5%AF%BC%E5%B8%88%E7%AD%BE%E5%AD%97%E6%88%96%E8%80%85%E5%AD%A6%E9%99%A2%E7%9B%96%E7%AB%A0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/08/31/%E5%85%B3%E4%BA%8E%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7%E8%A1%A8%E7%9A%84%E5%AF%BC%E5%B8%88%E7%AD%BE%E5%AD%97%E6%88%96%E8%80%85%E5%AD%A6%E9%99%A2%E7%9B%96%E7%AB%A0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>当初实习的时候，因为需要这个填写这个申请表，其他公司大部分不需要这个发完offer 确认就可以了。华为的实习是发完 offer 还要写一下那个签字表。</p><p>经过我的验证，好吧，其实是同为实习生的同事的验证，这个表是可以自己签的，到时提交上去之后不会有后续的查证之类。</p><p>我是本科生，所以我站在本科生的角度来考虑一下这个问题，这种表其实学院是很难去给签字的，因为学院也有自己的考量，学院如果签下了这个东西，之后如果有什么情况的话，学院是可能要负责任的。我们都有各自的难处。不过，如果有熟悉的老师愿意帮忙的话，这个就是很好解决的了。</p><p>所以，最后的结论是，如果最后学院和老师都不愿意帮忙的话，那么，就自己签字吧。遵守相关的规定就可以了。</p><p>以上。</p><p>为了防止后来人会有和我实习前一样的迷茫。所以我在实习的时候就关注了一下这个问题，也问了部门的人，这个的问题是不大的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 设置 tab 为 4 个空格</title>
    <link href="/2022/08/30/vim-%E8%AE%BE%E7%BD%AE-tab-%E4%B8%BA-4-%E4%B8%AA%E7%A9%BA%E6%A0%BC/"/>
    <url>/2022/08/30/vim-%E8%AE%BE%E7%BD%AE-tab-%E4%B8%BA-4-%E4%B8%AA%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>这是一个老生常谈的问题，也设置过不止一次，但是就是没有记录过！该死。</p><p>还是记录一下吧。这是比较简单的配置，配置项的具体理解也比较简单，对照着文档来看的话是不难理解的。所以这里就直接记录一下我的设置，方便以后再次配置这个的时候能够快速在自己的笔记里面找到这个内容，</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vimrc">:set tabstop=4<br>:set softtabstop=4<br>:set shiftwidth=4<br>:set expandtab<br></code></pre></div></td></tr></table></figure><p>其实还有一个选项可以配置，</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vimrc">:set autoindent<br></code></pre></div></td></tr></table></figure><p>但是，我不太想设置这个自动缩进，因为它其实是不太智能的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>裁剪图片的简易工具？</title>
    <link href="/2022/08/29/%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E7%9A%84%E7%AE%80%E6%98%93%E5%B7%A5%E5%85%B7%EF%BC%9F/"/>
    <url>/2022/08/29/%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E7%9A%84%E7%AE%80%E6%98%93%E5%B7%A5%E5%85%B7%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>我的选择是 Figma，虽然这是一个原型设计类的网站(软件)。</p><p>主要是是 Windows 自带的切图的软件太难用了，不好控制。</p><p>而我们的 Figma呢，切图是可以达到像素级别的哦，嗯，有点牛刀杀鸡用的感觉，但是它是像素级，嗯。</p><p><img src="https://i.imgur.com/k01J1uU.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal 如何取消这个 Ctrl + v 的快捷键</title>
    <link href="/2022/08/29/Windows-Terminal-%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E8%BF%99%E4%B8%AA-Ctrl-v-%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/08/29/Windows-Terminal-%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E8%BF%99%E4%B8%AA-Ctrl-v-%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>为什么会有这个需求呢？因为我的 vim 需要使用 <code>Ctrl + v</code>这个操作，在 normal 模式下，我需要使用 <code>Ctrl + v</code> 来进入列的<code>visual</code> 模式。然后，其实这个 <code>Ctrl + c</code>也是有点多余，所以也一并修改了吧，做法其实很简单，就是在配置文件中将相应的快捷键给注释掉就可以了，</p><p><img src="https://i.imgur.com/r05qdCG.png" /></p><p><img src="https://i.imgur.com/4kbXvo8.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows Terminal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何修改 VSCode 中 vim 插件的撤销的行为，使其和 VSCode 默认的撤销一致</title>
    <link href="/2022/08/29/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-VSCode-%E4%B8%AD-vim-%E6%8F%92%E4%BB%B6%E7%9A%84%E6%92%A4%E9%94%80%E7%9A%84%E8%A1%8C%E4%B8%BA%EF%BC%8C%E4%BD%BF%E5%85%B6%E5%92%8C-VSCode-%E9%BB%98%E8%AE%A4%E7%9A%84%E6%92%A4%E9%94%80%E4%B8%80%E8%87%B4/"/>
    <url>/2022/08/29/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-VSCode-%E4%B8%AD-vim-%E6%8F%92%E4%BB%B6%E7%9A%84%E6%92%A4%E9%94%80%E7%9A%84%E8%A1%8C%E4%B8%BA%EF%BC%8C%E4%BD%BF%E5%85%B6%E5%92%8C-VSCode-%E9%BB%98%E8%AE%A4%E7%9A%84%E6%92%A4%E9%94%80%E4%B8%80%E8%87%B4/</url>
    
    <content type="html"><![CDATA[<p>要想达到这个目标，其实我们可以这样做——给 vim 插件单独配置一份 vimrc配置，然后将 vim的撤销操作重新映射一下，使其一个单词一个单词的撤销。但是，经过我的试验，发现vim 插件不能够正确地读取并应用这个配置。</p><p>因此，采用了另一种思路，就是直接利用这个 vim 插件在<code>settings.json</code> 文件中可以设置的配置，将 <code>normal</code>模式下的 <code>u</code> 给重新映射一下，映射成 VSCode本身的撤销操作，这样就可以了，</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;vim.normalModeKeyBindingsNonRecursive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;u&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;undo&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;C-r&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;redo&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></div></td></tr></table></figure><hr /><p>参考；</p><p>1、<a href="https://github.com/vscodevim/vim/issues/1490"class="uri">https://github.com/vscodevim/vim/issues/1490</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 如何设置撤销的粒度</title>
    <link href="/2022/08/29/vim-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%92%A4%E9%94%80%E7%9A%84%E7%B2%92%E5%BA%A6/"/>
    <url>/2022/08/29/vim-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%92%A4%E9%94%80%E7%9A%84%E7%B2%92%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>我们知道，vim的撤销是分块的，每一次撤销，就撤销掉一个块，而这个块是什么呢？简单来讲，就是两次<code>Esc</code> 之间的修改，也就是说，vim 撤销的序列是以<code>Esc</code> 这个操作为分割的，至少，在 insert模式下是这个样子。</p><p>然后，我们会发现，我们在使用 <code>u</code>进行撤销的时候，很多时候会直接撤销掉一整行，或者好几行，而在 VSCode这样的 IDE中，一般我们一次撤销只会撤销掉一个单词。当然，中文的撤销其实还是不是那么智能，但是对于我们写代码来讲，做到这种程度已经足够了。</p><p>所以，我们如何将 vim的撤销的粒度给修改成为类似于一个单词一个单词的撤销呢？</p><p>很简单，只需要在 vim 的配置文件中添加一个映射即可，</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vimrc">:inoremap &lt;Space&gt; &lt;Space&gt;&lt;C-g&gt;u<br></code></pre></div></td></tr></table></figure><p>当然，也可以选择一个字符一个字符的撤销，但是那样就和 <code>x</code>的功能重复了。所以我的方案就暂且是这个样子。</p><hr /><p>参考：</p><p>1、<ahref="https://stackoverflow.com/questions/2895551/how-do-i-get-fine-grained-undo-in-vim"class="uri">https://stackoverflow.com/questions/2895551/how-do-i-get-fine-grained-undo-in-vim</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实习总结</title>
    <link href="/2022/08/28/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2022/08/28/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>从时间上来讲，这一次实习刚好是两个月。</p><p>要说还想继续实习下去，其实是有点不想了，但是实习这段经历却让我感觉很有收获。应该和小组的氛围有关，我所在的这个小组，同事之间相处的氛围是比较好的。</p><p>我的师父显然不是年轻人了，虽然外表看上去是比较年轻的。不过，由于他们十几年前也都是和我们一样在大学里逍遥的大学生，所以交流起来一点障碍都没有，心态很年轻。</p><p>总共感觉也没有实习多长时间。在实习的那些时间里，我与公司的电脑是比较亲近的。公司发配的电脑是联想的一台mini 主机，内存是16GB，说实话不够用，隔壁的承峰哥帮我调试问题的时候，就嫌弃我的电脑太卡，毕竟他们的电脑都是32GB 内存起步的。好在固态是 1T 大小，这一点用起来还算是比较舒心。</p><p>在公司的主旋律呢，我觉得是学习。第一周基本上是熟悉办公环境，配置一下工作的环境，然后就按照自己的节奏来。从一开始我的师父就比较忙，谁让他是架构师呢，虽然是架构师，但是感觉比学校软件体系结构的长清老师要更有亲和力，嗯，在技术方面也更加有说服力。好在实习生的优先级不是很高，大体上就按照师父的安排来进行学习即可。一开始是学习小组的整体业务，然后按照师父的安排去学习微服务相关的知识。再到后面就是学习和公司实际生产相关的技术，比如k8s，比如docker，但是由于公司对于虚拟机的设置，以及实习生的权限比较低，在 k8s这一块其实没有进行充分的学习。</p><p>顺带着讲一下我个人的情况，在计算机这一块，我算是比较着迷的一类人，闲下来没有事情的时候，总是想要对着计算机敲几下，逛一逛程序员论坛，去看一下我了解的一些技术的最新新闻，关注一下各个领域的最新技术等等，我还记得在实习的主管面的时候，面试官问我有没有关注什么最新的技术，我就回答了Python 的新框架，Mozilla的新技术等等，在实习这段时间里，由于白天基本上都是待在公司里，晚上回到住处基本上就直接休息了，所以这两个月来对于新技术是没有什么关注了，顶多是保持着逛一逛技术论坛的习惯，不过呢，我认为实习的收获当然是相当大的，比起我自己在网上瞎逛八逛那是不知道要好到了哪里去了。说起来，我在上个周末面试一个公司的远程实习，然后面试官也问了我最近有没有关注什么新技术呀，这一次我当然就没什么可说了，因为我在工作呀(笑)。</p><p>说起来，在工作或者说学习这一块，我师父很细心地把我安排在了承峰哥的旁边，他是入职刚满一年的新员工，和我的年龄相仿，在遇到问题时，我也可以先向其请教，这一点真的很方便。承峰哥自封“maven大师”，这一点我承认，一开始跑公司的项目时，我在 maven这一块对于多模块的项目不是很熟悉，因为以前自己搞的多是单体应用，然后呼唤承峰哥，三下两下就解决了，真是让人感叹，这就是经验的力量呀。如果是我自己在那里一个人搞，指不定就要花上数倍的时间。后面在处理问题单的时候，承峰哥也给了我很大的帮助，最后还带着我走了一下出包的流程，真的可以说是手把手教学，我愿称之为“正义的伙伴”，有求必应。</p><p>整体看来，小组给我的感觉是扁平化管理，大概是因为大家都是搞技术的，每天的关注点都是如何去解决实际问题，所以，所有人相处起来都很舒适。当然，小组的年轻人还比较多，他们相处起来就更加轻松了。在熟悉公司的工作流程这一块，玉程哥给我的帮助也很大，从零到一教会了我如何去改问题单。关于这一点，我专门在3ms 上写了一篇博客。然后说一下我对这个问题单的感想，其实这个就是issues，因为我以前没有实习过，所以真正见识到公司的代码管理解决方案，这还是头一次，这个第一次就给了我很好的体验，我平时用GitHub 比较多，我们公司的话，用的是 GitLab 的定制版，在 issues 这一块和GitHub是很像的。一开始听同事们说问题单我不能理解，什么问题单？测试提问题单还要专门搞一个格式吗？后来才知道原来就是issues，这么一说就柳暗花明了嘛。还有公司的合并代码叫做<code>Merge Request</code>，即 <code>MR</code>，而 GitHub 上用的是<code>PR</code>，一开始也让我觉得有点新奇，但就这个问题而言，我是觉得<code>MR</code> 更加合适。</p><p>经过两个月的实习，我认为我的收获是比较大的。首先是公司对于实习生的限制不是很多，这里的限制不是指公司的内部的权限之类，而是公司对实习生的任务安排，对于实习生，公司并不会安排很多事情，在一定程度上，公司的大部分实习生都是比较自由的，至少大部分小组是这个样子的，这一点从整个实习生的welink群里也可以看出来，大家一开始基本上都是在导师的安排下进行学习，然后因为实习的性质，也不会去参加到很重要的公司的项目的代码的实际开发过程中去，从这里可以看出来，公司对于安全这一块做得可以说是相当的谨慎以及严密。而且，在学习公司项目之前，是要先学习公司的代码规范，这个规范在我看来是十分细致的，比起学校里面教的内容和自己平时所学的内容，多了很多相当于"BestPractice"的规范，这个在实际的工程中是能够大大提高代码的鲁棒性的。然后就是公司的统一异常处理，在异常里面设置的信息这个是不能够自己随意写的，而是要去找产品经理设计，然后英文的提示语句还要发邮件给翻译部去作专业的翻译。然后是代码的review，这个 review有严谨的打分机制，代码的评审也有很多规范，经过这些道程序，我想，代码中的坏味道应该是被消灭得不剩多少了吧。</p><p>除了这些，我认为我的最大的收获就是利用这一次的实习机会，掌握了 vim的基本用法。以前在学校也偶尔萌生过学习的想法，可是由于种种原因，还是去学习IDE的快捷键去了。由于实习的前两周，没什么具体的任务，我就利用这段时间强迫自己使用vim(nvim)，先是在 VSCode 中使用 vim 插件，然后再在 IDEA 中使用 vim插件，再转到neovim，当然，只是学习了它的编辑的用法和一些其他方面的提升效率的操作，并没有在插件这一块折磨，也是因为看了公司的国柱大佬的博客——用vim 漫游代码，了解到 vim的基本操作对于我们日常的工作已经足矣，于是就潜心学习 vim的用法，经过两个星期的磨合，这一次总算是可以说掌握了 vim 的基本用法，用vim 漫游代码是可以熟练做到了。以及，现在使用主流的编辑器已经离不开 vim插件了。</p><p>其他的方面，公司的周三和周五属于活动日，也有各种各样的活动可以参加。我本身对于乒乓球是比较爱好的，所以会经常在下班之后去百草园去和同事打一会儿乒乓球。同事们都比较友好，这一点和在学校里面打乒乓球没什么区别，唯一的缺点就是百草园的乒乓球馆没有空调，而且收费很贵，要25 元一小时，在学校，最贵的乒乓球馆也只要 6块钱，空调还是免费开放的。当然啦，这里打球的氛围是比学校里要浓厚的，在这里，我会经常和另一位实习生切磋，最后，他教会了我反手的弧圈。我曾经在一个论坛的招聘帖子里面看到，招聘者对应聘者有一点期待，就是有一门业余的爱好，并且达到top 级别，我想，经过此番的磨练，我大概可以达到这个要求了。</p><p>小组的其他同事给我的感觉也都非常友好。玉程哥，西银哥，世创哥，还有祥华、耿明、灿哥以及新入职的林伟和奕醇哥，当然，最热情的肯定是我师父，还有承峰哥了，而且他们都会请我吃饭(笑)。</p><p>在这里，我感受到了团队的氛围非常地友好，总之，这一次的实习经历让我感到非常幸运，也非常感激小组所有人的热情与帮助。希望日后有机会能够一起共事。</p><p>以上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA vim 打通系统剪贴板</title>
    <link href="/2022/08/28/IDEA-vim-%E6%89%93%E9%80%9A%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    <url>/2022/08/28/IDEA-vim-%E6%89%93%E9%80%9A%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>直接在 IDEA 里面创建 .ideavimrc 就可以了。这个配置文件也是默认放在home 目录下的。</p><p>然后，其实这个配置文件我们就可以像在我们自己的 vim中一样来进行配置了。这里我们只需要设置一下剪贴板，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> clipboard=unnamed<br><span class="hljs-built_in">set</span> clipboard+=ideaput<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/o1IE8Ml.png" /></p><p><img src="https://i.imgur.com/ei6uHES.png" /></p><p><img src="https://i.imgur.com/eQ98JgD.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>how to add gitignore file for c# project</title>
    <link href="/2022/08/27/how-to-add-gitignore-file-for-c-project/"/>
    <url>/2022/08/27/how-to-add-gitignore-file-for-c-project/</url>
    
    <content type="html"><![CDATA[<p>There are many ways to achieve this goal, but, for me, my favouriteis to run this command in terminal,</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dotnet new gitignore<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Little Tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio 2022 shortcut for c# recordings</title>
    <link href="/2022/08/27/Visual-Studio-2022-shortcut-for-c-recordings/"/>
    <url>/2022/08/27/Visual-Studio-2022-shortcut-for-c-recordings/</url>
    
    <content type="html"><![CDATA[<p>After two days of using Visual Studio, my prejudice on it disappears,to some extend.</p><p>Then, I want to learn to use it more effectively. Emmm, that'sit.</p><p>Just to record some of the shortcuts belonging to VS2022, I likeit.</p><blockquote><p>Run current test.</p></blockquote><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">Ctrl + R, <span class="hljs-built_in">T</span><br></code></pre></div></td></tr></table></figure><blockquote><p><code>Console.WriteLine()</code>.</p></blockquote><p>Just press <code>cw</code>, then press <code>Tab</code> twice. I knewit must have been a convenient way to output the 'print' clause.</p>]]></content>
    
    
    
    <tags>
      
      <tag>VS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio 2022 如何设置 vim 插件的系统剪贴板</title>
    <link href="/2022/08/27/Visual-Studio-2022-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE-vim-%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    <url>/2022/08/27/Visual-Studio-2022-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE-vim-%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>问题的起因是，在将 Java 版本的二叉树的工具类转移到 C#中时，有些符号需要从 VSCode 中复制到 VS 中去，由于两个 IDE 我都使用了vim 插件，所以打通系统剪贴板很有必要。</p><p>好吧，其实，对于每一个使用 vim 插件的 IDE 来说，开启 vim的系统剪贴板都是有必要的。</p><p>我们打开 VS 的 vim 配置，看一下配置文件的规则，</p><p><img src="https://i.imgur.com/wKN4b4F.png" /></p><p>然后，我们再在 VS 中执行 <code>:set</code> 命令看一下<code>.vimrc</code> 文件需要放在哪里，</p><p><img src="https://i.imgur.com/rnNSY2J.png" /></p><p>之后我们在相应的目录下创建 <code>.vimrc</code>文件，然后加上下面的语句即可，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> clipboard=unnamed<br></code></pre></div></td></tr></table></figure><p>注意，由于这个 VS 插件所支持的 vim 版本比较低，所以，不可以使用<code>unnamedplus</code> 这个值。</p><p>顺带说一句，neovim 打通系统剪贴板是可以使用 <code>unnamedplus</code>的，是有效的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>VS</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何关掉 Visual Studio 烦人的提示音？</title>
    <link href="/2022/08/25/%E5%A6%82%E4%BD%95%E5%85%B3%E6%8E%89-Visual-Studio-%E7%83%A6%E4%BA%BA%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3%EF%BC%9F/"/>
    <url>/2022/08/25/%E5%A6%82%E4%BD%95%E5%85%B3%E6%8E%89-Visual-Studio-%E7%83%A6%E4%BA%BA%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>问题主要是，我在使用 vim 插件的时候，光标移动到最右边的时候，如果再按<code>l</code>往右移动的话，那么，系统就会给我发出蜂鸣声，实在不能忍受，于是想把它给关掉。</p><p>这个好像似乎没有办法在 VS里面直接设置。所以我就直接把整个系统的这个蜂鸣的声音给关掉了，</p><p><img src="https://i.imgur.com/YVamHmD.png" /></p><p><img src="https://i.imgur.com/X8IVKuD.png" /></p><p>好像选得有点不对，反正设置的入口就在这里。找一下，设置一下就可以了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Visual Studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 定制 nodejs 运行快捷键</title>
    <link href="/2022/08/24/VSCode-%E5%AE%9A%E5%88%B6-nodejs-%E8%BF%90%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/08/24/VSCode-%E5%AE%9A%E5%88%B6-nodejs-%E8%BF%90%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>问题的场景呢，是想借着使用 js 同时刷一下算法题，然后学习一下 js的基本使用。然后在 VSCode 中配置一下最方便。</p><p>首先是要安装 <code>multi-command</code>这个插件的。然后定制快捷键即可。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+f5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;extension.multiCommand.execute&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;when&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;editorTextFocus &amp;&amp; editorLangId == &#x27;javascript&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;sequence&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;workbench.action.files.saveAll&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clear \u000D&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;workbench.action.terminal.focus&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;workbench.action.terminal.sendSequence&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node &#x27;$&#123;file&#125;&#x27;\u000D&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;workbench.action.focusActiveEditorGroup&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DataGrip 如何去掉 SQL 语句的边框</title>
    <link href="/2022/08/23/DataGrip-%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89-SQL-%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%BE%B9%E6%A1%86/"/>
    <url>/2022/08/23/DataGrip-%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89-SQL-%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%BE%B9%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<p>这个绿色的边框，怎么说呢，效果其实还可以，就是反应有点老年痴呆，算是有点鸡肋吧。不要这个装饰也罢。</p><p>以前好像搜索过这个设置，但是没有搜索到，现在英文的水平有所提高，一下子就在Google 上搜索到了。</p><p><code>Settings &gt; Editor &gt; Color Scheme &gt; Database</code>。</p><p><img src="https://i.imgur.com/brphJ3Z.png" /></p><p>说起来，把代码警告和这个绿色边框以及拼写检查之类的去掉之后，不考虑内存的使用，这个DataGrip 的功能性还是很符合我的需求的。比起 Navicat肯定是要更好的啦。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Jetbrains</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的集合的常用操作(个人)</title>
    <link href="/2022/08/23/Java-%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E4%B8%AA%E4%BA%BA/"/>
    <url>/2022/08/23/Java-%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E4%B8%AA%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>反转一个 List，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; list = ...;<br>Collections.reverse(list);<br></code></pre></div></td></tr></table></figure><p>这里是原地修改。</p><p>如果想整一个 <code>copy</code> 出来，由于 List 无法访问<code>clone()</code> 方法，那么，我们可以这样做，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;?&gt; shallowCopy = list.subList(<span class="hljs-number">0</span>, list.size());<br>Collections.reverse(shallowCopy);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 流式编程的一些小 Snippets</title>
    <link href="/2022/08/23/Java-%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F-Snippets/"/>
    <url>/2022/08/23/Java-%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F-Snippets/</url>
    
    <content type="html"><![CDATA[<p>关于 Java的流式编程，学起来容易理解，但是用起来的话，还是得多用，一天不用就很容易忘掉。</p><p>整理一下常用的 snippets，以免隔一段时间就要去 stackoverflow去重新看一遍。</p><p>将 String 类型的 List 转成 String 类型的数组。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;what&quot;</span>);<br>System.out.println(list);<br>String[] strings = list.toArray(String[]::<span class="hljs-keyword">new</span>);<br>System.out.println(Arrays.toString(strings));<br></code></pre></div></td></tr></table></figure><p>将 Integer 类型的 List 转成 String 类型的数组。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; integerList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>System.out.println(integerList);<br>String[] intStrings = integerList.stream().map(a -&gt; a.toString()).toArray(String[]::<span class="hljs-keyword">new</span>);<br>System.out.println(Arrays.toString(intStrings));<br></code></pre></div></td></tr></table></figure><p>将 <code>List&lt;Integer&gt;</code> 转为<code>List&lt;String&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; integerList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>List&lt;String&gt; stringList = integerList.stream().map(a -&gt; a.toString()).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><p>将 <code>int[]</code> 转换为 <code>List&lt;Integer&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] ints = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>List&lt;Integer&gt; list = Arrays.stream(ints).boxed().collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><p>使用流式编程声明数组。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> [] myIntArray = IntStream.range(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>).toArray(); <span class="hljs-comment">// From 0 to 99</span><br><span class="hljs-type">int</span> [] myIntArray = IntStream.rangeClosed(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>).toArray(); <span class="hljs-comment">// From 0 to 100</span><br><span class="hljs-type">int</span> [] myIntArray = IntStream.of(<span class="hljs-number">12</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">85</span>, <span class="hljs-number">28</span>, <span class="hljs-number">96</span>, <span class="hljs-number">47</span>).toArray(); <span class="hljs-comment">// The order is preserved.</span><br><span class="hljs-type">int</span> [] myIntArray = IntStream.of(<span class="hljs-number">12</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">85</span>, <span class="hljs-number">28</span>, <span class="hljs-number">96</span>, <span class="hljs-number">47</span>).sorted().toArray(); <span class="hljs-comment">// Sort </span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>neovim(vim) 的搜索和替换</title>
    <link href="/2022/08/21/neovim-vim-%E7%9A%84%E6%90%9C%E7%B4%A2%E5%92%8C%E6%9B%BF%E6%8D%A2/"/>
    <url>/2022/08/21/neovim-vim-%E7%9A%84%E6%90%9C%E7%B4%A2%E5%92%8C%E6%9B%BF%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>有时候 copy 别人的代码，这个搜索替换的功能还是挺实用的。</p><p>主要是面向实用。先拣几个常用的指令记录一下。</p><p>全局搜索替换所有符合条件的字串：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">:%s/foo/bar/g<br></code></pre></div></td></tr></table></figure><p>foo 是待替换的字符串，bar 是替换后的字符串。</p><p>如果想确认每一个替换，那么，可以在结尾加一个 <code>c</code>选项：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">:%s/foo/bar/gc<br></code></pre></div></td></tr></table></figure><p>如果是当前行而非全局替换的话，那么，把 <code>%</code> 去掉即可。</p><p>复杂一点的通配符的话，下次再学。</p><p>2022.09.11 更新</p><p>来学一点多样化操作。</p><p>批量替换的操作。</p><p>语法：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">:[addr]s/source_string/dest_string/[option]<br></code></pre></div></td></tr></table></figure><p>其中，<code>[addr]</code> 表示范围，省略时表示当前行。</p><ul><li><code>1,20</code>：表示从 1 到 20 行。</li><li><code>%</code>：表示整个文件，这个应该不用多说了吧。同<code>1,$</code>。</li><li><code>.,$</code>：从当前行到文件末尾。</li></ul><p><code>[option]</code> 表示操作类型。</p><ul><li><code>g</code>：表示进行全局替换。</li><li><code>c</code>：表示替换时需要我们一个一个确认。</li></ul><p>2022.09.20 更新</p><p>对于特殊字符的处理，我们需要加上转义符：</p><p><code>^</code>、<code>$</code>、<code>*</code>、<code>/</code>、<code>\</code>和 <code>.</code> 都需要转义，前面加上 <code>\</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单记录一下我搭建听音乐的环境</title>
    <link href="/2022/08/21/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E6%88%91%E6%90%AD%E5%BB%BA%E5%90%AC%E9%9F%B3%E4%B9%90%E7%9A%84%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/08/21/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E6%88%91%E6%90%AD%E5%BB%BA%E5%90%AC%E9%9F%B3%E4%B9%90%E7%9A%84%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>2022.08.28 更新。</p><p><img src="https://i.imgur.com/XoyVdqw.png" /></p><p>Spotify 的 web 版又可以用了，这个的体验，整体上来说是比 Youtube Music要好的。这样一来，就放弃了 Music Bee。然后又因为是 Web版，用户可以真正的扮演一把用户，体验一把当家做主的感觉，所以，广告，是没有滴，会员，暂时也是不会充滴。</p><hr /><p><img src="https://i.imgur.com/cneQ1tp.png" /></p><p>Youtube Music 被地区限制了，又重回老路，折腾了一下这个 MusicBee。</p><p>距离上次使用，这个软件肯定是更新了几版，现在更加好看了，好用也很好用。在Win11 下的表现比较符合我的审美。</p><p>整了一点歌曲，主要是从网上搜罗来的豆瓣 top250 的专辑，是 2017年的，那时 MLA 还没有被封杀，呵。</p><p>然后，让我不能理解的是，top250 竟然没有beyond？！应该是假的榜单吧。真是的。看在都是 flac这个质量，就不去计较了。</p><p>这个几千首歌够听一阵子了。</p><p>然后就是自己去单独整了一下 beyond 的我喜欢的一些。</p><p>听歌的耳机是森海的 IE40 Pro，设备是 msi 的 gp76 RTX3080 i7-11800H版本，内存自己换了英睿达的 64GB ddr4 3200Hz。设备是支持 HiRes的。嗯。</p><p>至于 MLA，有些时候还是得去 Youtube 去听一下啊。这个豆瓣 Top250里面只有比较老的三张专辑，好在比没有要好。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>how to set git editor to neovim</title>
    <link href="/2022/08/21/how-to-set-git-editor-to-neovim/"/>
    <url>/2022/08/21/how-to-set-git-editor-to-neovim/</url>
    
    <content type="html"><![CDATA[<p>Quite simple, just execute this in command line:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global core.editor &quot;nvim&quot;<br></code></pre></div></td></tr></table></figure><p>reference: <ahref="https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-editing-commit-messages">stackoverflow</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何给 hexo-fluid 主题添加 disqus 评论</title>
    <link href="/2022/08/21/%E5%A6%82%E4%BD%95%E7%BB%99-hexo-fluid-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-disqus-%E8%AF%84%E8%AE%BA/"/>
    <url>/2022/08/21/%E5%A6%82%E4%BD%95%E7%BB%99-hexo-fluid-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-disqus-%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>其实在 Hexo 中设置这个 disqus评论还有有点复杂的，也有可能是我使用过的 <code>fluid</code> 和<code>butterfly</code> 这两个主题没有设置好配置项，然后呢，disqus本身也没有给好配置的文档。倒不是英文的缘故，属实是文档写得不太行。</p><p>总体看来，如果有一篇好的文档来指导的话，配置起来是很容易的，也很方便。遗憾的是，我在搜索引擎中并没有搜索到。</p><p>所以的话，这件事情还是由我来亲自，亲自解决吧。</p><p>首先，来到下面这个 disqus 的 api 入口：</p><p><a href="https://disqus.com/api/applications/"class="uri">https://disqus.com/api/applications/</a></p><p><img src="https://i.imgur.com/QGdTBv5.png" /></p><p>然后来到下一步，</p><p><img src="https://i.imgur.com/y0QMcrk.png" /></p><p><img src="https://i.imgur.com/U0RquOj.png" /></p><p><img src="https://i.imgur.com/NWG8lJU.png" /></p><p>然后 savechanges，这里有些东西不用填的，看我的截图自行选择，然后再点击一下这个<code>Applications</code>，</p><p><img src="https://i.imgur.com/kgjRYO0.png" /></p><p>把 public key 整到这里，</p><p><img src="https://i.imgur.com/2KIEXkT.png" /></p><p>最后我们还需要把这个 shortname 给填上，看看下面我的操作，</p><p><img src="https://i.imgur.com/gRSQmox.png" /></p><p><img src="https://i.imgur.com/jJL7Q4I.png" /></p><p><img src="https://i.imgur.com/PTAlGXw.png" /></p><p><img src="https://i.imgur.com/bc0x8ke.png" /></p><p>到这里其实就 ok 了。</p><p>最后提一嘴，要把评论的开关给打开，这一点就可以参考 hexo相应的主题的官方文档了。</p><p>以上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何给 PowerShell 设置命令别名</title>
    <link href="/2022/08/21/%E5%A6%82%E4%BD%95%E7%BB%99-PowerShell-%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%E5%88%AB%E5%90%8D/"/>
    <url>/2022/08/21/%E5%A6%82%E4%BD%95%E7%BB%99-PowerShell-%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%E5%88%AB%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>主要参考微软的<ahref="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-7.2">官方文档</a>，然后还有涉及到其他的关于这个alias 的操作，文档的底部也有相应的 Related Links:</p><p><img src="https://i.imgur.com/aGIdvUv.png" /></p><p>主要的需求是给 <code>nvim</code> 设置别名为<code>vim</code>，所以直接执行执行以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">New-Alias -Name &quot;vim&quot; nvim<br></code></pre></div></td></tr></table></figure><p>之后就可以使用 vim 这个别名了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 hexo 的 ERROR Database load failed. Deleting database.</title>
    <link href="/2022/08/21/%E8%A7%A3%E5%86%B3-hexo-%E7%9A%84-ERROR-Database-load-failed-Deleting-database/"/>
    <url>/2022/08/21/%E8%A7%A3%E5%86%B3-hexo-%E7%9A%84-ERROR-Database-load-failed-Deleting-database/</url>
    
    <content type="html"><![CDATA[<p>相信很多人最近都出现了这个问题。</p><p>最新版本的 nodejs <code>18.6.0</code>，每次一来一回——每两次<code>hexo g -d</code> 必然有一次要报一个这样的错，然后下一次执行这个<code>hexo g -d</code> 命令时就会变得巨慢。</p><p>那么，如何解决这个问题呢？</p><p>GitHub 上有这个 <ahref="https://github.com/hexojs/hexo/issues/5022">issue</a>，其状态已经是<code>closed</code> 了。</p><p>我提炼出来的方法是这个，</p><p><img src="https://i.imgur.com/Ys2LakE.png" /></p><p>然后我试完了之后发现不行，去查看 <code>warehouse</code>的版本，发现没变，升级完 hexo 也不行。</p><p>经过试验，发现需要修改博客根目录下的 <code>package.json</code> 中的hexo 版本，</p><p><img src="https://i.imgur.com/S9U85zJ.png" /></p><p>我之前没动过，一直是<code>5.0.0</code>，然后修改完之后，再把这个根目录下的<code>node_modules</code> 和 <code>package-lock.json</code>给删掉，再执行一下 <code>npm install</code>，之后发现问题得到解决。</p><p>再去到 <code>package-lock.json</code> 中看 warehouse 的版本，发现变成<code>^4.0.1</code> 了，但是也可以看到，这个文件里面使用<code>warehouse-4.0.2</code> 版本的身影的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经典永流传之反转链表</title>
    <link href="/2022/08/20/%E7%BB%8F%E5%85%B8%E6%B0%B8%E6%B5%81%E4%BC%A0%E4%B9%8B%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/08/20/%E7%BB%8F%E5%85%B8%E6%B0%B8%E6%B5%81%E4%BC%A0%E4%B9%8B%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>今天面试一个远程实习，国外做旅游的。沾一点 web3。</p><p>前面无非是那一套，然后最后肯定是一个经典的算法环节，给的是白板编程环境。连代码提示都没有，说实话，还好是写这道经典题，不然有些库函数写不出来还是有点尴尬的。</p><p>我也是用递归来写的，不过是我自己想的尾递归，不是网上流传很广的先递归进去的那种版本。所以之后就还和面试官讨论了一下，显然他熟悉的是那一种递归。</p><p>最后 battle 的结果是他认同了我的做法，毕竟我平时也是在 VSCode中验证过的嘛。</p><p>贴一下我的思路。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> recurse(head, head.next);<br>        head.next = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">recurse</span><span class="hljs-params">(ListNode cur, ListNode next)</span> &#123;<br>        <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> cur;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> next.next;<br>        next.next = cur;<br>        <span class="hljs-keyword">return</span> recurse(next, tmp);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">solu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>);<br>        head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">2</span>);<br>        head.next.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">3</span>);<br>        head.next.next.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> solu.reverseList(head);<br>        <span class="hljs-keyword">while</span> (res != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(res.val);<br>            res = res.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当然，最简单的方法肯定是直接模拟。直接上两个指针，不过，如果对递归比较熟悉的话，写这个递归的版本呢肯定是要更加快一点的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>neovim 如何从 swp 文件中恢复</title>
    <link href="/2022/08/20/neovim-%E5%A6%82%E4%BD%95%E4%BB%8E-swp-%E6%96%87%E4%BB%B6%E4%B8%AD%E6%81%A2%E5%A4%8D/"/>
    <url>/2022/08/20/neovim-%E5%A6%82%E4%BD%95%E4%BB%8E-swp-%E6%96%87%E4%BB%B6%E4%B8%AD%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>今天遇到了一个这样的问题，电脑在重启的时候没有保存 nvim当前的界面，然后，重启之后再用 nvim 打开这个文件的话，会报警告。</p><p>优雅的方法当然是得从其相应的 <code>.swp</code>文件中进行恢复，因此，可以执行下面这个命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nvim -r filename<br></code></pre></div></td></tr></table></figure><p>然后，还需要将提示的 <code>.swap</code>给删除掉。然后再编辑就没有问题了。</p><p>如果想更加保险的话，可以在恢复界面出来的时候把里面的内容拷贝出来备份一下。</p>]]></content>
    
    
    
    <tags>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>neovim 的目录操作</title>
    <link href="/2022/08/20/neovim-%E7%9A%84%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/08/20/neovim-%E7%9A%84%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>自从使用 neovim 来写 hexo博客之后，就有了一个需求，或者说问题。之前使用 vscode来写博客的时候，我可以 <code>Ctrl + P</code> 来呼出查找文件的面板，然后vsocde是可以模糊搜索的，这个功能是很好用的，尤其是当我有未完成的最近的博客想要来快速定位到它进行继续撰写的时候。</p><p>然后我就想在使用 neovim的时候实现同样的功能，之前一直在实习，白天上班，晚上就不想动电脑了。现在是因为整了一台新的电脑，然后换上了64GB的内存条，这让我觉得她真的是非常地性感。简直像是一个我梦中才会出现并与我约会的高高胖胖的女郎一样，很有原始本能方面的冲动。</p><p>然后今晚到 YT上看了一支影片，简单地看了一眼，就发现，原来这个操作竟然这么简单！！</p><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nvim ./<br></code></pre></div></td></tr></table></figure><p>执行上面这个命令，我们就可以使用 neovim 打开这个界面，</p><p><img src="https://i.imgur.com/O8MVj3y.png" /></p><p>然后我们可以执行与普通的 nvim 界面的一样的操作！！</p><p>选中一个条目，然后 <code>Enter</code> 即可。</p><p>如果想退回这个界面，只需要执行 <code>:e ./</code> 即可。</p><p>真是非常方便呀。</p><p>然后就是，写博客的动力更加强烈了！！！</p><p>现在还有一个感受，就是，感觉能够把 neovim的自有功能给摸透都不是一件容易的事情。插件什么的暂时不用去折腾。或许以后都不用去折腾。如果能够对neovim的自由功能很熟练的话，那么，效率已经可以得到相当程度的提高了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 windows terminal 中文字体过丑的问题</title>
    <link href="/2022/08/20/%E8%A7%A3%E5%86%B3-windows-terminal-%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E8%BF%87%E4%B8%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/20/%E8%A7%A3%E5%86%B3-windows-terminal-%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E8%BF%87%E4%B8%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>使用了一点时间之后来更新：</p><p>这个字体一旦用过一点时间，习惯起来还是很容易的。主要整体的协调性是不差的。但是原来的没有设置过的中文字体确实是不敢恭维。</p><p>原文：</p><p>这个 win11 怎么说呢，之前还记得怎么修改系统的语言设置来使得这个windows terminal 的中文显示是可以保持为微软雅黑的，现在已经忘掉了。</p><p>然后在 v2ex 上看到有人提议去修改系统注册表中的fontlink，我试了一下，发现改完之后在 wt 里面根本不生效，但是 powershell窗口里面却可以正常运作。</p><p>这微软的开发人员很有问题啊，这个问题单已经存了好久了呀，到现在还不解决，真是有够怠惰的。</p><p>我的一个暂时捏住鼻子的做法呢，是设置 windows terminal的字体为"更纱"字体，还能有什么办法呢？只有捏着鼻子认了，这个字体的汉字风格是日系的。好在总算是解决了整体的协调性。真正在代码编辑器里面，肯定还是用其他的字体的。</p><p>我目前用的字体是这个：</p><p><img src="https://i.imgur.com/dXLUWtW.png" /></p><p>Sarasa Mono Slab HC.(这个字体相对来说没那么日系)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周末观影之怪物之子</title>
    <link href="/2022/08/20/%E5%91%A8%E6%9C%AB%E8%A7%82%E5%BD%B1%E4%B9%8B%E6%80%AA%E7%89%A9%E4%B9%8B%E5%AD%90/"/>
    <url>/2022/08/20/%E5%91%A8%E6%9C%AB%E8%A7%82%E5%BD%B1%E4%B9%8B%E6%80%AA%E7%89%A9%E4%B9%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>我对动漫的要求并不高。剧情不要太矫情，你可以矫情个一两处，如果全部都是这个样子，那这个风格实在是让我喜欢不起来。然后就是对话不要太矫情，和前面类似。因为我本身比较矫情，矫情的点就是看不得这个，于是搜罗动漫电影，就找到了这个《怪物之子》看下来的话，整体感觉是很好的。</p><p>我对动漫电影的画质也是比较矫情的，对审查也是比较矫情的，就去搜罗原版资源。B站的且不说有大会员限制，即使没有大会员限制，也不太可能去 B站看，呵，掐头去尾，乱删一通，呵呵。但是这个动漫又比较老了，磁力的话，不太容易下载得到，好在现在动漫花园对接了picpak，对下载这些老资源真的很友好！对我这种追求动漫质量的爱好者来说，可以说是福音了。虽然免费版本只有6GB 的限制，但是又有多少资源是 6GB 以上的呢？我又需要多少呢？把这个picpak这个产品当作中转站的话，可以说是相当优雅。唯一的不好的地方，当然啦，这个肯定是对国内用户的，就是梯子问题。不过还好，新一点的资源直接走磁力下载了，也不是很频繁要看老资源的。</p><p>不要被人云亦云的剧透说这个什么父爱主题啦，什么父爱呀，不就是人与人之间的羁绊嘛。人家是师徒之间，更可以说是朋友之间的羁绊，就好比有俩男的好朋友，义气之交，有些男女偏要把他们扯成断袖，可笑。</p><p>能让我擦鼻涕抹泪的，我觉得都是好的。怪物之子，牛的。说个总结，我是比较喜欢这个电影的。叫动漫也行。</p><p><img src="https://i.imgur.com/Nh25GmA.jpg" /></p><p>熊彻这个人物，应该说属于日本动漫中我很喜欢的一类经典了，在中国的一些网络小说中，这类性格的人也会出现一些，我个人觉得，这些人，以及部分作者，他们的价值观和我类似。不论在现实中经历了多少肮脏，不论怎样在现实中一步一步地改变自己的外在表现，内心的深处总是对那种类似于准绳一样的东西不会忘记，不会真正地摈弃，可以说是一种坚持，“平庸之人的坚持”，我想大概是这个样子。即使被别人说不知变通，思想单纯粗暴云云，亦或是一个中性词，叫做中二，试问又有多少单纯的“少年”会舍弃掉对中二的渴望呢？很自然地联想到《天元突破》，将自己燃烧殆尽，让犹豫什么的都见鬼去吧，让别人口中的什么冲动武断都见鬼去吧，生活需要一点激情，不然还叫什么人生？过家家吗？呵。可是，最后熊彻转生的时候我还是会感到悲伤，本来他可以有大把的时光来继续在妖怪的世界生活，每天砍柴、打渔、赚钱，以及修炼。</p><p>还有一点，孤独。熊彻孤独吗？他确实很孤独，一个人，但是这样自来自往在多数时候是比较方便的，而且不会容易出现崩坏，并且，他身边有同样孤独的人，那只猴子，还有猪脸僧人。</p><p><img src="https://i.imgur.com/FYyH9QD.jpg" /></p><p>又如何，大家一样地孤独，谁都不会对谁敞开心扉，而且，原因在我看来，只是因为“男人”天生带有的性格缘故。这种缘故其实是比较迷人的。我们大家都不说话，不说真话，但是真心相待，或许临死前灵光一闪，交代一二，这样的结局也不是不能够接受。</p><p>熊彻此人是很讨人喜欢的。在当下这个污浊的社会，现实中如果真的有这样的人，在哪里都会是非常闪光的存在，会受很多人欢迎，也有可能一声不吭地在哪个角落里死去，被别人搞死。</p><p>九太，多多少少和我们这些喜欢看这类动漫的人有些共通之处。真实的一面不被主流所理解。闷声活在自己的世界里，悲伤还是欢喜，是没什么人一起分享的，用一个词来概括，就是封闭。年纪长的熊彻和年纪很小的九太碰到一块儿，也算是比较奇妙。一郎彦明显就没有这么好的运气。没大没小，我觉得也是现实中的一种误解，再怎么着，没大没小的时候总是会过去的，没有小孩子会对真心一点都不理解的。教育，这也牵扯到了教育的范畴，我如果有小孩的话，我肯定是尽可能创造自由的环境。凭借我大部分时候说到做到的性格与做事风格，我大概不会失信于自己吧。</p><p><img src="https://i.imgur.com/wPuq0dl.jpg" /></p><p>场景的变换很迷人，故事虽说有些老套，道理也有些老套，可是世上的道理翻过来翻过去不也就那么几种吗？能把老套的故事讲述得不那么惹人讨厌，这就足够了。奇幻系列的动漫电影我一直都很喜欢，喜欢幻想是人类的天性，黑色的幻想和彩色明亮的幻想，相比之下，我是更喜欢彩色的。敞亮一点不是很好吗？</p><p><img src="https://i.imgur.com/9k39AEO.jpg" /></p><p><img src="https://i.imgur.com/CM6bPzN.jpg" /></p><p><img src="https://i.imgur.com/LK9NOss.jpg" /></p><p>能遇到熊彻这个角色，我觉得这部动漫对我来说已经足够优秀了。正义的伙伴？是任侠呀。剑客，粗髯的剑客。</p><p>如何练剑？</p><p>胸口，有没有感觉有一把剑就在胸口？</p><p>这一次在深圳，再一次喝到了燕塘的酸牛奶，挺好喝，之前应该是在广州还是东莞喝过。物是而人非。</p><p>其他地方显现的一些细节，日本有很多地方和中国相像呀，考试的压力，其实那个女生的压力更多是来自家庭，而我们是主要来自社会？来自大环境？</p><p>图书馆里面的文学作品，猎人笔记，白鲸记。</p><p>看来日本人的素质教育挺好的。世界文学作品和中国的选择也比较类似，也有可能是我们借鉴他们，毕竟图书馆这个叫法大家也不是不知道由来嘛。</p><p>白鲸是人心里的另一面？呵，有趣。</p><p>有意思，按照这样的说法，怪物的世界，那些妖怪都是只有一面的哦。</p><p>根据观察，出场的妖怪世界的人都是很正直的，甚至可以说是纯真了。纯真。那是一个光明的所在。</p><p><img src="https://i.imgur.com/GkN5fDz.jpg" /></p><p><img src="https://i.imgur.com/StIBTK0.jpg" /></p><p><img src="https://i.imgur.com/aposgwl.jpg" /></p><p><img src="https://i.imgur.com/jYEN8To.jpg" /></p><p>唉，我这个与亲情羁绊甚深的人，真是很难抵抗这种类型的作品。</p><p>接下来有点想把《意外的幸运签》再看一遍。最近把这个比较好的版本的资源给找到了，然后想一想，剧情我居然忘得差不多了，明明当初看的时候很触动的！</p>]]></content>
    
    
    
    <tags>
      
      <tag>动漫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scoop 的安装与使用</title>
    <link href="/2022/08/20/scoop-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/20/scoop-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>又是新的 Windows 的环境。</p><p>这次是 Win11，不知为何，这一次使用过的 powershell竟然不需要配置代理就能够正常下载外网的内容了，难道是 pwsh更新之后，或者说 windows terminal更新之后可以正确读取系统的代理配置了？不太清楚。</p><p>这篇博客，记录 scoop 的使用是次要的，scoop的使用现在应该不是很多。而且，使用起来也很简单(对于正常接受大学计算机教育的人来说)。主要是新电脑的第一篇博客，测试一下。</p><p>下面是 scoop 的使用指南，这次以安装 pandoc 为例，这个是写 hexo博客必备的一个渲染软件。</p><p>来到<a href="https://scoop.sh/">官网</a>，执行下面两条语句：</p><p><img src="https://i.imgur.com/8YeDB0H.png" /></p><p>然后安装 pandoc 和 latex，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scoop install pandoc<br>scoop install latex<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/Jxqr6Ot.png" /></p><p>很简单的。以前还需要给 pwsh配置代理，现在竟然不需要了。不知道为什么。当然，也不排除深圳这边的网络可能有点“问题”。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给 Okular 设置更加趁手的快捷键</title>
    <link href="/2022/08/13/%E7%BB%99-Okular-%E8%AE%BE%E7%BD%AE%E6%9B%B4%E5%8A%A0%E8%B6%81%E6%89%8B%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/08/13/%E7%BB%99-Okular-%E8%AE%BE%E7%BD%AE%E6%9B%B4%E5%8A%A0%E8%B6%81%E6%89%8B%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/7OU0hoK.png" /></p><p>在使用 Okular 这个 pdf阅读器的时候，发现它是很好用的，感觉比较轻量，但是快捷键用着有点不太顺手，主要是顶部的切换光标模式不太顺手，因为我是需要配置GoldenDict来使用的，在阅读的时候要做标注，所以要经常切换鼠标模式，然后这个切换模式的默认快捷键不太顺手，因此，就重新配置了一下。</p><p>默认的快捷键是 <code>Ctrl</code> 加数字键的组合，然后我改成了纯字母键<code>asdf</code> 这些，手指不用那么费劲儿。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一个今天遇到的错误</title>
    <link href="/2022/08/10/%E8%AE%B0%E4%B8%80%E4%B8%AA%E4%BB%8A%E5%A4%A9%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <url>/2022/08/10/%E8%AE%B0%E4%B8%80%E4%B8%AA%E4%BB%8A%E5%A4%A9%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>最近在搞 Java 的 mock 测试这一套。先前搞了一下那个 PowerMock 和UT，然后现在发现 PowerMock 似乎被 Junit5 给甩开了。然后呢，Mockito趁机而上，本来是 PowerMock 才能 mock 的 static 方法，现在 Mockito 也能mock 了，而且还是和 Junit5 眉来眼去的，在 GitHub上更新得也勤快，PowerMock 团队则是心灰意冷。好久不更新了。</p><p>话说回来，我遇到的问题是，自己写的 Mockito demo直接引入两个包就行，一个 Mockito 的，一个 Junit5的，直接就完事儿了。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-inline --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-inline<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在 mock 静态方法的时候调用的是 <code>mockito-core</code>这个包。这个包是包含在了 <code>mockito-inline</code> 包中的，我们在resolve <code>mockito-inline</code> 的 dependency 的时候，会同时下载<code>mockito-core</code> 的包。</p><p>并且，如果我们不需要 mock static 方法的时候，我们就不引入<code>mockito-inline</code>，而是引入 <code>mockito-core</code>这个包的。</p><p>然后是，问题就是出在了这里。</p><p>我自己的 demo这样导包没问题，但是，同样的导包到公司的项目中，<code>mockito-inline</code>在 resolve 的时候会自动下载 <code>1.10.10</code> 版本的<code>mockito-core</code> 包，而不是最新的 <code>4.6.1</code>版本的。</p><p>最后没有办法，我只有在 <code>mockito-inline</code> 中把<code>mockito-core</code> 给 exclude 掉，然后手动再导入<code>mockito-core</code> 4.6.1版本的包，结果果然解决了这个问题。呵。</p><p>但是不知道问题出在了哪里，然后今天问了师父，因为快下班了，加上晚上有活动，就暂时还没找到问题究竟是处在了哪里。</p><p>说一点题外话，下午师父在看这个问题的时候，另一个同事过来凑热闹，当然，也是个大佬，嫌弃我的屏幕字体太大，呵，我那是保护眼睛。当时还应该更早一点接受沈刚老师的建议的。程序员要注意职业生涯的发展。那位同事说看代码不好看，翻代码不好翻，我：vim。。。</p><p>我师父就还好，说了下这个个人习惯。没啥。师父这个人总体上是很好的。为人处世，技术各个方面都比较好。别的同事的导师请食堂吃饭，他直接请了我去外面点了好多像样的硬菜。几百块钱还是要破费的。就是任务不怎么给我分配，倒是我经常会想着去问问题，这一点感觉比学校要好些，学校的老师能够给出我满意的回答的真的很少很少。虽然外面公司也不多。但是师父这样的人就挺好，内敛，符合我对于程序员的期待。</p><p>唉，公司沉溺于技术的人真的不多。</p><p>师父给我安排的旁边的南大的同事，入职一年多了，多多少少在技术上也能给我一些帮助，但是他的导师，回答问题的时候，那个态度就让我觉得有点不对劲。然后呢，凡事不能只看一面，这里面或许还有一些其他的因果呢？也未可知的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>实习</tag>
      
      <tag>Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>秋招面试复习</title>
    <link href="/2022/08/09/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/08/09/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>秋招面试复习，主要是手写一些知识点，加深一下记忆吧，至于能不能加深也未可知。总之，在写的时候在加深理解这一块确实是做到了。</p><p><img src="https://i.imgur.com/7d2UwQE.jpg" /></p><p><img src="https://i.imgur.com/dVJ8kgG.jpg" /></p><p><img src="https://i.imgur.com/RRBaOjK.jpg" /></p><p><img src="https://i.imgur.com/a4BkZPH.jpg" /></p><p><img src="https://i.imgur.com/p0O711H.jpg" /></p><p><img src="https://i.imgur.com/X34sfO1.jpg" /></p><p><img src="https://i.imgur.com/3QBxJjr.jpg" /></p><p><img src="https://i.imgur.com/0JDLzmX.jpg" /></p><p><img src="https://i.imgur.com/KhOCIqu.jpg" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 的快捷键记录</title>
    <link href="/2022/08/07/Manjaro-%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/08/07/Manjaro-%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首先是对应 Windows 的 Win + Tab。</p></blockquote><p>本来是 <code>Ctrl + F8</code>，我把它修改成了<code>Win + Tab</code>。</p><blockquote><p>切换虚拟桌面的快捷键。</p></blockquote><p>本来其实就有，但是开关没有打开。</p><p>我们把它打开就行。</p><p><img src="https://i.imgur.com/34Z8FLO.png" /></p><p>和 Windows 中的类似，也就是 <code>Ctrl + Win + 方向键</code>。</p><p>如果还想折腾的话，可以把这个快捷键换成主键盘区域的，方向键换成 vim对应的方向键就成。哼哼。</p><blockquote><p>将一个窗口最大话和最小化的快捷键。</p></blockquote><p><code>Win + PageUp</code> 和 <code>Win + PageDown</code>。</p><blockquote><p>展示出所有窗口的快捷键。</p></blockquote><p>一共有三个,</p><ul><li>一个是展示当前应用的所有窗口：<code>Ctrl + F7</code>。</li><li>一个是展示当前桌面的所有窗口：<code>Ctrl + F9</code>。</li><li>一个是展示所有桌面的所有窗口：<code>Ctrl + F10</code>。</li></ul><p>展示所有窗口还可以将鼠标移动到左上角的点，一定要抵达精确的左上角的点才可以。</p><p><img src="https://i.imgur.com/dbrksgB.png" /></p><blockquote><p>隐藏和关闭 konsole 的 toolbar(工具栏) 的快捷键。</p></blockquote><p><code>Ctrl + Shift + M</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 的一些零零碎碎的配置点</title>
    <link href="/2022/08/07/Manjaro-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E9%9B%B6%E7%A2%8E%E7%A2%8E%E7%9A%84%E9%85%8D%E7%BD%AE%E7%82%B9/"/>
    <url>/2022/08/07/Manjaro-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E9%9B%B6%E7%A2%8E%E7%A2%8E%E7%9A%84%E9%85%8D%E7%BD%AE%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>悬而未决</p></blockquote><h2 id="manjaro-使用-hexo-g-报错">manjaro 使用 hexo g 报错</h2><p>加载文件的时间非常长，而且会出现一个报错信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Database</span> <span class="hljs-keyword">load</span> failed<br></code></pre></div></td></tr></table></figure><p>解决方法呢，直接 <code>npm update hexo</code> 试一下。</p><p>结果，是不行的。</p><p>还是总是一次加载时间很长，36s 左右，一次要报错。</p><p>呵，暂时按下不表。先睡觉。</p><blockquote><p>已经可以解决的问题</p></blockquote><h2 id="manjaro-上外网的问题">Manjaro 上外网的问题</h2><p>其实吧，最直接的解决方法是使用 Clash For Windows。</p><p>别看这个玩意儿名字里面带了一个 Windows，其实它是一个跨平台软件。</p><p>所以我们直接像在 Windows 上使用这个软件一样，直接在 GitHub上下载，然后解压，找到里面的执行文件运行即可。</p><p>什么导入订阅，导入节点之类，就不用赘述啦。</p><p><img src="https://i.imgur.com/SBNXrLD.png" /></p><p>然后是设置系统代理：</p><p><img src="https://i.imgur.com/G7VXRXV.png" /></p><p>这个 7890 端口也是我们的老朋友啦。</p><p>然后就是设置 <code>.zshrc</code> 的代理设置了，</p><p><img src="https://i.imgur.com/xmNaAoI.png" /></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890<br></code></pre></div></td></tr></table></figure><p>然后呢，我们肯定是要用到 git 的，所以 git当然也是要设置代理的，也就是设置 http 和 https 的 proxy，</p><p><img src="https://i.imgur.com/HXWofl4.png" /></p><h2 id="fctix5-的皮肤设置">fctix5 的皮肤设置</h2><p>主要是皮肤，这里这个暗色皮肤和整个系统很搭配：</p><p><img src="https://i.imgur.com/VCN7Rf8.png" /></p><p>这个是采用了 fcitx5-breeze 这个皮肤。</p><p>经过我的试验，下面标注的两个皮肤是可以直接使用 <code>yay -S</code>进行安装的。</p><p><img src="https://i.imgur.com/k6f4Byq.png" /></p><p>然后就是配置皮肤的入口，我是直接使用 fcitx5 默认的pinyin，可以在这里配置：</p><p><img src="https://i.imgur.com/mVfgBJR.png" /></p><p><img src="https://i.imgur.com/nlFHbiK.png" /></p><p><img src="https://i.imgur.com/FTQ1sE1.png" /></p><h2 id="manjaro-的-chrome-在开机后总会弹出-restore-pages-界面">Manjaro的 Chrome 在开机后总会弹出 restore pages 界面</h2><p>很烦，每次开机之后，如果启动 chrome，总是在右上角給我弹出一个那个restore pages 的玩意儿，而且即使我是正常关闭这个chrome，下一次开机之后启动 chrome 还是会給我弹这个弹窗，呵呵。</p><p>对于这个，我们可以修改 chrome 的 desktop文件，給它加一个启动参数关闭这个特性就可以了，</p><p><img src="https://i.imgur.com/e07O4Ex.png" /></p><p><img src="https://i.imgur.com/9EUmAe1.png" /></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">--disable--session-crashed-bubble<br></code></pre></div></td></tr></table></figure><h2 id="manjaro-下-chrome-无法正确识别出系统的暗色模式">manjaro 下chrome 无法正确识别出系统的暗色模式</h2><p>呵呵。</p><p>参考<ahref="https://forum.manjaro.org/t/chrome-doesnt-see-dark-theme-and-displays-site-in-white/113409/8">这个链接</a>。</p><p><img src="https://i.imgur.com/mK32J5o.png" /></p><p>这里也是采用加启动参数的做法，只是这个更加的解耦，将启动参数单独放在了一个文件中。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;--enable-features=WebUIDarkMode\n--force-dark-mode&quot;</span> &gt;&gt; ~/.config/&#123;chrome,chromium&#125;-flags.conf<br></code></pre></div></td></tr></table></figure><p>需要注意的是，像这种修改启动参数的变动，得重新启动系统才能够使之生效。我之前没有重启系统，发现不生效，还以为真的就不生效呢。</p><p>下面是生效后的界面，本来这个设置界面是呈现亮瞎人眼的大白色的，</p><p><img src="https://i.imgur.com/1JjHXTH.png" /></p><h2id="如何关闭右下角任务栏的大小写提示">如何关闭右下角任务栏的大小写提示</h2><p>每次切换大小写时，右下角的图标总是要出来整一下存在感。呵。直接右键configure，然后取消勾选即可，</p><p><img src="https://i.imgur.com/1HAhkEn.png" /></p><h2 id="manjaro-下的-.ssh-文件是放在哪里的">Manjaro 下的 .ssh文件是放在哪里的？</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/home/fanyfull<br></code></pre></div></td></tr></table></figure><h2 id="manjaro-修改默认-shell-不生效">Manjaro 修改默认 shell不生效</h2><p>我在修改默认 SHELL 之后，使用 <code>echo $SEHLL</code> 查看当前的SHELL 是否修改成功，然后总是给我打印 not change 的消息。</p><p>然后 reboot 一下，发现已经修改过来了。呵呵。</p><h2 id="配置-oh-my-zsh-自动补全">配置 oh my zsh 自动补全</h2><p><a href="https://cangmang.xyz/articles/1642841384360">链接</a></p><h2 id="安装完-oh-my-zsh-之后发现-zsh-配置被覆写了">安装完 oh-my-zsh之后发现 zsh 配置被覆写了</h2><p>然后灰色提示没了，代理，别名配置都没了。呵呵。</p><p>关于灰色历史提示，就偷懒，直接使用了别人的脚本：</p><p><ahref="https://github.com/skywind3000/vim/blob/master/etc/zshrc.zsh">github</a></p><p><a href="https://www.zhihu.com/question/21418449">知乎链接</a></p><h2 id="窗口拖动特效">窗口拖动特效</h2><p>主要是果冻的效果。然后专业术语叫做 deform，形变，呵。</p><p>wobbly，摇摇晃晃，摇头晃脑，不太用心。呵。</p><p><img src="https://i.imgur.com/qdmkHPx.png" /></p><h2 id="manjaro-下-git-更改-commit-的编辑器为-neovim">manjaro 下 git更改 commit 的编辑器为 neovim</h2><p>当然，前提得是系统安装了 neovim 才行，然后在 shell 中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zsh">git config --global core.editor &quot;nvim&quot; <br></code></pre></div></td></tr></table></figure><p>注意，是 <code>nvim</code>，不是 <code>neovim</code>。</p><h2 id="manjaro-下-vscode-vim-没有中文输入法的问题">manjaro 下 vscodevim 没有中文输入法的问题</h2><p>不会像在 Windows 和 mac 下一样，字符闪烁个不停，烦人。</p><p>看来，在 manjaro 上写博客可继续使用我的 VSCode 了。好耶。</p><p>分析了一下，应该是 fctix5 的原因。嗯，很好。之前装旧版 fctix使用谷歌输入法在 VSCode 里面打字也会出现闪烁的问题。</p><p>唉，来之不易呀。VSCode 都 1.70 版本了，还是不去修复在 Windows上的这个 Bug。我呵呵。</p><h2 id="manjaro-为什么配置了-github-ssh-公钥还是无法-push-呢">Manjaro为什么配置了 github ssh 公钥还是无法 push 呢</h2><p>我个人的原因，是 clone 我自己项目的时候直接选用了第一个 https的链接，应该选用第二个 ssh 的链接进行克隆的。</p><p>之后就可以了。</p><h2 id="ftcix5-自带的-pinyin-导入搜狗词库">ftcix5 自带的 pinyin导入搜狗词库</h2><p>在 <a href="https://pinyin.sogou.com/dict/"class="uri">https://pinyin.sogou.com/dict/</a>中下载相应的词库之后，我们可以打开<code>fcitx5 configuratoin-&gt;pinyin configuration-&gt;dictionaries-&gt;import</code>。</p><h2 id="manjaro-如何使用-yay-更新某一个具体的包呢">Manjaro 如何使用 yay更新某一个具体的包呢？</h2><p>比如说 VSCode。</p><p>首先，执行一下 <code>yay</code>，这是 <code>yay -Syu</code> 的alias，<code>Syu</code> 即 sysupgrade 的意思。</p><p>然后，我们再执行</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zsh">yay -S visual-studio-code-bin<br></code></pre></div></td></tr></table></figure><p>不过，我这里是在执行 <code>yay</code> 之后就给我提示 vscode有新的包的，因此我就顺着它直接更新了。</p><p>好吧，其实可以直接执行<code>yay -S visual-studio-code-bin</code>，再安装一遍就可以了。</p><h2id="记录一下当前的一个字体的尺寸配置">记录一下当前的一个字体的尺寸配置</h2><p>算是有效解决了 Manjaro字体发虚的问题了吧。主要是有时候会有一点阴影。</p><p>现在好多了。</p><p><img src="https://i.imgur.com/lKt3qcF.png" /></p><p><img src="https://i.imgur.com/OUgWebN.png" /></p><p>如果能够换上 2k的屏幕，显示效果应该会更好吧。毕竟，很多显示问题是可以通过提升分辨率来解决的。</p><h2 id="调整亮度的入口">调整亮度的入口</h2><p>不需要使用代码，直接在 System Settings 中找到<code>Power Management</code>，然后找到 <code>Entry Saving</code>选项，然后右边的栏目就有一个 <code>Screen brightness</code> 选项。</p><p>要注意，这个亮度的调节不是热更新的，得 <code>Apply</code>之后才能看到效果。</p><p><img src="https://i.imgur.com/GjtaDt1.png" /></p><h2 id="manjaro-如何安装字体呢">Manjaro 如何安装字体呢？</h2><p>最近比较喜欢微软开源的 Cascadia Code这个字体，主要是这个字体变胖的边界比较容易，胖胖的还是比较好看的。</p><p>首先，到 github 上下载这个字体的最新的 release 版本。</p><p>然后解压，把 ttf 文件夹改一个名字之后，在终端中复制到<code>/usr/share/fonts/</code> 目录下，然后执行以下命令进行刷新：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fc-cache -fv<br></code></pre></div></td></tr></table></figure><p>之后就可以了。</p><p>VSCode 换上这个字体，编写代码明显是更加舒服的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 如何像 Windows 一样使用 Win + Tab 呢</title>
    <link href="/2022/08/07/Manjaro-%E5%A6%82%E4%BD%95%E5%83%8F-Windows-%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8-Win-Tab-%E5%91%A2/"/>
    <url>/2022/08/07/Manjaro-%E5%A6%82%E4%BD%95%E5%83%8F-Windows-%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8-Win-Tab-%E5%91%A2/</url>
    
    <content type="html"><![CDATA[<p>可以去找快捷键，主要是这个快捷键不好找，这个快捷键在哪里呢？</p><p><img src="https://i.imgur.com/l5acdDG.png" /></p><p>为了和 Windows 上面对应，我又把它修改成了<code>Win + Tab</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro zsh 设置代理的问题</title>
    <link href="/2022/08/07/Manjaro-zsh-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/07/Manjaro-zsh-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Google Chrome 在 Linux 中真没有 Firefox好用啊。连系统的暗色模式都识别不出来。呵呵。</p><p>今天在安装 yay 时，由于需要用到curl，然后在我已经设置了代理的情况下，还给我疯狂报下面的错误，</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span>: (<span class="hljs-number">35</span>) OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to <span class="hljs-number">127.0.0.1:7890</span><br></code></pre></div></td></tr></table></figure><p>然后，可能是我设置得不对，所以就根据<ahref="https://zhuanlan.zhihu.com/p/518100454">这篇博客</a>修改了我的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zsh">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/GF1ZzTI.png" /></p><p>修改完毕后，执行一下 <code>source ~/.zshrc</code>激活一下新的配置即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中了 Manjaro KDE 的毒，魔怔了</title>
    <link href="/2022/08/07/%E4%B8%AD%E4%BA%86-Manjaro-KDE-%E7%9A%84%E6%AF%92%EF%BC%8C%E9%AD%94%E6%80%94%E4%BA%86/"/>
    <url>/2022/08/07/%E4%B8%AD%E4%BA%86-Manjaro-KDE-%E7%9A%84%E6%AF%92%EF%BC%8C%E9%AD%94%E6%80%94%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>没有想到，实在忍受不了 windows 的 windowsterminal，主要是忍受不了在那个 WT 中使用neovim，实在是忍受不了了。所以今天就索性再安装一次 Manjaro KDE，和原来的Windows11 组成双系统吧。</p><p>安装完之后，嗯？时隔不到一年，也就是几个月的时间，Manjaro KDE变得这么好用啦？</p><p>I just cannot believe!</p><p>首先，肯定是变漂亮了。也和我个人的接受能力发生了一定的变化有关吧。然后是，今天在搜索时得知，ClashFor Windows 这个浓眉大眼的 clash 图形应用竟然也是支持 Linux的，呵呵，然后配置了一下，逆天，太方便了。</p><p><img src="https://i.imgur.com/3f7lICR.png" /></p><p>然后就是简单设置了一下图形界面，也没怎么美化。最重要的事情是把系统代理和zsh 的代理给配置了。Firefox在配置了系统代理的情况下，还需要单独到应用中设置一下。这个挺怪的。Chrome就不需要。但是，在 Linux 中，Firefox 比 Chrome 好用。</p><p>冇办法了嗷。</p><p>另外呢，这个 Manjaro的动画效果我觉得很好，切换虚拟桌面的时候，我觉得很顺滑。还有经典的拖动窗口时的果冻(形变)效果，呵呵。</p><p>然后呢，yay 也很好用。npm 安装包的时候不会报一些没有用的警告。</p><p>当然，也还是有问题的。</p><p>比如，有时候开机之后会卡住成黑屏。安装的 tg得拖动两次，因为第一次拖动之后鼠标会粘在上面。不过这个可能是 tg开发人员的锅，呵呵，最近可能有点缺钱了？一股脑子去搞 web3和区块链了？呵呵。</p><p><img src="https://i.imgur.com/mFCScyL.png" /></p><p>对了，今天读完了一本新的小说，《魔临》，还算是比较过瘾。嗯。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Manjaro</tag>
      
      <tag>随想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近来杂感小记</title>
    <link href="/2022/07/15/%E8%BF%91%E6%9D%A5%E6%9D%82%E6%84%9F%E5%B0%8F%E8%AE%B0/"/>
    <url>/2022/07/15/%E8%BF%91%E6%9D%A5%E6%9D%82%E6%84%9F%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Long time no writing blogs for this site. 其他站点其实也是。</p><p>上班的时间，很少能像在学校一般，每天肆无忌惮地挂着 Youtube Music在后台。听 MLA的时间就更加地少了。Sigh。趁着周末的时间，似乎可以把专辑从头到尾来过一遍。</p><p><img src="https://i.imgur.com/0Uyh8Bf.png" /></p><p>前几天似乎 Jay Chou 出了新专辑。碰巧，前几天 MLA也出了新歌，遗憾的是，我们不可以分享。</p><p>现在的地理位置距离香港很近，听同事说，去香港倒是很容易，就是回来要隔离，酒店隔离费用自理。大家就都不去了。</p><p>在学校，从某一个时间点开始，就一直过着不管纪律的生活，生活作息是很糟糕的。到了这边，起床和睡觉是很规律的事情。租的房子离公司稍微有点远，通勤时间总计在40分钟左右。凡事都有利弊，有了这么远的通勤距离，以前阅读的习惯就顺其自然地捡起来了。上班已经两个多星期。利用每天上下班的通勤时间，浅浅地读了《暗网》和《非暴力沟通》这两本书。《暗网》曾经在学校图书馆见到过，就这个学期，一起去借书准备云计算等等的考试的时候。里面的内容有些过时，对于我个人而言，在早些时候探索暗网的时候，几乎都接触过。那个所谓的暗杀预测，现在我想应该还是在的。之前看到过这个交易，不太清楚其在现实中的投射，刚好前几天安倍出了事儿，这就有些微妙了。《非暴力沟通》这本书也有缘由，书的内容很浅，无非是注意言语方面的内容，让说话的方式尽可能地春风化雨，和美国的电影——心灵捕手，是类似的作品。里面的一些话术我们平时不妨多加运用，在增强表面关系这一层上，或许有很强烈的效果。</p><p>现在读书有一个坏习惯，就是非 Lithium 不用。只有 epub格式可以使用。不过，综合来看，Lithium对我来说也确实是通勤阅读的最好选择了。可惜的是，最近很想读的一本书，找不到很好的epub 资源。然后，一直以来，看 <code>Dante's Limbo</code>对世说新语很是推崇。恰好这类古籍国内的出版社都做得比较好，就先拿复旦的教材过来，先从周边读起。想到这儿，我的《聊斋志异》不知道要拖到什么时候才能阅读完毕了:)。</p><p>最近上班一直在学习微服务，Java的一些比较新的语法，公司的学习环境可以说是相当地好，就学习而言，甚至比我在宿舍的环境还要好。所以这些东西就每天带着学，同时呢，我觉得我最大的收获，是在这样一个编程氛围很浓厚的地方，把以前丢掉的vim 给捡回来了。本来是想使用 VSCode 上的比较受欢迎的 vim插件的，后来发现其写中文闪退很有问题，这个还好，要让我改成纯英文写作，在Siri 的协助下，也不是不行，后来得知，这个 vim 插件仅仅是把 vim 的操作用VSCode 本地化操作模拟了一边，所有的实现还是用的 ts，那好，就看看 vim的一个现代分支，neovim 可不可以在 VSCode上使用，发现也是可以的，只是不那么流行，但是其实现却是比较优雅，在normal 模式下是直接与 neovim 进行通信的，这个在性能上就基本上和纯粹的neovim持平。经过一个多星期的磨合，发现有小缺点，但是可以接受。然后趁着这个机会每天强迫自己使用vim，现在已经完全离不开 vim了。纯键盘操作的方式，一旦习惯之后，再想要回到用鼠标点点点的时代，很难很难了。现在连Chrome 也装上了 vim 插件。IDEA 也装上了 IDEAVim。小的项目，或者说单体项目，以及学习一些 Java 的语法之类，用 VSCode还行，稍微大一点的项目真的是离不开 IDEA的。说起来，第一天到岗的时候，发现师父用的是Notepad++，吓了一跳，以前还真没见过用 Notepad++ 写 Java的，后来才得知，原来只是用那个来阅读代码。后面每天实际工作的时候，果然还是用的IDEA。</p><p>也是最近，机场升级了节点，因为我个人的生活记录流转到了tg，然后图片之类需要经常传到 tg上面，就尝试了一下这个专用节点，发现它是符合小而美这个评价的。节点比较少，但是质量都很高。用了一个多星期，没有发现有节点挂掉的情况。其延迟也降低了很多，当然，对我来说，更重要的是，水管的直径变粗了很多。</p><p>一开始来的时候，发现大家都是打篮球，终于在昨天逮到了两个打乒乓球的兄弟，其中一个还是研究生校友。和另一位在昨天先行到百草园会所打了一场，我的反手实在不是对手，总体上是可以打的。这个就还要。那位兄弟也是研究生，中大那边的，而且是院队的，看上去挺专业的样子，待我偷学一波反手弧圈xD，</p><p>食堂呢，感觉比学校的好吃，当然，也贵，好在每天晚上有夜宵可以领，今晚的阿姨设置给我捞了很多免费的大骨头肉。这么吃下去，胖，应该胖不了，因为我消化不是很好，但是如果常去健身房的话，说不定可以合理转化一下。</p><p>今宵多珍重(Cantonese)。</p><p>现在有一个不成熟的想法，就是给 Youtube Music写一个歌词插件，如果要是等 Google的官方支持，估计得等很久。以前是想写油猴脚本来着，因为一些乱七八糟的事情耽搁了。现在的话，在每天晚上的加班的自由时间尝试一下应该可以。吃法的时候听同事说，公司好像不给搞sideproject，不过我这种边缘人物，应该还不至于有监察的目光投射到我身上？</p><p>另：最近发现的一条规律，吃饭和睡觉有利于头发健康。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器控制台的一些 tricks</title>
    <link href="/2022/06/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E4%B8%80%E4%BA%9B-tricks/"/>
    <url>/2022/06/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E4%B8%80%E4%BA%9B-tricks/</url>
    
    <content type="html"><![CDATA[<h2id="取消控制台默认的折叠连续输出相同内容的消息">取消控制台默认的折叠连续输出相同内容的消息</h2><p>点击右上角的齿轮，然后取消勾选即可。</p><p><img src="https://i.imgur.com/1Xt16xq.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络实验一 wireshark 抓包工具的使用</title>
    <link href="/2022/05/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%80-wireshark-%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%80-wireshark-%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="实验一-wireshark-抓包工具使用">实验一 wireshark抓包工具使用</h1><ul><li>班级：软工 1902 班</li><li>姓名：</li><li>学号：</li></ul><h2 id="一实验目的">一、实验目的</h2><ul><li>学习wireshark抓包工具的使用</li><li>了解wireshark抓包工具的功能，明确抓包软件的功能。</li><li>通过学习，进一步理解协议及网络体系结构思想</li></ul><h2 id="二实验原理">二、实验原理</h2><p>Wireshark是网络包分析工具。网络包分析工具的主要作用是尝试捕获网络包，并尝试显示包的尽可能详细的情况。</p><p>主要应用：</p><ul><li>网络管理员用来解决网络问题</li><li>网络安全工程师用来检测安全隐患</li><li>开发人员用来测试协议执行情况</li><li>用来学习网络协议</li></ul><h2 id="三实验内容">三、实验内容</h2><p>下载 WIRESHARK，学习工具的使用和功能。</p><h2 id="四实验过程">四、实验过程</h2><h3 id="wireshark-的下载安装与配置">1、wireshark 的下载、安装与配置</h3><p>访问 wireshark 官网：<a href="https://www.wireshark.org/"class="uri">https://www.wireshark.org/</a></p><p><img src="https://i.imgur.com/ve6TkUX.png" /></p><p>下载并安装 Windows Installer (64-bit) 版本。</p><h3 id="初识-wireshark">2、初识 wireshark</h3><p>Wireshark的工作原理是捕获某一网卡的数据包，当配置多块网卡时，需要选择一块网卡进行抓包，此处选择WLAN，然后双击即可。</p><p><img src="https://i.imgur.com/LvgXfbw.png" /></p><p><img src="https://i.imgur.com/u2k1vbm.png" /></p><h3 id="查看网络环境">3、查看网络环境</h3><p>控制面板-网络和Internet-网络和共享中心-更改适配器设置-WLAN-状态-详细信息，得到了以下关键信息：</p><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">地址</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">IPv4 地址</td><td style="text-align: center;">10.19.128.57</td></tr><tr class="even"><td style="text-align: center;">子网掩码</td><td style="text-align: center;">255.255.248.0</td></tr><tr class="odd"><td style="text-align: center;">默认网关</td><td style="text-align: center;">10.19.135.254</td></tr></tbody></table><p><img src="https://i.imgur.com/A412zBu.png" /></p><h3 id="启动抓包">4、启动抓包</h3><p>截图显示的是 wireshark 抓到的部分数据包，有TCP、UDP、ARP、MDNS、ICMPv6 等多种协议的数据包。</p><p><img src="https://i.imgur.com/u2k1vbm.png" /></p><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">对应层次</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Frame</td><td style="text-align: center;">物理层</td></tr><tr class="even"><td style="text-align: center;">Ethernet Ⅱ</td><td style="text-align: center;">数据链路层</td></tr><tr class="odd"><td style="text-align: center;">Internet Protocol Version 4</td><td style="text-align: center;">网络层</td></tr><tr class="even"><td style="text-align: center;">Transmission Control Protocol</td><td style="text-align: center;">传输层</td></tr><tr class="odd"><td style="text-align: center;">Hypertext Transfer Protocol</td><td style="text-align: center;">应用层</td></tr></tbody></table><h3 id="追踪打开一个网页时tcp-的三次握手">5、追踪打开一个网页时，TCP的三次握手</h3><p>以访问百度为例，首先，打开浏览器的一个无痕窗口，并确保电脑上的代理处于关闭状态，然后过滤出DNS 我们可以发现解析百度的包，找到解析后的真实 ip，</p><p><img src="https://i.imgur.com/5AnWH28.png" /></p><p>然后设置过滤规则：</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">ip.src <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">182.61</span>.<span class="hljs-number">200.7</span> or ip.dst <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">182.61</span>.<span class="hljs-number">200.7</span><br></code></pre></div></td></tr></table></figure><p>将过滤出来的包按时间排序，开头的三个包是TCP 的三次握手，</p><p><img src="https://i.imgur.com/kzNoE38.png" /></p><ul><li>第一次握手：客户机(10.19.128.57)主动打开一条TCP连接，从客户机(10.19.128.57)发送报文段至服务器(182.61.200.7)：SYN=1，Seq=0，不携带数据，等待服务器确认。</li><li>第二次握手：服务器(182.61.200.7)返回确认报文至客户机(10.0.0.108)：SYN=1，ACK=1，Seq=0，不携带数据。</li><li>第三次握手：从客户机(10.19.128.57)发送报文段至服务器(182.61.200.7)：ACK=1，Seq=1，不携带数据，TCP连接正式建立。</li></ul><p>下图为第二次握手的报文段的详细分析：</p><p><img src="https://i.imgur.com/B7JxqjE.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>计网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 问题解决</title>
    <link href="/2022/03/24/OpenSSL-SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/03/24/OpenSSL-SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class="hljs-keyword">in</span> connection to github.com:443<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/dQ5PQO0.png" /></p><h2 id="问题解决">问题解决</h2><p>我是参考的 stackoverflow，在命令行执行的如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global http.sslBackend <span class="hljs-string">&quot;openssl&quot;</span><br></code></pre></div></td></tr></table></figure><p>然后就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AVL 树以及 B 树和 B+ 树</title>
    <link href="/2022/03/21/AVL-%E6%A0%91%E4%BB%A5%E5%8F%8A-B-%E6%A0%91%E5%92%8C-B-%E6%A0%91/"/>
    <url>/2022/03/21/AVL-%E6%A0%91%E4%BB%A5%E5%8F%8A-B-%E6%A0%91%E5%92%8C-B-%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>关于 AVL 树，参考的是浙江大学数据结构的网课以及教材。</p><p>进一步的理解，可以参考我当时上数据结构这门课得时候做的笔记：</p><p><a href="https://www.cnblogs.com/fanlumaster/p/13829581.html"class="uri">https://www.cnblogs.com/fanlumaster/p/13829581.html</a></p><p><a href="https://www.cnblogs.com/fanlumaster/p/13824006.html"class="uri">https://www.cnblogs.com/fanlumaster/p/13824006.html</a></p><h1 id="avl-树">AVL 树</h1><p><img src="https://i.imgur.com/KwwAj3c.png" /></p><p>RR 旋转：</p><p><img src="https://i.imgur.com/tIUzVDm.png" /></p><p>LL 旋转：</p><p><img src="https://i.imgur.com/lYg3TOB.png" /></p><p>LR 旋转：</p><p><img src="https://i.imgur.com/GkSVdyB.png" /></p><p>RL 旋转：</p><p><img src="https://i.imgur.com/cllE17l.png" /></p><hr /><p>关于 B 树和 B+ 树的理解，参考的是 B 站的这个视频 <ahref="https://www.bilibili.com/video/BV1e5411T77z"class="uri">https://www.bilibili.com/video/BV1e5411T77z</a></p><h1 id="b-树">B 树</h1><p><img src="https://i.imgur.com/0KFqpIL.png" /></p><p><img src="https://i.imgur.com/GgC70mj.png" /></p><p><img src="https://i.imgur.com/XkU6Tev.png" /></p><p><img src="https://i.imgur.com/9FW5uDh.png" /></p><p><img src="https://i.imgur.com/VyaDSjg.png" /></p><p><img src="https://i.imgur.com/NmInlbw.png" /></p><p><img src="https://i.imgur.com/l8n0uIg.png" /></p><p><img src="https://i.imgur.com/l8n0uIg.png" /></p><p><img src="https://i.imgur.com/nkHk5hC.png" /></p><p><img src="https://i.imgur.com/EasOxn4.png" /></p><p><img src="https://i.imgur.com/7HPwPJy.png" /></p><p><img src="https://i.imgur.com/20qBmTt.png" /></p><p><img src="https://i.imgur.com/ZGvMN8R.png" /></p><p><img src="https://i.imgur.com/7SPZh3X.png" /></p><p><img src="https://i.imgur.com/PCNx3uu.png" /></p><p><img src="https://i.imgur.com/ug8QPPQ.png" /></p><p><img src="https://i.imgur.com/M8srACF.png" /></p><p><img src="https://i.imgur.com/EyF1Su8.png" /></p><p><img src="https://i.imgur.com/gox0Xhf.png" /></p><p><img src="https://i.imgur.com/Zsg3qHO.png" /></p><p><img src="https://i.imgur.com/iUKoiIp.png" /></p><p><img src="https://i.imgur.com/2oytRjy.png" /></p><p><img src="https://i.imgur.com/hiXVhFV.png" /></p><p><img src="https://i.imgur.com/Zvorvii.png" /></p><p><img src="https://i.imgur.com/gBOb8yN.png" /></p><p><img src="https://i.imgur.com/Y8KCnV2.png" /></p><p><img src="https://i.imgur.com/crfGeTu.png" /></p><p><img src="https://i.imgur.com/CUm4n2J.png" /></p><p><img src="https://i.imgur.com/6GOiaKf.png" /></p><p><img src="https://i.imgur.com/C8QsXGR.png" /></p><p><img src="https://i.imgur.com/jCfTV3R.png" /></p><p><img src="https://i.imgur.com/A2QBznZ.png" /></p><p><img src="https://i.imgur.com/iHQxNfB.png" /></p><p><img src="https://i.imgur.com/D8PeAwe.png" /></p><h1 id="b-树-1">B+ 树</h1><p>B+ 树和 B 树其实很类似。只不过，这个 B+树的叶子节点包含了所有的索引，然后在数据库的范围查找中比较实用。</p><p><img src="https://i.imgur.com/9SCxSiS.png" /></p><p><img src="https://i.imgur.com/MytE4bP.png" /></p><p><img src="https://i.imgur.com/zsamoc7.png" /></p><p><img src="https://i.imgur.com/nLX72OV.png" /></p><p><img src="https://i.imgur.com/1yaJNKh.png" /></p><p><img src="https://i.imgur.com/1yaJNKh.png" /></p><p><img src="https://i.imgur.com/bwioJeN.png" /></p><p><img src="https://i.imgur.com/RPe7VmW.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 学习</title>
    <link href="/2022/03/20/JVM-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/20/JVM-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>本文转自 B 站视频笔记：<ahref="https://www.bilibili.com/video/BV1Er4y1r7as"class="uri">https://www.bilibili.com/video/BV1Er4y1r7as</a></p><h1 id="走进jvm">走进JVM</h1><p>JVM相对于Java应用层的学习难度更大，<strong>开篇推荐掌握的预备知识：</strong>C/C++(关键)、微机原理与接口技术、计算机组成原理、操作系统、数据结构与算法、编译原理（不推荐刚学完JavaSE的同学学习），如果没有掌握推荐的一半以上的预备知识，可能学习起来会比较吃力。</p><p><strong>本套课程中需要用到的开发工具：</strong>CLion、IDEA、Jetbrains Gateway</p><p>此阶段，我们需要深入探讨Java的底层执行原理，了解Java程序运行的本质。开始之前，推荐各位都入手一本《深入理解Java虚拟机第三版》这本书对于JVM的讲述非常地详细：</p><p><imgsrc="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimages-cn.ssl-images-amazon.cn%2Fimages%2FI%2F81zGZfnLdwL.__BG0%2C0%2C0%2C0_FMpng_AC_UL320_SR250%2C320_.jpg&amp;refer=http%3A%2F%2Fimages-cn.ssl-images-amazon.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1645933645&amp;t=1f5da62f1510b166c33f05b94a830b48"alt="点击查看图片来源" /></p><p>我们在JavaSE阶段的开篇就进行介绍了，我们的Java程序之所以能够实现跨平台，本质就是因为它是运行在虚拟机之上的，而不同平台只需要安装对应平台的Java虚拟机即可运行（在JRE中包含），所有的Java程序都采用统一的标准，在任何平台编译出来的字节码文件(.class)也是同样的，最后实际上是将编译后的字节码交给JVM处理执行。</p><p><imgsrc="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F314515%2F201912%2F314515-20191231163244928-184981058.png&amp;refer=http%3A%2F%2Fimg2018.cnblogs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1645942605&amp;t=53b5ab5873cf233ff45f9fefb8aa87e8"alt="点击查看图片来源" /></p><p>也正是得益于这种统一规范，除了Java以外，还有多种JVM语言，比如Kotlin、Groovy等，它们的语法虽然和Java不一样，但是最终编译得到的字节码文件，和Java是同样的规范，同样可以交给JVM处理。</p><p><imgsrc="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F2004486%2F202008%2F2004486-20200825201006756-1741469951.png&amp;refer=http%3A%2F%2Fimg2020.cnblogs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1645942643&amp;t=4624e818442fd4bc90b26df9a9f7e5d1"alt="点击查看图片来源" /></p><p>所以，JVM是我们需要去关注的一个部分，通过了解Java的底层运作机制，我们的技术会得到质的提升。</p><h2 id="技术概述">技术概述</h2><p>首先我们要了解虚拟机的具体定义，我们所接触过的虚拟机有安装操作系统的虚拟机，也有我们的Java虚拟机，而它们所面向的对象不同，Java虚拟机只是面向单一应用程序的虚拟机，但是它和我们接触的系统级虚拟机一样，我们也可以为其分配实际的硬件资源，比如最大内存大小等。</p><p>并且Java虚拟机并没有采用传统的PC架构，比如现在的HotSpot虚拟机，实际上采用的是<code>基于栈的指令集架构</code>，而我们的传统程序设计一般都是<code>基于寄存器的指令集架构</code>，这里我们需要回顾一下<code>计算机组成原理</code>中的CPU结构：</p><p><imgsrc="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F9251733-5b4556af04fa3e5e.png&amp;refer=http%3A%2F%2Fupload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1645971181&amp;t=c9aaa14cb580afd4bc5dca3319c5344b"alt="点击查看图片来源" /></p><p>其中，<strong>AX，BX，CX，DX 称作为数据寄存器：</strong></p><ul><li>AX (Accumulator)：累加寄存器，也称之为累加器；</li><li>BX (Base)：基地址寄存器；</li><li>CX (Count)：计数器寄存器；</li><li>DX (Data)：数据寄存器；</li></ul><p>这些寄存器可以用来传送数据和暂存数据，并且它们还可以细分为一个8位的高位寄存器和一个8位的低位寄存器，除了这些通用功能，它们各自也有自己的一些专属职责，比如AX就是一个专用于累加的寄存器，用的也比较多。</p><p><strong>SP 和 BP 又称作为指针寄存器：</strong></p><ul><li>SP (StackPointer)：堆栈指针寄存器，与SS配合使用，用于访问栈顶；</li><li>BP (BasePointer)：基指针寄存器，可用作SS的一个相对基址位置，用它可直接存取堆栈中的数据；</li></ul><p><strong>SI 和 DI 又称作为变址寄存器：</strong></p><ul><li>SI (Source Index)：源变址寄存器；</li><li>DI (Destination Index)：目的变址寄存器；</li></ul><p>主要用于存放存储单元在段内的偏移量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。</p><p><strong>控制寄存器：</strong></p><ul><li>IP (Instruction Pointer)：指令指针寄存器；</li><li>FLAG：标志寄存器；</li></ul><p><strong>段寄存器：</strong></p><ul><li>CS (Code Segment)：代码段寄存器；</li><li>DS (Data Segment)：数据段寄存器；</li><li>SS (Stack Segment)：堆栈段寄存器；</li><li>ES (Extra Segment)：附加段寄存器；</li></ul><p>这里我们分别比较一下在x86架构下C语言和arm架构下编译之后的汇编指令不同之处：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;     <span class="hljs-comment">//实现一个最简的a+b功能，并存入变量c</span><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> c = a + b;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">gcc -S main.c<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">.file&quot;main.c&quot;<br>.text<br>.globlmain<br>.typemain, @function<br>main:<br>.LFB0:<br>.cfi_startproc  ;rbp寄存器是64位CPU下的基址寄存器，和8086CPU的16位bp一样<br>pushq%rbp     ;该函数中需要用到rbp寄存器，所以需要先把他原来的值压栈保护起来<br>.cfi_def_cfa_offset 16<br>.cfi_offset 6, -16<br>movq%rsp, %rbp    ;rsp是64位下的栈指针寄存器，这里是将rsp的值丢给rbp，因为局部变量是存放在栈中的，之后会使用rbp来访问局部变量<br>.cfi_def_cfa_register 6<br>movl$10, -12(%rbp)    ;将10存入rbp所指向位置-12的位置 -&gt;  int a = 10;<br>movl$20, -8(%rbp)     ;将20存入rbp所指向位置-8的位置  -&gt; int b = 20;<br>movl-12(%rbp), %edx   ;将变量a的值交给DX寄存器（32位下叫edx，因为是int，这里只使用了32位）<br>movl-8(%rbp), %eax    ;同上，变量b的值丢给AX寄存器<br>addl%edx, %eax        ;将DX和AX寄存器中的值相加，并将结果存在AX中  -&gt;  tmp = a + b<br>movl%eax, -4(%rbp)    ;将20存入rbp所指向位置-4的位置  -&gt; int c = tmp;与上面合在一起就是int c = a + b;<br>movl-4(%rbp), %eax    ;根据约定，将函数返回值放在AX   -&gt; return c;<br>popq%rbp     ;函数执行完毕，出栈<br>.cfi_def_cfa 7, 8<br>ret      ;函数返回<br>.cfi_endproc<br>.LFE0:<br>.sizemain, .-main<br>.ident&quot;GCC: (Ubuntu 7.5.0-6ubuntu2) 7.5.0&quot;<br>.section.note.GNU-stack,&quot;&quot;,@progbits<br></code></pre></div></td></tr></table></figure><p>在arm架构下（Apple M1 Pro芯片）编译的结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">    .section   __TEXT,__text,regular,pure_instructions<br>   .build_version macos, 12, 0    sdk_version 12, 1<br>   .globl _main                           ; -- Begin function main<br>   .p2align   2<br>_main:                                  ; @main<br>   .cfi_startproc<br>; %bb.0:<br>   sub    sp, sp, #16                     ; =16<br>   .cfi_def_cfa_offset 16<br>   str    wzr, [sp, #12]<br>   mov    w8, #10<br>   str    w8, [sp, #8]<br>   mov    w8, #20<br>   str    w8, [sp, #4]<br>   ldr    w8, [sp, #8]<br>   ldr    w9, [sp, #4]<br>   add    w8, w8, w9<br>   str    w8, [sp]<br>   ldr    w0, [sp]<br>   add    sp, sp, #16                     ; =16<br>   ret<br>   .cfi_endproc<br>                                        ; -- End function<br>.subsections_via_symbols<br></code></pre></div></td></tr></table></figure><p>我们发现，在不同的CPU架构下，实际上得到的汇编代码也不一样，并且在arm架构下并没有和x86架构一样的寄存器结构，因此只能使用不同的汇编指令操作来实现。所以这也是为什么C语言不支持跨平台的原因，我们只能将同样的代码在不同的平台上编译之后才能在对应的平台上运行我们的程序。而Java利用了JVM，它提供了很好的平台无关性（当然，JVM本身是不跨平台的），我们的Java程序编译之后，并不是可以由平台直接运行的程序，而是由JVM运行，同时，我们前面说了，JVM（如HotSpot虚拟机），实际上采用的是<code>基于栈的指令集架构</code>，它并没有依赖于寄存器，而是更多的利用操作栈来完成，这样不仅设计和实现起来更简单，并且也能够更加方便地实现跨平台，不太依赖于硬件的支持。</p><p>这里我们对一个类进行反编译查看：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">//和上面的例子一样</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">javap -v target/classes/com/test/Main.class <span class="hljs-comment">#使用javap命令对class文件进行反编译</span><br></code></pre></div></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight nestedtext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">...</span><br><span class="hljs-attribute">public int test();</span><br><span class="hljs-attribute">    descriptor</span><span class="hljs-punctuation">:</span> <span class="hljs-string">()I</span><br>    <span class="hljs-attribute">flags</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ACC_PUBLIC</span><br>    <span class="hljs-attribute">Code</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">stack=2, locals=4, args_size=1</span><br><span class="hljs-attribute">         0</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bipush        10</span><br>         <span class="hljs-attribute">2</span><span class="hljs-punctuation">:</span> <span class="hljs-string">istore_1</span><br>         <span class="hljs-attribute">3</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bipush        20</span><br>         <span class="hljs-attribute">5</span><span class="hljs-punctuation">:</span> <span class="hljs-string">istore_2</span><br>         <span class="hljs-attribute">6</span><span class="hljs-punctuation">:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attribute">7</span><span class="hljs-punctuation">:</span> <span class="hljs-string">iload_2</span><br>         <span class="hljs-attribute">8</span><span class="hljs-punctuation">:</span> <span class="hljs-string">iadd</span><br>         <span class="hljs-attribute">9</span><span class="hljs-punctuation">:</span> <span class="hljs-string">istore_3</span><br>        <span class="hljs-attribute">10</span><span class="hljs-punctuation">:</span> <span class="hljs-string">iload_3</span><br>        <span class="hljs-attribute">11</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ireturn</span><br>      <span class="hljs-attribute">LineNumberTable</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">line 5</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>        <span class="hljs-attribute">line 6</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>        <span class="hljs-attribute">line 7</span><span class="hljs-punctuation">:</span> <span class="hljs-string">6</span><br>        <span class="hljs-attribute">line 8</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>      <span class="hljs-attribute">LocalVariableTable</span><span class="hljs-punctuation">:</span><br>        Start  Length  Slot  Name   Signature<br>            0      12     0  this   Lcom/test/Main;<br>            3       9     1     a   I<br>            6       6     2     b   I<br>           10       2     3     c   I<br></code></pre></div></td></tr></table></figure><p>我们可以看到，java文件编译之后，也会生成类似于C语言那样的汇编指令，但是这些命令都是交给JVM去执行的命令（实际上虚拟机提供了一个类似于物理机的运行环境，也有程序计数器之类的东西），最下方存放的是本地变量（局部变量）表，表示此方法中出现的本地变量，实际上this也在其中，所以我们才能在非静态方法中使用<code>this</code>关键字，在最上方标记了方法的返回值类型、访问权限等。首先介绍一下例子中出现的命令代表什么意思：</p><ul><li>bipush 将单字节的常量值推到栈顶</li><li>istore_1 将栈顶的int类型数值存入到第二个本地变量</li><li>istore_2 将栈顶的int类型数值存入到第三个本地变量</li><li>istore_3 将栈顶的int类型数值存入到第四个本地变量</li><li>iload_1 将第二个本地变量推向栈顶</li><li>iload_2 将第三个本地变量推向栈顶</li><li>iload_3 将第四个本地变量推向栈顶</li><li>iadd 将栈顶的两个int类型变量相加，并将结果压入栈顶</li><li>ireturn 方法的返回操作</li></ul><p>有关详细的指令介绍列表可以参考《深入理解Java虚拟机第三版》附录C。</p><p>JVM运行字节码时，所有的操作基本都是围绕两种数据结构，一种是堆栈（本质是栈结构），还有一种是队列，如果JVM执行某条指令时，该指令需要对数据进行操作，那么被操作的数据在指令执行前，必须要压到堆栈上，JVM会自动将栈顶数据作为操作数。如果堆栈上的数据需要暂时保存起来时，那么它就会被存储到局部变量队列上。</p><p>我们从第一条指令来依次向下解读，显示方法相关属性：</p><div class="hljs code-wrapper"><pre><code class="hljs">descriptor: ()I     //参数以及返回值类型，()I就表示没有形式参数，返回值为基本类型intflags: ACC_PUBLIC   //public访问权限Code:  stack=2, locals=4, args_size=1    //stack表示要用到的最大栈深度，本地变量数，堆栈上最大对象数量（这里指的是this）</code></pre></div><p>有关descriptor的详细属性介绍，我们会放在之后的类结构中进行讲解。</p><p>接着我们来看指令：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>: bipush        <span class="hljs-number">10</span>     //<span class="hljs-number">0</span>是程序偏移地址，然后是指令，最后是操作数<br><span class="hljs-attribute">2</span>: istore_1<br></code></pre></div></td></tr></table></figure><p>这一步操作实际上就是使用<code>bipush</code>将10推向栈顶，接着使用<code>istore_1</code>将当前栈顶数据存放到第二个局部变量中，也就是a，所以这一步执行的是<code>int a = 10</code>操作。</p><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">3</span>: bipush        20<br><span class="hljs-attribute">5</span>: istore_2<br></code></pre></div></td></tr></table></figure><p>同上，这里执行的是<code>int b = 20</code>操作。</p><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">6</span>: iload_1<br><span class="hljs-attribute">7</span>: iload_2<br><span class="hljs-attribute">8</span>: iadd<br></code></pre></div></td></tr></table></figure><p>这里是将第二和第三个局部变量放到栈中，也就是取a和b的值到栈中，最后<code>iadd</code>操作将栈中的两个值相加，结果依然放在栈顶。</p><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">9</span>: istore_3<br><span class="hljs-attribute">10</span>: iload_3<br><span class="hljs-attribute">11</span>: ireturn<br></code></pre></div></td></tr></table></figure><p>将栈顶数据存放到第四个局部变量中，也就是c，执行的是<code>int c = 30</code>，最后取出c的值放入栈顶，使用<code>ireturn</code>返回栈顶值，也就是方法的返回值。</p><p>至此，方法执行完毕。</p><p>实际上我们发现，JVM执行的命令基本都是入栈出栈等，而且大部分指令都是没有操作数的，传统的汇编指令有一操作数、二操作数甚至三操作数的指令，Java相比C编译出来的汇编指令，执行起来会更加复杂，实现某个功能的指令条数也会更多，所以Java的执行效率实际上是不如C/C++的，虽然能够很方便地实现跨平台，但是性能上大打折扣，所以在性能要求比较苛刻的Android上，采用的是定制版的JVM，并且是基于寄存器的指令集架构。此外，在某些情况下，我们还可以使用JNI机制来通过Java调用C/C++编写的程序以提升性能（也就是本地方法，使用到native关键字）</p><hr /><h2 id="现在与未来">现在与未来</h2><p>随着时代的变迁，JVM的实现多种多样，而我们还要从最初的虚拟机说起。</p><h3 id="虚拟机的发展历程">虚拟机的发展历程</h3><p>在1996，Java1.0面世时，第一款商用虚拟机Sun ClassicVM开始了它的使命，这款虚拟机提供了一个Java解释器，也就是将我们的class文件进行读取，最后像上面一样得到一条一条的命令，JVM再将指令依次执行。虽然这样的运行方式非常的简单易懂，但是它的效率实际上是很低的，就像你耳机里一边在放六级听力，你必须同时记在脑海里面然后等着问问题，再去选择问题的答案一样，更重要的是同样的代码每次都需要重新翻译再执行。</p><p>这个时候我们就需要更加高效的方式来运行Java程序，随着后面的发展，现在大多数的主流的JVM都包含即时<strong>编译器</strong>。JVM会根据当前代码的进行判断，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为即时编译器（JustIn Time Compiler）</p><p><imgsrc="https://img2018.cnblogs.com/blog/955092/201911/955092-20191118100603404-2016014845.jpg"alt="img" /></p><p>在JDK1.4时，Sun ClassicVM完全退出了历史舞台，取而代之的是至今都在使用的HotSpotVM，它是目前使用最广泛的虚拟机，拥有上面所说的热点代码探测技术、准确式内存管理（虚拟机可以知道内存中某个位置的数据具体是什么类型）等技术，而我们之后的章节都是基于HotSpot虚拟机进行讲解。</p><h3 id="虚拟机发展的未来">虚拟机发展的未来</h3><p>2018年4月，OracleLabs公开了最新的GraalVM，它是一种全新的虚拟机，它能够实现所有的语言统一运行在虚拟机中。</p><p><imgsrc="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fatoracle.cn%2FUploads%2Fgraalvm%2Fgraalvm.png&amp;refer=http%3A%2F%2Fatoracle.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1646031057&amp;t=1cfa58c28f680c3f23eb85bde2d31e1f"alt="img" /></p><p>Graal VM被官方称为“Universal VM”和“PolyglotVM”，这是一个在HotSpot虚拟机基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用，这里“任何语言”包括了Java、Scala、Groovy、Kotlin等基于Java虚拟机之上的语言，还包括了C、C++、Rust等基于LLVM的语言，同时支持其他像JavaScript、Ruby、Python和R语言等等。GraalVM可以无额外开销地混合使用这些编程语言，支持不同语言中混用对方的接口和对象，也能够支持这些语言使用已经编写好的本地库文件。</p><p>GraalVM的基本工作原理是将这些语言的源代码（例如JavaScript）或源代码编译后的中间格式（例如LLVM字节码）通过解释器转换为能被GraalVM接受的中间表示（IntermediateRepresentation，IR），譬如设计一个解释器专门对LLVM输出的字节码进行转换来支持C和C++语言，这个过程称为“程序特化”（Specialized，也常称为PartialEvaluation）。GraalVM提供了Truffle工具集来快速构建面向一种新语言的解释器，并用它构建了一个称为Sulong的高性能LLVM字节码解释器。</p><p>目前最新的SpringBoot已经提供了本地运行方案：https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/</p><blockquote><p>Spring Native支持使用<a href="https://www.graalvm.org/">GraalVM</a><ahref="https://www.graalvm.org/reference-manual/native-image/">原生镜像</a>编译器将Spring应用程序编译为本机可执行文件。</p><p>与Java虚拟机相比，原生映像可以为许多类型的工作负载实现更简单、更加持续的托管。包括微服务、非常适合容器的功能工作负载和<ahref="https://kubernetes.io/">Kubernetes</a></p><p>使用本机映像提供了关键优势，如即时启动、即时峰值性能和减少内存消耗。</p><p>GraalVM原生项目预计随着时间的推移会改进一些缺点和权衡。构建本机映像是一个比常规应用程序慢的繁重过程。热身后的本机映像运行时优化较少。最后，它不如JVM成熟，行为各不相同。</p><p>常规JVM和此原生映像平台的主要区别是：</p><ul><li>从主入口点对应用程序进行静态分析，在构建时进行。</li><li>未使用的部件将在构建时删除。</li><li>反射、资源和动态代理需要配置。</li><li>Classpath在构建时是固定的。</li><li>没有类惰性加载：可执行文件中运送的所有内容将在启动时加载到内存中。</li><li>一些代码将在构建时运行。</li><li>Java应用程序的某些方面有一些不受完全支持<ahref="https://www.graalvm.org/reference-manual/native-image/Limitations/">的限制</a>。</li></ul><p>该项目的目标是孵化对Spring Native的支持，Spring Native是SpringJVM的替代品，并提供旨在打包在轻量级容器中的原生部署选项。在实践中，目标是在这个新平台上支持您的Spring应用程序，几乎未经修改。</p></blockquote><p>优点：</p><ol type="1"><li>立即启动，一般启动时间小于100ms</li><li>更低的内存消耗</li><li>独立部署，不再需要JVM</li><li>同样的峰值性能要比JVM消耗的内存小</li></ol><p>缺点：</p><ol type="1"><li>构建时间长</li><li>只支持新的Springboot版本（2.4.4+）</li></ol><hr /><h2 id="手动编译jdk8">手动编译JDK8</h2><p>学习JVM最关键的是研究底层C/C++源码，我们首先需要搭建一个测试环境，方便我们之后对底层源码进行调试。但是编译这一步的坑特别多，请务必保证跟教程中的环境一致，尤其是编译环境，版本不能太高，因为JDK8属于比较早期的版本了，否则会遇到各种各样奇奇怪怪的问题。</p><h3 id="环境配置">环境配置</h3><ul><li>操作系统：Ubuntu 20.04 Server</li><li>硬件配置：i7-4790 4C8T/ 16G内存 / 128G硬盘（不能用树莓派或是arm芯片Mac的虚拟机，配置越高越好，不然卡爆）</li><li>调试工具：Jetbrains Gateway（服务器运行CLionBackend程序，界面在Mac上显示）</li><li>OpenJDK源码：https://codeload.github.com/openjdk/jdk/zip/refs/tags/jdk8-b120</li><li>编译环境：<ul><li>gcc-4.8</li><li>g++-4.8</li><li>make-3.81</li><li>openjdk-8</li></ul></li></ul><h3 id="开始折腾">开始折腾</h3><p>首选需要在我们的测试服务器上安装Ubuntu 20.04Server系统，并通过ssh登录到服务器：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-96-generic x86_64)<br><br> * Documentation:  https://help.ubuntu.com<br> * Management:     https://landscape.canonical.com<br> * Support:        https://ubuntu.com/advantage<br><br>  System information as of Sat 29 Jan 2022 10:33:03 AM UTC<br><br>  System load:  0.08               Processes:               156<br>  Usage of /:   5.5% of 108.05GB   Users logged <span class="hljs-keyword">in</span>:         0<br>  Memory usage: 5%                 IPv4 address <span class="hljs-keyword">for</span> enp2s0: 192.168.10.66<br>  Swap usage:   0%                 IPv4 address <span class="hljs-keyword">for</span> enp2s0: 192.168.10.75<br>  Temperature:  32.0 C<br><br><br>37 updates can be applied immediately.<br>To see these additional updates run: apt list --upgradable<br><br><br>Last login: Sat Jan 29 10:27:06 2022<br>nagocoler@ubuntu-server:~$ <br></code></pre></div></td></tr></table></figure><p>先安装一些基本的依赖：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo apt install build-essential libxrender-dev xorg-dev libasound2-dev libcups2-dev gawk zip libxtst-dev libxi-dev libxt-dev gobjc<br></code></pre></div></td></tr></table></figure><p>接着我们先将JDK的编译环境配置好，首先是安装gcc和g++的4.8版本，但是最新的源没有这个版本了，我们先导入旧版软件源：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo vim /etc/apt/sources.list<br></code></pre></div></td></tr></table></figure><p>在最下方添加旧版源地址并保存：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//</span>archive.ubuntu.com/ubuntu xenial main<br>deb http:<span class="hljs-regexp">//</span>archive.ubuntu.com/ubuntu xenial universe<br></code></pre></div></td></tr></table></figure><p>接着更新一下apt源信息，并安装gcc和g++：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo apt update<br>sudo apt install gcc-4.8 g++-4.8<br></code></pre></div></td></tr></table></figure><p>接着配置：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100<br>sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100<br></code></pre></div></td></tr></table></figure><p>最后查看版本是否为4.8版本：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nagocoler@ubuntu-server:~$ gcc --version<br>gcc (Ubuntu 4.8.5-4ubuntu2) 4.8.5<br>Copyright (C) 2015 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br><br>nagocoler@ubuntu-server:~$ g++ --version<br>g++ (Ubuntu 4.8.5-4ubuntu2) 4.8.5<br>Copyright (C) 2015 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br></code></pre></div></td></tr></table></figure><p>接着安装make 3.81版本，需要从官方下载：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">wget https://ftp.gnu.org/gnu/make/make-3.81.tar.gz<br></code></pre></div></td></tr></table></figure><p>下载好之后进行解压，并进入目录：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">tar -zxvf make-3.81.tar.gz <br><span class="hljs-built_in">cd</span> make-3.81/<br></code></pre></div></td></tr></table></figure><p>接着我们修改一下代码，打开<code>glob/glob.c</code>文件：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">...<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  HAVE_CONFIG_H</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;config.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __alloca alloca   &lt;- 添加这一句</span><br><span class="hljs-comment">/* Enable GNU extensions </span><br><span class="hljs-comment">...</span><br></code></pre></div></td></tr></table></figure><p>接着进行配置并完成编译和安装：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">bash configure<br>sudo make install<br></code></pre></div></td></tr></table></figure><p>安装完成后，将make已经变成3.81版本了：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nagocoler@ubuntu-server:~/make-3.81$ make -verison<br>GNU Make 3.81<br>Copyright (C) 2006  Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.<br>There is NO warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A<br>PARTICULAR PURPOSE.<br></code></pre></div></td></tr></table></figure><p>由于JDK中某些代码是Java编写的，所以我们还需要安装一个启动JDK，启动JDK可以是当前版本或低一版本，比如我们要编译JDK8的源码，那么就可以使用JDK7、JDK8作为启动JDK，对源码中的一些java文件进行编译。这里我们选择安装OpenJDK8作为启动JDK：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo apt install openjdk-8-jdk<br></code></pre></div></td></tr></table></figure><p>这样，我们的系统环境就准备完成了，接着我们需要下载OpenJDK8的源码（已经放在网盘了）解压：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">unzip jdk-jdk8-b120.zip<br></code></pre></div></td></tr></table></figure><p>接着我们需要安装JetBrainsGateway在我们的服务器上导入项目，这里我们使用CLion后端，等待下载远程后端，这样我们的Linux服务器上虽然没有图形化界面，但是依然可以使用IDEA、CLion等工具，只是服务器上只有后端程序，而界面由我们电脑上的前端程序提供（目前此功能还在Beta阶段，暂不支持arm架构的Linux服务器）整个过程根据服务器配置决定可能需要5-20分钟。</p><p>完成之后，我们操作起来就很方便了，界面和IDEA其实差不多，我们打开终端，开始进行配置：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">bash configure --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FIELS=0<br></code></pre></div></td></tr></table></figure><p>配置完成后，再次确认是否和教程中的配置信息一致：</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">Configuration summary:<br><span class="hljs-bullet">* </span>Debug level:    slowdebug<br><span class="hljs-bullet">* </span>JDK variant:    normal<br><span class="hljs-bullet">* </span>JVM variants:   server<br><span class="hljs-bullet">* </span>OpenJDK target: OS: linux, CPU architecture: x86, address length: 64<br><br>Tools summary:<br><span class="hljs-bullet">* </span>Boot JDK:       openjdk version &quot;1.8.0_312&quot; OpenJDK Runtime Environment (build 1.8.0_312-8u312-b07-0ubuntu1~20.04-b07) OpenJDK 64-Bit Server VM (build 25.312-b07, mixed mode)  (at /usr/lib/jvm/java-8-openjdk-amd64)<br><span class="hljs-bullet">* </span>C Compiler:     gcc-4.8 (Ubuntu 4.8.5-4ubuntu2) version 4.8.5 (at /usr/bin/gcc-4.8)<br><span class="hljs-bullet">* </span>C<span class="hljs-code">++ Compiler:   g+</span><span class="hljs-code">+-4.8 (Ubuntu 4.8.5-4ubuntu2) version 4.8.5 (at /usr/bin/g+</span>+-4.8)<br><br>Build performance summary:<br><span class="hljs-bullet">* </span>Cores to use:   3<br><span class="hljs-bullet">* </span>Memory limit:   3824 MB<br><span class="hljs-bullet">* </span>ccache status:  not installed (consider installing)<br><br><span class="hljs-symbol">WARNING: </span>The result of this configuration has overridden an older<br>configuration. You <span class="hljs-strong">*should*</span> run <span class="hljs-emphasis">&#x27;make clean&#x27;</span> to make sure you get a<br>proper build. Failure to do so might result in strange build problems.<br></code></pre></div></td></tr></table></figure><p>接着我们需要修改几个文件，不然一会会编译失败，首先是<code>hotspot/make/linux/Makefile</code>文件：</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">原有的 SUPPORTED_OS_VERSION <span class="hljs-operator">=</span> <span class="hljs-number">2.4</span>% <span class="hljs-number">2.5</span>% <span class="hljs-number">2.6</span>% <span class="hljs-number">3</span>%<br>修改为 SUPPORTED_OS_VERSION <span class="hljs-operator">=</span> <span class="hljs-number">2.4</span>% <span class="hljs-number">2.5</span>% <span class="hljs-number">2.6</span>% <span class="hljs-number">3</span>% <span class="hljs-number">4</span>% <span class="hljs-number">5</span>%<br></code></pre></div></td></tr></table></figure><p>接着是<code>hotspot/make/linux/makefiles/gcc.make</code>文件：</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">原有的 <span class="hljs-attr">WARNINGS_ARE_ERRORS</span> = -Werror<br>修改为 <span class="hljs-comment">#WARNINGS_ARE_ERRORS = -Werror</span><br></code></pre></div></td></tr></table></figure><p>接着是<code>nashorn/make/BuildNashorn.gmk</code>文件：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">  <span class="hljs-variable">$</span>(<span class="hljs-built_in">CP</span>) <span class="hljs-literal">-R</span> <span class="hljs-literal">-p</span> <span class="hljs-variable">$</span>(NASHORN_OUTPUTDIR)/nashorn_classes/* <span class="hljs-variable">$</span>(@D)/<br>  <span class="hljs-variable">$</span>(FIXPATH) <span class="hljs-variable">$</span>(JAVA) \<br>原有的 <span class="hljs-literal">-cp</span> <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(NASHORN_OUTPUTDIR)/nasgen_classes<span class="hljs-variable">$</span>(PATH_SEP)<span class="hljs-variable">$</span>(NASHORN_OUTPUTDIR)/nashorn_classes&quot;</span> \<br>修改为  <span class="hljs-literal">-Xbootclasspath</span>/p:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>(NASHORN_OUTPUTDIR)/nasgen_classes<span class="hljs-variable">$</span>(PATH_SEP)<span class="hljs-variable">$</span>(NASHORN_OUTPUTDIR)/nashorn_classes&quot;</span> \<br>   jdk.nashorn.internal.tools.nasgen.Main <span class="hljs-variable">$</span>(@D) jdk.nashorn.internal.objects <span class="hljs-variable">$</span>(@D)<br></code></pre></div></td></tr></table></figure><p>OK，修改完成，接着我们就可以开始编译了：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">make</span> <span class="hljs-keyword">all</span><br></code></pre></div></td></tr></table></figure><p>整个编译过程大概需要持续10-20分钟，请耐心等待。构建完成后提示：</p><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>---- Build times -------<br>Start 2022-01-29 11:36:35<br>End   2022-01-29 11:48:20<br><span class="hljs-attribute">00</span>:00:30 corba<br><span class="hljs-attribute">00</span>:00:25 demos<br><span class="hljs-attribute">00</span>:02:39 docs<br><span class="hljs-attribute">00</span>:03:05 hotspot<br><span class="hljs-attribute">00</span>:00:27 images<br><span class="hljs-attribute">00</span>:00:17 jaxp<br><span class="hljs-attribute">00</span>:00:31 jaxws<br><span class="hljs-attribute">00</span>:03:02 jdk<br><span class="hljs-attribute">00</span>:00:38 langtools<br><span class="hljs-attribute">00</span>:00:11 nashorn<br><span class="hljs-attribute">00</span>:11:45 TOTAL<br><span class="hljs-literal">-</span>------------------------<br>Finished building OpenJDK for target &#x27;all&#x27;<br></code></pre></div></td></tr></table></figure><p>只要按照我们的教程一步步走，别漏了，应该是直接可以完成的，当然难免可能有的同学出现了奇奇怪怪的问题，加油，慢慢折腾，总会成功的~</p><p>接着我们就可以创建一个测试配置了，首先打开设置页面，找到<code>自定义构建目标</code>：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux37s99nj31b80u076s.jpg"alt="image-20220129195318339" /></p><p>点击<code>应用</code>即可，接着打开运行配置，添加一个新的自定义配置：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux3axcknj31ai0u0wgy.jpg"alt="image-20220129195459914" /></p><p>选择我们编译完成的java程序，然后测试-version查看版本信息，去掉下方的构建。</p><p>接着直接运行即可：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>nagocoler<span class="hljs-regexp">/jdk-jdk8-b120/</span>build<span class="hljs-regexp">/linux-x86_64-normal-server-slowdebug/</span>jdk<span class="hljs-regexp">/bin/</span>java -version<br>openjdk version <span class="hljs-string">&quot;1.8.0-internal-debug&quot;</span><br>OpenJDK Runtime Environment (build <span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>-internal-debug-nagocoler_2022_01_29_11_36-b00)<br>OpenJDK <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">25.0</span>-b62-debug, mixed mode)<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>我们可以将工作目录修改到其他地方，接着我们创建一个Java文件并完成编译，然后测试能否使用我们编译的JDK运行：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux3dp9bsj31ai0u0wh5.jpg"alt="image-20220129195801789" /></p><p>在此目录下编写一个Java程序，然后编译：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>        &#125;       <br>&#125;       <br></code></pre></div></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nagocoler@ubuntu-server:~$ <span class="hljs-built_in">cd</span> JavaHelloWorld/<br>nagocoler@ubuntu-server:~/JavaHelloWorld$ vim Main.java<br>nagocoler@ubuntu-server:~/JavaHelloWorld$ javac Main.java <br>nagocoler@ubuntu-server:~/JavaHelloWorld$ <span class="hljs-built_in">ls</span><br>Main.class  Main.java<br></code></pre></div></td></tr></table></figure><p>点击运行，成功得到结果：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>nagocoler<span class="hljs-regexp">/jdk-jdk8-b120/</span>build<span class="hljs-regexp">/linux-x86_64-normal-server-slowdebug/</span>jdk<span class="hljs-regexp">/bin/</span>java Main<br>Hello World!<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>我们还可以在CLion前端页面中进行断点调试，比如我们测试一个入口点JavaMain，在<code>jdk/src/share/bin/java.c</code>中的JavaMain方法：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux47wgp9j31z00sc0xc.jpg"alt="image-20220129200244279" /></p><p>点击右上角调试按钮，可以成功进行调试：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux4lmirkj31mk0u0gq2.jpg"alt="image-20220129200314691" /></p><p>至此，在Ubuntu系统上手动编译OpenJDK8完成。</p><hr /><h2 id="jvm启动流程探究">JVM启动流程探究</h2><p>前面我们完成了JDK8的编译，也了解了如何进行断点调试，现在我们就可以来研究一下JVM的启动流程了，首先我们要明确，虚拟机的启动入口位于<code>jdk/src/share/bin/java.c</code>的<code>JLI_Launch</code>函数，整个流程分为如下几个步骤：</p><ol type="1"><li>配置JVM装载环境</li><li>解析虚拟机参数</li><li>设置线程栈大小</li><li>执行JavaMain方法</li></ol><p>首先我们来看看<code>JLI_Launch</code>函数是如何定义的：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span><br><span class="hljs-title function_">JLI_Launch</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv,              <span class="hljs-comment">/* main argc, argc */</span></span><br><span class="hljs-params">        <span class="hljs-type">int</span> jargc, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** jargv,          <span class="hljs-comment">/* java args */</span></span><br><span class="hljs-params">        <span class="hljs-type">int</span> appclassc, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** appclassv,  <span class="hljs-comment">/* app classpath */</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* fullversion,                <span class="hljs-comment">/* full version defined */</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* dotversion,                 <span class="hljs-comment">/* dot version defined */</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pname,                      <span class="hljs-comment">/* program name */</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* lname,                      <span class="hljs-comment">/* launcher name */</span></span><br><span class="hljs-params">        jboolean javaargs,                      <span class="hljs-comment">/* JAVA_ARGS */</span></span><br><span class="hljs-params">        jboolean cpwildcard,                    <span class="hljs-comment">/* classpath wildcard */</span></span><br><span class="hljs-params">        jboolean javaw,                         <span class="hljs-comment">/* windows-only javaw */</span></span><br><span class="hljs-params">        jint     ergo_class                     <span class="hljs-comment">/* ergnomics policy */</span></span><br><span class="hljs-params">)</span>;<br></code></pre></div></td></tr></table></figure><p>可以看到在入口点的参数有很多个，其中包括当前的完整版本名称、简短版本名称、运行参数、程序名称、启动器名称等。</p><p>首先会进行一些初始化操作以及Debug信息打印配置等：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">InitLauncher(javaw);<br>DumpState();<br><span class="hljs-keyword">if</span> (JLI_IsTraceLauncher()) &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Command line args:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc ; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);<br>    &#125;<br>    AddOption(<span class="hljs-string">&quot;-Dsun.java.launcher.diag=true&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着就是选择一个合适的JRE版本：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Make sure the specified version of the JRE is running.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * There are three things to note about the SelectVersion() routine:</span><br><span class="hljs-comment"> *  1) If the version running isn&#x27;t correct, this routine doesn&#x27;t</span><br><span class="hljs-comment"> *     return (either the correct version has been exec&#x27;d or an error</span><br><span class="hljs-comment"> *     was issued).</span><br><span class="hljs-comment"> *  2) Argc and Argv in this scope are *not* altered by this routine.</span><br><span class="hljs-comment"> *     It is the responsibility of subsequent code to ignore the</span><br><span class="hljs-comment"> *     arguments handled by this routine.</span><br><span class="hljs-comment"> *  3) As a side-effect, the variable &quot;main_class&quot; is guaranteed to</span><br><span class="hljs-comment"> *     be set (if it should ever be set).  This isn&#x27;t exactly the</span><br><span class="hljs-comment"> *     poster child for structured programming, but it is a small</span><br><span class="hljs-comment"> *     price to pay for not processing a jar file operand twice.</span><br><span class="hljs-comment"> *     (Note: This side effect has been disabled.  See comment on</span><br><span class="hljs-comment"> *     bugid 5030265 below.)</span><br><span class="hljs-comment"> */</span><br>SelectVersion(argc, argv, &amp;main_class);<br></code></pre></div></td></tr></table></figure><p>接着是创建JVM执行环境，例如需要确定数据模型，是32位还是64位，以及jvm本身的一些配置在jvm.cfg文件中读取和解析：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">CreateExecutionEnvironment(&amp;argc, &amp;argv,<br>                               jrepath, <span class="hljs-keyword">sizeof</span>(jrepath),<br>                               jvmpath, <span class="hljs-keyword">sizeof</span>(jvmpath),<br>                               jvmcfg,  <span class="hljs-keyword">sizeof</span>(jvmcfg));<br></code></pre></div></td></tr></table></figure><p>此函数只在头文件中定义，具体的实现是根据不同平台而定的。接着会动态加载jvm.so这个共享库，并把jvm.so中的相关函数导出并且初始化，而启动JVM的函数也在其中：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">6</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>比如mac平台下的实现：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">jboolean<br><span class="hljs-title function_">LoadJavaVM</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *jvmpath, InvocationFunctions *ifn)</span><br>&#123;<br>    Dl_info dlinfo;<br>    <span class="hljs-type">void</span> *libjvm;<br><br>    JLI_TraceLauncher(<span class="hljs-string">&quot;JVM path is %s\n&quot;</span>, jvmpath);<br><br>    libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);<br>    <span class="hljs-keyword">if</span> (libjvm == <span class="hljs-literal">NULL</span>) &#123;<br>        JLI_ReportErrorMessage(DLL_ERROR1, __LINE__);<br>        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());<br>        <span class="hljs-keyword">return</span> JNI_FALSE;<br>    &#125;<br><br>    ifn-&gt;CreateJavaVM = (CreateJavaVM_t)<br>        dlsym(libjvm, <span class="hljs-string">&quot;JNI_CreateJavaVM&quot;</span>);<br>    <span class="hljs-keyword">if</span> (ifn-&gt;CreateJavaVM == <span class="hljs-literal">NULL</span>) &#123;<br>        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());<br>        <span class="hljs-keyword">return</span> JNI_FALSE;<br>    &#125;<br><br>    ifn-&gt;GetDefaultJavaVMInitArgs = (GetDefaultJavaVMInitArgs_t)<br>        dlsym(libjvm, <span class="hljs-string">&quot;JNI_GetDefaultJavaVMInitArgs&quot;</span>);<br>    <span class="hljs-keyword">if</span> (ifn-&gt;GetDefaultJavaVMInitArgs == <span class="hljs-literal">NULL</span>) &#123;<br>        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());<br>        <span class="hljs-keyword">return</span> JNI_FALSE;<br>    &#125;<br><br>    ifn-&gt;GetCreatedJavaVMs = (GetCreatedJavaVMs_t)<br>    dlsym(libjvm, <span class="hljs-string">&quot;JNI_GetCreatedJavaVMs&quot;</span>);<br>    <span class="hljs-keyword">if</span> (ifn-&gt;GetCreatedJavaVMs == <span class="hljs-literal">NULL</span>) &#123;<br>        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());<br>        <span class="hljs-keyword">return</span> JNI_FALSE;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> JNI_TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后就是对JVM进行初始化了：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">return</span> JVMInit(&amp;ifn, threadStackSize, argc, argv, mode, what, ret);<br></code></pre></div></td></tr></table></figure><p>这也是由平台决定的，比如Mac下的实现为：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span><br><span class="hljs-title function_">JVMInit</span><span class="hljs-params">(InvocationFunctions* ifn, jlong threadStackSize,</span><br><span class="hljs-params">                 <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv,</span><br><span class="hljs-params">                 <span class="hljs-type">int</span> mode, <span class="hljs-type">char</span> *what, <span class="hljs-type">int</span> ret)</span> &#123;<br>    <span class="hljs-keyword">if</span> (sameThread) &#123;<br>        <span class="hljs-comment">//无需关心....</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//正常情况下走这个</span><br>        <span class="hljs-keyword">return</span> ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到最后进入了一个<code>ContinueInNewThread</code>函数（在刚刚的<code>java.c</code>中实现），这个函数会创建一个新的线程来执行：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span><br><span class="hljs-title function_">ContinueInNewThread</span><span class="hljs-params">(InvocationFunctions* ifn, jlong threadStackSize,</span><br><span class="hljs-params">                    <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv,</span><br><span class="hljs-params">                    <span class="hljs-type">int</span> mode, <span class="hljs-type">char</span> *what, <span class="hljs-type">int</span> ret)</span><br>&#123;<br><br>    ...<br><br>      rslt = ContinueInNewThread0(JavaMain, threadStackSize, (<span class="hljs-type">void</span>*)&amp;args);<br>      <span class="hljs-comment">/* If the caller has deemed there is an error we</span><br><span class="hljs-comment">       * simply return that, otherwise we return the value of</span><br><span class="hljs-comment">       * the callee</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">return</span> (ret != <span class="hljs-number">0</span>) ? ret : rslt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着进入了一个名为<code>ContinueInNewThread0</code>的函数，可以看到它将<code>JavaMain</code>函数传入作为参数，而此函数定义的第一个参数类型是一个函数指针：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span><br><span class="hljs-title function_">ContinueInNewThread0</span><span class="hljs-params">(<span class="hljs-type">int</span> (JNICALL *continuation)(<span class="hljs-type">void</span> *), jlong stack_size, <span class="hljs-type">void</span> * args)</span> &#123;<br>    <span class="hljs-type">int</span> rslt;<br>    <span class="hljs-type">pthread_t</span> tid;<br>    <span class="hljs-type">pthread_attr_t</span> attr;<br>    pthread_attr_init(&amp;attr);<br>    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);<br><br>    <span class="hljs-keyword">if</span> (stack_size &gt; <span class="hljs-number">0</span>) &#123;<br>      pthread_attr_setstacksize(&amp;attr, stack_size);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pthread_create(&amp;tid, &amp;attr, (<span class="hljs-type">void</span> *(*)(<span class="hljs-type">void</span>*))continuation, (<span class="hljs-type">void</span>*)args) == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">void</span> * tmp;<br>      pthread_join(tid, &amp;tmp);<br>      rslt = (<span class="hljs-type">int</span>)tmp;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * Continue execution in current thread if for some reason (e.g. out of</span><br><span class="hljs-comment">      * memory/LWP)  a new thread can&#x27;t be created. This will likely fail</span><br><span class="hljs-comment">      * later in continuation as JNI_CreateJavaVM needs to create quite a</span><br><span class="hljs-comment">      * few new threads, anyway, just give it a try..</span><br><span class="hljs-comment">      */</span><br>      rslt = continuation(args);<br>    &#125;<br><br>    pthread_attr_destroy(&amp;attr);<br>    <span class="hljs-keyword">return</span> rslt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后实际上是在新的线程中执行<code>JavaMain</code>函数，最后我们再来看看此函数里面做了什么事情：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Initialize the virtual machine */</span><br>start = CounterGet();<br><span class="hljs-keyword">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;<br>    JLI_ReportErrorMessage(JVM_ERROR1);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第一步初始化虚拟机，如果报错直接退出。接着就是加载主类（至于具体如何加载一个类，我们会放在后面进行讲解），因为主类是我们Java程序的入口点：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Get the application&#x27;s main class.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * See bugid 5030265.  The Main-Class name has already been parsed</span><br><span class="hljs-comment"> * from the manifest, but not parsed properly for UTF-8 support.</span><br><span class="hljs-comment"> * Hence the code here ignores the value previously extracted and</span><br><span class="hljs-comment"> * uses the pre-existing code to reextract the value.  This is</span><br><span class="hljs-comment"> * possibly an end of release cycle expedient.  However, it has</span><br><span class="hljs-comment"> * also been discovered that passing some character sets through</span><br><span class="hljs-comment"> * the environment has &quot;strange&quot; behavior on some variants of</span><br><span class="hljs-comment"> * Windows.  Hence, maybe the manifest parsing code local to the</span><br><span class="hljs-comment"> * launcher should never be enhanced.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Hence, future work should either:</span><br><span class="hljs-comment"> *     1)   Correct the local parsing code and verify that the</span><br><span class="hljs-comment"> *          Main-Class attribute gets properly passed through</span><br><span class="hljs-comment"> *          all environments,</span><br><span class="hljs-comment"> *     2)   Remove the vestages of maintaining main_class through</span><br><span class="hljs-comment"> *          the environment (and remove these comments).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This method also correctly handles launching existing JavaFX</span><br><span class="hljs-comment"> * applications that may or may not have a Main-Class manifest entry.</span><br><span class="hljs-comment"> */</span><br>mainClass = LoadMainClass(env, mode, what);<br></code></pre></div></td></tr></table></figure><p>某些没有主方法的Java程序比如JavaFX应用，会获取ApplicationMainClass：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * In some cases when launching an application that needs a helper, e.g., a</span><br><span class="hljs-comment"> * JavaFX application with no main method, the mainClass will not be the</span><br><span class="hljs-comment"> * applications own main class but rather a helper class. To keep things</span><br><span class="hljs-comment"> * consistent in the UI we need to track and report the application main class.</span><br><span class="hljs-comment"> */</span><br>appClass = GetApplicationClass(env);<br></code></pre></div></td></tr></table></figure><p>初始化完成：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * PostJVMInit uses the class name as the application name for GUI purposes,</span><br><span class="hljs-comment"> * for example, on OSX this sets the application name in the menu bar for</span><br><span class="hljs-comment"> * both SWT and JavaFX. So we&#x27;ll pass the actual application class here</span><br><span class="hljs-comment"> * instead of mainClass as that may be a launcher or helper class instead</span><br><span class="hljs-comment"> * of the application class.</span><br><span class="hljs-comment"> */</span><br>PostJVMInit(env, appClass, vm);<br></code></pre></div></td></tr></table></figure><p>接着就是获取主类中的主方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The LoadMainClass not only loads the main class, it will also ensure</span><br><span class="hljs-comment"> * that the main method&#x27;s signature is correct, therefore further checking</span><br><span class="hljs-comment"> * is not required. The main method is invoked here so that extraneous java</span><br><span class="hljs-comment"> * stacks are not in the application stack trace.</span><br><span class="hljs-comment"> */</span><br>mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class="hljs-string">&quot;main&quot;</span>,<br>                                   <span class="hljs-string">&quot;([Ljava/lang/String;)V&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>没错，在字节码中<code>void main(String[] args)</code>表示为<code>([Ljava/lang/String;)V</code>我们之后会详细介绍。接着就是调用主方法了：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Invoke main method. */</span><br>(*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);<br></code></pre></div></td></tr></table></figure><p>调用后，我们的Java程序就开飞速运行起来，直到走到主方法的最后一行返回：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The launcher&#x27;s exit code (in the absence of calls to</span><br><span class="hljs-comment"> * System.exit) will be non-zero if main threw an exception.</span><br><span class="hljs-comment"> */</span><br>ret = (*env)-&gt;ExceptionOccurred(env) == <span class="hljs-literal">NULL</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>LEAVE();<br></code></pre></div></td></tr></table></figure><p>至此，一个Java程序的运行流程结束，在最后LEAVE函数中会销毁JVM。我们可以进行断点调试来查看是否和我们推出的结论一致：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux4uqcxpj31sr0u0td4.jpg"alt="image-20220129211342240" /></p><p>还是以我们之前编写的测试类进行，首先来到调用之前，我们看到主方法执行之前，控制台没有输出任何内容，接着我们执行此函数，再来观察控制台的变化：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux4w5322j31zt0u0afp.jpg"alt="image-20220129211450939" /></p><p>可以看到，主方法执行完成之后，控制台也成功输出了Hello World！</p><p>继续下一步，整个Java程序执行完成，得到退出状态码<code>0</code>：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux4ydghaj31bk0eimy7.jpg"alt="image-20220129211540210" /></p><p>成功验证，最后总结一下整个执行过程：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux50ahdrj31d30u0tdu.jpg"alt="image-20220129213143973" /></p><hr /><h2 id="jni调用本地方法">JNI调用本地方法</h2><p>Java还有一个JNI机制，它的全称：Java NativeInterface，即Java本地接口。它允许在Java虚拟机内运行的Java代码与其他编程语言（如C/C++和汇编语言）编写的程序和库进行交互（在Android开发中用得比较多）比如我们现在想要让C语言程序帮助我们的Java程序实现a+b的运算，首先我们需要创建一个本地方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//本地方法使用native关键字标记，无需任何实现，交给C语言实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建好后，接着点击构建按钮，会出现一个out文件夹，也就是生成的class文件在其中，接着我们直接生成对应的C头文件：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">javah -classpath out/production/SimpleHelloWorld -d ./jni com.test.Main<br></code></pre></div></td></tr></table></figure><p>生成的头文件位于jni文件夹下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-comment">/* Header for class com_test_Main */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Included_com_test_Main</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Included_com_test_Main</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_test_Main</span><br><span class="hljs-comment"> * Method:    sum</span><br><span class="hljs-comment"> * Signature: (II)V</span><br><span class="hljs-comment"> */</span><br>JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title function_">Java_com_test_Main_sum</span><br>  <span class="hljs-params">(JNIEnv *, jclass, jint, jint)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><p>接着我们在CLion中新建一个C++项目，并引入刚刚生成的头文件，并导入jni相关头文件（在JDK文件夹中）首先修改CMake文件：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.21</span>)<br><span class="hljs-keyword">project</span>(JNITest)<br><br><span class="hljs-keyword">include_directories</span>(/Library/Java/JavaVirtualMachines/zulu-<span class="hljs-number">8</span>.jdk/Contents/Home/<span class="hljs-keyword">include</span>)<br><span class="hljs-keyword">include_directories</span>(/Library/Java/JavaVirtualMachines/zulu-<span class="hljs-number">8</span>.jdk/Contents/Home/<span class="hljs-keyword">include</span>/darwin)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">14</span>)<br><br><span class="hljs-keyword">add_executable</span>(JNITest com_test_Main.cpp com_test_Main.h)<br></code></pre></div></td></tr></table></figure><p>接着就可以编写实现了，首先认识一下引用类型对照表：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux540wn7j30xc0h1q47.jpg"alt="img" /></p><p>所以我们这里直接返回a+b即可：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;com_test_Main.h&quot;</span></span><br><br><span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">Java_com_test_Main_sum</span></span><br><span class="hljs-function">        <span class="hljs-params">(JNIEnv * env, jclass clazz, jint a, jint b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们就可以将cpp编译为动态链接库，在MacOS下会生成<code>.dylib</code>文件，Windows下会生成<code>.dll</code>文件，我们这里就只以MacOS为例，命令有点长，因为还需要包含JDK目录下的头文件：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">gcc com_test_Main.cpp -I /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/include -I /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/include/darwin -fPIC -shared -o test.dylib -lstdc++<br></code></pre></div></td></tr></table></figure><p>编译完成后，得到<code>test.dylib</code>文件，这就是动态链接库了。</p><p>最后我们再将其放到桌面，然后在Java程序中加载：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.load(<span class="hljs-string">&quot;/Users/nagocoler/Desktop/test.dylib&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行，成功得到结果：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyux58pg32j31ag0smjv5.jpg"alt="image-20220129222858105" /></p><p>通过了解JVM的一些基础知识，我们心目中大致有了一个JVM的模型，在下一章，我们将继续深入学习JVM的内存管理机制和垃圾收集器机制，以及一些实用工具。</p><h1 id="类与类加载">类与类加载</h1><p>前面我们讲解了JVM的内存结构，包括JVM如何对内存进行划分，如何对内存区域进行垃圾回收。接下来，我们来研究一下类文件结构以及类的加载机制。</p><h2 id="类文件结构">类文件结构</h2><p>在我们学习C语言的时候，我们的编程过程会经历如下几个阶段：写代码、保存、编译、运行。实际上，最关键的一步是编译，因为只有经历了编译之后，我们所编写的代码才能够翻译为机器可以直接运行的二进制代码，并且在不同的操作系统下，我们的代码都需要进行一次编译之后才能运行。</p><blockquote><p>如果全世界所有的计算机指令集只有x86一种，操作系统只有Windows一种，那也许就不会有Java语言的出现。</p></blockquote><p>随着时代的发展，人们迫切希望能够在不同的操作系统、不同的计算机架构中运行同一套编译之后的代码。本地代码不应该是我们编程的唯一选择，所以，越来越多的语言选择了与操作系统和机器指令集无关的中立格式作为编译后的存储格式。</p><p>“一次编写，到处运行”，Java最引以为傲的口号，标志着平台不再是限制编程语言的阻碍。</p><p>实际上，Java正式利用了这样的解决方案，将源代码编译为平台无关的中间格式，并通过对应的Java虚拟机读取和运行这些中间格式的编译文件，这样，我们只需要考虑不同平台的虚拟机如何编写，而Java语言本身很轻松地实现了跨平台。</p><p>现在，越来越多的开发语言都支持将源代码编译为<code>.class</code>字节码文件格式，以便能够直接交给JVM运行，包括Kotlin（安卓开发官方指定语言）、Groovy、Scala等。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gznizn2l97j21qc0jedgq.jpg"alt="image-20220223162914535" /></p><p>那么，让我们来看看，我们的源代码编译之后，是如何保存在字节码文件中的。</p><hr /><h3 id="类文件信息">类文件信息</h3><p>我们之前都是使用<code>javap</code>命令来对字节码文件进行反编译查看的，那么，它以二进制格式是怎么保存呢？我们可以使用WinHex软件（Mac平台可以使用<ahref="https://www.macwk.com/soft/010-editor">010Editor</a>）来以十六进制查看字节码文件。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> i++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ++i;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>找到我们在IDEA中编译出来的class文件，将其拖动进去：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gznjij4fgpj21800u011h.jpg"alt="image-20220223164725971" /></p><p>可以看到整个文件中，全是一个字节一个字节分组的样子，从左上角开始，一行一行向下读取。可以看到在右侧中还出现了一些我们之前也许见过的字符串，比如"<init>"、"Object"等。</p><p>实际上Class文件采用了一种类似于C中结构体的伪结构来存储数据（当然我们直接看是看不出来的），但是如果像这样呢？</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">Classfile</span> <span class="hljs-string">/Users/nagocoler/Develop.localized/JavaHelloWorld/target/classes/com/test/Main.class</span><br>  <span class="hljs-string">Last</span> <span class="hljs-string">modified</span> <span class="hljs-number">2022-2</span><span class="hljs-number">-23</span><span class="hljs-string">;</span> <span class="hljs-string">size</span> <span class="hljs-number">444</span> <span class="hljs-string">bytes</span><br>  <span class="hljs-string">MD5</span> <span class="hljs-string">checksum</span> <span class="hljs-string">8af3e63f57bcb5e3d0eec4b0468de35b</span><br>  <span class="hljs-string">Compiled</span> <span class="hljs-string">from</span> <span class="hljs-string">&quot;Main.java&quot;</span><br><span class="hljs-string">public</span> <span class="hljs-string">class</span> <span class="hljs-string">com.test.Main</span><br>  <span class="hljs-attr">minor version:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">major version:</span> <span class="hljs-number">52</span><br>  <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC,</span> <span class="hljs-string">ACC_SUPER</span><br><span class="hljs-attr">Constant pool:</span><br>   <span class="hljs-comment">#1 = Methodref          #3.#21         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#2 = Class              #22            // com/test/Main</span><br>   <span class="hljs-comment">#3 = Class              #23            // java/lang/Object</span><br>   <span class="hljs-comment">#4 = Utf8               &lt;init&gt;</span><br>   <span class="hljs-comment">#5 = Utf8               ()V</span><br>   <span class="hljs-comment">#6 = Utf8               Code</span><br>   <span class="hljs-comment">#7 = Utf8               LineNumberTable</span><br>   <span class="hljs-comment">#8 = Utf8               LocalVariableTable</span><br>   <span class="hljs-comment">#9 = Utf8               this</span><br>  <span class="hljs-comment">#10 = Utf8               Lcom/test/Main;</span><br>  <span class="hljs-comment">#11 = Utf8               main</span><br>  <span class="hljs-comment">#12 = Utf8               ([Ljava/lang/String;)V</span><br>  <span class="hljs-comment">#13 = Utf8               args</span><br>  <span class="hljs-comment">#14 = Utf8               [Ljava/lang/String;</span><br>  <span class="hljs-comment">#15 = Utf8               i</span><br>  <span class="hljs-comment">#16 = Utf8               I</span><br>  <span class="hljs-comment">#17 = Utf8               a</span><br>  <span class="hljs-comment">#18 = Utf8               b</span><br>  <span class="hljs-comment">#19 = Utf8               SourceFile</span><br>  <span class="hljs-comment">#20 = Utf8               Main.java</span><br>  <span class="hljs-comment">#21 = NameAndType        #4:#5          // &quot;&lt;init&gt;&quot;:()V</span><br>  <span class="hljs-comment">#22 = Utf8               com/test/Main</span><br>  <span class="hljs-comment">#23 = Utf8               java/lang/Object</span><br>&#123;<br>  <span class="hljs-string">public</span> <span class="hljs-string">com.test.Main();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=1</span>, <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 11:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">0</span>       <span class="hljs-number">5</span>     <span class="hljs-number">0</span>  <span class="hljs-string">this</span>   <span class="hljs-string">Lcom/test/Main;</span><br><br>  <span class="hljs-string">public</span> <span class="hljs-string">static</span> <span class="hljs-string">void</span> <span class="hljs-string">main(java.lang.String</span>[]<span class="hljs-string">);</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">(</span>[<span class="hljs-string">Ljava/lang/String;)V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span>, <span class="hljs-string">ACC_STATIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=4</span>, <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">10</span><br>         <span class="hljs-attr">2:</span> <span class="hljs-string">istore_1</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">iinc</span>          <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>         <span class="hljs-attr">7:</span> <span class="hljs-string">istore_2</span><br>         <span class="hljs-attr">8:</span> <span class="hljs-string">iinc</span>          <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-attr">11:</span> <span class="hljs-string">iload_1</span><br>        <span class="hljs-attr">12:</span> <span class="hljs-string">istore_3</span><br>        <span class="hljs-attr">13:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 13:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">line 14:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">line 15:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">line 16:</span> <span class="hljs-number">13</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">0</span>      <span class="hljs-number">14</span>     <span class="hljs-number">0</span>  <span class="hljs-string">args</span>   [<span class="hljs-string">Ljava/lang/String;</span><br>            <span class="hljs-number">3</span>      <span class="hljs-number">11</span>     <span class="hljs-number">1</span>     <span class="hljs-string">i</span>   <span class="hljs-string">I</span><br>            <span class="hljs-number">8</span>       <span class="hljs-number">6</span>     <span class="hljs-number">2</span>     <span class="hljs-string">a</span>   <span class="hljs-string">I</span><br>           <span class="hljs-number">13</span>       <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-string">b</span>   <span class="hljs-string">I</span><br>&#125;<br><span class="hljs-attr">SourceFile:</span> <span class="hljs-string">&quot;Main.java&quot;</span><br></code></pre></div></td></tr></table></figure><p>乍一看，是不是感觉还真的有点结构体那味？</p><p>而结构体中，有两种允许存在的数据类型，一个是无符号数，还有一个是表。</p><ul><li>无符号数一般是基本数据类型，用u1、u2、u4、u8来表示，表示1个字节~8个字节的无符号数。可以表示数字、索引引用、数量值或是以UTF-8编码格式的字符串。</li><li>表包含多个无符号数，并且以"_info"结尾。</li></ul><p>我们首先从最简的开始看起。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gznjcb9bipj21ro0iutfs.jpg"alt="image-20220223164126100" /></p><p>首先，我们可以看到，前4个字节（共32位）组成了魔数（其实就是表示这个文件是一个JVM可以运行的字节码文件，除了Java以外，其他某些文件中也采用了这种魔数机制来进行区分，这种方式比直接起个文件扩展名更安全）</p><p>字节码文件的魔数为：CAFEBABE（这名字能想出来也是挺难的了，毕竟4个bit位只能表示出A-F这几个字母）</p><p>紧接着魔数的后面4个字节存储的是字节码文件的版本号，注意前两个是次要版本号（现在基本都不用了，都是直接Java8、Java9这样命名了），后面两个是主要版本号，这里我们主要看主版本号，比如上面的就是34，注意这是以16进制表示的，我们把它换算为10进制后，得到的结果为：<code>34  -&gt;  3*16 + 4 = 52</code>，其中<code>52</code>代表的是<code>JDK8</code>编译的字节码文件（51是JDK7、50是JDK6、53是JDK9，以此类推）</p><p>JVM会根据版本号决定是否能够运行，比如JDK6只能支持版本号为1.1<sub>6的版本，也就是说必须是Java6之前的环境编译出来的字节码文件，否则无法运行。又比如我们现在安装的是JDK8版本，它能够支持的版本号为1.1</sub>8，那么如果这时我们有一个通过Java7编译出来的字节码文件，依然是可以运行的，所以说Java版本是向下兼容的。</p><p>紧接着，就是类的常量池了，这里面存放了类中所有的常量信息（注意这里的常量并不是指我们手动创建的final类型常量，而是程序运行一些需要用到的常量数据，比如字面量和符号引用等）由于常量的数量不是确定的，所以在最开始的位置会存放常量池中常量的数量（是从1开始计算的，不是0，比如这里是18，翻译为10进制就是24，所以实际上有23个常量）</p><p>接着再往下，就是常量池里面的数据了，每一项常量池里面的数据都是一个表，我们可以看到他们都是以_info结尾的：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gznkh0jr31j21800u07dm.jpg"alt="image-20220223171746645" /></p><p>我们来看看一个表中定义了哪些内容：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gznkh14d4rj21b805wt9v.jpg"alt="image-20220223172031889" /></p><p>首先上来就会有一个1字节的无符号数，它用于表示当前常量的类型（常量类型有很多个）这里只列举一部分的类型介绍：</p><table><colgroup><col style="width: 28%" /><col style="width: 4%" /><col style="width: 67%" /></colgroup><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">标志</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">CONSTANT_Utf8_info</td><td style="text-align: center;">1</td><td style="text-align: center;">UTF-8编码格式的字符串</td></tr><tr class="even"><td style="text-align: center;">CONSTANT_Integer_info</td><td style="text-align: center;">3</td><tdstyle="text-align: center;">整形字面量（第一章我们演示的很大的数字，实际上就是以字面量存储在常量池中的）</td></tr><tr class="odd"><td style="text-align: center;">CONSTANT_Class_info</td><td style="text-align: center;">7</td><td style="text-align: center;">类或接口的符号引用</td></tr><tr class="even"><td style="text-align: center;">CONSTANT_String_info</td><td style="text-align: center;">8</td><td style="text-align: center;">字符串类型的字面量</td></tr><tr class="odd"><td style="text-align: center;">CONSTANT_Fieldref_info</td><td style="text-align: center;">9</td><td style="text-align: center;">字段的符号引用</td></tr><tr class="even"><td style="text-align: center;">CONSTANT_Methodref_info</td><td style="text-align: center;">10</td><td style="text-align: center;">方法的符号引用</td></tr><tr class="odd"><td style="text-align: center;">CONSTANT_MethodType_info</td><td style="text-align: center;">16</td><td style="text-align: center;">方法类型</td></tr><tr class="even"><td style="text-align: center;">CONSTANT_NameAndType_info</td><td style="text-align: center;">12</td><td style="text-align: center;">字段或方法的部分符号引用</td></tr></tbody></table><p>实际上这些东西，虽然我们不知道符号引用是什么东西，我们可以观察出来，这些东西或多或少都是存放类中一些名称、数据之类的东西。</p><p>比如我们来看第一个<code>CONSTANT_Methodref_info</code>表中存放了什么数据，这里我只列出它的结构表（详细的结构表可以查阅《深入理解Java虚拟机第三版》中222页总表）：</p><table><colgroup><col style="width: 27%" /><col style="width: 6%" /><col style="width: 4%" /><col style="width: 61%" /></colgroup><thead><tr class="header"><th style="text-align: center;">常量</th><th style="text-align: center;">项目</th><th style="text-align: center;">类型</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">CONSTANT_Methodref_info</td><td style="text-align: center;">tag</td><td style="text-align: center;">u1</td><td style="text-align: center;">值为10</td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;">index</td><td style="text-align: center;">u2</td><tdstyle="text-align: center;">指向声明方法的类描述父CONSTANT_Class_info索引项</td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;">index</td><td style="text-align: center;">u2</td><tdstyle="text-align: center;">指向名称及类型描述符CONSTANT_NameAndType_info索引项</td></tr></tbody></table><p>比如我们刚刚的例子中：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznnkpf7cqj21b40503zi.jpg"alt="image-20220223190659053" /></p><p>可以看到，第一个索引项指向了第3号常量，我们来看看三号常量：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznnmsuh1pj219w03amxj.jpg"alt="image-20220223190957382" /></p><table><thead><tr class="header"><th style="text-align: center;">常量</th><th style="text-align: center;">项目</th><th style="text-align: center;">类型</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">CONSTANT_Class_info</td><td style="text-align: center;">tag</td><td style="text-align: center;">u1</td><td style="text-align: center;">值为7</td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;">index</td><td style="text-align: center;">u2</td><td style="text-align: center;">指向全限定名常量项的索引</td></tr></tbody></table><p>那么我们接着来看23号常量又写的啥：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznnqfknqaj21fo0j6te5.jpg"alt="image-20220223191325689" /></p><p>可以看到指向的UTF-8字符串值为<code>java/lang/Object</code>这下搞明白了，首先这个方法是由Object类定义的，那么接着我们来看第二项u2<code>name_and_type_index</code>，指向了21号常量，也就是字段或方法的部分符号引用：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzno0zakf9j21eg0qyqbl.jpg"alt="image-20220223191921550" /></p><table><colgroup><col style="width: 37%" /><col style="width: 7%" /><col style="width: 6%" /><col style="width: 48%" /></colgroup><thead><tr class="header"><th style="text-align: center;">常量</th><th style="text-align: center;">项目</th><th style="text-align: center;">类型</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">CONSTANT_NameAndType_info</td><td style="text-align: center;">tag</td><td style="text-align: center;">u1</td><td style="text-align: center;">值为12</td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;">index</td><td style="text-align: center;">u2</td><td style="text-align: center;">指向字段或方法名称常量项的索引</td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;">index</td><td style="text-align: center;">u2</td><td style="text-align: center;">指向字段或方法描述符常量项的索引</td></tr></tbody></table><p>其中第一个索引就是方法的名称，而第二个就是方法的描述符，描述符明确了方法的参数以及返回值类型，我们分别来看看4号和5号常量：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzno0z1yp1j21eg0qyqbl.jpg"alt="image-20220223192332068" /></p><p>可以看到，方法名称为"<init>"，一般构造方法的名称都是<init>，普通方法名称是什么就是什么，方法描述符为"()V"，表示此方法没有任何参数，并且返回值类型为void，描述符对照表如下：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzno2stssaj216i08mjsr.jpg"alt="image-20220223192518999" /></p><p>比如这里有一个方法<code>public int test(double a, char c)&#123; ... &#125;</code>，那么它的描述符就应该是：<code>(DC)I</code>，参数依次放入括号中，括号右边是返回值类型。再比如<code>public String test(Object obj)&#123; ... &#125;</code>，那么它的描述符就应该是：<code>(Ljava/lang/Object;)Ljava/lang/String</code>，注意如果参数是对象类型，那么必须在后面添加<code>;</code></p><p>对于数组类型，只需要在类型最前面加上<code>[</code>即可，有几个维度，就加几个，比如<code>public void test(int[][] arr)</code>，参数是一个二维int类型数组，那么它的描述符为：<code>([[I)V</code></p><p>所以，这里表示的，实际上就是此方法是一个无参构造方法，并且是属于Object类的。那么，为什么这里需要Object类构造方法的符号引用呢？还记得我们在JavaSE中说到的，每个类都是直接或间接继承自Object类，所有类的构造方法，必须先调用父类的构造方法，但是如果父类存在无参构造，默认可以不用显示调用<code>super</code>关键字（当然本质上是调用了的）。</p><p>所以说，当前类因为没有继承自任何其他类，那么就默认继承的Object类，所以，在当前类的默认构造方法中，调用了父类Object类的无参构造方法，因此这里需要符号引用的用途显而易见，就是因为需要调用Object类的无参构造方法。</p><p>我们可以在反编译结果中的方法中看到：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">public</span> <span class="hljs-string">com.test.Main();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1,</span> <span class="hljs-string">locals=1,</span> <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 11:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">0</span>       <span class="hljs-number">5</span>     <span class="hljs-number">0</span>  <span class="hljs-string">this</span>   <span class="hljs-string">Lcom/test/Main;</span><br></code></pre></div></td></tr></table></figure><p>其中<code>invokespecial</code>（调用父类构造方法）指令的参数指向了1号常量，而1号常量正是代表的Object类的无参构造方法，虽然饶了这么大一圈，但是过程理清楚，还是很简单的。</p><p>虽然我们可以直接查看16进制的结果，但是还是不够方便，但是我们也不能每次都去使用<code>javap</code>命令，所以我们这里安装一个IDEA插件，来方便我们查看字节码中的信息，名称为<code>jclasslib Bytecode Viewer</code>：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznojlqgl3j216y0dc0u0.jpg"alt="image-20220223194128297" /></p><p>安装完成后，我们可以在我们的IDEA右侧看到它的板块，但是还没任何数据，那么比如现在我们想要查看Main类的字节码文件时，可以这样操作：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznomfiqu8j22ll0u0tfa.jpg"alt="image-20220223194410699" /></p><p>首先在项目中选中我们的Main类，然后点击工具栏的视图，然后点击<code>Show Bytecode With Jclasslib</code>，这样右侧就会出现当前类的字节码解析信息了。注意如果修改了类的话，那么需要你点击运行或是构建，然后点击刷新按钮来进行更新。</p><p>接着我们来看下一个内容，在常量池之后，紧接着就是访问标志，访问标志就是类的种类以及类上添加的一些关键字等内容：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznos6c7j9j21e60giq7s.jpg"alt="image-20220223194942810" /></p><p>可以看到它只占了2个字节，那么它是如何表示访问标志呢?</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznp9glonej216i0hcjui.jpg"alt="image-20220223200619811" /></p><p>比如我们这里的Main类，它是一个普通的class类型，并且访问权限为public，那么它的访问标志值是这样计算的：</p><p><code>ACC_PUBLIC | ACC_SUPER = 0x0001 | 0x0020 = 0x0021</code>（这里进行的是按位或运算），可以看到和我们上面的结果是一致的。</p><p>再往下就是类索引、父类索引、接口索引：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznp3uofdej219803q0t7.jpg"alt="image-20220223200054866" /></p><p>可以看到它们的值也是指向常量池中的值，其中2号常量正是存储的当前类信息，3号常量存储的是父类信息，这里就不再倒推回去了，由于没有接口，所以这里接口数量为0，如果不为0还会有一个索引表来引用接口。</p><p>接着就是字段和方法表集合了：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznp8gd1nfj21ai04mdgp.jpg"alt="image-20220223200521912" /></p><p>由于我们这里没有声明任何字段，所以我们先给Main类添加一个字段再重新加载一下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> i++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ++i;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznpbh3k7rj21bi06o3zn.jpg"alt="image-20220223200733342" /></p><p>现在字节码就新增了一个字段表，这个字段表实际上就是我们刚刚添加的成员字段<code>a</code>的数据。</p><p>可以看到一共有四个2字节的数据：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznpcxjzgfj216o06et9o.jpg"alt="image-20220223200939786" /></p><p>首先是<code>access_flags</code>，这个与上面类标志的计算规则是一样的，表还是先列出来吧：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznpe7is4wj21620eswh4.jpg"alt="image-20220223201053780" /></p><p>第二个数据<code>name_index</code>表示字段的名称常量，这里指向的是5号常量，那么我们来看看5号常量是不是字段名称：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznpgw09wjj21bc0tuk0x.jpg"alt="image-20220223201327180" /></p><p>没问题，这里就是<code>a</code>,下一个是<code>descirptor_index</code>，存放的是描述符，不过这里因为不是方法而是变量，所以描述符直接写对应类型的标识字符即可，比如这里是<code>int</code>类型，那么就是<code>I</code>。</p><p>最后，<code>attrbutes_count</code>属性计数器，用于描述一些额外信息，这里我们暂时不做介绍。</p><p>接着就是我们的方法表了：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznppnxpcqj21ai04odgx.jpg"alt="image-20220223202153955" /></p><p>可以看到方法表中一共有三个方法，其中第一个方法我们刚刚已经介绍过了，它的方法名称为<code>&lt;init&gt;</code>，表示它是一个构造方法，我们看到最后一个方法名称为<code>&lt;clinit&gt;</code>，这个是类在初始化时会调用的方法（是隐式的，自动生成的），它主要是用于静态变量初始化语句和静态块的执行，因为我们这里给静态成员变量a赋值为10，所以会在一开始为其赋值：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznpt5dhg3j224c0katcg.jpg"alt="image-20220223202515287" /></p><p>而第二个方法，就是我们的<code>main</code>方法了，但是现在我们先不急着去看它的详细实现过程，我们来看看它的属性表。</p><p>属性表实际上类中、字段中、方法中都可以携带自己的属性表，属性表存放的正是我们的代码、本地变量等数据，比如main方法就存在4个本地变量，那么它的本地变量存放在哪里呢：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznpy0i9ehj21by0hywii.jpg"alt="image-20220223202955858" /></p><p>可以看到，属性信息呈现套娃状态，在此方法中的属性包括了一个Code属性，此属性正是我们的Java代码编译之后变成字节码指令，然后存放的地方，而在此属性中，又嵌套了本地变量表和源码行号表。</p><p>可以看到code中存放的就是所有的字节码指令：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznq0wqe4xj215a0bi76l.jpg"alt="image-20220223203241262" /></p><p>这里我们暂时不对字节码指令进行讲解（其实也用不着讲了，都认识的差不多了）。我们接着来看本地变量表，这里存放了我们方法中要用到的局部变量：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznq26f7rhj219w0ekq5v.jpg"alt="image-20220223203356129" /></p><p>可以看到一共有四个本地变量，而第一个变量正是main方法的形参<code>String[] args</code>，并且表中存放了本地变量的长度、名称、描述符等内容。当然，除了我们刚刚认识的这几个属性之外，完整属性可以查阅《深入理解Java虚拟机第三版》231页。</p><p>最后，类也有一些属性：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznq712n66j21dw0n20xw.jpg"alt="image-20220223203835282" /></p><p>此属性记录的是源文件名称。</p><p>这样，我们对一个字节码文件的认识差不多就结束了，在了解了字节码文件的结构之后，是不是感觉豁然开朗？</p><hr /><h3 id="字节码指令">字节码指令</h3><p>虚拟机的指令是由一个字节长度的、代表某种特定操作含义的数字（操作码，类似于机器语言），操作后面也可以携带0个或多个参数一起执行。我们前面已经介绍过了，JVM实际上并不是面向寄存器架构的，而是面向操作数栈，所以大多数指令都是不带参数的。</p><p>由于之前已经讲解过大致运行流程，这里我们就以当前的Main类中的main方法作为教材进行讲解：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> i++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ++i;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，main方法中首先是定义了一个int类型的变量i，并赋值为10，然后变量a接收<code>i++</code>的值，变量b接收<code>++i</code>的值。</p><p>那么我们来看看编译成字节码之后，是什么样的：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznqsryzgfj225c0lgq6o.jpg"alt="image-20220223205928901" /></p><ul><li>首先第一句，<code>bipush</code>，将10送至操作数栈顶。</li><li>接下来将操作数栈顶的数值存进1号本地变量，也就是变量i中。</li><li>接着将变量i中的值又丢向操作数栈顶</li><li>这里使用<code>iinc</code>指令，将1号本地变量的值增加1（结束之后i的值就是11了）</li><li>接着将操作数栈顶的值（操作数栈顶的值是10）存入2号本地变量（这下彻底知道i++到底干了啥才会先返回后自增了吧，从原理角度来说，实际上i是先自增了的，但由于这里取的是操作数栈中的值，所以说就得到了i之前的值）</li><li>接着往下，我们看到++i是先直接将i的值自增1</li><li>然后在将其值推向操作数栈顶</li></ul><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzns3syhe7j21x8090q5k.jpg"alt="image-20220223214441621" /></p><p>而从结果来看，<code>i++</code>操作确实是先返回再自增的，而字节码指令层面来说，却是截然相反的，只是结果一致罢了。</p><hr /><h3 id="asm字节码编程">ASM字节码编程</h3><p>既然字节码文件结构如此清晰，那么我们能否通过编程，来直接创建一个字节码文件呢？如果我们可以直接编写一个字节码文件，那么我们就可以省去编译的过程。ASM（某些JDK中内置）框架正是用于支持字节码编程的框架。</p><p>比如现在我们需要创建一个普通的Main类（暂时不写任何内容）</p><p>首先我们来看看如何通过编程创建一个Main类的字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先需要获取<code>ClassWriter</code>对象，我们可以使用它来编辑类的字节码文件，在构造时需要传入参数：</p><ul><li>0这种方式不会自动计算操作数栈和局部临时变量表大小，需要自己手动来指定</li><li>ClassWriter.COMPUTE_MAXS(1)这种方式会自动计算上述操作数栈和局部临时变量表大小，但需要手动触发。</li><li>ClassWriter.COMPUTE_FRAMES(2)这种方式不仅会计算上述操作数栈和局部临时变量表大小，而且会自动计算StackMapFrames</li></ul><p>这里我们使用<code>ClassWriter.COMPUTE_MAXS</code>即可。</p><p>接着我们首先需要指定类的一些基本信息：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);<br>        <span class="hljs-comment">//因为这里用到的常量比较多，所以说直接一次性静态导入：import static jdk.internal.org.objectweb.asm.Opcodes.*;</span><br>        writer.visit(V1_8, ACC_PUBLIC,<span class="hljs-string">&quot;com/test/Main&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;java/lang/Object&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们将字节码文件的版本设定位Java8，然后修饰符设定为<code>ACC_PUBLIC</code>代表<code>public class Main</code>，类名称注意要携带包名，标签设置为<code>null</code>，父类设定为Object类，然后没有实现任何接口，所以说最后一个参数也是<code>null</code>。</p><p>接着，一个简答的类字节码文件就创建好了，我们可以尝试将其进行保存：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);<br>        writer.visit(V1_8, ACC_PUBLIC,<span class="hljs-string">&quot;com/test/Main&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;java/lang/Object&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//调用visitEnd表示结束编辑</span><br>        writer.visitEnd();<br><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./Main.class&quot;</span>))&#123;<br>            stream.write(writer.toByteArray());  <span class="hljs-comment">//直接通过ClassWriter将字节码文件转换为byte数组，并保存到根目录下</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，在IDEA中反编译的结果为：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们知道，正常的类在编译之后，如果没有手动添加构造方法，那么会自带一个无参构造，但是我们这个类中还没有，所以我们来手动添加一个无参构造方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//通过visitMethod方法可以添加一个新的方法</span><br>writer.visitMethod(ACC_PUBLIC, <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br></code></pre></div></td></tr></table></figure><p>可以看到反编译的结果中已经存在了我们的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Main</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是这样是不合法的，因为我们的构造方法还没有添加父类构造方法调用，所以说我们还需要在方法中添加父类构造方法调用指令：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">public</span> <span class="hljs-string">com.test.Main();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1,</span> <span class="hljs-string">locals=1,</span> <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 11:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">0</span>       <span class="hljs-number">5</span>     <span class="hljs-number">0</span>  <span class="hljs-string">this</span>   <span class="hljs-string">Lcom/test/Main;</span><br></code></pre></div></td></tr></table></figure><p>我们需要对方法进行详细编辑：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//通过MethodVisitor接收返回值，进行进一步操作</span><br><span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">visitor</span> <span class="hljs-operator">=</span> writer.visitMethod(ACC_PUBLIC, <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//开始编辑代码</span><br>visitor.visitCode();<br><br><span class="hljs-comment">//Label用于存储行号</span><br><span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>();<br><span class="hljs-comment">//当前代码写到哪行了，l1得到的就是多少行</span><br>visitor.visitLabel(l1);<br><span class="hljs-comment">//添加源码行数对应表（其实可以不用）</span><br>visitor.visitLineNumber(<span class="hljs-number">11</span>, l1);<br><br><span class="hljs-comment">//注意不同类型的指令需要用不同方法来调用，因为操作数不一致，具体的注释有写</span><br>visitor.visitVarInsn(ALOAD, <span class="hljs-number">0</span>);<br>visitor.visitMethodInsn(INVOKESPECIAL, <span class="hljs-string">&quot;java/lang/Object&quot;</span>, <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, <span class="hljs-literal">false</span>);<br>visitor.visitInsn(RETURN);<br><br><span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>();<br>visitor.visitLabel(l2);<br><span class="hljs-comment">//添加本地变量表，这里加的是this关键字，但是方法中没用到，其实可以不加</span><br>visitor.visitLocalVariable(<span class="hljs-string">&quot;this&quot;</span>, <span class="hljs-string">&quot;Lcom/test/Main;&quot;</span>, <span class="hljs-literal">null</span>, l1, l2, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//最后设定最大栈深度和本地变量数</span><br>visitor.visitMaxs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//结束编辑</span><br>visitor.visitEnd();<br></code></pre></div></td></tr></table></figure><p>我们可以对编写好的class文件进行反编译，看看是不是和IDEA编译之后的结果差不多：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-string">public</span> <span class="hljs-string">com.test.Main();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=1</span>, <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#8                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">0</span>       <span class="hljs-number">5</span>     <span class="hljs-number">0</span>  <span class="hljs-string">this</span>   <span class="hljs-string">Lcom/test/Main</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 11:</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到和之前的基本一致了，到此为止我们构造方法就编写完成了，接着我们来写一下main方法，一会我们就可以通过main方法来运行Java程序了。比如我们要编写这样一个程序：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    System.out.println(a);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看起来很简单的一个程序对吧，但是我们如果手动去组装指令，会极其麻烦！首先main方法是一个静态方法，并且方法是public权限，然后还有一个参数<code>String[] args</code>，所以说我们这里要写的内容有点小多：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//开始安排main方法</span><br><span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> writer.visitMethod(ACC_PUBLIC | ACC_STATIC, <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-string">&quot;([Ljava/lang/String;)V&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>v2.visitCode();<br><span class="hljs-comment">//记录起始行信息</span><br><span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>();<br>v2.visitLabel(l3);<br>v2.visitLineNumber(<span class="hljs-number">13</span>, l3);<br><br><span class="hljs-comment">//首先是int a = 10的操作，执行指令依次为：</span><br><span class="hljs-comment">// bipush 10     将10推向操作数栈顶</span><br><span class="hljs-comment">// istore_1      将操作数栈顶元素保存到1号本地变量a中</span><br>v2.visitIntInsn(BIPUSH, <span class="hljs-number">10</span>);<br>v2.visitVarInsn(ISTORE, <span class="hljs-number">1</span>);<br><span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>();<br>v2.visitLabel(l4);<br><span class="hljs-comment">//记录一下行信息</span><br>v2.visitLineNumber(<span class="hljs-number">14</span>, l4);<br><br><span class="hljs-comment">//这里是获取System类中的out静态变量（PrintStream接口），用于打印</span><br>v2.visitFieldInsn(GETSTATIC, <span class="hljs-string">&quot;java/lang/System&quot;</span>, <span class="hljs-string">&quot;out&quot;</span>, <span class="hljs-string">&quot;Ljava/io/PrintStream;&quot;</span>);<br><span class="hljs-comment">//把a的值取出来</span><br>v2.visitVarInsn(ILOAD, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//调用接口中的抽象方法println</span><br>v2.visitMethodInsn(INVOKEVIRTUAL, <span class="hljs-string">&quot;java/io/PrintStream&quot;</span>, <span class="hljs-string">&quot;println&quot;</span>, <span class="hljs-string">&quot;(I)V&quot;</span>, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//再次记录行信息</span><br><span class="hljs-type">Label</span> <span class="hljs-variable">l6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>();<br>v2.visitLabel(l6);<br>v2.visitLineNumber(<span class="hljs-number">15</span>, l6);<br><br>v2.visitInsn(RETURN);<br><span class="hljs-type">Label</span> <span class="hljs-variable">l7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>();<br>v2.visitLabel(l7);<br><br><span class="hljs-comment">//最后是本地变量表中的各个变量</span><br>v2.visitLocalVariable(<span class="hljs-string">&quot;args&quot;</span>, <span class="hljs-string">&quot;[Ljava/lang/String;&quot;</span>, <span class="hljs-literal">null</span>, l3, l7, <span class="hljs-number">0</span>);<br>v2.visitLocalVariable(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-literal">null</span>, l4, l7, <span class="hljs-number">1</span>);<br>v2.visitMaxs(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">//终于OK了</span><br>v2.visitEnd();<br></code></pre></div></td></tr></table></figure><p>可以看到，虽然很简单的一个程序，但是如果我们手动去编写字节码，实际上是非常麻烦的，但是要实现动态代理之类的操作（可以很方便地修改字节码创建子类），是不是感觉又Get到了新操作（其实Spring实现动态代理的CGLib框架底层正是调用了ASM框架来实现的），所以说了解一下还是可以的，不过我们自己肯定是没多少玩这个的机会了。</p><hr /><h2 id="类加载机制">类加载机制</h2><p>现在，我们已经了解了字节码文件的结构，以及JVM如何对内存进行管理，现在只剩下最后一个谜团等待解开了，也就是我们的类字节码文件到底是如何加载到内存中的，加载之后又会做什么事情。</p><h3 id="类加载过程">类加载过程</h3><p>首先，要加载一个类，一定是出于某种目的的，比如我们要运行我们的Java程序，那么就必须要加载主类才能运行主类中的主方法，又或是我们需要加载数据库驱动，那么可以通过反射来将对应的数据库驱动类进行加载。</p><p>所以，一般在这些情况下，如果类没有被加载，那么会被自动加载：</p><ul><li>使用new关键字创建对象时</li><li>使用某个类的静态成员（包括方法和字段）的时候（当然，final类型的静态字段有可能在编译的时候被放到了当前类的常量池中，这种情况下是不会触发自动加载的）</li><li>使用反射对类信息进行获取的时候（之前的数据库驱动就是这样的）</li><li>加载一个类的子类时</li><li>加载接口的实现类，且接口带有<code>default</code>的方法默认实现时</li></ul><p>比如这种情况，那么需要用到另一个类中的成员字段，所以就必须将另一个类加载之后才能访问：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Test.str);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>        <span class="hljs-keyword">static</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;我被初始化了！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;都看到这里了，不给个三连+关注吗？&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们就演示一个不太好理解的情况，我们现在将静态成员变量修改为final类型的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Test.str);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>        <span class="hljs-keyword">static</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;我被初始化了！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;都看到这里了，不给个三连+关注吗？&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，在主方法中，我们使用了Test类的静态成员变量，并且此静态成员变量是一个final类型的，也就是说不可能再发生改变。那么各位觉得，Test类会像上面一样被初始化吗？</p><p>按照正常逻辑来说，既然要用到其他类中的字段，那么肯定需要加载其他类，但是这里我们结果发现，并没有对Test类进行加载，那么这是为什么呢？我们来看看Main类编译之后的字节码指令就知道了：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzoizzv7azj227c0lcjvp.jpg"alt="image-20220224131511381" /></p><p>很明显，这里使用的是<code>ldc</code>指令从常量池中将字符串取出并推向操作数栈顶，也就是说，在编译阶段，整个<code>Test.str</code>直接被替换为了对应的字符串（因为final不可能发生改变的，编译就会进行优化，直接来个字符串比你去加载类在获取快得多不是吗，反正结果都一样），所以说编译之后，实际上跟Test类半毛钱关系都没有了。</p><p>所以说，当你在某些情况下疑惑为什么类加载了或是没有加载时，可以从字节码指令的角度去进行分析，一般情况下，只要遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code>这些指令时，都会进行类加载，比如：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzoj5isswmj22520j877u.jpg"alt="image-20220224132029992" /></p><p>这里很明显，是一定会将Test类进行加载的。除此之外，各位也可以试试看数组的定义会不会导致类被加载。</p><p>好了，聊完了类的加载触发条件，我们接着来看一下类的详细加载流程。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzojblu4woj21380jkjtf.jpg"alt="image-20220224132621764" /></p><p>首先类的生命周期一共有7个阶段，而首当其冲的就是加载，加载阶段需要获取此类的二进制数据流，比如我们要从硬盘中读取一个class文件，那么就可以通过文件输入流来获取类文件的<code>byte[]</code>，也可以是其他各种途径获取类文件的输入流，甚至网络传输并加载一个类也不是不可以。然后交给类加载器进行加载（类加载器可以是JDK内置的，也可以是开发者自己撸的，后面会详细介绍）类的所有信息会被加载到方法区中，并且在堆内存中会生成一个代表当前类的Class类对象（那么思考一下，同一个Class文件加载的类，是唯一存在的吗？），我们可以通过此对象以及反射机制来访问这个类的各种信息。</p><p>数组类要稍微特殊一点，通过前面的检验，我没发现数组在创建后是不会导致类加载的，数组类型本身不会通过类加载器进行加载的，不过你既然要往里面丢对象进去，那最终依然是要加载类的。</p><p>接着我们来看验证阶段，验证阶段相当于是对加载的类进行一次规范校验（因为一个类并不一定是由我们使用IDEA编译出来的，有可能是像我们之前那样直接用ASM框架写的一个），如果说类的任何地方不符合虚拟机规范，那么这个类是不会验证通过的，如果没有验证机制，那么一旦出现危害虚拟机的操作，整个程序会出现无法预料的后果。</p><p>验证阶段，首先是文件格式的验证：</p><ul><li>是否魔数为CAFEBABE开头。</li><li>主、次版本号是否可以由当前Java虚拟机运行</li><li>Class文件各个部分的完整性如何。</li><li>...</li></ul><p>有关类验证的详细过程，可以参考《深入理解Java虚拟机第三版》268页。</p><p>接下来就是准备阶段了，这个阶段会为类变量分配内存，并为一些字段设定初始值，注意是系统规定的初始值，不是我们手动指定的初始值。</p><p>再往下就是解析阶段，此阶段是将常量池内的符号引用替换为直接引用的过程，也就是说，到这个时候，所有引用变量的指向都是已经切切实实地指向了内存中的对象了。</p><p>到这里，链接过程就结束了，也就是说这个时候类基本上已经完成大部分内容的初始化了。</p><p>最后就是真正的初始化阶段了，从这里开始，类中的Java代码部分，才会开始执行，还记得我们之前介绍的<code>&lt;clinit&gt;</code>方法吗，它就是在这个时候执行的，比如我们的类中存在一个静态成员变量，并且赋值为10，或是存在一个静态代码块，那么就会自动生成一个<code>&lt;clinit&gt;</code>方法来进行赋值操作，但是这个方法是自动生成的。</p><p>全部完成之后，我们的类就算是加载完成了。</p><hr /><h3 id="类加载器">类加载器</h3><p>Java提供了类加载器，以便我们自己可以更好地控制类加载，我们可以自定义类加载器，也可以使用官方自带的类加载器去加载类。对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性。</p><p>也就是说，一个类可以由不同的类加载器加载，并且，不同的类加载器加载的出来的类，即使来自同一个Class文件，也是不同的，只有两个类来自同一个Class文件并且是由同一个类加载器加载的，才能判断为是同一个。默认情况下，所有的类都是由JDK自带的类加载器进行加载。</p><p>比如，我们先创建一个Test类用于测试：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们自己实现一个ClassLoader来加载我们的Test类，同时使用官方默认的类加载器来加载：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>        Class&lt;?&gt; testClass1 = Main.class.getClassLoader().loadClass(<span class="hljs-string">&quot;com.test.Test&quot;</span>);<br>        <span class="hljs-type">CustomClassLoader</span> <span class="hljs-variable">customClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomClassLoader</span>();<br>        Class&lt;?&gt; testClass2 = customClassLoader.loadClass(<span class="hljs-string">&quot;com.test.Test&quot;</span>);<br><br>       <span class="hljs-comment">//看看两个类的类加载器是不是同一个</span><br>        System.out.println(testClass1.getClassLoader());<br>        System.out.println(testClass2.getClassLoader());<br><br>      <span class="hljs-comment">//看看两个类是不是长得一模一样</span><br>        System.out.println(testClass1);<br>        System.out.println(testClass2);<br><br>      <span class="hljs-comment">//两个类是同一个吗？</span><br>        System.out.println(testClass1 == testClass2);<br>      <br>      <span class="hljs-comment">//能成功实现类型转换吗？</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (Test) testClass2.newInstance();<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./target/classes/&quot;</span>+name.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)+<span class="hljs-string">&quot;.class&quot;</span>))&#123;<br>                <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[stream.available()];<br>                stream.read(data);<br>                <span class="hljs-keyword">if</span>(data.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.loadClass(name);<br>                <span class="hljs-keyword">return</span> defineClass(name, data, <span class="hljs-number">0</span>, data.length);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.loadClass(name);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过结果我们发现，即使两个类是同一个Class文件加载的，只要类加载器不同，那么这两个类就是不同的两个类。</p><p>所以说，我们当时在JavaSE阶段讲解的每个类都在堆中有一个唯一的Class对象放在这里来看，并不完全正确，只是当前为了防止各位初学者搞混。</p><p>实际上，JDK内部提供的类加载器一共有三个，比如上面我们的Main类，其实是被AppClassLoader加载的，而JDK内部的类，都是由BootstrapClassLoader加载的，这其实就是为了实现双亲委派机制而做的。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzpoy41z31j20wb0u040w.jpg"alt="image-20220225132629954" /></p><p>有关双亲委派机制，我们在JavaSE阶段反射板块已经讲解过了，所以说这就不多做介绍了。</p><h1 id="jvm内存管理">JVM内存管理</h1><p>在之前，我们了解了JVM的大致运作原理以及相关特性，这一章，我们首先会从内存管理说起。</p><p>在传统的C/C++开发中，我们经常通过使用申请内存的方式来创建对象或是存放某些数据，但是这样也带来了一些额外的问题，我们要在何时释放这些内存，怎么才能使得内存的使用最高效，因此，内存管理是一个非常严肃的问题。</p><p>比如我们就可以通过C语言动态申请内存，并用于存放数据：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//动态申请4个int大小的内存空间</span><br>    <span class="hljs-type">int</span>* memory = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//修改第一个int空间的值</span><br>    memory[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//修改第二个int空间的值</span><br>    memory[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//遍历内存区域中所有的值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">4</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, memory[i]);<br>    &#125;<br>    <span class="hljs-comment">//释放指针所指向的内存区域</span><br>    <span class="hljs-built_in">free</span>(memory);<br>    <span class="hljs-comment">//最后将指针赋值为NULL</span><br>    memory = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>而在Java中，这种操作实际上是不允许的，Java只支持直接使用基本数据类型和对象类型，至于内存到底如何分配，并不是由我们来处理，而是JVM帮助我们进行控制，这样就帮助我们节省很多内存上的工作，虽然带来了很大的便利，但是，一旦出现内存问题，我们就无法像C/C++那样对所管理的内存进行合理地处理，因为所有的内存操作都是由JVM在进行，只有了解了JVM的内存管理机制，我们才能够在出现内存相关问题时找到解决方案。</p><h2 id="内存区域划分">内存区域划分</h2><p>既然要管理内存，那么肯定不会是杂乱无章的，JVM对内存的管理采用的是分区治理，不同的内存区域有着各自的职责所在，在虚拟机运行时，内存区域如下划分：</p><p><imgsrc="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1722965%2F201906%2F1722965-20190623004137470-1024717774.png&amp;refer=http%3A%2F%2Fimg2018.cnblogs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1646115263&amp;t=2840f72b39c461e22e5a77d0de0e3e1e"alt="点击查看图片来源" /></p><p>我们可以看到，内存区域一共分为5个区域，其中方法区和堆是所有线程共享的区域，随着虚拟机的创建而创建，虚拟机的结束而销毁，而虚拟机栈、本地方法栈、程序计数器都是线程之间相互隔离的，每个线程都有一个自己的区域，并且线程启动时会自动创建，结束之后会自动销毁。内存划分完成之后，我们的JVM执行引擎和本地库接口，也就是Java程序开始运行之后就会根据分区合理地使用对应区域的内存了。</p><h3 id="大致划分">大致划分</h3><h4 id="程序计数器">程序计数器</h4><p>首先我们来介绍一下程序计数器，它和我们的传统8086CPU中PC寄存器的工作差不多，因为JVM虚拟机目的就是实现物理机那样的程序执行。在8086CPU中，PC作为程序计数器，负责储存内存地址，该地址指向下一条即将执行的指令，每解释执行完一条指令，PC寄存器的值就会自动被更新为下一条指令的地址，进入下一个指令周期时，就会根据当前地址所指向的指令，进行执行。</p><p>而JVM中的程序计数器可以看做是当前线程所执行字节码的行号指示器，而行号正好就指的是某一条指令，字节码解释器在工作时也会改变这个值，来指定下一条即将执行的指令。</p><p>因为Java的多线程也是依靠时间片轮转算法进行的，因此一个CPU同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。</p><p>程序计数器因为只需要记录很少的信息，所以只占用很少一部分内存。</p><h4 id="虚拟机栈">虚拟机栈</h4><p>虚拟机栈就是一个非常关键的部分，看名字就知道它是一个栈结构，每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（其实就是栈里面的一个元素），栈帧中包括了当前方法的一些信息，比如局部变量表、操作数栈、动态链接、方法出口等。</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gywoc0w7ouj30xm0hy401.jpg"alt="image-20220131110349472" /></p><p>其中局部变量表就是我们方法中的局部变量，之前我们也进行过演示，实际上局部变量表在class文件中就已经定义好了，操作数栈就是我们之前字节码执行时使用到的栈结构；每个栈帧还保存了一个<strong>可以指向当前方法所在类</strong>的运行时常量池，目的是：当前方法中如果需要调用其他方法的时候，能够从运行时常量池中找到对应的符号引用，然后将符号引用转换为直接引用，然后就能直接调用对应方法，这就是动态链接（我们还没讲到常量池，暂时记住即可，建议之后再回顾一下），最后是方法出口，也就是方法该如何结束，是抛出异常还是正常返回。</p><p>可能听起来有点懵逼，这里我们来模拟一下整个虚拟机栈的运作流程，我们先编写一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a();<br>        System.out.println(res);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> b();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> c();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">c</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当我们的主方法执行后，会依次执行三个方法<code>a() -&gt; b() -&gt; c() -&gt; 返回</code>，我们首先来观察一下反编译之后的结果：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-string">public</span> <span class="hljs-string">com.test.Main();</span>   <span class="hljs-comment">#这个是构造方法</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=1</span>, <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 3:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">0</span>       <span class="hljs-number">5</span>     <span class="hljs-number">0</span>  <span class="hljs-string">this</span>   <span class="hljs-string">Lcom/test/Main;</span><br><br>  <span class="hljs-string">public</span> <span class="hljs-string">static</span> <span class="hljs-string">void</span> <span class="hljs-string">main(java.lang.String</span>[]<span class="hljs-string">);</span>    <span class="hljs-comment">#主方法</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">(</span>[<span class="hljs-string">Ljava/lang/String;)V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span>, <span class="hljs-string">ACC_STATIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2</span>, <span class="hljs-string">locals=2</span>, <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">invokestatic</span>  <span class="hljs-comment">#2                  // Method a:()I</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">istore_1</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">getstatic</span>     <span class="hljs-comment">#3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class="hljs-attr">7:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attr">8:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#4                  // Method java/io/PrintStream.println:(I)V</span><br>        <span class="hljs-attr">11:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 5:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">line 6:</span> <span class="hljs-number">4</span><br>        <span class="hljs-attr">line 7:</span> <span class="hljs-number">11</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">0</span>      <span class="hljs-number">12</span>     <span class="hljs-number">0</span>  <span class="hljs-string">args</span>   [<span class="hljs-string">Ljava/lang/String;</span><br>            <span class="hljs-number">4</span>       <span class="hljs-number">8</span>     <span class="hljs-number">1</span>   <span class="hljs-string">res</span>   <span class="hljs-string">I</span><br><br>  <span class="hljs-string">public</span> <span class="hljs-string">static</span> <span class="hljs-string">int</span> <span class="hljs-string">a();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()I</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span>, <span class="hljs-string">ACC_STATIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=0</span>, <span class="hljs-string">args_size=0</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">invokestatic</span>  <span class="hljs-comment">#5                  // Method b:()I</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">ireturn</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 10:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-string">public</span> <span class="hljs-string">static</span> <span class="hljs-string">int</span> <span class="hljs-string">b();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()I</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span>, <span class="hljs-string">ACC_STATIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=0</span>, <span class="hljs-string">args_size=0</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">invokestatic</span>  <span class="hljs-comment">#6                  // Method c:()I</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">ireturn</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 14:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-string">public</span> <span class="hljs-string">static</span> <span class="hljs-string">int</span> <span class="hljs-string">c();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()I</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC</span>, <span class="hljs-string">ACC_STATIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2</span>, <span class="hljs-string">locals=2</span>, <span class="hljs-string">args_size=0</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">10</span><br>         <span class="hljs-attr">2:</span> <span class="hljs-string">istore_0</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">20</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">istore_1</span><br>         <span class="hljs-attr">6:</span> <span class="hljs-string">iload_0</span><br>         <span class="hljs-attr">7:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attr">8:</span> <span class="hljs-string">iadd</span><br>         <span class="hljs-attr">9:</span> <span class="hljs-string">ireturn</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 18:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">line 19:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">line 20:</span> <span class="hljs-number">6</span><br>      <span class="hljs-attr">LocalVariableTable:</span><br>        <span class="hljs-string">Start</span>  <span class="hljs-string">Length</span>  <span class="hljs-string">Slot</span>  <span class="hljs-string">Name</span>   <span class="hljs-string">Signature</span><br>            <span class="hljs-number">3</span>       <span class="hljs-number">7</span>     <span class="hljs-number">0</span>     <span class="hljs-string">a</span>   <span class="hljs-string">I</span><br>            <span class="hljs-number">6</span>       <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-string">b</span>   <span class="hljs-string">I</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从<code>main</code>方法开始看起：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gywucw6rcyj30ws0gyq4h.jpg"alt="image-20220131142625842" /></p><p>接着我们继续往下，到了<code>0: invokestatic  #2                  // Method a:()I</code>时，需要调用方法<code>a()</code>，这时当前方法就不会继续向下运行了，而是去执行方法<code>a()</code>，那么同样的，将此方法也入栈，注意是放入到栈顶位置，<code>main</code>方法的栈帧会被压下去：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gywuhfjok5j30v40g875z.jpg"alt="image-20220131143641690" /></p><p>这时，进入方法a之后，又继而进入到方法b，最后在进入c，因此，到达方法c的时候，我们的虚拟机栈变成了：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gywun3qnp6j30zq0h6jtq.jpg"alt="image-20220131144209743" /></p><p>现在我们依次执行方法c中的指令，最后返回a+b的结果，在方法c返回之后，也就代表方法c已经执行结束了，栈帧4会自动出栈，这时栈帧3就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧4的操作，此时栈帧3也出栈并继续将结果交给下一个栈帧2，最后栈帧2再将结果返回给栈帧1，然后栈帧1就可以继续向下运行了，最后输出结果。</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNgy1gywxbv24qlj30tk0giwg2.jpg"alt="image-20220131144955668" /></p><h4 id="本地方法栈">本地方法栈</h4><p>本地方法栈与虚拟机栈作用差不多，但是它 备的，这里不多做介绍。</p><h4 id="堆">堆</h4><p>堆是整个Java应用程序共享的区域，也是整个虚拟机最大的一块内存空间，而此区域的职责就是存放和管理对象和数组，而我们马上要提到的垃圾回收机制也是主要作用于这一部分内存区域。</p><h4 id="方法区">方法区</h4><p>方法区也是整个Java应用程序共享的区域，它用于存储所有的类信息、常量、静态变量、动态编译缓存等数据，可以大致分为两个部分，一个是类信息表，一个是运行时常量池。方法区也是我们要重点介绍的部分。</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyxz722qmjj31520mmgo9.jpg"alt="image-20220201140516096" /></p><p>首先类信息表中存放的是当前应用程序加载的所有类信息，包括类的版本、字段、方法、接口等信息，同时会将编译时生成的常量池数据全部存放到运行时常量池中。当然，常量也并不是只能从类信息中获取，在程序运行时，也有可能会有新的常量进入到常量池。</p><p>其实我们的String类正是利用了常量池进行优化，这里我们编写一个测试用例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><br>    System.out.println(str1 == str2);<br>    System.out.println(str1.equals(str2));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>得到的结果也是显而易见的，由于<code>str1</code>和<code>str2</code>是单独创建的两个对象，那么这两个对象实际上会在堆中存放，保存在不同的地址：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyy0jttx6mj318g0iswgd.jpg"alt="image-20220201141848804" /></p><p>所以当我们使用<code>==</code>判断时，得到的结果<code>false</code>，而使用<code>equals</code>时因为比较的是值，所以得到<code>true</code>。现在我们来稍微修改一下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br>    System.out.println(str1 == str2);<br>    System.out.println(str1.equals(str2));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在我们没有使用new的形式，而是直接使用双引号创建，那么这时得到的结果就变成了两个<code>true</code>，这是为什么呢？这其实是因为我们直接使用双引号赋值，会先在常量池中查找是否存在相同的字符串，若存在，则将引用直接指向该字符串；若不存在，则在常量池中生成一个字符串，再将引用指向该字符串：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyy0jrivm4j318k0jcq4q.jpg"alt="image-20220201142710405" /></p><p>实际上两次调用String类的<code>intern()</code>方法，和上面的效果差不多，也是第一次调用会将堆中字符串复制并放入常量池中，第二次通过此方法获取字符串时，会查看常量池中是否包含，如果包含那么会直接返回常量池中字符串的地址：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//不能直接写&quot;abc&quot;，双引号的形式，写了就直接在常量池里面吧abc创好了</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>)+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>)+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;c&quot;</span>);<br><br>    System.out.println(str1.intern() == str2.intern());<br>    System.out.println(str1.equals(str2));<br>&#125;<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyy0jx0o6gj31fk0la41e.jpg"alt="image-20220201145204505" /></p><p>所以上述结果中得到的依然是两个<code>true</code>。在JDK1.7之后，稍微有一些区别，在调用<code>intern()</code>方法时，当常量池中没有对应的字符串时，不会再进行复制操作，而是将其直接修改为指向当前字符串堆中的的引用：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyy0jyvnstj31f20k0di6.jpg"alt="image-20220201144747139" /></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-comment">//不能直接写&quot;abc&quot;，双引号的形式，写了就直接在常量池里面吧abc创好了</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>)+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    System.out.println(str1.intern() == str1);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>)+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>)+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;c&quot;</span>);<br><br>    System.out.println(str1 == str1.intern());<br>    System.out.println(str2.intern() == str1);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以最后我们会发现，<code>str1.intern()</code>和<code>str1</code>都是同一个对象，结果为<code>true</code>。</p><p>值得注意的是，在JDK7之后，字符串常量池从方法区移动到了堆中。</p><p>最后我们再来进行一个总结，各个内存区域的用途：</p><ul><li>（线程独有）程序计数器：保存当前程序的执行位置。</li><li>（线程独有）虚拟机栈：通过栈帧来维持方法调用顺序，帮助控制程序有序运行。</li><li>（线程独有）本地方法栈：同上，作用与本地方法。</li><li>堆：所有的对象和数组都在这里保存。</li><li>方法区：类信息、即时编译器的代码缓存、运行时常量池。</li></ul><p>当然，这些内存区域划分仅仅是概念上的，具体的实现过程我们后面还会提到。</p><h3 id="爆内存和爆栈">爆内存和爆栈</h3><p>实际上，在Java程序运行时，内存容量不可能是无限制的，当我们的对象创建过多或是数组容量过大时，就会导致我们的堆内存不足以存放更多新的对象或是数组，这时就会出现错误，比如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[Integer.MAX_VALUE];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们申请了一个容量为21亿多的int型数组，显然，如此之大的数组不可能放在我们的堆内存中，所以程序运行时就会这样：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Requested array size exceeds VM limit<br>at com.test.Main.main(Main.java:<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><p>这里得到了一个<code>OutOfMemoryError</code>错误，也就是我们常说的内存溢出错误。我们可以通过参数来控制堆内存的最大值和最小值：</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-Xms最小值 -Xmx最大值</span><br></code></pre></div></td></tr></table></figure><p>比如我们现在限制堆内存为固定值1M大小，并且在抛出内存溢出异常时保存当前的内存堆转储快照：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyya4xksfzj31cm0u0dk2.jpg"alt="image-20220201202346882" /></p><p>注意堆内存不要设置太小，不然连虚拟机都不足以启动，接着我们编写一个一定会导致内存溢出的程序：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Test&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>());    <span class="hljs-comment">//无限创建Test对象并丢进List中</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123; &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在程序运行之后：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.OutOfMemoryError</span>: Java heap space<br>Dumping heap to java_pid35172<span class="hljs-selector-class">.hprof</span> ...<br>Heap dump file created <span class="hljs-selector-attr">[12895344 bytes in 0.028 secs]</span><br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.OutOfMemoryError</span>: Java heap space<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Arrays</span><span class="hljs-selector-class">.copyOf</span>(Arrays<span class="hljs-selector-class">.java</span>:<span class="hljs-number">3210</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Arrays</span><span class="hljs-selector-class">.copyOf</span>(Arrays<span class="hljs-selector-class">.java</span>:<span class="hljs-number">3181</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ArrayList</span><span class="hljs-selector-class">.grow</span>(ArrayList<span class="hljs-selector-class">.java</span>:<span class="hljs-number">267</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ArrayList</span><span class="hljs-selector-class">.ensureExplicitCapacity</span>(ArrayList<span class="hljs-selector-class">.java</span>:<span class="hljs-number">241</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ArrayList</span><span class="hljs-selector-class">.ensureCapacityInternal</span>(ArrayList<span class="hljs-selector-class">.java</span>:<span class="hljs-number">233</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ArrayList</span><span class="hljs-selector-class">.add</span>(ArrayList<span class="hljs-selector-class">.java</span>:<span class="hljs-number">464</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span><span class="hljs-selector-class">.main</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">10</span>)<br></code></pre></div></td></tr></table></figure><p>可以看到错误出现原因正是<code>Java heap space</code>，也就是堆内存满了，并且根据我们设定的VM参数，堆内存保存了快照信息。我们可以在IDEA内置的Profiler中进行查看：</p><p><imgsrc="https://tva1.sinaimg.cn/large/008i3skNly1gyyaddef66j31vo0u0jwq.jpg"alt="image-20220201203157213" /></p><p>可以很明显地看到，在创建了360146个Test对象之后，堆内存蚌埠住了，于是就抛出了内存溢出错误。</p><p>我们接着来看栈溢出，我们知道，虚拟机栈会在方法调用时插入栈帧，那么，设想如果出现无限递归的情况呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        test();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        test();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这很明显是一个永无休止的程序，并且会不断继续向下调用test方法本身，那么按照我们之前的逻辑推导，无限地插入栈帧那么一定会将虚拟机栈塞满，所以，当栈的深度已经不足以继续插入栈帧时，就会这样：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.StackOverflowError</span><br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span><span class="hljs-selector-class">.test</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">12</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span><span class="hljs-selector-class">.test</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">12</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span><span class="hljs-selector-class">.test</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">12</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span><span class="hljs-selector-class">.test</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">12</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span><span class="hljs-selector-class">.test</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">12</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span><span class="hljs-selector-class">.test</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">12</span>)<br>....以下省略很多行<br></code></pre></div></td></tr></table></figure><p>这也是我们常说的栈溢出，它和堆溢出比较类似，也是由于容纳不下才导致的，我们可以使用<code>-Xss</code>来设定栈容量。</p><h3 id="申请堆外内存">申请堆外内存</h3><p>除了堆内存可以存放对象数据以外，我们也可以申请堆外内存（直接内存），也就是不受JVM管控的内存区域，这部分区域的内存需要我们自行去申请和释放，实际上本质就是JVM通过C/C++调用<code>malloc</code>函数申请的内存，当然得我们自己去释放了。不过虽然是直接内存，不会受到堆内存容量限制，但是依然会受到本机最大内存的限制，所以还是有可能抛出<code>OutOfMemoryError</code>异常。</p><p>这里我们需要提到一个堆外内存操作类：<code>Unsafe</code>，就像它的名字一样，虽然Java提供堆外内存的操作类，但是实际上它是不安全的，只有你完全了解底层原理并且能够合理控制堆外内存，才能安全地使用堆外内存。</p><p>注意这个类不让我们new，也没有直接获取方式（压根就没想让我们用）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Unsafe</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerNatives</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        registerNatives();<br>        sun.reflect.Reflection.registerMethodsToFilter(Unsafe.class, <span class="hljs-string">&quot;getUnsafe&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Unsafe</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Unsafe</span>();<br>  <br>    <span class="hljs-meta">@CallerSensitive</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> &#123;<br>        Class&lt;?&gt; caller = Reflection.getCallerClass();<br>        <span class="hljs-keyword">if</span> (!VM.isSystemDomainLoader(caller.getClassLoader()))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">&quot;Unsafe&quot;</span>);   <span class="hljs-comment">//不是JDK的类，不让用。</span><br>        <span class="hljs-keyword">return</span> theUnsafe;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>所以我们这里就通过反射给他giao出来：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredFields()[<span class="hljs-number">0</span>];<br>    unsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) unsafeField.get(<span class="hljs-literal">null</span>);<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>成功拿到Unsafe类之后，我们就可以开始申请堆外内存了，比如我们现在想要申请一个int大小的内存空间，并在此空间中存放一个int类型的数据：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredFields()[<span class="hljs-number">0</span>];<br>    unsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) unsafeField.get(<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">//申请4字节大小的内存空间，并得到对应位置的地址</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> unsafe.allocateMemory(<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//在对应的地址上设定int的值</span><br>    unsafe.putInt(address, <span class="hljs-number">6666666</span>);<br>    <span class="hljs-comment">//获取对应地址上的Int型数值</span><br>    System.out.println(unsafe.getInt(address));<br>    <span class="hljs-comment">//释放申请到的内容</span><br>    unsafe.freeMemory(address);<br><br>    <span class="hljs-comment">//由于内存已经释放，这时数据就没了</span><br>    System.out.println(unsafe.getInt(address));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以来看一下<code>allocateMemory</code>底层是如何调用的，这是一个native方法，我们来看C++源码：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">UNSAFE_ENTRY</span>(jlong, <span class="hljs-built_in">Unsafe_AllocateMemory0</span>(JNIEnv *env, jobject unsafe, jlong size)) &#123;<br>  <span class="hljs-type">size_t</span> sz = (<span class="hljs-type">size_t</span>)size;<br><br>  sz = <span class="hljs-built_in">align_up</span>(sz, HeapWordSize);<br>  <span class="hljs-type">void</span>* x = os::<span class="hljs-built_in">malloc</span>(sz, mtOther);   <span class="hljs-comment">//这里调用了os::malloc方法</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">addr_to_java</span>(x);<br>&#125; UNSAFE_END<br></code></pre></div></td></tr></table></figure><p>接着来看：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">os::malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size, MEMFLAGS flags)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> os::<span class="hljs-built_in">malloc</span>(size, flags, CALLER_PC);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">os::malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size, MEMFLAGS memflags, <span class="hljs-type">const</span> NativeCallStack&amp; stack)</span> </span>&#123;<br>...<br>  u_char* ptr;<br>  ptr = (u_char*)::<span class="hljs-built_in">malloc</span>(alloc_size);   <span class="hljs-comment">//调用C++标准库函数 malloc(size)</span><br>....<br>  <span class="hljs-comment">// we do not track guard memory</span><br>  <span class="hljs-keyword">return</span> MemTracker::<span class="hljs-built_in">record_malloc</span>((address)ptr, size, memflags, stack, level);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以，我们上面的Java代码转换为C代码，差不多就是这个意思：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> * a = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    *a = <span class="hljs-number">6666666</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *a);<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *a);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以说，直接内存实际上就是JVM申请的一块额外的内存空间，但是它并不在受管控的几种内存空间中，当然这些内存依然属于是JVM的，由于JVM提供的堆内存会进行垃圾回收等工作，效率不如直接申请和操作内存来得快，一些比较追求极致性能的框架会用到堆外内存来提升运行速度，如nio框架。</p><p>当然，Unsafe类不仅仅只是这些功能，在其他系列课程中，我们还会讲到它。</p><hr /><h2 id="垃圾回收机制">垃圾回收机制</h2><p><strong>注意：</strong>此部分为重点内容。</p><p>我们前面提到，Java会自动管理和释放内存，它不像C/C++那样要求我们手动管理内存，JVM提供了一套全自动的内存管理机制，当一个Java对象不再用到时，JVM会自动将其进行回收并释放内存，那么对象所占内存在什么时候被回收，如何判定对象可以被回收，以及如何去进行回收工作也是JVM需要关注的问题。</p><h3 id="对象存活判定算法">对象存活判定算法</h3><p>首先我们来套讨论第一个问题，也就是：对象在什么情况下可以被判定为不再使用已经可以回收了？这里就需要提到以下几种垃圾回收算法了。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzm008b8j2j21ik0tagpd.jpg"alt="image-20220222084649786" /></p><h4 id="引用计数法">引用计数法</h4><p>我们知道，如果我们要经常操作一个对象，那么首先一定会创建一个引用变量：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//str就是一个引用类型的变量，它持有对后面字符串对象的引用，可以代表后面这个字符串对象本身</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lbwnb&quot;</span>;<br><br><span class="hljs-comment">//str.xxxxx...</span><br></code></pre></div></td></tr></table></figure><p>实际上，我们会发现，只要一个对象还有使用价值，我们就会通过它的引用变量来进行操作，那么可否这样判断一个对象是否还需要被使用：</p><ul><li>每个对象都包含一个<strong>引用计数器</strong>，用于存放引用计数（其实就是存放被引用的次数）</li><li>每当有一个地方引用此对象时，引用计数<code>+1</code></li><li>当引用失效（比如离开了局部变量的作用域或是引用被设定为<code>null</code>）时，引用计数<code>-1</code></li><li>当引用计数为<code>0</code>时，表示此对象不可能再被使用，因为这时我们已经没有任何方法可以得到此对象的引用了</li></ul><p>但是这样存在一个问题，如果两个对象相互引用呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br>        a.another = b;<br>        b.another = a;<br><br>        <span class="hljs-comment">//这里直接把a和b赋值为null，这样前面的两个对象我们不可能再得到了</span><br>        a = b = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>        Test another;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>按照引用计数算法，那么当出现以上情况时，虽然我们无法在得到此对象的引用了，并且此对象我们也无需再使用，但是由于这两个对象直接存在相互引用的情况，那么引用计数器的值将会永远是<code>1</code>，但是实际上此对象已经没有任何用途了。所以引用计数法并不是最好的解决方案。</p><h4 id="可达性分析算法">可达性分析算法</h4><p>目前比较主流的编程语言（包括Java），一般都会使用可达性分析算法来判断对象是否存活，它采用了类似于树结构的搜索机制。</p><p>首先每个对象的引用都有机会成为树的根节点（GCRoots），可以被选定作为根节点条件如下：</p><ul><li>位于虚拟机栈的栈帧中的本地变量表中所引用到的对象（其实就是我们方法中的局部变量）同样也包括本地方法栈中JNI引用的对象。</li><li>类的静态成员变量引用的对象。</li><li>方法区中，常量池里面引用的对象，比如我们之前提到的<code>String</code>类型对象。</li><li>被添加了锁的对象（比如synchronized关键字）</li><li>虚拟机内部需要用到的对象。</li></ul><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzm76iz1mzj217s0ggwgc.jpg"alt="image-20220222125507229" /></p><p>一旦已经存在的根节点不满足存在的条件时，那么根节点与对象之间的连接将被断开。此时虽然对象1仍存在对其他对象的引用，但是由于其没有任何根节点引用，所以此对象即可被判定为不再使用。比如某个方法中的局部变量引用，在方法执行完成返回之后：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzm7ohrh9kj21bg0heacd.jpg"alt="image-20220222130350950" /></p><p>这样就能很好地解决我们刚刚提到的循环引用问题，我们再来重现一下出现循环引用的情况：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzm7ofteqej215a0a00tk.jpg"alt="image-20220222130903349" /></p><p>可以看到，对象1和对象2依然是存在循环引用的，但是只有他们各自的GCRoots断开，那么就会变成下面这样：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzm7of7nnlj21740dq75u.jpg"alt="image-20220222131219350" /></p><p>所以，我们最后进行一下总结：如果某个对象无法到达任何GCRoots，则证明此对象是不可能再被使用的。</p><h4 id="最终判定">最终判定</h4><p>虽然在经历了可达性分析算法之后基本可能判定哪些对象能够被回收，但是并不代表此对象一定会被回收，我们依然可以在最终判定阶段对其进行挽留。</p><p>还记得我们之前在讲解<code>Object</code>类时提到的<code>finalize()</code>方法吗？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called by the garbage collector on an object when garbage collection</span><br><span class="hljs-comment"> * determines that there are no more references to the object.</span><br><span class="hljs-comment"> * A subclass overrides the &#123;<span class="hljs-doctag">@code</span> finalize&#125; method to dispose of</span><br><span class="hljs-comment"> * system resources or to perform other cleanup.</span><br><span class="hljs-comment"> * ...</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123; &#125;<br></code></pre></div></td></tr></table></figure><p>此方法正是最终判定方法，如果子类重写了此方法，那么子类对象在被判定为可回收时，会进行二次确认，也就是执行<code>finalize()</code>方法，而在此方法中，当前对象是完全有可能重新建立GCRoots的！所以，如果在二次确认后对象不满足可回收的条件，那么此对象不会被回收，巧妙地逃过了垃圾回收的命运。比如下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Test a;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br>        <span class="hljs-comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span><br>        a  = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span><br>        System.gc();<br><br>        <span class="hljs-comment">//等垃圾回收一下()</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//我们来看看a有没有被回收</span><br>        System.out.println(a);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>+<span class="hljs-string">&quot; 开始了它的救赎之路！&quot;</span>);<br>            a = <span class="hljs-built_in">this</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意<code>finalize()</code>方法并不是在主线程调用的，而是虚拟机自动建立的一个低优先级的<code>Finalizer</code>线程（正是因为优先级比较低，所以前面才需要等待1秒钟）进行处理，我们可以稍微修改一下看看：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(Thread.currentThread());<br>        a = <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">Thread[Finalizer,<span class="hljs-number">8</span>,system]<br><span class="hljs-keyword">com</span>.test.Main<span class="hljs-number">$Test</span><span class="hljs-subst">@232204</span>a1<br></code></pre></div></td></tr></table></figure><p>同时，同一个对象的<code>finalize()</code>方法只会有一次调用机会，也就是说，如果我们连续两次这样操作，那么第二次，对象必定被回收：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    <span class="hljs-comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span><br>    a  = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span><br>    System.gc();<br>    <span class="hljs-comment">//等垃圾回收一下</span><br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <br>    System.out.println(a);<br>    <span class="hljs-comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span><br>    a  = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span><br>    System.gc();<br>    <span class="hljs-comment">//等垃圾回收一下</span><br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <br>    System.out.println(a);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当然，<code>finalize()</code>方法也并不是专门防止对象被回收的，我们可以使用它来释放一些程序使用中的资源等。</p><p>最后，总结成一张图：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzm9o931z4j21n40letdm.jpg"alt="image-20220222141854678" /></p><p>当然，除了堆中的对象以外，方法区中的数据也是可以被垃圾回收的，但是回收条件比较严格，这里就暂时不谈了。</p><hr /><h3 id="垃圾回收算法">垃圾回收算法</h3><p>前面我们介绍了对象存活判定算法，现在我们已经可以准确地知道堆中的哪些对象可以被回收了，那么，接下来就该考虑如何对对象进行回收了，垃圾收集器会不定期地检查堆中的对象，查看它们是否满足被回收的条件。我们该如何对这些对象进行回收，是一个一个判断是否需要回收吗？</p><h4 id="分代收集机制">分代收集机制</h4><p>实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。</p><p>比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。</p><p>因此，Java虚拟机将堆内存划分为<strong>新生代</strong>、<strong>老年代</strong>和<strong>永久代</strong>（其中永久代是HotSpot虚拟机特有的概念，在JDK8之前方法区实际上就是采用的永久代作为实现，而在JDK8之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是<strong>新生代</strong>和<strong>老年代</strong>。</p><p>不同的分代内存回收机制也存在一些不同之处，在HotSpot虚拟机中，新生代被划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为8：1：1，老年代的GC评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbaa6eg9j217a0ggta0.jpg"alt="image-20220222151708141" /></p><p>那么它是如何运作的呢？</p><p>首先，所有新创建的对象，在一开始都会进入到新生代的Eden区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyo48r0j21i20cqq4l.jpg"alt="image-20220222153104582" /></p><p>接着，在一次垃圾回收之后，Eden区域没有被回收的对象，会进入到Survivor区。在一开始From和To都是空的，而GC之后，所有Eden区域存活的对象都会直接被放入到From区，最后From和To会发生一次交换，也就是说目前存放我们对象的From区，变为To区，而To区变为From区：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyn34yfj21gk0d4gn5.jpg"alt="image-20220222154032674" /></p><p>接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们From区域中已经存在对象了，所以，在Eden区的存活对象复制到From区之后，所有To区域中的对象会进行年龄判定（每经历一轮GC年龄<code>+1</code>，如果对象的年龄大于<code>默认值为15</code>，那么会直接进入到老年代，否则移动到From区）</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmc6v1nzcj21h60d2q4l.jpg"alt="image-20220222154828416" /></p><p>最后像上面一样交换To区和From区，之后不断重复以上步骤。</p><p>而垃圾收集也分为：</p><ul><li>Minor GC - 次要垃圾回收，主要进行新生代区域的垃圾收集。<ul><li>触发条件：新生代的Eden区容量已满时。</li></ul></li><li>Major GC - 主要垃圾回收，主要进行老年代的垃圾收集。</li><li>Full GC - 完全垃圾回收，对整个Java堆内存和方法区进行垃圾回收。<ul><li>触发条件1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li><li>触发条件2：Minor GC后存活的对象超过了老年代剩余空间</li><li>触发条件3：永久代内存不足（JDK8之前）</li><li>触发条件4：手动调用<code>System.gc()</code>方法</li></ul></li></ul><p>我们可以添加启动参数来查看JVM的GC日志：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmd9jj8djj21m20gktav.jpg"alt="image-20220222162536616" /></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        o = <span class="hljs-literal">null</span>;<br>        System.gc();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">gc</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">2621</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">528</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">76288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2621</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">528</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">251392</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0006874</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">gc</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">528</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">76288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">332</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">175104</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">528</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">332</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">251392</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3073</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3073</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0022693</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-variable">Heap</span><br> <span class="hljs-variable">PSYoungGen</span>      <span class="hljs-variable">total</span> <span class="hljs-number">76288</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">3277</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076ab00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x0000000770000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">eden</span> <span class="hljs-variable">space</span> <span class="hljs-number">65536</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076ab00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076ae334d8</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076eb00000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">from</span> <span class="hljs-variable">space</span> <span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076eb00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076eb00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076f580000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">to</span>   <span class="hljs-variable">space</span> <span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076f580000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x000000076f580000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x0000000770000000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">ParOldGen</span>       <span class="hljs-variable">total</span> <span class="hljs-number">175104</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">332</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000006c0000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000006cab00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x000000076ab00000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">object</span> <span class="hljs-variable">space</span> <span class="hljs-number">175104</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000006c0000000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000006c00532d8</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000006cab00000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">Metaspace</span>       <span class="hljs-variable">used</span> <span class="hljs-number">3096</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">4496</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">4864</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><br>  <span class="hljs-variable">class</span> <span class="hljs-variable">space</span>    <span class="hljs-variable">used</span> <span class="hljs-number">333</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">388</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1048576</span><span class="hljs-built_in">K</span><br><br></code></pre></div></td></tr></table></figure><p>现在我们还只能大致看懂GC日志，不过在学习完成本章全部内容后，我们就可以轻松阅读了。</p><h4 id="空间分配担保">空间分配担保</h4><p>我们可以思考一下，有没有这样一种极端情况（正常情况下新生代的回收率是很高的，所以说不用太担心会经常出现这种问题），在一次GC后，新生代Eden区仍然存在大量的对象（因为GC之后存活对象会进入到一个Survivor区，但是很明显这时已经超出Survivor区的容量了，肯定是装不下的）那么现在该怎么办？</p><p>这时就需要用到空间分配担保机制了，可以把Survivor区无法容纳的对象直接送到老年代，让老年代进行分配担保（当然老年代也得装得下才行）在现实生活中，贷款会指定担保人，就是当借款人还不起钱的时候由担保人来还钱。</p><p>当新生代无法容纳更多的的对象时，可以把新生代中的对象移动到老年代中，这样新生代就腾出了空间来容纳更多的对象。</p><p>好，那既然新生代装不下就丢给老年代，那么要是老年代也装不下新生代的数据呢？这时，老年代肯定担保人是当不成了，那么这样的话，首先会判断一下之前的每次垃圾回收进入老年代的平均大小是否小于当前老年代的剩余空间，如果小于，那么说明也许可以放得下（不过也仅仅是也许，依然有可能放不下，因为判断的实际上只是平均值，万一这一次突然非常大呢），否则，会先来一次FullGC，进行一次大规模垃圾回收，来尝试腾出空间，再次判断老年代是否有空间存放，要是还是装不下，直接抛出OOM错误，摆烂。</p><p>最后，我们来总结一下一次Minor GC的整个过程：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzml30209wj21u80ren3q.jpg"alt="image-20220222205605690" /></p><hr /><h4 id="标记-清除算法">标记-清除算法</h4><p>前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的<code>标记-清除</code>算法。</p><p>首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。实际上这种算法是非常基础的，并且最易于理解的（这里对象我就以一个方框代替了，当然实际上存放是我们前说到的GCRoots形式）</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1gzme6btluwj21e40c0760.jpg"alt="image-20220222165709034" /></p><p>虽然此方法非常简单，但是缺点也是非常明显的，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。</p><h4 id="标记-复制算法">标记-复制算法</h4><p>既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，</p><p>标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzmlh5aveqj21ti0u079c.jpg"alt="image-20220222210942507" /></p><p>这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代Survivor区其实就是这个思路，包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的。</p><h4 id="标记-整理算法">标记-整理算法</h4><p>虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次GC后，仍然存留很多对象。而标记复制算法会在GC后完整复制整个区域内容，并且会折损50%的区域，显然这并不适用于老年代。</p><p>那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzmm4g8voxj21vm08ywhj.jpg"alt="image-20220222213208681" /></p><p>虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“StopThe World”）。</p><p>所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。</p><hr /><h3 id="垃圾收集器实现">垃圾收集器实现</h3><p>聊完了对象存活判定和垃圾回收算法，接着我们就要看看具体有哪些垃圾回收器的实现了。我们可以自由地为新生代和老年代选择更适合它们的收集器。</p><h4 id="serial收集器">Serial收集器</h4><p>这款垃圾收集器也是元老级别的收集器了，在JDK1.3.1之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzn92k8ooej21ae0bc75m.jpg"alt="image-20220223104605648" /></p><p>可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待GC线程完成工作，就相当于你打一把LOL40分钟，中途每隔1分钟网络就卡5秒钟，可能这时你正在打团，结果你被物理控制直接在那里站了5秒钟，这确实让人难以接受。</p><p>虽然缺点很明显，但是优势也是显而易见的：</p><ol type="1"><li>设计简单而高效。</li><li>在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li></ol><p>所以，在客户端模式（一般用于一些桌面级图形化界面应用程序）下的新生代中，默认垃圾收集器至今依然是Serial收集器。我们可以在<code>java -version</code>中查看默认的客户端模式：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">openjdk</span> version <span class="hljs-string">&quot;1.8.0_322&quot;</span><br><span class="hljs-attribute">OpenJDK</span> Runtime Environment (Zulu <span class="hljs-number">8.60.0.21</span>-CA-macos-aarch64) (build <span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_322-b06)<br><span class="hljs-attribute">OpenJDK</span> <span class="hljs-number">64</span>-Bit Server VM (Zulu <span class="hljs-number">8.60.0.21</span>-CA-macos-aarch64) (build <span class="hljs-number">25</span>.<span class="hljs-number">322</span>-b06, mixed mode)<br></code></pre></div></td></tr></table></figure><p>我们可以在jvm.cfg文件中切换JRE为Server VM或是ClientVM，默认路径为：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">JDK安装目录<span class="hljs-regexp">/jre/</span>lib/jvm.cfg<br></code></pre></div></td></tr></table></figure><p>比如我们需要将当前模式切换为客户端模式，那么我们可以这样编辑：</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">-<span class="hljs-keyword">client</span> KNOWN<br>-<span class="hljs-keyword">server</span> IGNORE<br></code></pre></div></td></tr></table></figure><h4 id="parnew收集器">ParNew收集器</h4><p>这款垃圾收集器相当于是Serial收集器的多线程版本，它能够支持多线程垃圾收集：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzn9vbvb0mj21c20c00uc.jpg"alt="image-20220223111344962" /></p><p>除了多线程支持以外，其他内容基本与Serial收集器一致，并且目前某些JVM默认的服务端模式新生代收集器就是使用的ParNew收集器。</p><h4 id="parallel-scavengeparallel-old收集器">Parallel Scavenge/ParallelOld收集器</h4><p>ParallelScavenge同样是一款面向新生代的垃圾收集器，同样采用标记复制算法实现，在JDK6时也推出了其老年代收集器ParallelOld，采用标记整理算法实现：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzna31mo1qj21cs0ckjt3.jpg"alt="image-20220223112108949" /></p><p>与ParNew收集器不同的是，它会自动衡量一个吞吐量，并根据吞吐量来决定每次垃圾回收的时间，这种自适应机制，能够很好地权衡当前机器的性能，根据性能选择最优方案。</p><p>目前JDK8采用的就是这种 Parallel Scavenge + Parallel Old的垃圾回收方案。</p><h4 id="cms收集器">CMS收集器</h4><p>在JDK1.5，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和GC线程，而并行可以理解为多条GC线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p><p>它主要采用标记清除算法：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznamys2bdj21as0co404.jpg"alt="image-20220223114019381" /></p><p>它的垃圾回收分为4个阶段：</p><ul><li>初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出GCRoots能直接关联到的对象，速度比较快，不用担心会停顿太长时间。</li><li>并发标记：从GCRoots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li><li>重新标记（需要暂停用户线程）：由于并发标记阶段可能某些用户线程会导致标记产生变得，因此这里需要再次暂停所有线程进行并行标记，这个时间会比初始标记时间长一丢丢。</li><li>并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。</li></ul><p>虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发FullGC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。</p><p>不过，如果你希望的是最低的GC停顿时间，这款垃圾收集器无疑是最佳选择，不过自从G1收集器问世之后，CMS收集器不再推荐使用了。</p><h4 id="garbage-first-g1-收集器">Garbage First (G1) 收集器</h4><p>此垃圾收集器也是一款划时代的垃圾收集器，在JDK7的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在JDK9时，取代了JDK8默认的Parallel Scavenge + Parallel Old 的回收方案。</p><p>我们知道，我们的垃圾回收分为<code>Minor GC</code>、<code>Major GC</code>和<code>Full GC</code>，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而G1收集器巧妙地绕过了这些约定，它将整个Java堆划分成<code>2048</code>个大小相同的独立<code>Region</code>块，每个<code>Region块</code>的大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且都为2的N次幂。所有的<code>Region</code>大小相同，且在JVM的整个生命周期内不会发生改变。</p><p>那么分出这些<code>Region</code>有什么意义呢？每一个<code>Region</code>都可以根据需要，自由决定扮演哪个角色（Eden、Survivor和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1收集器还存在一个Humongous区域，它专门用于存放大对象（一般认为大小超过了Region容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznc9jvdzdj21f40eiq4g.jpg"alt="image-20220223123636582" /></p><p>它的回收过程与CMS大体类似：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznc8vqqqij21h00emwgt.jpg"alt="image-20220223123557871" /></p><p>分为以下四个步骤：</p><ul><li>初始标记（暂停用户线程）：仅仅只是标记一下GCRoots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行MinorGC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</li><li>并发标记：从GCRoot开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。</li><li>最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。</li><li>筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。</li></ul><hr /><h3 id="元空间">元空间</h3><p>JDK8之前，Hotspot虚拟机的方法区实际上是永久代实现的。在JDK8之后，Hotspot虚拟机不再使用永久代，而是采用了全新的元空间。类的元信息被存储在元空间中。元空间没有使用堆内存，而是与堆不相连的本地内存区域。所以，理论上系统可以使用的内存有多大，元空间就有多大，所以不会出现永久代存在时的内存溢出问题。这项改造也是有必要的，永久代的调优是很困难的，虽然可以设置永久代的大小，但是很难确定一个合适的大小，因为其中的影响因素很多，比如类数量的多少、常量数量的多少等。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gznd3pdzvyj21q20fcacr.jpg"alt="image-20220223130536357" /></p><p>因此在JDK8时直接将本地内存作为元空间（<strong>Metaspace</strong>）的区域，物理内存有多大，元空间内存就可以有多大，这样永久代的空间分配问题就讲解了，所以最终它变成了这样：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzncp6mhikj21ik0migqv.jpg"alt="image-20220223125137512" /></p><p>到此，我们对于JVM内存区域的讲解就基本完成了。</p><hr /><h3 id="其他引用类型">其他引用类型</h3><p>最后，我们来介绍一下其他引用类型。</p><p>我们知道，在Java中，如果变量是一个对象类型的，那么它实际上存放的是对象的引用，但是如果是一个基本类型，那么存放的就是基本类型的值。实际上我们平时代码中类似于<code>Object o = new Object()</code>这样的的引用类型，细分之后可以称为<code>强引用</code>。</p><p>我们通过前面的学习可以明确，如果方法中存在这样的<code>强引用</code>类型，现在需要回收强引用所指向的对象，那么要么此方法运行结束，要么引用连接断开，否则被引用的对象是无法被判定为可回收的，因为我们说不定后面还要使用它。</p><p>所以，当JVM内存空间不足时，JVM宁愿抛出OutOfMemoryError使程序异常终止，也不会靠随意回收具有强引用的“存活”对象来解决内存不足的问题。</p><p>除了强引用之外，Java也为我们提供了三种额外的引用类型。</p><h4 id="软引用">软引用</h4><p>软引用不像强引用那样不可回收，当 JVM认为内存不足时，会去试图回收软引用指向的对象，即JVM 会确保在抛出OutOfMemoryError之前，清理软引用指向的对象。当然，如果内存充足，那么是不会轻易被回收的。</p><p>我们可以通过以下方式来创建一个软引用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//强引用写法：Object obj = new Object();</span><br>        <span class="hljs-comment">//软引用写法：</span><br>        SoftReference&lt;Object&gt; reference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        <span class="hljs-comment">//使用get方法就可以获取到软引用所指向的对象了</span><br>        System.out.println(reference.get());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到软引用还存在一个带队列的构造方法，软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><p>这里我们来进行一个测试，首先我们需要设定一下参数，来限制最大堆内存为10M，并且打印GC日志：</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby">-<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+PrintGCDetails</span> -Xms10M -Xmx10M<br></code></pre></div></td></tr></table></figure><p>接着运行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ReferenceQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;&gt;();<br>        SoftReference&lt;Object&gt; reference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), queue);<br>        System.out.println(reference);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;lbwnb&quot;</span>));<br>        &#125;<span class="hljs-keyword">catch</span> (Throwable t)&#123;<br>            System.out.println(<span class="hljs-string">&quot;发生了内存溢出！&quot;</span>+t.getMessage());<br>            System.out.println(<span class="hljs-string">&quot;软引用对象：&quot;</span>+reference.get());<br>            System.out.println(queue.poll());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-variable">java</span><span class="hljs-operator">.</span><span class="hljs-variable">lang</span><span class="hljs-operator">.</span><span class="hljs-variable">ref</span><span class="hljs-operator">.</span><span class="hljs-variable">SoftReference</span><span class="hljs-operator">@</span><span class="hljs-number">232204</span><span class="hljs-variable">a1</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">3943</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">501</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3943</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2362</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0050615</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">3714</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">496</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5574</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">4829</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0049642</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">3318</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">7652</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">7711</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0059440</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">--</span><span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">11807</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">15870</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0078912</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">11262</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">10104</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">11264</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">15870</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">10104</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0587856</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.24</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.06</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">4096</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">1535</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">10104</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">11242</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">11264</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">14200</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">12777</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0608198</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.25</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.06</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">3965</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3896</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">11242</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">11242</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">11264</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">15207</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">15138</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0972088</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.58</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.10</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">3896</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3896</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">11242</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">11225</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">11264</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">15138</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">15121</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">15872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3207</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.1028222</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.63</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.10</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>发生了内存溢出！<span class="hljs-variable">Java</span> <span class="hljs-variable">heap</span> <span class="hljs-variable">space</span><br>软引用对象：<span class="hljs-variable">null</span><br><span class="hljs-variable">java</span><span class="hljs-operator">.</span><span class="hljs-variable">lang</span><span class="hljs-operator">.</span><span class="hljs-variable">ref</span><span class="hljs-operator">.</span><span class="hljs-variable">SoftReference</span><span class="hljs-operator">@</span><span class="hljs-number">232204</span><span class="hljs-variable">a1</span><br><span class="hljs-variable">Heap</span><br> <span class="hljs-variable">PSYoungGen</span>      <span class="hljs-variable">total</span> <span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">4048</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bfb00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">eden</span> <span class="hljs-variable">space</span> <span class="hljs-number">4096</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">98</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bfb00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bfef40a8</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bff00000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">from</span> <span class="hljs-variable">space</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bff00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bff00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bff80000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">to</span>   <span class="hljs-variable">space</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bff80000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bff80000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">ParOldGen</span>       <span class="hljs-variable">total</span> <span class="hljs-number">11264</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">11225</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bf000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007bfb00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007bfb00000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">object</span> <span class="hljs-variable">space</span> <span class="hljs-number">11264</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">99</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bf000000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bfaf64a8</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bfb00000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">Metaspace</span>       <span class="hljs-variable">used</span> <span class="hljs-number">3216</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">4500</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">4864</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><br>  <span class="hljs-variable">class</span> <span class="hljs-variable">space</span>    <span class="hljs-variable">used</span> <span class="hljs-number">352</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">388</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1048576</span><span class="hljs-built_in">K</span><br></code></pre></div></td></tr></table></figure><p>可以看到，当内存不足时，软引用所指向的对象被回收了，所以<code>get()</code>方法得到的结果为null，并且软引用对象本身被丢进了队列中。</p><h4 id="弱引用">弱引用</h4><p>弱引用比软引用的生命周期还要短，在进行垃圾回收时，不管当前内存空间是否充足，都会回收它的内存。</p><p>我们可以像这样创建一个弱引用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        WeakReference&lt;Object&gt; reference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        System.out.println(reference.get());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用方法和软引用是差不多的，但是如果我们在这之前手动进行一次GC：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SoftReference&lt;Object&gt; softReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        WeakReference&lt;Object&gt; weakReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br><br>        <span class="hljs-comment">//手动GC</span><br>        System.gc();<br><br>        System.out.println(<span class="hljs-string">&quot;软引用对象：&quot;</span>+softReference.get());<br>        System.out.println(<span class="hljs-string">&quot;弱引用对象：&quot;</span>+weakReference.get());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，弱引用对象直接就被回收了，而软引用对象没有被回收。同样的，它也支持ReferenceQueue，和软引用用法一致，这里就不多做介绍了。</p><p><code>WeakHashMap</code>正是一种类似于弱引用的HashMap类，如果Map中的Key没有其他引用那么此Map会自动丢弃此键值对。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br><br>        WeakHashMap&lt;Integer, String&gt; weakHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakHashMap</span>&lt;&gt;();<br>        weakHashMap.put(a, <span class="hljs-string">&quot;yyds&quot;</span>);<br>        System.out.println(weakHashMap);<br><br>        a = <span class="hljs-literal">null</span>;<br>        System.gc();<br>        <br>        System.out.println(weakHashMap);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，当变量a的引用断开后，这时只有WeakHashMap本身对此对象存在引用，所以在GC之后，这个键值对就自动被舍弃了。所以说这玩意，就挺适合拿去做缓存的。</p><h4 id="虚引用鬼引用">虚引用（鬼引用）</h4><p>虚引用相当于没有引用，随时都有可能会被回收。</p><p>看看它的源码，非常简单：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhantomReference</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reference</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns this reference object&#x27;s referent.  Because the referent of a</span><br><span class="hljs-comment">     * phantom reference is always inaccessible, this method always returns</span><br><span class="hljs-comment">     * &lt;code&gt;null&lt;/code&gt;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  &lt;code&gt;null&lt;/code&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new phantom reference that refers to the given object and</span><br><span class="hljs-comment">     * is registered with the given queue.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt; It is possible to create a phantom reference with a &lt;tt&gt;null&lt;/tt&gt;</span><br><span class="hljs-comment">     * queue, but such a reference is completely useless: Its &lt;tt&gt;get&lt;/tt&gt;</span><br><span class="hljs-comment">     * method will always return null and, since it does not have a queue, it</span><br><span class="hljs-comment">     * will never be enqueued.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> referent the object the new phantom reference will refer to</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> q the queue with which the reference is to be registered,</span><br><span class="hljs-comment">     *          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PhantomReference</span><span class="hljs-params">(T referent, ReferenceQueue&lt;? <span class="hljs-built_in">super</span> T&gt; q)</span> &#123;<br>        <span class="hljs-built_in">super</span>(referent, q);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>也就是说我们无论调用多少次<code>get()</code>方法得到的永远都是<code>null</code>，因为虚引用本身就不算是个引用，相当于这个对象不存在任何引用，并且只能使用带队列的构造方法，以便对象被回收时接到通知。</p><p>最后，Java中4种引用的级别由高到低依次为： <strong>强引用 &gt; 软引用&gt; 弱引用 &gt; 虚引用</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 打家劫舍系列问题整理</title>
    <link href="/2022/03/20/LeetCode-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/20/LeetCode-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本文对文章 <a href="https://labuladong.github.io/algo/1/14/"class="uri">https://labuladong.github.io/algo/1/14/</a> 多有参考。</p><h1 id="打家劫舍">198. 打家劫舍</h1><p>主要的思想是动态规划。</p><p>纯粹的递归，效率很低。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 纯递归，会超时</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.nums = nums<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> start &gt;= <span class="hljs-built_in">len</span>(self.nums):<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            res = <span class="hljs-built_in">max</span>(dp(start + <span class="hljs-number">1</span>), self.nums[start] + dp(start + <span class="hljs-number">2</span>))<br>            <span class="hljs-keyword">return</span> res<br><br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-number">0</span>)<br><br><br>solu = Solution()<br>nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br>nums = [<span class="hljs-number">183</span>, <span class="hljs-number">219</span>, <span class="hljs-number">57</span>, <span class="hljs-number">193</span>, <span class="hljs-number">94</span>, <span class="hljs-number">233</span>, <span class="hljs-number">202</span>, <span class="hljs-number">154</span>, <span class="hljs-number">65</span>, <span class="hljs-number">240</span>, <span class="hljs-number">97</span>, <span class="hljs-number">234</span>, <span class="hljs-number">100</span>, <span class="hljs-number">249</span>, <span class="hljs-number">186</span>, <span class="hljs-number">66</span>, <span class="hljs-number">90</span>, <span class="hljs-number">238</span>,<br>        <span class="hljs-number">168</span>, <span class="hljs-number">128</span>, <span class="hljs-number">177</span>, <span class="hljs-number">235</span>, <span class="hljs-number">50</span>, <span class="hljs-number">81</span>, <span class="hljs-number">185</span>, <span class="hljs-number">165</span>, <span class="hljs-number">217</span>, <span class="hljs-number">207</span>, <span class="hljs-number">88</span>, <span class="hljs-number">80</span>, <span class="hljs-number">112</span>, <span class="hljs-number">78</span>, <span class="hljs-number">135</span>, <span class="hljs-number">62</span>, <span class="hljs-number">228</span>, <span class="hljs-number">247</span>, <span class="hljs-number">211</span>]<br>res = solu.rob(nums)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></div></td></tr></table></figure><p>使用备忘录的递归。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 依然是自顶向下，使用备忘录</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.nums = nums<br>        self.memo = [-<span class="hljs-number">1</span>] * <span class="hljs-built_in">len</span>(self.nums)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> start &gt;= <span class="hljs-built_in">len</span>(self.nums):<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> self.memo[start] != -<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> self.memo[start]<br>            res = <span class="hljs-built_in">max</span>(dp(start + <span class="hljs-number">1</span>), self.nums[start] + dp(start + <span class="hljs-number">2</span>))<br>            self.memo[start] = res<br>            <span class="hljs-keyword">return</span> res<br><br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-number">0</span>)<br><br><br>solu = Solution()<br>nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br>nums = [<span class="hljs-number">183</span>, <span class="hljs-number">219</span>, <span class="hljs-number">57</span>, <span class="hljs-number">193</span>, <span class="hljs-number">94</span>, <span class="hljs-number">233</span>, <span class="hljs-number">202</span>, <span class="hljs-number">154</span>, <span class="hljs-number">65</span>, <span class="hljs-number">240</span>, <span class="hljs-number">97</span>, <span class="hljs-number">234</span>, <span class="hljs-number">100</span>, <span class="hljs-number">249</span>, <span class="hljs-number">186</span>, <span class="hljs-number">66</span>, <span class="hljs-number">90</span>, <span class="hljs-number">238</span>,<br>        <span class="hljs-number">168</span>, <span class="hljs-number">128</span>, <span class="hljs-number">177</span>, <span class="hljs-number">235</span>, <span class="hljs-number">50</span>, <span class="hljs-number">81</span>, <span class="hljs-number">185</span>, <span class="hljs-number">165</span>, <span class="hljs-number">217</span>, <span class="hljs-number">207</span>, <span class="hljs-number">88</span>, <span class="hljs-number">80</span>, <span class="hljs-number">112</span>, <span class="hljs-number">78</span>, <span class="hljs-number">135</span>, <span class="hljs-number">62</span>, <span class="hljs-number">228</span>, <span class="hljs-number">247</span>, <span class="hljs-number">211</span>]<br><span class="hljs-comment"># 这个测试用例决定了备忘录中的默认值不能是 0</span><br>nums = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>res = solu.rob(nums)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></div></td></tr></table></figure><p>方法三：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 自底向上构建</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = [<span class="hljs-number">0</span>] * (<span class="hljs-built_in">len</span>(nums) + <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            res[i] = <span class="hljs-built_in">max</span>(res[i + <span class="hljs-number">1</span>], nums[i] + res[i + <span class="hljs-number">2</span>])<br>        <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>]<br><br><br>solu = Solution()<br>nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br>nums = [<span class="hljs-number">183</span>, <span class="hljs-number">219</span>, <span class="hljs-number">57</span>, <span class="hljs-number">193</span>, <span class="hljs-number">94</span>, <span class="hljs-number">233</span>, <span class="hljs-number">202</span>, <span class="hljs-number">154</span>, <span class="hljs-number">65</span>, <span class="hljs-number">240</span>, <span class="hljs-number">97</span>, <span class="hljs-number">234</span>, <span class="hljs-number">100</span>, <span class="hljs-number">249</span>, <span class="hljs-number">186</span>, <span class="hljs-number">66</span>, <span class="hljs-number">90</span>, <span class="hljs-number">238</span>,<br>        <span class="hljs-number">168</span>, <span class="hljs-number">128</span>, <span class="hljs-number">177</span>, <span class="hljs-number">235</span>, <span class="hljs-number">50</span>, <span class="hljs-number">81</span>, <span class="hljs-number">185</span>, <span class="hljs-number">165</span>, <span class="hljs-number">217</span>, <span class="hljs-number">207</span>, <span class="hljs-number">88</span>, <span class="hljs-number">80</span>, <span class="hljs-number">112</span>, <span class="hljs-number">78</span>, <span class="hljs-number">135</span>, <span class="hljs-number">62</span>, <span class="hljs-number">228</span>, <span class="hljs-number">247</span>, <span class="hljs-number">211</span>]<br><span class="hljs-comment"># 这个测试用例决定了备忘录中的默认值不能是 0</span><br><span class="hljs-comment"># nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</span><br><span class="hljs-comment">#         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br>res = solu.rob(nums)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></div></td></tr></table></figure><p>优化方法三，得到方法四：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 自底向上构建，优化空间复杂度</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = <span class="hljs-number">0</span><br>        oneStep = <span class="hljs-number">0</span><br>        twoSteps = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            res = <span class="hljs-built_in">max</span>(oneStep, nums[i] + twoSteps)<br>            oneStep, twoSteps = res, oneStep<br><br>        <span class="hljs-keyword">return</span> res<br><br><br>solu = Solution()<br>nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br><span class="hljs-comment"># nums = [183, 219, 57, 193, 94, 233, 202, 154, 65, 240, 97, 234, 100, 249, 186, 66, 90, 238,</span><br><span class="hljs-comment">#         168, 128, 177, 235, 50, 81, 185, 165, 217, 207, 88, 80, 112, 78, 135, 62, 228, 247, 211]</span><br><span class="hljs-comment"># 这个测试用例决定了备忘录中的默认值不能是 0</span><br><span class="hljs-comment"># nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</span><br><span class="hljs-comment">#         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br>res = solu.rob(nums)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></div></td></tr></table></figure><h1 id="打家劫舍-ii">213. 打家劫舍 II</h1><p>对于这种动态规划，还是不优化这个空间使用更加容易理解。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">原来思路很简单。和简单版本的打家劫舍是一样的。</span><br><span class="hljs-string">只需要考虑去头或者去尾的情况即可。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br><br>        dp1 = [<span class="hljs-number">0</span>] * (<span class="hljs-built_in">len</span>(nums) + <span class="hljs-number">1</span>)<br>        dp2 = [<span class="hljs-number">0</span>] * (<span class="hljs-built_in">len</span>(nums) + <span class="hljs-number">1</span>)<br>        numsExclueHead = nums[<span class="hljs-number">1</span>:]<br>        numsExcludeTail = nums[:-<span class="hljs-number">1</span>]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(numsExclueHead) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            dp1[i] = <span class="hljs-built_in">max</span>(dp1[i + <span class="hljs-number">1</span>], numsExclueHead[i] + dp1[i + <span class="hljs-number">2</span>])<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(numsExcludeTail) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            dp2[i] = <span class="hljs-built_in">max</span>(dp2[i + <span class="hljs-number">1</span>], numsExcludeTail[i] + dp2[i + <span class="hljs-number">2</span>])<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp1[<span class="hljs-number">0</span>], dp2[<span class="hljs-number">0</span>])<br><br><br>solu = Solution()<br>nums = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br>nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br>res = solu.rob(nums)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></div></td></tr></table></figure><h1 id="打家劫舍-iii">337. 打家劫舍 III</h1><p>一般的递归。思路很容易想。代码也比较容易写。只是，为了效率，要加备忘录。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 使用备忘录的递归，不然会超时</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val</span>):<br>        self.val = val<br>        self.right = <span class="hljs-literal">None</span><br>        self.left = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, val</span>):<br>        <span class="hljs-keyword">if</span> self.val == val:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">elif</span> self.val &lt; val:<br>            <span class="hljs-keyword">if</span> self.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                self.right = TreeNode(val)<br>            <span class="hljs-keyword">else</span>:<br>                self.right.insert(val)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># self.val &gt; val</span><br>            <span class="hljs-keyword">if</span> self.left <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                self.left = TreeNode(val)<br>            <span class="hljs-keyword">else</span>:<br>                self.left.insert(val)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self</span>):<br>        lines, *_ = self._display_aux()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-built_in">print</span>(line)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_display_aux</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Returns list of strings, width, height, and horizontal coordinate of the root.&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># No child.</span><br>        <span class="hljs-keyword">if</span> self.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self.left <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            line = <span class="hljs-string">&#x27;%s&#x27;</span> % self.val<br>            width = <span class="hljs-built_in">len</span>(line)<br>            height = <span class="hljs-number">1</span><br>            middle = width // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">return</span> [line], width, height, middle<br><br>        <span class="hljs-comment"># Only left child.</span><br>        <span class="hljs-keyword">if</span> self.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            lines, n, p, x = self.left._display_aux()<br>            s = <span class="hljs-string">&#x27;%s&#x27;</span> % self.val<br>            u = <span class="hljs-built_in">len</span>(s)<br>            first_line = (x + <span class="hljs-number">1</span>) * <span class="hljs-string">&#x27; &#x27;</span> + (n - x - <span class="hljs-number">1</span>) * <span class="hljs-string">&#x27;_&#x27;</span> + s<br>            second_line = x * <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;/&#x27;</span> + (n - x - <span class="hljs-number">1</span> + u) * <span class="hljs-string">&#x27; &#x27;</span><br>            shifted_lines = [line + u * <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines]<br>            <span class="hljs-keyword">return</span> [first_line, second_line] + shifted_lines, n + u, p + <span class="hljs-number">2</span>, n + u // <span class="hljs-number">2</span><br><br>        <span class="hljs-comment"># Only right child.</span><br>        <span class="hljs-keyword">if</span> self.left <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            lines, n, p, x = self.right._display_aux()<br>            s = <span class="hljs-string">&#x27;%s&#x27;</span> % self.val<br>            u = <span class="hljs-built_in">len</span>(s)<br>            first_line = s + x * <span class="hljs-string">&#x27;_&#x27;</span> + (n - x) * <span class="hljs-string">&#x27; &#x27;</span><br>            second_line = (u + x) * <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + (n - x - <span class="hljs-number">1</span>) * <span class="hljs-string">&#x27; &#x27;</span><br>            shifted_lines = [u * <span class="hljs-string">&#x27; &#x27;</span> + line <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines]<br>            <span class="hljs-keyword">return</span> [first_line, second_line] + shifted_lines, n + u, p + <span class="hljs-number">2</span>, u // <span class="hljs-number">2</span><br><br>        <span class="hljs-comment"># Two children.</span><br>        left, n, p, x = self.left._display_aux()<br>        right, m, q, y = self.right._display_aux()<br>        s = <span class="hljs-string">&#x27;%s&#x27;</span> % self.val<br>        u = <span class="hljs-built_in">len</span>(s)<br>        first_line = (x + <span class="hljs-number">1</span>) * <span class="hljs-string">&#x27; &#x27;</span> + (n - x - <span class="hljs-number">1</span>) * \<br>            <span class="hljs-string">&#x27;_&#x27;</span> + s + y * <span class="hljs-string">&#x27;_&#x27;</span> + (m - y) * <span class="hljs-string">&#x27; &#x27;</span><br>        second_line = x * <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;/&#x27;</span> + \<br>            (n - x - <span class="hljs-number">1</span> + u + y) * <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + (m - y - <span class="hljs-number">1</span>) * <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-keyword">if</span> p &lt; q:<br>            left += [n * <span class="hljs-string">&#x27; &#x27;</span>] * (q - p)<br>        <span class="hljs-keyword">elif</span> q &lt; p:<br>            right += [m * <span class="hljs-string">&#x27; &#x27;</span>] * (p - q)<br>        zipped_lines = <span class="hljs-built_in">zip</span>(left, right)<br>        lines = [first_line, second_line] + \<br>            [a + u * <span class="hljs-string">&#x27; &#x27;</span> + b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> zipped_lines]<br>        <span class="hljs-keyword">return</span> lines, n + m + u, <span class="hljs-built_in">max</span>(p, q) + <span class="hljs-number">2</span>, n + u // <span class="hljs-number">2</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buildTree</span>(<span class="hljs-params">data: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>    count = <span class="hljs-number">0</span><br>    q = Queue()<br>    root = TreeNode(data[<span class="hljs-number">0</span>])<br>    q.put(root)<br>    curNode = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(data)):<br>        node = TreeNode(data[i]) <span class="hljs-keyword">if</span> data[i] != <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:<br>            curNode = q.get()<br>            count += <span class="hljs-number">1</span><br>            curNode.left = node<br>        <span class="hljs-keyword">else</span>:<br>            count = <span class="hljs-number">0</span><br>            curNode.right = node<br>        <span class="hljs-keyword">if</span> data[i] != <span class="hljs-literal">None</span>:<br>            q.put(node)<br><br>    <span class="hljs-keyword">return</span> root<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.memo = &#123;&#125;<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">root: TreeNode</span>):<br>            <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> root <span class="hljs-keyword">in</span> self.memo:<br>                <span class="hljs-keyword">return</span> self.memo[root]<br>            res0 = rob(root.left) + rob(root.right)<br>            res1 = root.val<br>            <span class="hljs-keyword">if</span> root.left != <span class="hljs-literal">None</span>:<br>                res1 += rob(root.left.left) + rob(root.left.right)<br>            <span class="hljs-keyword">if</span> root.right != <span class="hljs-literal">None</span>:<br>                res1 += rob(root.right.left) + rob(root.right.right)<br>            res = <span class="hljs-built_in">max</span>(res0, res1)<br>            self.memo[root] = res<br>            <span class="hljs-keyword">return</span> res<br><br>        <span class="hljs-keyword">return</span> rob(root)<br><br><br>solu = Solution()<br>data = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>]<br>data = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>]<br>data = [<span class="hljs-number">79</span>, <span class="hljs-number">99</span>, <span class="hljs-number">77</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">69</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">60</span>, <span class="hljs-number">53</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">73</span>, <span class="hljs-number">11</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>        <span class="hljs-number">62</span>, <span class="hljs-number">27</span>, <span class="hljs-number">62</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">98</span>, <span class="hljs-number">50</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">90</span>, <span class="hljs-number">48</span>, <span class="hljs-number">82</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">55</span>, <span class="hljs-number">64</span>,<br>        <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">73</span>, <span class="hljs-number">56</span>, <span class="hljs-number">6</span>, <span class="hljs-number">47</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">93</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">75</span>, <span class="hljs-number">44</span>, <span class="hljs-number">30</span>, <span class="hljs-number">82</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>        <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">57</span>, <span class="hljs-number">36</span>, <span class="hljs-number">89</span>, <span class="hljs-number">42</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">76</span>, <span class="hljs-number">10</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>        <span class="hljs-number">32</span>, <span class="hljs-number">4</span>, <span class="hljs-number">18</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">42</span>, <span class="hljs-number">64</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">39</span>, <span class="hljs-number">76</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">6</span>, <span class="hljs-literal">None</span>,<br>        <span class="hljs-number">66</span>, <span class="hljs-number">8</span>, <span class="hljs-number">96</span>, <span class="hljs-number">91</span>, <span class="hljs-number">38</span>, <span class="hljs-number">38</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">74</span>, <span class="hljs-number">42</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">10</span>, <span class="hljs-number">40</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">None</span>,<br>        <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">28</span>, <span class="hljs-number">8</span>, <span class="hljs-number">24</span>, <span class="hljs-number">47</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">17</span>, <span class="hljs-number">36</span>, <span class="hljs-number">50</span>, <span class="hljs-number">19</span>, <span class="hljs-number">63</span>, <span class="hljs-number">33</span>, <span class="hljs-number">89</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>        <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">94</span>, <span class="hljs-number">72</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">79</span>, <span class="hljs-number">25</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">51</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">70</span>,<br>        <span class="hljs-number">84</span>, <span class="hljs-number">43</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">40</span>, <span class="hljs-number">78</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">35</span>, <span class="hljs-number">42</span>, <span class="hljs-number">98</span>, <span class="hljs-number">96</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>        <span class="hljs-number">82</span>, <span class="hljs-number">26</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">48</span>, <span class="hljs-number">91</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">35</span>, <span class="hljs-number">93</span>, <span class="hljs-number">86</span>, <span class="hljs-number">42</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">0</span>,<br>        <span class="hljs-number">61</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">67</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">53</span>, <span class="hljs-number">48</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">82</span>, <span class="hljs-number">30</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">97</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]<br>root = buildTree(data)<br>root.display()<br>res = solu.rob(root)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题整理</title>
    <link href="/2022/03/19/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/19/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="spring-的-aop-和-ioc">Spring 的 AOP 和 IOC？</h2><p>AOP(Aspect-Oriented Programming), 即 面向切面编程, 它与 OOP(Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP不同的抽象软件结构的视角. 在 OOP 中, 我们以类(class)作为我们的基本单元,而 AOP 中的基本单元是 Aspect(切面)。</p><p>IOC 就是控制反转。Spring 框架的核心是 Spring容器。容器创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。Spring容器使用依赖注入来管理组成应用程序的组件。容器通过读取提供的配置元数据来接收对象进行实例化，配置和组装的指令。该元数据可以通过XML，Java 注解或 Java 代码提供。</p><h2 id="aop-有哪些实现方式">AOP 有哪些实现方式？</h2><p>实现 AOP 的技术，主要分为两大类：</p><ul><li>静态代理 - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成AOP 代理类，因此也称为编译时增强；<ul><li>编译时编织（特殊编译器实现）</li><li>类加载时编织（特殊的类加载器实现）。</li></ul></li><li>动态代理 - 在运行时在内存中“临时”生成 AOP动态代理类，因此也被称为运行时增强。<ul><li>JDK动态代理：通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK 动态代理的核心是 InvocationHandler 接口和 Proxy 类 。</li><li>CGLIB动态代理： 如果目标类没有实现接口，那么 Spring AOP 会选择使用CGLIB 来动态代理目标类 。CGLIB （ Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB 是通过继承的方式做的动态代理，因此如果某个类被标记为 final，那么它是无法使用 CGLIB 做动态代理的。</li></ul></li></ul><h2 id="spring-aop-和-aspectj-aop-有什么区别">Spring AOP 和 AspectJ AOP有什么区别？</h2><p>Spring AOP是属于运行时增强，而AspectJ是编译时增强。Spring AOP基于代理（Proxying），而AspectJ基于字节码操作（Bytecode Manipulation）。</p><p>SpringAOP已经集成了AspectJ，AspectJ应该算得上是Java生态系统中最完整的AOP框架了。AspectJ相比于Spring AOP功能更加强大，但是SpringAOP相对来说更简单。</p><p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择AspectJ，它比SpringAOP快很多。</p><h2 id="ioc-如何解决循环依赖">IOC 如何解决循环依赖？</h2><p>最后来描述下就上面那个循环依赖 Spring解决的过程(A为person，B为car，C为money)：首先 A完成初始化第一步并将自己提前曝光出来（通过 ObjectFactory将自己提前曝光），在初始化的时候，发现自己依赖对象 B，此时就会去尝试get(B)，这个时候发现 B 还没有被创建出来，然后 B 就走创建流程，在 B初始化的时候，同样发现自己依赖 C，C 也没有被创建出来，这个时候 C又开始初始化进程，但是在初始化的过程中发现自己依赖 A，于是尝试get(A)，这个时候由于 A 已经添加至缓存中（一般都是添加至三级缓存singletonFactories ），通过 ObjectFactory 提前曝光，所以可以通过ObjectFactory.getObject() 拿到 A 对象，C 拿到 A对象后顺利完成初始化，然后将自己添加到一级缓存中，回到 B ，B 也可以拿到C 对象，完成初始化，A 可以顺利拿到 B完成初始化。到这里整个链路就已经完成了初始化过程了。</p><h2 id="了解-fastjson-吗区别是什么用到了什么">了解 fastJson吗？区别是什么？用到了什么？</h2><p>Fastjson是一个Java语言编写的高性能功能完善的JSON库。它采用一种“假定有序快速匹配”的算法，把JSONParse的性能提升到极致，是目前Java语言中最快的JSON库。Fastjson接口简单易用，已经被广泛使用在缓存序列化、协议交互、Web输出、Android客户端等多种应用场景。</p><p>fastjson 的兼容性比 jackson 要差一些。</p><h2 id="前后端分离如何约束参数">前后端分离如何约束参数？</h2><p>前端通过Ajax请求来访问后端的数据接口，将Model展示到View中即可。</p><p>前后端开发者只需要提前约定好接口文档(URL、参数、数据类型.….)，然后分别独立开发即可，前端可以造假数据进行测试，完全不需要依赖于后端，最后完成前后端集成即可，真正实现了前后端应用的解耦合，极大地提升了开发效率。</p><h2 id="mvvm-是什么">MVVM 是什么？</h2><p>Model View View-Model.</p><p>把Model和View关联起来的就是ViewModel。ViewModel负责把Model的数据同步到View显示出来，还负责把View的修改同步回Model。</p><h2 id="如何设计接口">如何设计接口？</h2><p>单一职责。</p><p>开放封闭原则。对扩展开放，对修改封闭。</p><p>里氏替换原则。子类型可以替换掉父类型。</p><p>依赖倒置原则。抽象不应该依赖于细节。细节应该依赖抽象。</p><p><a href="https://zhuanlan.zhihu.com/p/193058932"class="uri">https://zhuanlan.zhihu.com/p/193058932</a></p><h2 id="接口的安全性设计基于序列化">接口的安全性设计？基于序列化？</h2><p>总的就是说安全性问题，假如没有一个接口（即没有Serializable来标记是否可以序列化），让所有对象都可以序列化。那么所有对象通过序列化存储到硬盘上后，都可以在序列化得到的文件中看到属性对应的值（后面将会通过代码展示）。所以最后为了安全性（即不让一些对象中私有属性的值被外露），不能让所有对象都可以序列化。要让用户自己来选择是否可以序列化，因此需要一个接口来标记该类是否可序列化。</p><h2 id="对于集合类的了解">对于集合类的了解？</h2><p>Java 集合类主要是由两个根接口 Collection 和 Map 派生出来的。</p><p>Collection派生出了三个子接口：List、Set、Queue(Java5新增的队列)，因此Java集合大致可以分为List、Set、Queue四种接口体系。</p><p>注意：Collections 是一个工具类。</p><h2 id="讲一下-arraylist">讲一下 ArrayList？</h2><p>不保证线程安全。</p><p>ArrayList 只能包含对象类型。</p><p>ArrayList 的底层使用了数组。</p><p>ArrayList 可以动态扩容。</p><p>ArrayList 扩容的本质就是计算出新的扩容数组的 size后进行实例化，并将原有数组内容复制到新数组中去。默认情况下，新的容量会是原容量的1.5 倍。</p><h2 id="arraylist-和-vector-的区别">ArrayList 和 Vector 的区别？</h2><ul><li>Vector 是线程安全的。</li><li>ArrayList 是线程不安全的。</li></ul><h2 id="讲下-hashmap">讲下 HashMap？</h2><p>jdk1.8 中，由“数组+链表+红黑树”组成。</p><p>hash冲突时，会链表处理。</p><ul><li>当链表超过8且数据总量超过64时才会转红黑树。</li><li>将链表转换成红黑树前会判断，如果当前数组的长度小于64，那么会选择先进行数组扩容，而不是转换成红黑树，以减少搜索时间。</li></ul><h2 id="为什么不直接用红黑树">为什么不直接用红黑树？</h2><p>因为红黑树要进行左旋、右旋、变色这些操作来保持平衡，而单链表不需要。</p><p>当元素小于 8个的时候，此时做查询操作，链表结构已经能够保证查询性能。当元素大于8个的时候，红黑树搜索时间复杂度是O(logN)，而链表是O(N)，此时需要红黑树来加快查询速度。但是新增节点的效率变慢了。</p><p>因此，如果一开始就用红黑树结构，元素太少，新增效率又比较慢，无疑这是浪费性能的。</p><h2id="不用红黑树用二叉查找树可以吗">不用红黑树，用二叉查找树可以吗？</h2><p>可以。但是二叉查找树在特殊情况下会变成一条线性结构。</p><h2id="为什么链表改为红黑树的阈值是8">为什么链表改为红黑树的阈值是8？</h2><p>因为泊松分布。</p><h2 id="lambda-表达式用过吗举个例子for-循环和-foreach-的区别">lambda表达式用过吗？举个例子：for 循环和 foreach 的区别？</h2><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><p>for 循环和 foreach 的区别：</p><p>一、区别</p><ul><li>1)for循环是基于下标（偏移量）来定位的循环。</li><li>2)foreach是基于指针直接移动（地址运算）的循环。</li><li>3)foreach与for循环的明显差别在于foreach循环时循环对象（数组、集合）被锁定，<strong>不能对循环对象中的内容进行增删改操作</strong>。</li></ul><p>二、两者效率比较 对于通过下标访问的数据结构。例如数组，ArrayList使用下标访问的for循环效率本身就很高。所以foreach这种指针直接移动的效率可能甚至不如通过下标访问，但差别不会太大，但对于链式结构LinkedList，for基于下标访问会每次从头查询，最好不要使用for。foreach循环使用指针直接偏移的高效的地址运算，效率会高非常多，差距也很大。链表循环超过10万次for循环可能会直接卡死，而foreach仍然只需要几毫秒。</p><h2id="数据库的设计应该遵循什么原则">数据库的设计应该遵循什么原则？</h2><p>一致性原则。</p><p>完整性原则。</p><p>安全性原则。</p><p>可伸缩性与可扩展性。</p><p>规范性原则。</p><h2 id="volatile">volatile</h2><p>只能保证可见性。</p><p>不能保证原子性。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 多线程学习</title>
    <link href="/2022/03/15/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/15/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>文章转载自 B 站视频笔记，B 站链接：<ahref="https://www.bilibili.com/video/BV1JT4y1S7K8"class="uri">https://www.bilibili.com/video/BV1JT4y1S7K8</a></p><h1 id="再谈多线程">再谈多线程</h1><blockquote><p>JUC相对于Java应用层的学习难度更大，<strong>开篇推荐掌握的预备知识：</strong>JavaSE多线程部分<strong>（必备）</strong>、操作系统、JVM<strong>（推荐）</strong>、计算机组成原理。掌握预备知识会让你的学习更加轻松，其中，JavaSE多线程部分要求必须掌握，否则无法继续学习本教程！我们不会再去重复教学JavaSE阶段的任何知识了。</p><p>各位小伙伴一定要点击收藏按钮（收藏 = 学会）</p></blockquote><p>还记得我们在JavaSE中学习的多线程吗？让我们来回顾一下：</p><p>在我们的操作系统之上，可以同时运行很多个进程，并且每个进程之间相互隔离互不干扰。我们的CPU会通过时间片轮转算法，为每一个进程分配时间片，并在时间片使用结束后切换下一个进程继续执行，通过这种方式来实现宏观上的多个程序同时运行。</p><p>由于每个进程都有一个自己的内存空间，进程之间的通信就变得非常麻烦（比如要共享某些数据）而且执行不同进程会产生上下文切换，非常耗时，那么有没有一种更好地方案呢？</p><p>后来，线程横空出世，一个进程可以有多个线程，线程是程序执行中一个单一的顺序控制流程，现在线程才是程序执行流的最小单元，各个线程之间共享程序的内存空间（也就是所在进程的内存空间），上下文切换速度也高于进程。</p><p>现在有这样一个问题：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-comment">//请将上面的数组按升序输出</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>按照正常思维，我们肯定是这样：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-comment">//直接排序吧</span><br>    Arrays.sort(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>而我们学习了多线程之后，可以换个思路来实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(i * <span class="hljs-number">1000</span>);   <span class="hljs-comment">//越小的数休眠时间越短，优先被打印</span><br>                System.out.println(i);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们接触过的很多框架都在使用多线程，比如Tomcat服务器，所有用户的请求都是通过不同的线程来进行处理的，这样我们的网站才可以同时响应多个用户的请求，要是没有多线程，可想而知服务器的处理效率会有多低。</p><p>虽然多线程能够为我们解决很多问题，但是，如何才能正确地使用多线程，如何才能将多线程的资源合理使用，这都是我们需要关心的问题。</p><p>在Java5的时候，新增了java.util.concurrent（JUC）包，其中包括大量用于多线程编程的工具类，目的是为了更好的支持高并发任务，让开发者进行多线程编程时减少竞争条件和死锁的问题！通过使用这些工具类，我们的程序会更加合理地使用多线程。而我们这一系列视频的主角，正是<code>JUC</code>。</p><p>但是我们先不着急去看这些内容，第一章，我们先来补点基础知识。</p><hr /><h2 id="并发与并行">并发与并行</h2><p>我们经常听到并发编程，那么这个并发代表的是什么意思呢？而与之相似的并行又是什么意思？它们之间有什么区别？</p><p>比如现在一共有三个工作需要我们去完成。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzupjszpjnj21bk06ujrw.jpg"alt="image-20220301213510841" /></p><h3 id="顺序执行">顺序执行</h3><p>顺序执行其实很好理解，就是我们依次去将这些任务完成了：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzupl4sldlj219s06et98.jpg"alt="image-20220301213629649" /></p><p>实际上就是我们同一时间只能处理一个任务，所以需要前一个任务完成之后，才能继续下一个任务，依次完成所有任务。</p><h3 id="并发执行">并发执行</h3><p>并发执行也是我们同一时间只能处理一个任务，但是我们可以每个任务轮着做（时间片轮转）：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzuppchmldj21lm078myf.jpg"alt="image-20220301214032719" /></p><p>只要我们单次处理分配的时间足够的短，在宏观看来，就是三个任务在同时进行。</p><p>而我们Java中的线程，正是这种机制，当我们需要同时处理上百个上千个任务时，很明显CPU的数量是不可能赶得上我们的线程数的，所以说这时就要求我们的程序有良好的并发性能，来应对同一时间大量的任务处理。学习Java并发编程，能够让我们在以后的实际场景中，知道该如何应对高并发的情况。</p><h3 id="并行执行">并行执行</h3><p>并行执行就突破了同一时间只能处理一个任务的限制，我们同一时间可以做多个任务：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzuprj83gqj21hw0hqmz2.jpg"alt="image-20220301214238743" /></p><p>比如我们要进行一些排序操作，就可以用到并行计算，只需要等待所有子任务完成，最后将结果汇总即可。包括分布式计算模型MapReduce，也是采用的并行计算思路。</p><hr /><h2 id="再谈锁机制">再谈锁机制</h2><p>谈到锁机制，相信各位应该并不陌生了，我们在JavaSE阶段，通过使用<code>synchronized</code>关键字来实现锁，这样就能够很好地解决线程之间争抢资源的情况。那么，<code>synchronized</code>底层到底是如何实现的呢？</p><p>我们知道，使用<code>synchronized</code>，一定是和某个对象相关联的，比如我们要对某一段代码加锁，那么我们就需要提供一个对象来作为锁本身：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (Main.class) &#123;<br>        <span class="hljs-comment">//这里使用的是Main类的Class对象作为锁</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们来看看，它变成字节码之后会用到哪些指令：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzvdbajqhfj229a0u0te0.jpg"alt="image-20220302111724784" /></p><p>其中最关键的就是<code>monitorenter</code>指令了，可以看到之后也有<code>monitorexit</code>与之进行匹配（注意这里有2个），<code>monitorenter</code>和<code>monitorexit</code>分别对应加锁和释放锁，在执行<code>monitorenter</code>之前需要尝试获取锁，每个对象都有一个<code>monitor</code>监视器与之对应，而这里正是去获取对象监视器的所有权，一旦<code>monitor</code>所有权被某个线程持有，那么其他线程将无法获得（管程模型的一种实现）。</p><p>在代码执行完成之后，我们可以看到，一共有两个<code>monitorexit</code>在等着我们，那么为什么这里会有两个呢，按理说<code>monitorenter</code>和<code>monitorexit</code>不应该一一对应吗，这里为什么要释放锁两次呢？</p><p>首先我们来看第一个，这里在释放锁之后，会马上进入到一个goto指令，跳转到15行，而我们的15行对应的指令就是方法的返回指令，其实正常情况下只会执行第一个<code>monitorexit</code>释放锁，在释放锁之后就接着同步代码块后面的内容继续向下执行了。而第二个，其实是用来处理异常的，可以看到，它的位置是在12行，如果程序运行发生异常，那么就会执行第二个<code>monitorexit</code>，并且会继续向下通过<code>athrow</code>指令抛出异常，而不是直接跳转到15行正常运行下去。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzve59lrkqj21wq0ca76u.jpg"alt="image-20220302114613847" /></p><p>实际上<code>synchronized</code>使用的锁就是存储在Java对象头中的，我们知道，对象是存放在堆内存中的，而每个对象内部，都有一部分空间用于存储对象头信息，而对象头信息中，则包含了MarkWord用于存放<code>hashCode</code>和对象的锁信息，在不同状态下，它存储的数据结构有一些不同。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzvtjfgg91j21e00howh1.jpg"alt="image-20220302203846868" /></p><h3 id="重量级锁">重量级锁</h3><p>在JDK6之前，<code>synchronized</code>一直被称为重量级锁，<code>monitor</code>依赖于底层操作系统的Lock实现，Java的线程是映射到操作系统的原生线程上，切换成本较高。而在JDK6之后，锁的实现得到了改进。我们先从最原始的重量级锁开始：</p><p>我们说了，每个对象都有一个monitor与之关联，在Java虚拟机（HotSpot）中，monitor是由ObjectMonitor实现的：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">ObjectMonitor</span>() &#123;<br>    _header       = <span class="hljs-literal">NULL</span>;<br>    _count        = <span class="hljs-number">0</span>; <span class="hljs-comment">//记录个数</span><br>    _waiters      = <span class="hljs-number">0</span>,<br>    _recursions   = <span class="hljs-number">0</span>;<br>    _object       = <span class="hljs-literal">NULL</span>;<br>    _owner        = <span class="hljs-literal">NULL</span>;<br>    _WaitSet      = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//处于wait状态的线程，会被加入到_WaitSet</span><br>    _WaitSetLock  = <span class="hljs-number">0</span> ;<br>    _Responsible  = <span class="hljs-literal">NULL</span> ;<br>    _succ         = <span class="hljs-literal">NULL</span> ;<br>    _cxq          = <span class="hljs-literal">NULL</span> ;<br>    FreeNext      = <span class="hljs-literal">NULL</span> ;<br>    _EntryList    = <span class="hljs-literal">NULL</span> ; <span class="hljs-comment">//处于等待锁block状态的线程，会被加入到该列表</span><br>    _SpinFreq     = <span class="hljs-number">0</span> ;<br>    _SpinClock    = <span class="hljs-number">0</span> ;<br>    OwnerIsThread = <span class="hljs-number">0</span> ;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>每个等待锁的线程都会被封装成ObjectWaiter对象，进入到如下机制：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzvej55r7tj20dw08vjrt.jpg"alt="img" /></p><p>ObjectWaiter首先会进入 EntrySet等着，当线程获取到对象的<code>monitor</code>后进入 The Owner区域并把<code>monitor</code>中的<code>owner</code>变量设置为当前线程，同时<code>monitor</code>中的计数器<code>count</code>加1，若线程调用<code>wait()</code>方法，将释放当前持有的<code>monitor</code>，<code>owner</code>变量恢复为<code>null</code>，<code>count</code>自减1，同时该线程进入WaitSet集合中等待被唤醒。若当前线程执行完毕也将释放<code>monitor</code>并复位变量的值，以便其他线程进入获取对象的<code>monitor</code>。</p><p>虽然这样的设计思路非常合理，但是在大多数应用上，每一个线程占用同步代码块的时间并不是很长，我们完全没有必要将竞争中的线程挂起然后又唤醒，并且现代CPU基本都是多核心运行的，我们可以采用一种新的思路来实现锁。</p><p>在JDK1.4.2时，引入了自旋锁（JDK6之后默认开启），它不会将处于等待状态的线程挂起，而是通过无限循环的方式，不断检测是否能够获取锁，由于单个线程占用锁的时间非常短，所以说循环次数不会太多，可能很快就能够拿到锁并运行，这就是自旋锁。当然，仅仅是在等待时间非常短的情况下，自旋锁的表现会很好，但是如果等待时间太长，由于循环是需要处理器继续运算的，所以这样只会浪费处理器资源，因此自旋锁的等待时间是有限制的，默认情况下为10次，如果失败，那么会进而采用重量级锁机制。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzvmffuq1hj21dm0ae75f.jpg"alt="image-20220302163246988" /></p><p>在JDK6之后，自旋锁得到了一次优化，自旋的次数限制不再是固定的，而是自适应变化的，比如在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行，那么这次自旋也是有可能成功的，所以会允许自旋更多次。当然，如果某个锁经常都自旋失败，那么有可能会不再采用自旋策略，而是直接使用重量级锁。</p><h3 id="轻量级锁">轻量级锁</h3><blockquote><p>从JDK1.6开始，为了减少获得锁和释放锁带来的性能消耗，就引入了轻量级锁。</p></blockquote><p>轻量级锁的目标是，在无竞争情况下，减少重量级锁产生的性能消耗（并不是为了代替重量级锁，实际上就是赌一手同一时间只有一个线程在占用资源），包括系统调用引起的内核态与用户态切换、线程阻塞造成的线程切换等。它不像是重量级锁那样，需要向操作系统申请互斥量。它的运作机制如下：</p><p>在即将开始执行同步代码块中的内容时，会首先检查对象的MarkWord，查看锁对象是否被其他线程占用，如果没有任何线程占用，那么会在当前线程中所处的栈帧中建立一个名为锁记录（LockRecord）的空间，用于复制并存储对象目前的Mark Word信息（官方称为DisplacedMark Word）。</p><p>接着，虚拟机将使用CAS操作将对象的MarkWord更新为轻量级锁状态（数据结构变为指向LockRecord的指针，指向的是当前的栈帧）</p><blockquote><p>CAS（Compare AndSwap）是一种无锁算法（我们之前在Springboot阶段已经讲解过了），它并不会为对象加锁，而是在执行的时候，看看当前数据的值是不是我们预期的那样，如果是，那就正常进行替换，如果不是，那么就替换失败。比如有两个线程都需要修改变量<code>i</code>的值，默认为10，现在一个线程要将其修改为20，另一个要修改为30，如果他们都使用CAS算法，那么并不会加锁访问<code>i</code>，而是直接尝试修改<code>i</code>的值，但是在修改时，需要确认<code>i</code>是不是10，如果是，表示其他线程还没对其进行修改，如果不是，那么说明其他线程已经将其修改，此时不能完成修改任务，修改失败。</p><p>在CPU中，CAS操作使用的是<code>cmpxchg</code>指令，能够从最底层硬件层面得到效率的提升。</p></blockquote><p>如果CAS操作失败了的话，那么说明可能这时有线程已经进入这个同步代码块了，这时虚拟机会再次检查对象的MarkWord，是否指向当前线程的栈帧，如果是，说明不是其他线程，而是当前线程已经有了这个对象的锁，直接放心大胆进同步代码块即可。如果不是，那确实是被其他线程占用了。</p><p>这时，轻量级锁一开始的想法就是错的（这时有对象在竞争资源，已经赌输了），所以说只能将锁膨胀为重量级锁，按照重量级锁的操作执行（注意锁的膨胀是不可逆的）</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzvuebbr7ej21b20ba763.jpg"alt="image-20220302210830272" /></p><p>所以，轻量级锁 -&gt; 失败 -&gt; 自适应自旋锁 -&gt; 失败 -&gt;重量级锁</p><p>解锁过程同样采用CAS算法，如果对象的MarkWord仍然指向线程的锁记录，那么就用CAS操作把对象的MarkWord和复制到栈帧中的DisplacedMarkWord进行交换。如果替换失败，说明其他线程尝试过获取该锁，在释放锁的同时，需要唤醒被挂起的线程。</p><h3 id="偏向锁">偏向锁</h3><p>偏向锁相比轻量级锁更纯粹，干脆就把整个同步都消除掉，不需要再进行CAS操作了。它的出现主要是得益于人们发现某些情况下某个锁频繁地被同一个线程获取，这种情况下，我们可以对轻量级锁进一步优化。</p><p>偏向锁实际上就是专门为单个线程而生的，当某个线程第一次获得锁时，如果接下来都没有其他线程获取此锁，那么持有锁的线程将不再需要进行同步操作。</p><p>可以从之前的MarkWord结构中看到，偏向锁也会通过CAS操作记录线程的ID，如果一直都是同一个线程获取此锁，那么完全没有必要在进行额外的CAS操作。当然，如果有其他线程来抢了，那么偏向锁会根据当前状态，决定是否要恢复到未锁定或是膨胀为轻量级锁。</p><p>如果我们需要使用偏向锁，可以添加<code>-XX:+UseBiased</code>参数来开启。</p><p>所以，最终的锁等级为：未锁定 &lt; 偏向锁 &lt; 轻量级锁 &lt;重量级锁</p><p>值得注意的是，如果对象通过调用<code>hashCode()</code>方法计算过对象的一致性哈希值，那么它是不支持偏向锁的，会直接进入到轻量级锁状态，因为Hash是需要被保存的，而偏向锁的MarkWord数据结构，无法保存Hash值；如果对象已经是偏向锁状态，再去调用<code>hashCode()</code>方法，那么会直接将锁升级为重量级锁，并将哈希值存放在<code>monitor</code>（有预留位置保存）中。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzvvi5l9jhj21cy0bwjtl.jpg"alt="image-20220302214647735" /></p><h3 id="锁消除和锁粗化">锁消除和锁粗化</h3><p>锁消除和锁粗化都是在运行时的一些优化方案，比如我们某段代码虽然加了锁，但是在运行时根本不可能出现各个线程之间资源争夺的情况，这种情况下，完全不需要任何加锁机制，所以锁会被消除。锁粗化则是我们代码中频繁地出现互斥同步操作，比如在一个循环内部加锁，这样明显是非常消耗性能的，所以虚拟机一旦检测到这种操作，会将整个同步范围进行扩展。</p><hr /><h2 id="jmm内存模型">JMM内存模型</h2><p>注意这里提到的内存模型和我们在JVM中介绍的内存模型不在同一个层次，JVM中的内存模型是虚拟机规范对整个内存区域的规划，而Java内存模型，是在JVM内存模型之上的抽象模型，具体实现依然是基于JVM内存模型实现的，我们会在后面介绍。</p><h3 id="java内存模型">Java内存模型</h3><p>我们在<code>计算机组成原理</code>中学习过，在我们的CPU中，一般都会有高速缓存，而它的出现，是为了解决内存的速度跟不上处理器的处理速度的问题，所以CPU内部会添加一级或多级高速缓存来提高处理器的数据获取效率，但是这样也会导致一个很明显的问题，因为现在基本都是多核心处理器，每个处理器都有一个自己的高速缓存，那么又该怎么去保证每个处理器的高速缓存内容一致呢？</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzwjckl9pfj20x60cqdgt.jpg"alt="image-20220303113148313" /></p><p>为了解决缓存一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（IllinoisProtocol）、MOSI、Synapse、Firefly及Dragon Protocol等。</p><p>而Java也采用了类似的模型来实现支持多线程的内存模型：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzwjnodcejj20xs0ewaba.jpg"alt="image-20220303114228749" /></p><p>JMM（Java Memory Model）内存模型规定如下：</p><ul><li>所有的变量全部存储在主内存（注意这里包括下面提到的变量，指的都是会出现竞争的变量，包括成员变量、静态变量等，而局部变量这种属于线程私有，不包括在内）</li><li>每条线程有着自己的工作内存（可以类比CPU的高速缓存）线程对变量的所有操作，必须在工作内存中进行，不能直接操作主内存中的数据。</li><li>不同线程之间的工作内存相互隔离，如果需要在线程之间传递内容，只能通过主内存完成，无法直接访问对方的工作内存。</li></ul><p>也就是说，每一条线程如果要操作主内存中的数据，那么得先拷贝到自己的工作内存中，并对工作内存中数据的副本进行操作，操作完成之后，也需要从工作副本中将结果拷贝回主内存中，具体的操作就是<code>Save</code>（保存）和<code>Load</code>（加载）操作。</p><p>那么各位肯定会好奇，这个内存模型，结合之前JVM所讲的内容，具体是怎么实现的呢？</p><ul><li>主内存：对应堆中存放对象的实例的部分。</li><li>工作内存：对应线程的虚拟机栈的部分区域，虚拟机可能会对这部分内存进行优化，将其放在CPU的寄存器或是高速缓存中。比如在访问数组时，由于数组是一段连续的内存空间，所以可以将一部分连续空间放入到CPU高速缓存中，那么之后如果我们顺序读取这个数组，那么大概率会直接缓存命中。</li></ul><p>前面我们提到，在CPU中可能会遇到缓存不一致的问题，而Java中，也会遇到，比如下面这种情况：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100000</span>; j++) i++;<br>            System.out.println(<span class="hljs-string">&quot;线程1结束&quot;</span>);<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100000</span>; j++) i++;<br>            System.out.println(<span class="hljs-string">&quot;线程2结束&quot;</span>);<br>        &#125;).start();<br>        <span class="hljs-comment">//等上面两个线程结束</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到这里是两个线程同时对变量<code>i</code>各自进行100000次自增操作，但是实际得到的结果并不是我们所期望的那样。</p><p>那么为什么会这样呢？在之前学习了JVM之后，相信各位应该已经知道，自增操作实际上并不是由一条指令完成的（注意一定不要理解为一行代码就是一个指令完成的）：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzwojklg4fj224y0oktfi.jpg"alt="image-20220303143131899" /></p><p>包括变量<code>i</code>的获取、修改、保存，都是被拆分为一个一个的操作完成的，那么这个时候就有可能出现在修改完保存之前，另一条线程也保存了，但是当前线程是毫不知情的。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzwow9xzb6j21kg0ayq54.jpg"alt="image-20220303144344450" /></p><p>所以说，我们当时在JavaSE阶段讲解这个问题的时候，是通过<code>synchronized</code>关键字添加同步代码块解决的，当然，我们后面还会讲解另外的解决方案（原子类）</p><h3 id="重排序">重排序</h3><p>在编译或执行时，为了优化程序的执行效率，编译器或处理器常常会对指令进行重排序，有以下情况：</p><ol type="1"><li>编译器重排序：Java编译器通过对Java代码语义的理解，根据优化规则对代码指令进行重排序。</li><li>机器指令级别的重排序：现代处理器很高级，能够自主判断和变更机器指令的执行顺序。</li></ol><p>指令重排序能够在不改变结果（单线程）的情况下，优化程序的运行效率，比如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    System.out.println(a + b);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们其实可以交换第一行和第二行：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    System.out.println(a + b);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>即使发生交换，但是我们程序最后的运行结果是不会变的，当然这里只通过代码的形式演示，实际上JVM在执行字节码指令时也会进行优化，可能两个指令并不会按照原有的顺序进行。</p><p>虽然单线程下指令重排确实可以起到一定程度的优化作用，但是在多线程下，似乎会导致一些问题：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">if</span>(b == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span>(a == <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>                &#125;   <br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            a = <span class="hljs-number">1</span>;<br>            b = <span class="hljs-number">1</span>;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面这段代码，在正常情况下，按照我们的正常思维，是不可能输出<code>A</code>的，因为只要b等于1，那么a肯定也是1才对，因为a是在b之前完成的赋值。但是，如果进行了重排序，那么就有可能，a和b的赋值发生交换，b先被赋值为1，而恰巧这个时候，线程1开始判定b是不是1了，这时a还没来得及被赋值为1，可能线程1就已经走到打印那里去了，所以，是有可能输出<code>A</code>的。</p><h3 id="volatile关键字">volatile关键字</h3><p>好久好久都没有认识新的关键字了，今天我们来看一个新的关键字<code>volatile</code>，开始之前我们先介绍三个词语：</p><ul><li>原子性：其实之前讲过很多次了，就是要做什么事情要么做完，要么就不做，不存在做一半的情况。</li><li>可见性：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li><li>有序性：即程序执行的顺序按照代码的先后顺序执行。</li></ul><p>我们之前说了，如果多线程访问同一个变量，那么这个变量会被线程拷贝到自己的工作内存中进行操作，而不是直接对主内存中的变量本体进行操作，下面这个操作看起来是一个有限循环，但是是无限的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (a == <span class="hljs-number">0</span>);<br>            System.out.println(<span class="hljs-string">&quot;线程结束！&quot;</span>);<br>        &#125;).start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;正在修改a的值...&quot;</span>);<br>        a = <span class="hljs-number">1</span>;   <span class="hljs-comment">//很明显，按照我们的逻辑来说，a的值被修改那么另一个线程将不再循环</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实际上这就是我们之前说的，虽然我们主线程中修改了a的值，但是另一个线程并不知道a的值发生了改变，所以循环中依然是使用旧值在进行判断，因此，普通变量是不具有可见性的。</p><p>要解决这种问题，我们第一个想到的肯定是加锁，同一时间只能有一个线程使用，这样总行了吧，确实，这样的话肯定是可以解决问题的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (a == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">synchronized</span> (Main.class)&#123;&#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;线程结束！&quot;</span>);<br>        &#125;).start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;正在修改a的值...&quot;</span>);<br>        <span class="hljs-keyword">synchronized</span> (Main.class)&#123;<br>            a = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是，除了硬加一把锁的方案，我们也可以使用<code>volatile</code>关键字来解决，此关键字的第一个作用，就是保证变量的可见性。当写一个<code>volatile</code>变量时，JMM会把该线程本地内存中的变量强制刷新到主内存中去，并且这个写会操作会导致其他线程中的<code>volatile</code>变量缓存无效，这样，另一个线程修改了这个变时，当前线程会立即得知，并将工作内存中的变量更新为最新的版本。</p><p>那么我们就来试试看：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-comment">//添加volatile关键字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (a == <span class="hljs-number">0</span>);<br>            System.out.println(<span class="hljs-string">&quot;线程结束！&quot;</span>);<br>        &#125;).start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;正在修改a的值...&quot;</span>);<br>        a = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果还真的如我们所说的那样，当a发生改变时，循环立即结束。</p><p>当然，虽然说<code>volatile</code>能够保证可见性，但是不能保证原子性，要解决我们上面的<code>i++</code>的问题，以我们目前所学的知识，还是只能使用加锁来完成：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) a++;<br>            System.out.println(<span class="hljs-string">&quot;任务完成！&quot;</span>);<br>        &#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br><br>        <span class="hljs-comment">//等待线程执行完成</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不对啊，<code>volatile</code>不是能在改变变量的时候其他线程可见吗，那为什么还是不能保证原子性呢？还是那句话，自增操作是被瓜分为了多个步骤完成的，虽然保证了可见性，但是只要手速够快，依然会出现两个线程同时写同一个值的问题（比如线程1刚刚将a的值更新为100，这时线程2可能也已经执行到更新a的值这条指令了，已经刹不住车了，所以依然会将a的值再更新为一次100）</p><p>那要是真的遇到这种情况，那么我们不可能都去写个锁吧？后面，我们会介绍原子类来专门解决这种问题。</p><p>最后一个功能就是<code>volatile</code>会禁止指令重排，也就是说，如果我们操作的是一个<code>volatile</code>变量，它将不会出现重排序的情况，也就解决了我们最上面的问题。那么它是怎么解决的重排序问题呢？若用volatile修饰共享变量，在编译时，会在指令序列中插入<code>内存屏障</code>来禁止特定类型的处理器重排序</p><blockquote><p>内存屏障（MemoryBarrier）又称内存栅栏，是一个CPU指令，它的作用有两个：</p><ol type="1"><li>保证特定操作的顺序</li><li>保证某些变量的内存可见性（volatile的内存可见性，其实就是依靠这个实现的）</li></ol><p>由于编译器和处理器都能执行指令重排的优化，如果在指令间插入一条MemoryBarrier则会告诉编译器和CPU，不管什么指令都不能和这条MemoryBarrier指令重排序。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1gzwtkeydk7j2194068jsd.jpg"alt="image-20220303172519404" /></p><table><colgroup><col style="width: 10%" /><col style="width: 25%" /><col style="width: 63%" /></colgroup><thead><tr class="header"><th>屏障类型</th><th>指令示例</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>LoadLoad</td><td>Load1;LoadLoad;Load2</td><td>保证Load1的读取操作在Load2及后续读取操作之前执行</td></tr><tr class="even"><td>StoreStore</td><td>Store1;StoreStore;Store2</td><td>在Store2及其后的写操作执行前，保证Store1的写操作已刷新到主内存</td></tr><tr class="odd"><td>LoadStore</td><td>Load1;LoadStore;Store2</td><td>在Store2及其后的写操作执行前，保证Load1的读操作已读取结束</td></tr><tr class="even"><td>StoreLoad</td><td>Store1;StoreLoad;Load2</td><td>保证load1的写操作已刷新到主内存之后，load2及其后的读操作才能执行</td></tr></tbody></table></blockquote><p>所以<code>volatile</code>能够保证，之前的指令一定全部执行，之后的指令一定都没有执行，并且前面语句的结果对后面的语句可见。</p><p>最后我们来总结一下<code>volatile</code>关键字的三个特性：</p><ul><li>保证可见性</li><li>不保证原子性</li><li>防止指令重排</li></ul><p>在之后我们的设计模式系列视频中，还会讲解单例模式下<code>volatile</code>的运用。</p><h3 id="happens-before原则">happens-before原则</h3><p>经过我们前面的讲解，相信各位已经了解了JMM内存模型以及重排序等机制带来的优点和缺点，综上，JMM提出了<code>happens-before</code>（先行发生）原则，定义一些禁止编译优化的场景，来向各位程序员做一些保证，只要我们是按照原则进行编程，那么就能够保持并发编程的正确性。具体如下：</p><ul><li><strong>程序次序规则：</strong>同一个线程中，按照程序的顺序，前面的操作happens-before后续的任何操作。<ul><li>同一个线程内，代码的执行结果是有序的。其实就是，可能会发生指令重排，但是保证代码的执行结果一定是和按照顺序执行得到的一致，程序前面对某一个变量的修改一定对后续操作可见的，不可能会出现前面才把a修改为1，接着读a居然是修改前的结果，这也是程序运行最基本的要求。</li></ul></li><li><strong>监视器锁规则：</strong>对一个锁的解锁操作，happens-before后续对这个锁的加锁操作。<ul><li>就是无论是在单线程环境还是多线程环境，对于同一个锁来说，一个线程对这个锁解锁之后，另一个线程获取了这个锁都能看到前一个线程的操作结果。比如前一个线程将变量<code>x</code>的值修改为了<code>12</code>并解锁，之后另一个线程拿到了这把锁，对之前线程的操作是可见的，可以得到<code>x</code>是前一个线程修改后的结果<code>12</code>（所以synchronized是有happens-before规则的）</li></ul></li><li><strong>volatile变量规则：</strong>对一个volatile变量的写操作happens-before后续对这个变量的读操作。<ul><li>就是如果一个线程先去写一个<code>volatile</code>变量，紧接着另一个线程去读这个变量，那么这个写操作的结果一定对读的这个变量的线程可见。</li></ul></li><li><strong>线程启动规则：</strong>主线程A启动线程B，线程B中可以看到主线程启动B之前的操作。<ul><li>在主线程A执行过程中，启动子线程B，那么线程A在启动子线程B之前对共享变量的修改结果对线程B可见。</li></ul></li><li><strong>线程加入规则：</strong>如果线程A执行操作<code>join()</code>线程B并成功返回，那么线程B中的任意操作happens-before线程A<code>join()</code>操作成功返回。</li><li><strong>传递性规则：</strong>如果A happens-before B，Bhappens-before C，那么A happens-before C。</li></ul><p>那么我们来从happens-before原则的角度，来解释一下下面的程序结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        a = <span class="hljs-number">10</span>;<br>        b = a + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>          <span class="hljs-keyword">if</span>(b &gt; <span class="hljs-number">10</span>) System.out.println(a); <br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先我们定义以上出现的操作：</p><ul><li><strong>A：</strong>将变量<code>a</code>的值修改为<code>10</code></li><li><strong>B：</strong>将变量<code>b</code>的值修改为<code>a + 1</code></li><li><strong>C：</strong>主线程启动了一个新的线程，并在新的线程中获取<code>b</code>，进行判断，如果为<code>true</code>那么就打印<code>a</code></li></ul><p>首先我们来分析，由于是同一个线程，并且<strong>B</strong>是一个赋值操作且读取了<strong>A</strong>，那么按照<strong>程序次序规则</strong>，Ahappens-beforeB，接着在B之后，马上执行了C，按照<strong>线程启动规则</strong>，在新的线程启动之前，当前线程之前的所有操作对新的线程是可见的，所以B happens-before C，最后根据<strong>传递性规则</strong>，由于Ahappens-before B，B happens-before C，所以A happens-beforeC，因此在新的线程中会输出<code>a</code>修改后的结果<code>10</code>。</p><h1 id="多线程编程核心">多线程编程核心</h1><p>在前面，我们了解了多线程的底层运作机制，我们终于知道，原来多线程环境下存在着如此之多的问题。在JDK5之前，我们只能选择<code>synchronized</code>关键字来实现锁，而JDK5之后，由于<code>volatile</code>关键字得到了升级（具体功能就是上一章所描述的），所以并发框架包便出现了，相比传统的<code>synchronized</code>关键字，我们对于锁的实现，有了更多的选择。</p><blockquote><p>Doug Lea — JUC并发包的作者</p><p>如果IT的历史，是以人为主体串接起来的话，那么肯定少不了DougLea。这个鼻梁挂着眼镜，留着德王威廉二世的胡子，脸上永远挂着谦逊腼腆笑容，服务于纽约州立大学Oswego分校计算机科学系的老大爷。</p><p>说他是这个世界上对Java影响力最大的一个人，一点也不为过。因为两次Java历史上的大变革，他都间接或直接的扮演了举足轻重的角色。2004年所推出的Tiger。Tiger广纳了15项JSRs(JavaSpecificationRequests)的语法及标准，其中一项便是JSR-166。JSR-166是来自于Doug编写的util.concurrent包。</p></blockquote><p>那么，从这章开始，就让我们来感受一下，JUC为我们带来了什么。</p><hr /><h2 id="锁框架">锁框架</h2><p>在JDK5之后，并发包中新增了Lock接口（以及相关实现类）用来实现锁功能，Lock接口提供了与synchronized关键字类似的同步功能，但需要在使用时手动获取锁和释放锁。</p><h3 id="lock和condition接口">Lock和Condition接口</h3><p>使用并发包中的锁和我们传统的<code>synchronized</code>锁不太一样，这里的锁我们可以认为是一把真正意义上的锁，每个锁都是一个对应的锁对象，我只需要向锁对象获取锁或是释放锁即可。我们首先来看看，此接口中定义了什么：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Lock</span> &#123;<br>  <span class="hljs-comment">//获取锁，拿不到锁会阻塞，等待其他线程释放锁，获取到锁后返回</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">//同上，但是等待过程中会响应中断</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>  <span class="hljs-comment">//尝试获取锁，但是不会阻塞，如果能获取到会返回true，不能返回false</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">//尝试获取锁，但是可以限定超时时间，如果超出时间还没拿到锁返回false，否则返回true，可以响应中断</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>  <span class="hljs-comment">//释放锁</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">//暂时可以理解为替代传统的Object的wait()、notify()等操作的工具</span><br>    Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们可以演示一下，如何使用Lock类来进行加锁和释放锁操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Lock</span> <span class="hljs-variable">testLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();   <span class="hljs-comment">//可重入锁ReentrantLock类是Lock类的一个实现，我们后面会进行介绍</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100000</span>; j++) &#123;   <span class="hljs-comment">//还是以自增操作为例</span><br>                testLock.lock();    <span class="hljs-comment">//加锁，加锁成功后其他线程如果也要获取锁，会阻塞，等待当前线程释放</span><br>                i++;<br>                testLock.unlock();  <span class="hljs-comment">//解锁，释放锁之后其他线程就可以获取这把锁了（注意在这之前一定得加锁，不然报错）</span><br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(action).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(action).start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);   <span class="hljs-comment">//等上面两个线程跑完</span><br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，和我们之前使用<code>synchronized</code>相比，我们这里是真正在操作一个"锁"对象，当我们需要加锁时，只需要调用<code>lock()</code>方法，而需要释放锁时，只需要调用<code>unlock()</code>方法。程序运行的最终结果和使用<code>synchronized</code>锁是一样的。</p><p>那么，我们如何像传统的加锁那样，调用对象的<code>wait()</code>和<code>notify()</code>方法呢，并发包提供了Condition接口：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Condition</span> &#123;<br>  <span class="hljs-comment">//与调用锁对象的wait方法一样，会进入到等待状态，但是这里需要调用Condition的signal或signalAll方法进行唤醒（感觉就是和普通对象的wait和notify是对应的）同时，等待状态下是可以响应中断的</span><br> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>  <span class="hljs-comment">//同上，但不响应中断（看名字都能猜到）</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">awaitUninterruptibly</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">//等待指定时间，如果在指定时间（纳秒）内被唤醒，会返回剩余时间，如果超时，会返回0或负数，可以响应中断</span><br>  <span class="hljs-type">long</span> <span class="hljs-title function_">awaitNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> nanosTimeout)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>  <span class="hljs-comment">//等待指定时间（可以指定时间单位），如果等待时间内被唤醒，返回true，否则返回false，可以响应中断</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>  <span class="hljs-comment">//可以指定一个明确的时间点，如果在时间点之前被唤醒，返回true，否则返回false，可以响应中断</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">awaitUntil</span><span class="hljs-params">(Date deadline)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>  <span class="hljs-comment">//唤醒一个处于等待状态的线程，注意还得获得锁才能接着运行</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">signal</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">//同上，但是是唤醒所有等待线程</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们通过一个简单的例子来演示一下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">testLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> testLock.newCondition();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        testLock.lock();   <span class="hljs-comment">//和synchronized一样，必须持有锁的情况下才能使用await</span><br>        System.out.println(<span class="hljs-string">&quot;线程1进入等待状态！&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            condition.await();   <span class="hljs-comment">//进入等待状态</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;线程1等待结束！&quot;</span>);<br>        testLock.unlock();<br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">100</span>); <span class="hljs-comment">//防止线程2先跑</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        testLock.lock();<br>        System.out.println(<span class="hljs-string">&quot;线程2开始唤醒其他等待线程&quot;</span>);<br>        condition.signal();   <span class="hljs-comment">//唤醒线程1，但是此时线程1还必须要拿到锁才能继续运行</span><br>        System.out.println(<span class="hljs-string">&quot;线程2结束&quot;</span>);<br>        testLock.unlock();   <span class="hljs-comment">//这里释放锁之后，线程1就可以拿到锁继续运行了</span><br>    &#125;).start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以发现，Condition对象使用方法和传统的对象使用差别不是很大。</p><p><strong>思考：</strong>下面这种情况跟上面有什么不同？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">testLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        testLock.lock();<br>        System.out.println(<span class="hljs-string">&quot;线程1进入等待状态！&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            testLock.newCondition().await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;线程1等待结束！&quot;</span>);<br>        testLock.unlock();<br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        testLock.lock();<br>        System.out.println(<span class="hljs-string">&quot;线程2开始唤醒其他等待线程&quot;</span>);<br>        testLock.newCondition().signal();<br>        System.out.println(<span class="hljs-string">&quot;线程2结束&quot;</span>);<br>        testLock.unlock();<br>    &#125;).start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过分析可以得到，在调用<code>newCondition()</code>后，会生成一个新的Condition对象，并且同一把锁内是可以存在多个Condition对象的（实际上原始的锁机制等待队列只能有一个，而这里可以创建很多个Condition来实现多等待队列），而上面的例子中，实际上使用的是不同的Condition对象，只有对同一个Condition对象进行等待和唤醒操作才会有效，而不同的Condition对象是分开计算的。</p><p>最后我们再来讲解一下时间单位，这是一个枚举类，也是位于<code>java.util.concurrent</code>包下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TimeUnit</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Time unit representing one thousandth of a microsecond</span><br><span class="hljs-comment">     */</span><br>    NANOSECONDS &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">toNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> d)</span>   &#123; <span class="hljs-keyword">return</span> d; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">toMicros</span><span class="hljs-params">(<span class="hljs-type">long</span> d)</span>  &#123; <span class="hljs-keyword">return</span> d/(C1/C0); &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">toMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> d)</span>  &#123; <span class="hljs-keyword">return</span> d/(C2/C0); &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">toSeconds</span><span class="hljs-params">(<span class="hljs-type">long</span> d)</span> &#123; <span class="hljs-keyword">return</span> d/(C3/C0); &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">toMinutes</span><span class="hljs-params">(<span class="hljs-type">long</span> d)</span> &#123; <span class="hljs-keyword">return</span> d/(C4/C0); &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">toHours</span><span class="hljs-params">(<span class="hljs-type">long</span> d)</span>   &#123; <span class="hljs-keyword">return</span> d/(C5/C0); &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">toDays</span><span class="hljs-params">(<span class="hljs-type">long</span> d)</span>    &#123; <span class="hljs-keyword">return</span> d/(C6/C0); &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">convert</span><span class="hljs-params">(<span class="hljs-type">long</span> d, TimeUnit u)</span> &#123; <span class="hljs-keyword">return</span> u.toNanos(d); &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-title function_">excessNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> d, <span class="hljs-type">long</span> m)</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(d - (m*C2)); &#125;<br>    &#125;,<br>  <span class="hljs-comment">//....</span><br></code></pre></div></td></tr></table></figure><p>可以看到时间单位有很多的，比如<code>DAY</code>、<code>SECONDS</code>、<code>MINUTES</code>等，我们可以直接将其作为时间单位，比如我们要让一个线程等待3秒钟，可以像下面这样编写：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">testLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        testLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;等待是否未超时：&quot;</span>+testLock.newCondition().await(<span class="hljs-number">1</span>, TimeUnit.SECONDS));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        testLock.unlock();<br>    &#125;).start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当然，Lock类的tryLock方法也是支持使用时间单位的，各位可以自行进行测试。TimeUnit除了可以作为时间单位表示以外，还可以在不同单位之间相互转换：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;60秒 = &quot;</span>+TimeUnit.SECONDS.toMinutes(<span class="hljs-number">60</span>) +<span class="hljs-string">&quot;分钟&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;365天 = &quot;</span>+TimeUnit.DAYS.toSeconds(<span class="hljs-number">365</span>) +<span class="hljs-string">&quot; 秒&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也可以更加便捷地使用对象的<code>wait()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">synchronized</span> (Main.class) &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始等待&quot;</span>);<br>        TimeUnit.SECONDS.timedWait(Main.class, <span class="hljs-number">3</span>);   <span class="hljs-comment">//直接等待3秒</span><br>        System.out.println(<span class="hljs-string">&quot;等待结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们也可以直接使用它来进行休眠操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);  <span class="hljs-comment">//休眠1秒钟</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="可重入锁">可重入锁</h3><p>前面，我们讲解了锁框架的两个核心接口，那么我们接着来看看锁接口的具体实现类，我们前面用到了ReentrantLock，它其实是锁的一种，叫做可重入锁，那么这个可重入代表的是什么意思呢？简单来说，就是同一个线程，可以反复进行加锁操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    lock.lock();<br>    lock.lock();   <span class="hljs-comment">//连续加锁2次</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;线程2想要获取锁&quot;</span>);<br>        lock.lock();<br>        System.out.println(<span class="hljs-string">&quot;线程2成功获取到锁&quot;</span>);<br>    &#125;).start();<br>    lock.unlock();<br>    System.out.println(<span class="hljs-string">&quot;线程1释放了一次锁&quot;</span>);<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    lock.unlock();<br>    System.out.println(<span class="hljs-string">&quot;线程1再次释放了一次锁&quot;</span>);  <span class="hljs-comment">//释放两次后其他线程才能加锁</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，主线程连续进行了两次加锁操作（此操作是不会被阻塞的），在当前线程持有锁的情况下继续加锁不会被阻塞，并且，加锁几次，就必须要解锁几次，否则此线程依旧持有锁。我们可以使用<code>getHoldCount()</code>方法查看当前线程的加锁次数：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    lock.lock();<br>    lock.lock();<br>    System.out.println(<span class="hljs-string">&quot;当前加锁次数：&quot;</span>+lock.getHoldCount()+<span class="hljs-string">&quot;，是否被锁：&quot;</span>+lock.isLocked());<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    lock.unlock();<br>    System.out.println(<span class="hljs-string">&quot;当前加锁次数：&quot;</span>+lock.getHoldCount()+<span class="hljs-string">&quot;，是否被锁：&quot;</span>+lock.isLocked());<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    lock.unlock();<br>    System.out.println(<span class="hljs-string">&quot;当前加锁次数：&quot;</span>+lock.getHoldCount()+<span class="hljs-string">&quot;，是否被锁：&quot;</span>+lock.isLocked());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，当锁不再被任何线程持有时，值为<code>0</code>，并且通过<code>isLocked()</code>方法查询结果为<code>false</code>。</p><p>实际上，如果存在线程持有当前的锁，那么其他线程在获取锁时，是会暂时进入到等待队列的，我们可以通过<code>getQueueLength()</code>方法获取等待中线程数量的预估值：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    lock.lock();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(lock::lock), t2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(lock::lock);;<br>    t1.start();<br>    t2.start();<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;当前等待锁释放的线程数：&quot;</span>+lock.getQueueLength());<br>    System.out.println(<span class="hljs-string">&quot;线程1是否在等待队列中：&quot;</span>+lock.hasQueuedThread(t1));<br>    System.out.println(<span class="hljs-string">&quot;线程2是否在等待队列中：&quot;</span>+lock.hasQueuedThread(t2));<br>    System.out.println(<span class="hljs-string">&quot;当前线程是否在等待队列中：&quot;</span>+lock.hasQueuedThread(Thread.currentThread()));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以通过<code>hasQueuedThread()</code>方法来判断某个线程是否正在等待获取锁状态。</p><p>同样的，Condition也可以进行判断：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>       lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            condition.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        lock.unlock();<br>    &#125;).start();<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    lock.lock();<br>    System.out.println(<span class="hljs-string">&quot;当前Condition的等待线程数：&quot;</span>+lock.getWaitQueueLength(condition));<br>    condition.signal();<br>    System.out.println(<span class="hljs-string">&quot;当前Condition的等待线程数：&quot;</span>+lock.getWaitQueueLength(condition));<br>    lock.unlock();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过使用<code>getWaitQueueLength()</code>方法能够查看同一个Condition目前有多少线程处于等待状态。</p><h4 id="公平锁与非公平锁">公平锁与非公平锁</h4><p>前面我们了解了如果线程之间争抢同一把锁，会暂时进入到等待队列中，那么多个线程获得锁的顺序是不是一定是根据线程调用<code>lock()</code>方法时间来定的呢，我们可以看到，<code>ReentrantLock</code>的构造方法中，是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>    sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();   <span class="hljs-comment">//看名字貌似是非公平的</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实锁分为公平锁和非公平锁，默认我们创建出来的ReentrantLock是采用的非公平锁作为底层锁机制。那么什么是公平锁什么又是非公平锁呢？</p><ul><li>公平锁：多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁。</li><li>非公平锁：多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</li></ul><p>简单来说，公平锁不让插队，都老老实实排着；非公平锁让插队，但是排队的人让不让你插队就是另一回事了。</p><p>我们可以来测试一下公平锁和非公平锁的表现情况：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>    sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们选择使用第二个构造方法，可以选择是否为公平锁实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;线程 &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; 开始获取锁...&quot;</span>);<br>        lock.lock();<br>        System.out.println(<span class="hljs-string">&quot;线程 &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; 成功获取锁！&quot;</span>);<br>        lock.unlock();<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;   <span class="hljs-comment">//建立10个线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(action, <span class="hljs-string">&quot;T&quot;</span>+i).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们只需要对比<code>将在1秒后开始获取锁...</code>和<code>成功获取锁！</code>的顺序是否一致即可，如果是一致，那说明所有的线程都是按顺序排队获取的锁，如果不是，那说明肯定是有线程插队了。</p><p>运行结果可以发现，在公平模式下，确实是按照顺序进行的，而在非公平模式下，一般会出现这种情况：线程刚开始获取锁马上就能抢到，并且此时之前早就开始的线程还在等待状态，很明显的插队行为。</p><p>那么，接着下一个问题，公平锁在任何情况下都一定是公平的吗？有关这个问题，我们会留到队列同步器中再进行讨论。</p><hr /><h3 id="读写锁">读写锁</h3><p>除了可重入锁之外，还有一种类型的锁叫做读写锁，当然它并不是专门用作读写操作的锁，它和可重入锁不同的地方在于，可重入锁是一种排他锁，当一个线程得到锁之后，另一个线程必须等待其释放锁，否则一律不允许获取到锁。而读写锁在同一时间，是可以让多个线程获取到锁的，它其实就是针对于读写场景而出现的。</p><p>读写锁维护了一个读锁和一个写锁，这两个锁的机制是不同的。</p><ul><li>读锁：在没有任何线程占用写锁的情况下，同一时间可以有多个线程加读锁。</li><li>写锁：在没有任何线程占用读锁的情况下，同一时间只能有一个线程加写锁。</li></ul><p>读写锁也有一个专门的接口：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReadWriteLock</span> &#123;<br>    <span class="hljs-comment">//获取读锁</span><br>    Lock <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">//获取写锁</span><br>    Lock <span class="hljs-title function_">writeLock</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此接口有一个实现类ReentrantReadWriteLock（实现的是ReadWriteLock接口，不是Lock接口，它本身并不是锁），注意我们操作ReentrantReadWriteLock时，不能直接上锁，而是需要获取读锁或是写锁，再进行锁操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    lock.readLock().lock();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(lock.readLock()::lock).start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们对读锁加锁，可以看到可以多个线程同时对读锁加锁。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    lock.readLock().lock();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(lock.writeLock()::lock).start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有读锁状态下无法加写锁，反之亦然：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    lock.writeLock().lock();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(lock.readLock()::lock).start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>并且，ReentrantReadWriteLock不仅具有读写锁的功能，还保留了可重入锁和公平/非公平机制，比如同一个线程可以重复为写锁加锁，并且必须全部解锁才真正释放锁：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    lock.writeLock().lock();<br>    lock.writeLock().lock();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        lock.writeLock().lock();<br>        System.out.println(<span class="hljs-string">&quot;成功获取到写锁！&quot;</span>);<br>    &#125;).start();<br>    System.out.println(<span class="hljs-string">&quot;释放第一层锁！&quot;</span>);<br>    lock.writeLock().unlock();<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;释放第二层锁！&quot;</span>);<br>    lock.writeLock().unlock();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过之前的例子来验证公平和非公平：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;线程 &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; 将在1秒后开始获取锁...&quot;</span>);<br>        lock.writeLock().lock();<br>        System.out.println(<span class="hljs-string">&quot;线程 &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; 成功获取锁！&quot;</span>);<br>        lock.writeLock().unlock();<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;   <span class="hljs-comment">//建立10个线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(action, <span class="hljs-string">&quot;T&quot;</span>+i).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，结果是一致的。</p><h4 id="锁降级和锁升级">锁降级和锁升级</h4><p>锁降级指的是写锁降级为读锁。当一个线程持有写锁的情况下，虽然其他线程不能加读锁，但是线程自己是可以加读锁的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    lock.writeLock().lock();<br>    lock.readLock().lock();<br>    System.out.println(<span class="hljs-string">&quot;成功加读锁！&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>那么，如果我们在同时加了写锁和读锁的情况下，释放写锁，是否其他的线程就可以一起加读锁了呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    lock.writeLock().lock();<br>    lock.readLock().lock();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始加读锁！&quot;</span>);<br>        lock.readLock().lock();<br>        System.out.println(<span class="hljs-string">&quot;读锁添加成功！&quot;</span>);<br>    &#125;).start();<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    lock.writeLock().unlock();    <span class="hljs-comment">//如果释放写锁，会怎么样？</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，一旦写锁被释放，那么主线程就只剩下读锁了，因为读锁可以被多个线程共享，所以这时第二个线程也添加了读锁。而这种操作，就被称之为"锁降级"（注意不是先释放写锁再加读锁，而是持有写锁的情况下申请读锁再释放写锁）</p><p>注意在仅持有读锁的情况下去申请写锁，属于"锁升级"，ReentrantReadWriteLock是不支持的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    lock.readLock().lock();<br>    lock.writeLock().lock();<br>    System.out.println(<span class="hljs-string">&quot;所升级成功！&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到线程直接卡在加写锁的那一句了。</p><h3 id="队列同步器aqs">队列同步器AQS</h3><p><strong>注意：</strong>难度巨大，如果对锁的使用不是很熟悉建议之后再来看！</p><p>前面我们了解了可重入锁和读写锁，那么它们的底层实现原理到底是什么样的呢？又是大家看到就想跳过的套娃解析环节。</p><p>比如我们执行了ReentrantLock的<code>lock()</code>方法，那它的内部是怎么在执行的呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    sync.lock();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，它的内部实际上啥都没做，而是交给了Sync对象在进行，并且，不只是这个方法，其他的很多方法都是依靠Sync对象在进行：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    sync.release(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>那么这个Sync对象是干什么的呢？可以看到，公平锁和非公平锁都是继承自Sync，而Sync是继承自AbstractQueuedSynchronizer，简称队列同步器：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>   <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>所以，要了解它的底层到底是如何进行操作的，还得看队列同步器，我们就先从这里下手吧！</p><h4 id="底层实现">底层实现</h4><p>AbstractQueuedSynchronizer（下面称为AQS）是实现锁机制的基础，它的内部封装了包括锁的获取、释放、以及等待队列。</p><p>一个锁（排他锁为例）的基本功能就是获取锁、释放锁、当锁被占用时，其他线程来争抢会进入等待队列，AQS已经将这些基本的功能封装完成了，其中等待队列是核心内容，等待队列是由双向链表数据结构实现的，每个等待状态下的线程都可以被封装进结点中并放入双向链表中，而对于双向链表是以队列的形式进行操作的，它像这样：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h008jltp0zj212k0b4tac.jpg"alt="image-20220306162015545" /></p><p>AQS中有一个<code>head</code>字段和一个<code>tail</code>字段分别记录双向链表的头结点和尾结点，而之后的一系列操作都是围绕此队列来进行的。我们先来了解一下每个结点都包含了哪些内容：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//每个处于等待状态的线程都可以是一个节点，并且每个节点是有很多状态的</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-comment">//每个节点都可以被分为独占模式节点或是共享模式节点，分别适用于独占锁和共享锁</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">SHARED</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">EXCLUSIVE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">//等待状态，这里都定义好了</span><br>   <span class="hljs-comment">//唯一一个大于0的状态，表示已失效，可能是由于超时或中断，此节点被取消。</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span> <span class="hljs-operator">=</span>  <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//此节点后面的节点被挂起（进入等待状态）</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIGNAL</span>    <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//在条件队列中的节点才是这个状态</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CONDITION</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2</span>;<br>  <span class="hljs-comment">//传播，一般用于共享锁</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATE</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> waitStatus;    <span class="hljs-comment">//等待状态值</span><br>    <span class="hljs-keyword">volatile</span> Node prev;   <span class="hljs-comment">//双向链表基操</span><br>    <span class="hljs-keyword">volatile</span> Node next;<br>    <span class="hljs-keyword">volatile</span> Thread thread;   <span class="hljs-comment">//每一个线程都可以被封装进一个节点进入到等待队列</span><br>  <br>    Node nextWaiter;   <span class="hljs-comment">//在等待队列中表示模式，条件队列中作为下一个结点的指针</span><br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isShared</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nextWaiter == SHARED;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> Node <span class="hljs-title function_">predecessor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NullPointerException &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> prev;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    Node() &#123;<br>    &#125;<br><br>    Node(Thread thread, Node mode) &#123;<br>        <span class="hljs-built_in">this</span>.nextWaiter = mode;<br>        <span class="hljs-built_in">this</span>.thread = thread;<br>    &#125;<br><br>    Node(Thread thread, <span class="hljs-type">int</span> waitStatus) &#123;<br>        <span class="hljs-built_in">this</span>.waitStatus = waitStatus;<br>        <span class="hljs-built_in">this</span>.thread = thread;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在一开始的时候，<code>head</code>和<code>tail</code>都是<code>null</code>，<code>state</code>为默认值<code>0</code>：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;<br></code></pre></div></td></tr></table></figure><p>不用担心双向链表不会进行初始化，初始化是在实际使用时才开始的，先不管，我们接着来看其他的初始化内容：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//直接使用Unsafe类进行操作</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> Unsafe.getUnsafe();<br><span class="hljs-comment">//记录类中属性的在内存中的偏移地址，方便Unsafe类直接操作内存进行赋值等（直接修改对应地址的内存）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> stateOffset;   <span class="hljs-comment">//这里对应的就是AQS类中的state成员字段</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> headOffset;    <span class="hljs-comment">//这里对应的就是AQS类中的head头结点成员字段</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> tailOffset;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> waitStatusOffset;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> nextOffset;<br><br><span class="hljs-keyword">static</span> &#123;   <span class="hljs-comment">//静态代码块，在类加载的时候就会自动获取偏移地址</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        stateOffset = unsafe.objectFieldOffset<br>            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class="hljs-string">&quot;state&quot;</span>));<br>        headOffset = unsafe.objectFieldOffset<br>            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class="hljs-string">&quot;head&quot;</span>));<br>        tailOffset = unsafe.objectFieldOffset<br>            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class="hljs-string">&quot;tail&quot;</span>));<br>        waitStatusOffset = unsafe.objectFieldOffset<br>            (Node.class.getDeclaredField(<span class="hljs-string">&quot;waitStatus&quot;</span>));<br>        nextOffset = unsafe.objectFieldOffset<br>            (Node.class.getDeclaredField(<span class="hljs-string">&quot;next&quot;</span>));<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(ex); &#125;<br>&#125;<br><br><span class="hljs-comment">//通过CAS操作来修改头结点</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetHead</span><span class="hljs-params">(Node update)</span> &#123;<br>  <span class="hljs-comment">//调用的是Unsafe类的compareAndSwapObject方法，通过CAS算法比较对象并替换</span><br>    <span class="hljs-keyword">return</span> unsafe.compareAndSwapObject(<span class="hljs-built_in">this</span>, headOffset, <span class="hljs-literal">null</span>, update);<br>&#125;<br><br><span class="hljs-comment">//同上，省略部分代码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetTail</span><span class="hljs-params">(Node expect, Node update)</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetWaitStatus</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetNext</span><span class="hljs-params">(Node node, Node expect, Node update)</span> &#123;<br></code></pre></div></td></tr></table></figure><p>可以发现，队列同步器由于要使用到CAS算法，所以，直接使用了Unsafe工具类，Unsafe类中提供了CAS操作的方法（Java无法实现，底层由C++实现）所有对AQS类中成员字段的修改，都有对应的CAS操作封装。</p><p>现在我们大致了解了一下它的底层运作机制，我们接着来看这个类是如何进行使用的，它提供了一些可重写的方法（根据不同的锁类型和机制，可以自由定制规则，并且为独占式和非独占式锁都提供了对应的方法），以及一些已经写好的模板方法（模板方法会调用这些可重写的方法），使用此类只需要将可重写的方法进行重写，并调用提供的模板方法，从而实现锁功能（学习过设计模式会比较好理解一些）</p><p>我们首先来看可重写方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//独占式获取同步状态，查看同步状态是否和参数一致，如果返没有问题，那么会使用CAS操作设置同步状态并返回true</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br><br><span class="hljs-comment">//独占式释放同步状态</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br><br><span class="hljs-comment">//共享式获取同步状态，返回值大于0表示成功，否则失败</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br><br><span class="hljs-comment">//共享式释放同步状态</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br><br><span class="hljs-comment">//是否在独占模式下被当前线程占用（锁是否被当前线程持有）</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，这些需要重写的方法默认是直接抛出<code>UnsupportedOperationException</code>，也就是说根据不同的锁类型，我们需要去实现对应的方法，我们可以来看一下ReentrantLock（此类是全局独占式的）中的公平锁是如何借助AQS实现的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br>  <span class="hljs-comment">//加锁操作调用了模板方法acquire</span><br>  <span class="hljs-comment">//为了防止各位绕晕，请时刻记住，lock方法一定是在某个线程下为了加锁而调用的，并且同一时间可能会有其他线程也在调用此方法</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们先看看加锁操作干了什么事情，这里直接调用了AQS提供的模板方法<code>acquire()</code>，我们来看看它在AQS类中的实现细节：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ReservedStackAccess</span> <span class="hljs-comment">//这个是JEP 270添加的新注解，它会保护被注解的方法，通过添加一些额外的空间，防止在多线程运行的时候出现栈溢出，下同</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;<br>        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))   <span class="hljs-comment">//节点为独占模式Node.EXCLUSIVE</span><br>        selfInterrupt();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先会调用<code>tryAcquire()</code>方法（这里是由FairSync类实现的），如果尝试加独占锁失败（返回false了）说明可能这个时候有其他线程持有了此独占锁，所以当前线程得先等着，那么会调用<code>addWaiter()</code>方法将线程加入等待队列中：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// 先尝试使用CAS直接入队，如果这个时候其他线程也在入队（就是不止一个线程在同一时间争抢这把锁）就进入enq()</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>  <span class="hljs-comment">//此方法是CAS快速入队失败时调用</span><br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> &#123;<br>  <span class="hljs-comment">//自旋形式入队，可以看到这里是一个无限循环</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//这种情况只能说明头结点和尾结点都还没初始化</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>()))   <span class="hljs-comment">//初始化头结点和尾结点</span><br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.prev = t;<br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;   <span class="hljs-comment">//只有CAS成功的情况下，才算入队成功，如果CAS失败，那说明其他线程同一时间也在入队，并且手速还比当前线程快，刚好走到CAS操作的时候，其他线程就先入队了，那么这个时候node.prev就不是我们预期的节点了，而是另一个线程新入队的节点，所以说得进下一次循环再来一次CAS，这种形式就是自旋</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在了解了<code>addWaiter()</code>方法会将节点加入等待队列之后，我们接着来看，<code>addWaiter()</code>会返回已经加入的节点，<code>acquireQueued()</code>在得到返回的节点时，也会进入自旋状态，等待唤醒（也就是开始进入到拿锁的环节了）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ReservedStackAccess</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;   <span class="hljs-comment">//可以看到当此节点位于队首(node.prev == head)时，会再次调用tryAcquire方法获取锁，如果获取成功，会返回此过程中是否被中断的值</span><br>                setHead(node);    <span class="hljs-comment">//新的头结点设置为当前结点</span><br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 原有的头结点没有存在的意义了</span><br>                failed = <span class="hljs-literal">false</span>;   <span class="hljs-comment">//没有失败</span><br>                <span class="hljs-keyword">return</span> interrupted;   <span class="hljs-comment">//直接返回等待过程中是否被中断</span><br>            &#125;<br>          <span class="hljs-comment">//依然没获取成功，</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;   <span class="hljs-comment">//将当前节点的前驱节点等待状态设置为SIGNAL，如果失败将直接开启下一轮循环，直到成功为止，如果成功接着往下</span><br>                parkAndCheckInterrupt())   <span class="hljs-comment">//挂起线程进入等待状态，等待被唤醒，如果在等待状态下被中断，那么会返回true，直接将中断标志设为true，否则就是正常唤醒，继续自旋</span><br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">parkAndCheckInterrupt</span><span class="hljs-params">()</span> &#123;<br>    LockSupport.park(<span class="hljs-built_in">this</span>);   <span class="hljs-comment">//通过unsafe类操作底层挂起线程（会直接进入阻塞状态）</span><br>    <span class="hljs-keyword">return</span> Thread.interrupted();<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <span class="hljs-comment">//已经是SIGNAL，直接true</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//不能是已经取消的节点，必须找到一个没被取消的</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        pred.next = node;   <span class="hljs-comment">//直接抛弃被取消的节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不是SIGNAL，先CAS设置为SIGNAL（这里没有返回true因为CAS不一定成功，需要下一轮再判断一次）</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//返回false，马上开启下一轮循环</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以，<code>acquire()</code>中的if条件如果为true，那么只有一种情况，就是等待过程中被中断了，其他任何情况下都是成功获取到独占锁，所以当等待过程被中断时，会调用<code>selfInterrupt()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selfInterrupt</span><span class="hljs-params">()</span> &#123;<br>    Thread.currentThread().interrupt();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里就是直接向当前线程发送中断信号了。</p><p>上面提到了LockSupport类，它是一个工具类，我们也可以来玩一下这个<code>park</code>和<code>unpark</code>:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();  <span class="hljs-comment">//先拿到主线程的Thread对象</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;主线程可以继续运行了！&quot;</span>);<br>            LockSupport.unpark(t);<br>          <span class="hljs-comment">//t.interrupt();   发送中断信号也可以恢复运行</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;).start();<br>    System.out.println(<span class="hljs-string">&quot;主线程被挂起！&quot;</span>);<br>    LockSupport.park();<br>    System.out.println(<span class="hljs-string">&quot;主线程继续运行！&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们就把公平锁的<code>lock()</code>方法实现讲解完毕了（让我猜猜，已经晕了对吧，越是到源码越考验个人的基础知识掌握，基础不牢地动山摇）接着我们来看公平锁的<code>tryAcquire()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>  <span class="hljs-comment">//可重入独占锁的公平实现</span><br>    <span class="hljs-meta">@ReservedStackAccess</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();   <span class="hljs-comment">//先获取当前线程的Thread对象</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();     <span class="hljs-comment">//获取当前AQS对象状态（独占模式下0为未占用，大于0表示已占用）</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;       <span class="hljs-comment">//如果是0，那就表示没有占用，现在我们的线程就要来尝试占用它</span><br>            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;    <span class="hljs-comment">//等待队列是否不为空且当前线程没有拿到锁，其实就是看看当前线程有没有必要进行排队，如果没必要排队，就说明可以直接获取锁</span><br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;   <span class="hljs-comment">//CAS设置状态，如果成功则说明成功拿到了这把锁，失败则说明可能这个时候其他线程在争抢，并且还比你先抢到</span><br>                setExclusiveOwnerThread(current);    <span class="hljs-comment">//成功拿到锁，会将独占模式所有者线程设定为当前线程（这个方法是父类AbstractOwnableSynchronizer中的，就表示当前这把锁已经是这个线程的了）</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <span class="hljs-comment">//占用锁成功，返回true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;   <span class="hljs-comment">//如果不是0，那就表示被线程占用了，这个时候看看是不是自己占用的，如果是，由于是可重入锁，可以继续加锁</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;    <span class="hljs-comment">//多次加锁会将状态值进行增加，状态值就是加锁次数</span><br>            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)   <span class="hljs-comment">//加到int值溢出了？</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            setState(nextc);   <span class="hljs-comment">//设置为新的加锁次数</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//其他任何情况都是加锁失败</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在了解了公平锁的实现之后，是不是感觉有点恍然大悟的感觉，虽然整个过程非常复杂，但是只要理清思路，还是比较简单的。</p><p>加锁过程已经OK，我们接着来看，它的解锁过程，<code>unlock()</code>方法是在AQS中实现的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    sync.release(<span class="hljs-number">1</span>);    <span class="hljs-comment">//直接调用了AQS中的release方法，参数为1表示解锁一次state值-1</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ReservedStackAccess</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;   <span class="hljs-comment">//和tryAcquire一样，也得子类去重写，释放锁操作</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;    <span class="hljs-comment">//释放锁成功后，获取新的头结点</span><br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)   <span class="hljs-comment">//如果新的头结点不为空并且不是刚刚建立的结点（初始状态下status为默认值0，而上面在进行了shouldParkAfterFailedAcquire之后，会被设定为SIGNAL状态，值为-1）</span><br>            unparkSuccessor(h);   <span class="hljs-comment">//唤醒头节点下一个节点中的线程</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 将等待状态waitStatus设置为初始值0</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//获取下一个结点</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//如果下一个结点为空或是等待状态是已取消，那肯定是不能通知unpark的，这时就要遍历所有节点再另外找一个符合unpark要求的节点了</span><br>        s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span> &amp;&amp; t != node; t = t.prev)   <span class="hljs-comment">//这里是从队尾向前，因为enq()方法中的t.next = node是在CAS之后进行的，而 node.prev = t 是CAS之前进行的，所以从后往前一定能够保证遍历所有节点</span><br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                s = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)   <span class="hljs-comment">//要是找到了，就直接unpark，要是还是没找到，那就算了</span><br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>那么我们来看看<code>tryRelease()</code>方法是怎么实现的，具体实现在Sync中：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ReservedStackAccess</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;   <span class="hljs-comment">//先计算本次解锁之后的状态值</span><br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())   <span class="hljs-comment">//因为是独占锁，那肯定这把锁得是当前线程持有才行</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();   <span class="hljs-comment">//否则直接抛异常</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//如果解锁之后的值为0，表示已经完全释放此锁</span><br>        free = <span class="hljs-literal">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);  <span class="hljs-comment">//将独占锁持有线程设置为null</span><br>    &#125;<br>    setState(c);   <span class="hljs-comment">//状态值设定为c</span><br>    <span class="hljs-keyword">return</span> free;  <span class="hljs-comment">//如果不是0表示此锁还没完全释放，返回false，是0就返回true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>综上，我们来画一个完整的流程图：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h004uzeni8j224k0ca0w9.jpg"alt="image-20220306141248030" /></p><p>这里我们只讲解了公平锁，有关非公平锁和读写锁，还请各位观众根据我们之前的思路，自行解读。</p><h4 id="公平锁一定公平吗">公平锁一定公平吗？</h4><p>前面我们讲解了公平锁的实现原理，那么，我们尝试分析一下，在并发的情况下，公平锁一定公平吗？</p><p>我们再次来回顾一下<code>tryAcquire()</code>方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ReservedStackAccess</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;   <span class="hljs-comment">//注意这里，公平锁的机制是，一开始会查看是否有节点处于等待</span><br>            compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;   <span class="hljs-comment">//如果前面的方法执行后发现没有等待节点，就直接进入占锁环节了</span><br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以<code>hasQueuedPredecessors()</code>这个环节容不得半点闪失，否则会直接破坏掉公平性，假如现在出现了这样的情况：</p><p>线程1已经持有锁了，这时线程2来争抢这把锁，走到<code>hasQueuedPredecessors()</code>，判断出为<code>false</code>，线程2继续运行，然后线程2肯定获取锁失败（因为锁这时是被线程1占有的），因此就进入到等待队列中：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 线程2进来之后，肯定是要先走这里的，因为head和tail都是null</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>()))<br>                tail = head;   <span class="hljs-comment">//这里就将tail直接等于head了，注意这里完了之后还没完，这里只是初始化过程</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.prev = t;<br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;   <span class="hljs-comment">//由于一开始head和tail都是null，所以线程2直接就进enq()了</span><br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    enq(node);   <span class="hljs-comment">//请看上面</span><br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>而碰巧不巧，这个时候线程3也来抢锁了，按照正常流程走到了<code>hasQueuedPredecessors()</code>方法，而在此方法中：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedPredecessors</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; <span class="hljs-comment">// Read fields in reverse initialization order</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>    Node s;<br>  <span class="hljs-comment">//这里直接判断h != t，而此时线程2才刚刚执行完 tail = head，所以直接就返回false了</span><br>    <span class="hljs-keyword">return</span> h != t &amp;&amp;<br>        ((s = h.next) == <span class="hljs-literal">null</span> || s.thread != Thread.currentThread());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因此，线程3这时就紧接着准备开始CAS操作了，又碰巧，这时线程1释放锁了，现在的情况就是，线程3直接开始CAS判断，而线程2还在插入节点状态，结果可想而知，居然是线程3先拿到了锁，这显然是违背了公平锁的公平机制。</p><p>一张图就是：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h007thq2x1j22ce0k879c.jpg"alt="image-20220306155509195" /></p><p>因此公不公平全看<code>hasQueuedPredecessors()</code>，而此方法只有在等待队列中存在节点时才能保证不会出现问题。所以公平锁，只有在等待队列存在节点时，才是真正公平的。</p><h4 id="condition实现原理">Condition实现原理</h4><p>通过前面的学习，我们知道Condition类实际上就是用于代替传统对象的wait/notify操作的，同样可以实现等待/通知模式，并且同一把锁下可以创建多个Condition对象。那么我们接着来看看，它又是如何实现的呢，我们先从单个Condition对象进行分析：</p><p>在AQS中，Condition有一个实现类ConditionObject，而这里也是使用了链表实现了条件队列：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>, java.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1173984872572414699L</span>;<br>    <span class="hljs-comment">/** 条件队列的头结点 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node firstWaiter;<br>    <span class="hljs-comment">/** 条件队列的尾结点 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node lastWaiter;<br>  <br>  <span class="hljs-comment">//...</span><br></code></pre></div></td></tr></table></figure><p>这里是直接使用了AQS中的Node类，但是使用的是Node类中的nextWaiter字段连接节点，并且Node的status为CONDITION：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h016lyg63ij21ew0dsgnt.jpg"alt="image-20220307115850295" /></p><p>我们知道，当一个线程调用<code>await()</code>方法时，会进入等待状态，直到其他线程调用<code>signal()</code>方法将其唤醒，而这里的条件队列，正是用于存储这些处于等待状态的线程。</p><p>我们先来看看最关键的<code>await()</code>方法是如何实现的，为了防止一会绕晕，在开始之前，我们先明确此方法的目标：</p><ul><li>只有已经持有锁的线程才可以使用此方法</li><li>当调用此方法后，会直接释放锁，无论加了多少次锁</li><li>只有其他线程调用<code>signal()</code>或是被中断时才会唤醒等待中的线程</li><li>被唤醒后，需要等待其他线程释放锁，拿到锁之后才可以继续执行，并且会恢复到之前的状态（await之前加了几层锁唤醒后依然是几层锁）</li></ul><p>好了，差不多可以上源码了：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();   <span class="hljs-comment">//如果在调用await之前就被添加了中断标记，那么会直接抛出中断异常</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addConditionWaiter();    <span class="hljs-comment">//为当前线程创建一个新的节点，并将其加入到条件队列中</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> fullyRelease(node);    <span class="hljs-comment">//完全释放当前线程持有的锁，并且保存一下state值，因为唤醒之后还得恢复</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">interruptMode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">//用于保存中断状态</span><br>    <span class="hljs-keyword">while</span> (!isOnSyncQueue(node)) &#123;   <span class="hljs-comment">//循环判断是否位于同步队列中，如果等待状态下的线程被其他线程唤醒，那么会正常进入到AQS的等待队列中（之后我们会讲）</span><br>        LockSupport.park(<span class="hljs-built_in">this</span>);   <span class="hljs-comment">//如果依然处于等待状态，那么继续挂起</span><br>        <span class="hljs-keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="hljs-number">0</span>)   <span class="hljs-comment">//看看等待的时候是不是被中断了</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>  <span class="hljs-comment">//出了循环之后，那线程肯定是已经醒了，这时就差拿到锁就可以恢复运行了</span><br>    <span class="hljs-keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)  <span class="hljs-comment">//直接开始acquireQueued尝试拿锁（之前已经讲过了）从这里开始基本就和一个线程去抢锁是一样的了</span><br>        interruptMode = REINTERRUPT;<br>  <span class="hljs-comment">//已经拿到锁了，基本可以开始继续运行了，这里再进行一下后期清理工作</span><br>    <span class="hljs-keyword">if</span> (node.nextWaiter != <span class="hljs-literal">null</span>) <br>        unlinkCancelledWaiters();  <span class="hljs-comment">//将等待队列中，不是Node.CONDITION状态的节点移除</span><br>    <span class="hljs-keyword">if</span> (interruptMode != <span class="hljs-number">0</span>)   <span class="hljs-comment">//依然是响应中断</span><br>        reportInterruptAfterWait(interruptMode);<br>  <span class="hljs-comment">//OK，接着该干嘛干嘛</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>实际上<code>await()</code>方法比较中规中矩，大部分操作也在我们的意料之中，那么我们接着来看<code>signal()</code>方法是如何实现的，同样的，为了防止各位绕晕，先明确signal的目标：</p><ul><li>只有持有锁的线程才能唤醒锁所属的Condition等待的线程</li><li>优先唤醒条件队列中的第一个，如果唤醒过程中出现问题，接着找往下找，直到找到一个可以唤醒的</li><li>唤醒操作本质上是将条件队列中的结点直接丢进AQS等待队列中，让其参与到锁的竞争中</li><li>拿到锁之后，线程才能恢复运行</li></ul><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h016s4p0rfj21as0hg76w.jpg"alt="image-20220307120449303" /></p><p>好了，上源码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signal</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())    <span class="hljs-comment">//先看看当前线程是不是持有锁的状态</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();   <span class="hljs-comment">//不是？那你不配唤醒别人</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;    <span class="hljs-comment">//获取条件队列的第一个结点</span><br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)    <span class="hljs-comment">//如果队列不为空，获取到了，那么就可以开始唤醒操作</span><br>        doSignal(first);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSignal</span><span class="hljs-params">(Node first)</span> &#123;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="hljs-literal">null</span>)   <span class="hljs-comment">//如果当前节点在本轮循环没有后继节点了，条件队列就为空了</span><br>            lastWaiter = <span class="hljs-literal">null</span>;   <span class="hljs-comment">//所以这里相当于是直接清空</span><br>        first.nextWaiter = <span class="hljs-literal">null</span>;   <span class="hljs-comment">//将给定节点的下一个结点设置为null，因为当前结点马上就会离开条件队列了</span><br>    &#125; <span class="hljs-keyword">while</span> (!transferForSignal(first) &amp;&amp;   <span class="hljs-comment">//接着往下看</span><br>             (first = firstWaiter) != <span class="hljs-literal">null</span>);   <span class="hljs-comment">//能走到这里只能说明给定节点被设定为了取消状态，那就继续看下一个结点</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transferForSignal</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 如果这里CAS失败，那有可能此节点被设定为了取消状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">//CAS成功之后，结点的等待状态就变成了默认值0，接着通过enq方法直接将节点丢进AQS的等待队列中，相当于唤醒并且可以等待获取锁了</span><br>  <span class="hljs-comment">//这里enq方法返回的是加入之后等待队列队尾的前驱节点，就是原来的tail</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> enq(node);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> p.waitStatus;   <span class="hljs-comment">//保存前驱结点的等待状态</span><br>  <span class="hljs-comment">//如果上一个节点的状态为取消, 或者尝试设置上一个节点的状态为SIGNAL失败（可能是在ws&gt;0判断完之后马上变成了取消状态，导致CAS失败）</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))<br>        LockSupport.unpark(node.thread);  <span class="hljs-comment">//直接唤醒线程</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实最让人不理解的就是倒数第二行，明明上面都正常进入到AQS等待队列了，应该是可以开始走正常流程了，那么这里为什么还要提前来一次unpark呢？</p><p>这里其实是为了进行优化而编写，直接unpark会有两种情况：</p><ul><li>如果插入结点前，AQS等待队列的队尾节点就已经被取消，则满足wc &gt;0</li><li>如果插入node后，AQS内部等待队列的队尾节点已经稳定，满足tail.waitStatus== 0，但在执行ws &gt; 0之后!compareAndSetWaitStatus(p, ws,Node.SIGNAL)之前被取消，则CAS也会失败，满足compareAndSetWaitStatus(p,ws, Node.SIGNAL) == false</li></ul><p>如果这里被提前unpark，那么在<code>await()</code>方法中将可以被直接唤醒，并跳出while循环，直接开始争抢锁，因为前一个等待结点是被取消的状态，没有必要再等它了。</p><p>所以，大致流程下：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h018ts8x80j21to0eidix.jpg"alt="image-20220307131536020" /></p><p>只要把整个流程理清楚，还是很好理解的。</p><h4 id="自行实现锁类">自行实现锁类</h4><p>既然前面了解了那么多AQS的功能，那么我就仿照着这些锁类来实现一个简单的锁：</p><ul><li>要求：同一时间只能有一个线程持有锁，不要求可重入（反复加锁无视即可）</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自行实现一个最普通的独占锁</span><br><span class="hljs-comment">     * 要求：同一时间只能有一个线程持有锁，不要求可重入</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 设计思路：</span><br><span class="hljs-comment">         * 1. 锁被占用，那么exclusiveOwnerThread应该被记录，并且state = 1</span><br><span class="hljs-comment">         * 2. 锁没有被占用，那么exclusiveOwnerThread为null，并且state = 0</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>                <span class="hljs-keyword">if</span>(isHeldExclusively()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;     <span class="hljs-comment">//无需可重入功能，如果是当前线程直接返回true</span><br>                <span class="hljs-keyword">if</span>(compareAndSetState(<span class="hljs-number">0</span>, arg))&#123;    <span class="hljs-comment">//CAS操作进行状态替换</span><br>                    setExclusiveOwnerThread(Thread.currentThread());    <span class="hljs-comment">//成功后设置当前的所有者线程</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>                <span class="hljs-keyword">if</span>(getState() == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();   <span class="hljs-comment">//没加锁情况下是不能直接解锁的</span><br>                <span class="hljs-keyword">if</span>(isHeldExclusively())&#123;     <span class="hljs-comment">//只有持有锁的线程才能解锁</span><br>                    setExclusiveOwnerThread(<span class="hljs-literal">null</span>);    <span class="hljs-comment">//设置所有者线程为null</span><br>                    setState(<span class="hljs-number">0</span>);    <span class="hljs-comment">//状态变为0</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();<br>            &#125;<br><br>            <span class="hljs-keyword">protected</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();    <span class="hljs-comment">//直接用现成的</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Sync</span> <span class="hljs-variable">sync</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sync</span>();<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            sync.acquire(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.tryAcquire(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">return</span> sync.tryAcquireNanos(<span class="hljs-number">1</span>, unit.toNanos(time));<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>            sync.release(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.newCondition();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到这里，我们对应队列同步器AQS的讲解就先到此为止了，当然，AQS的全部机制并非仅仅只有我们讲解的内容，一些我们没有提到的内容，还请各位观众自行探索，会有满满的成就感哦~</p><hr /><h2 id="原子类">原子类</h2><p>前面我们讲解了锁框架的使用和实现原理，虽然比较复杂，但是收获还是很多的（主要是观摩大佬写的代码）这一部分我们就来讲一点轻松的。</p><p>前面我们说到，如果要保证<code>i++</code>的原子性，那么我们的唯一选择就是加锁，那么，除了加锁之外，还有没有其他更好的解决方法呢？JUC为我们提供了原子类，底层采用CAS算法，它是一种用法简单、性能高效、线程安全地更新变量的方式。</p><p>所有的原子类都位于<code>java.util.concurrent.atomic</code>包下。</p><h3 id="原子类介绍">原子类介绍</h3><p>常用基本数据类，有对应的原子类封装：</p><ul><li>AtomicInteger：原子更新int</li><li>AtomicLong：原子更新long</li><li>AtomicBoolean：原子更新boolean</li></ul><p>那么，原子类和普通的基本类在使用上有没有什么区别呢？我们先来看正常情况下使用一个基本类型：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        System.out.println(i++);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在我们使用int类型对应的原子类，要实现同样的代码该如何编写：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br>        System.out.println(i.getAndIncrement());  <span class="hljs-comment">//如果想实现i += 2这种操作，可以使用 addAndGet() 自由设置delta 值</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以将int数值封装到此类中（注意必须调用构造方法，它不像Integer那样有装箱机制），并且通过调用此类提供的方法来获取或是对封装的int值进行自增，乍一看，这不就是基本类型包装类嘛，有啥高级的。确实，还真有包装类那味，但是它可不仅仅是简单的包装，它的自增操作是具有原子性的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100000</span>; j++)<br>                i.getAndIncrement();<br>            System.out.println(<span class="hljs-string">&quot;自增完成！&quot;</span>);<br>        &#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        System.out.println(i.get());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>同样是直接进行自增操作，我们发现，使用原子类是可以保证自增操作原子性的，就跟我们前面加锁一样。怎么会这么神奇？我们来看看它的底层是如何实现的，直接从构造方法点进去：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> initialValue)</span> &#123;<br>    value = initialValue;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicInteger</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，它的底层是比较简单的，其实本质上就是封装了一个<code>volatile</code>类型的int值，这样能够保证可见性，在CAS操作的时候不会出现问题。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> Unsafe.getUnsafe();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> valueOffset;<br><br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        valueOffset = unsafe.objectFieldOffset<br>            (AtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(ex); &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到最上面是和AQS采用了类似的机制，因为要使用CAS算法更新value的值，所以得先计算出value字段在对象中的偏移地址，CAS直接修改对应位置的内存即可（可见Unsafe类的作用巨大，很多的底层操作都要靠它来完成）</p><p>接着我们来看自增操作是怎么在运行的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndIncrement</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-built_in">this</span>, valueOffset, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到这里调用了<code>unsafe.getAndAddInt()</code>，套娃时间到，我们接着看看Unsafe里面写了什么：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object o, <span class="hljs-type">long</span> offset, <span class="hljs-type">int</span> delta)</span> &#123;  <span class="hljs-comment">//delta就是变化的值，++操作就是自增1</span><br>    <span class="hljs-type">int</span> v;<br>    <span class="hljs-keyword">do</span> &#123;<br>      <span class="hljs-comment">//volatile版本的getInt()</span><br>      <span class="hljs-comment">//能够保证可见性</span><br>        v = getIntVolatile(o, offset);<br>    &#125; <span class="hljs-keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));  <span class="hljs-comment">//这里是开始cas替换int的值，每次都去拿最新的值去进行替换，如果成功则离开循环，不成功说明这个时候其他线程先修改了值，就进下一次循环再获取最新的值然后再cas一次，直到成功为止</span><br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到这是一个<code>do-while</code>循环，那么这个循环在做一个什么事情呢？感觉就和我们之前讲解的AQS队列中的机制差不多，也是采用自旋形式，来不断进行CAS操作，直到成功。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1h02eg5qcfaj21pa0ekju1.jpg"alt="image-20220308131536403" /></p><p>可见，原子类底层也是采用了CAS算法来保证的原子性，包括<code>getAndSet</code>、<code>getAndAdd</code>等方法都是这样。原子类也直接提供了CAS操作方法，我们可以直接使用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">10</span>);<br>    System.out.println(integer.compareAndSet(<span class="hljs-number">30</span>, <span class="hljs-number">20</span>));<br>    System.out.println(integer.compareAndSet(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br>    System.out.println(integer);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果想以普通变量的方式来设定值，那么可以使用<code>lazySet()</code>方法，这样就不采用<code>volatile</code>的立即可见机制了。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br>integer.lazySet(<span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure><p>除了基本类有原子类以外，基本类型的数组类型也有原子类：</p><ul><li>AtomicIntegerArray：原子更新int数组</li><li>AtomicLongArray：原子更新long数组</li><li>AtomicReferenceArray：原子更新引用数组</li></ul><p>其实原子数组和原子类型一样的，不过我们可以对数组内的元素进行原子操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">AtomicIntegerArray</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicIntegerArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;);<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++)<br>            array.getAndAdd(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    &#125;;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    System.out.println(array.get(<span class="hljs-number">0</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在JDK8之后，新增了<code>DoubleAdder</code>和<code>LongAdder</code>，在高并发情况下，<code>LongAdder</code>的性能比<code>AtomicLong</code>的性能更好，主要体现在自增上，它的大致原理如下：在低并发情况下，和<code>AtomicLong</code>是一样的，对value值进行CAS操作，但是出现高并发的情况时，<code>AtomicLong</code>会进行大量的循环操作来保证同步，而<code>LongAdder</code>会将对value值的CAS操作分散为对数组<code>cells</code>中多个元素的CAS操作（内部维护一个Cell[]as数组，每个Cell里面有一个初始值为0的long型变量，在高并发时会进行分散CAS，就是不同的线程可以对数组中不同的元素进行CAS自增，这样就避免了所有线程都对同一个值进行CAS），只需要最后再将结果加起来即可。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1h02g67t42fj21ps0lan19.jpg"alt="image-20220308141517668" /></p><p>使用如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">LongAdder</span> <span class="hljs-variable">adder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongAdder</span>();<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++)<br>            adder.add(<span class="hljs-number">1</span>);<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();   <span class="hljs-comment">//100个线程</span><br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    System.out.println(adder.sum());   <span class="hljs-comment">//最后求和即可</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>由于底层源码比较复杂，这里就不做讲解了。两者的性能对比（这里用到了CountDownLatch，建议学完之后再来看）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;使用AtomicLong的时间消耗：&quot;</span>+test2()+<span class="hljs-string">&quot;ms&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;使用LongAdder的时间消耗：&quot;</span>+test1()+<span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">LongAdder</span> <span class="hljs-variable">adder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongAdder</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeStart</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++)<br>                adder.add(<span class="hljs-number">1</span>);<br>            latch.countDown();<br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>        latch.await();<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis() - timeStart;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">atomicLong</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeStart</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++)<br>                atomicLong.incrementAndGet();<br>            latch.countDown();<br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>        latch.await();<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis() - timeStart;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>除了对基本数据类型支持原子操作外，对于引用类型，也是可以实现原子操作的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;World&quot;</span>;<br>    AtomicReference&lt;String&gt; reference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;(a);<br>    reference.compareAndSet(a, b);<br>    System.out.println(reference.get());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>JUC还提供了字段原子更新器，可以对类中的某个指定字段进行原子操作（注意字段必须添加volatile关键字）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        AtomicIntegerFieldUpdater&lt;Student&gt; fieldUpdater =<br>                AtomicIntegerFieldUpdater.newUpdater(Student.class, <span class="hljs-string">&quot;age&quot;</span>);<br>        System.out.println(fieldUpdater.incrementAndGet(student));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>        <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> age;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>了解了这么多原子类，是不是感觉要实现保证原子性的工作更加轻松了？</p><h3 id="aba问题及解决方案">ABA问题及解决方案</h3><p>我们来想象一下这种场景：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1h02hpquocrj213i0c8myf.jpg"alt="image-20220308150840321" /></p><p>线程1和线程2同时开始对<code>a</code>的值进行CAS修改，但是线程1的速度比较快，将a的值修改为2之后紧接着又修改回1，这时线程2才开始进行判断，发现a的值是1，所以CAS操作成功。</p><p>很明显，这里的1已经不是一开始的那个1了，而是被重新赋值的1，这也是CAS操作存在的问题（无锁虽好，但是问题多多），它只会机械地比较当前值是不是预期值，但是并不会关心当前值是否被修改过，这种问题称之为<code>ABA</code>问题。</p><p>那么如何解决这种<code>ABA</code>问题呢，JUC提供了带版本号的引用类型，只要每次操作都记录一下版本号，并且版本号不会重复，那么就可以解决ABA问题了：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;World&quot;</span>;<br>    AtomicStampedReference&lt;String&gt; reference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(a, <span class="hljs-number">1</span>);  <span class="hljs-comment">//在构造时需要指定初始值和对应的版本号</span><br>    reference.attemptStamp(a, <span class="hljs-number">2</span>);   <span class="hljs-comment">//可以中途对版本号进行修改，注意要填写当前的引用对象</span><br>    System.out.println(reference.compareAndSet(a, b, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));   <span class="hljs-comment">//CAS操作时不仅需要提供预期值和修改值，还要提供预期版本号和新的版本号</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>至此，有关原子类的讲解就到这里。</p><hr /><h2 id="并发容器">并发容器</h2><p>简单的讲完了，又该讲难一点的了。</p><p><strong>注意：</strong>本版块的重点在于探究并发容器是如何利用锁机制和算法实现各种丰富功能的，我们会忽略一些常规功能的实现细节（比如链表如何插入元素删除元素），而更关注并发容器应对并发场景算法上的实现（比如在多线程环境下的插入操作是按照什么规则进行的）</p><p>在单线程模式下，集合类提供的容器可以说是非常方便了，几乎我们每个项目中都能或多或少的用到它们，我们在JavaSE阶段，为各位讲解了各个集合类的实现原理，我们了解了链表、顺序表、哈希表等数据结构，那么，在多线程环境下，这些数据结构还能正常工作吗？</p><h3 id="传统容器线程安全吗">传统容器线程安全吗</h3><p>我们来测试一下，100个线程同时向ArrayList中添加元素会怎么样：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>                list.add(<span class="hljs-string">&quot;lbwnb&quot;</span>);<br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>      TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不出意外的话，肯定是会报错的：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;Thread-0&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArrayIndexOutOfBoundsException</span>: <span class="hljs-number">73</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ArrayList</span><span class="hljs-selector-class">.add</span>(ArrayList<span class="hljs-selector-class">.java</span>:<span class="hljs-number">465</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span>.lambda<span class="hljs-variable">$main</span>$<span class="hljs-number">0</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">13</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">750</span>)<br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;Thread-19&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArrayIndexOutOfBoundsException</span>: <span class="hljs-number">1851</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ArrayList</span><span class="hljs-selector-class">.add</span>(ArrayList<span class="hljs-selector-class">.java</span>:<span class="hljs-number">465</span>)<br>at com<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span>.lambda<span class="hljs-variable">$main</span>$<span class="hljs-number">0</span>(Main<span class="hljs-selector-class">.java</span>:<span class="hljs-number">13</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">750</span>)<br><span class="hljs-number">9773</span><br></code></pre></div></td></tr></table></figure><p>那么我们来看看报的什么错，从栈追踪信息可以看出，是add方法出现了问题：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;   <span class="hljs-comment">//这一句出现了数组越界</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也就是说，同一时间其他线程也在疯狂向数组中添加元素，那么这个时候有可能在<code>ensureCapacityInternal</code>（确认容量足够）执行之后，<code>elementData[size++] = e;</code>执行之前，其他线程插入了元素，导致size的值超出了数组容量。这些在单线程的情况下不可能发生的问题，在多线程下就慢慢出现了。</p><p>我们再来看看比较常用的HashMap呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100</span>; j++)<br>                map.put(finalI * <span class="hljs-number">1000</span> + j, <span class="hljs-string">&quot;lbwnb&quot;</span>);<br>        &#125;).start();<br>    &#125;<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>    System.out.println(map.size());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>经过测试发现，虽然没有报错，但是最后的结果并不是我们期望的那样，实际上它还有可能导致Entry对象出现环状数据结构，引起死循环。</p><p>所以，在多线程环境下，要安全地使用集合类，我们得找找解决方案了。</p><h3 id="并发容器介绍">并发容器介绍</h3><p>怎么才能解决并发情况下的容器问题呢？我们首先想到的肯定是给方法前面加个<code>synchronzed</code>关键字，这样总不会抢了吧，在之前我们可以使用Vector或是Hashtable来解决，但是它们的效率实在是太低了，完全依靠锁来解决问题，因此现在已经很少再使它们了，这里也不会再去进行讲解。</p><p>JUC提供了专用于并发场景下的容器，比如我们刚刚使用的ArrayList，在多线程环境下是没办法使用的，我们可以将其替换为JUC提供的多线程专用集合类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();  <span class="hljs-comment">//这里使用CopyOnWriteArrayList来保证线程安全</span><br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>            list.add(<span class="hljs-string">&quot;lbwnb&quot;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    System.out.println(list.size());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们发现，使用了<code>CopyOnWriteArrayList</code>之后，再没出现过上面的问题。</p><p>那么它是如何实现的呢，我们先来看看它是如何进行<code>add()</code>操作的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();   <span class="hljs-comment">//直接加锁，保证同一时间只有一个线程进行添加操作</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        Object[] elements = getArray();  <span class="hljs-comment">//获取当前存储元素的数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> elements.length;<br>        Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);   <span class="hljs-comment">//直接复制一份数组</span><br>        newElements[len] = e;   <span class="hljs-comment">//修改复制出来的数组</span><br>        setArray(newElements);   <span class="hljs-comment">//将元素数组设定为复制出来的数组</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到添加操作是直接上锁，并且会先拷贝一份当前存放元素的数组，然后对数组进行修改，再将此数组替换（CopyOnWrite）接着我们来看读操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> get(getArray(), index);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因此，<code>CopyOnWriteArrayList</code>对于读操作不加锁，而对于写操作是加锁的，类似于我们前面讲解的读写锁机制，这样就可以保证不丢失读性能的情况下，写操作不会出现问题。</p><p>接着我们来看对于HashMap的并发容器<code>ConcurrentHashMap</code>：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100</span>; j++)<br>                map.put(finalI * <span class="hljs-number">100</span> + j, <span class="hljs-string">&quot;lbwnb&quot;</span>);<br>        &#125;).start();<br>    &#125;<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    System.out.println(map.size());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到这里的ConcurrentHashMap就没有出现之前HashMap的问题了。因为线程之间会争抢同一把锁，我们之前在讲解LongAdder的时候学习到了一种压力分散思想，既然每个线程都想抢锁，那我就干脆多搞几把锁，让你们每个人都能拿到，这样就不会存在等待的问题了，而JDK7之前，ConcurrentHashMap的原理也比较类似，它将所有数据分为一段一段地存储，先分很多段出来，每一段都给一把锁，当一个线程占锁访问时，只会占用其中一把锁，也就是仅仅锁了一小段数据，而其他段的数据依然可以被其他线程正常访问。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1h02kqcrfhcj21fk0fk75i.jpg"alt="image-20220308165304048" /></p><p>这里我们重点讲解JDK8之后它是怎么实现的，它采用了CAS算法配合锁机制实现，我们先来回顾一下JDK8下的HashMap是什么样的结构：</p><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/3ad05990ed9e29801b1992030c030a00.png"alt="img" /></p><p>HashMap就是利用了哈希表，哈希表的本质其实就是一个用于存放后续节点的头结点的数组，数组里面的每一个元素都是一个头结点（也可以说就是一个链表），当要新插入一个数据时，会先计算该数据的哈希值，找到数组下标，然后创建一个新的节点，添加到对应的链表后面。当链表的长度达到8时，会自动将链表转换为红黑树，这样能使得原有的查询效率大幅度降低！当使用红黑树之后，我们就可以利用二分搜索的思想，快速地去寻找我们想要的结果，而不是像链表一样挨个去看。</p><p>又是基础不牢地动山摇环节，由于ConcurrentHashMap的源码比较复杂，所以我们先从最简单的构造方法开始下手：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h02t130fslj222h0u0k1b.jpg"alt="image-20220308214006830" /></p><p>我们发现，它的构造方法和HashMap的构造方法有很大的出入，但是大体的结构和HashMap是差不多的，也是维护了一个哈希表，并且哈希表中存放的是链表或是红黑树，所以我们直接来看<code>put()</code>操作是如何实现的，只要看明白这个，基本上就懂了：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(key, value, <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-comment">//有点小乱，如果看着太乱，可以在IDEA中折叠一下代码块，不然有点难受</span><br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(); <span class="hljs-comment">//键值不能为空，基操</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> spread(key.hashCode());    <span class="hljs-comment">//计算键的hash值，用于确定在哈希表中的位置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//一会用来记录链表长度的，忽略</span><br>    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;    <span class="hljs-comment">//无限循环，而且还是并发包中的类，盲猜一波CAS自旋锁</span><br>        Node&lt;K,V&gt; f; <span class="hljs-type">int</span> n, i, fh;<br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            tab = initTable();    <span class="hljs-comment">//如果数组（哈希表）为空肯定是要进行初始化的，然后再重新进下一轮循环</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) &amp; hash)) == <span class="hljs-literal">null</span>) &#123;   <span class="hljs-comment">//如果哈希表该位置为null，直接CAS插入结点作为头结即可（注意这里会将f设置当前哈希表位置上的头结点）</span><br>            <span class="hljs-keyword">if</span> (casTabAt(tab, i, <span class="hljs-literal">null</span>,<br>                         <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="hljs-literal">null</span>)))  <br>                <span class="hljs-keyword">break</span>;                   <span class="hljs-comment">// 如果CAS成功，直接break结束put方法，失败那就继续下一轮循环</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)   <span class="hljs-comment">//头结点哈希值为-1，这里只需要知道是因为正在扩容即可</span><br>            tab = helpTransfer(tab, f);   <span class="hljs-comment">//帮助进行迁移，完事之后再来下一次循环</span><br>        <span class="hljs-keyword">else</span> &#123;     <span class="hljs-comment">//特殊情况都完了，这里就该是正常情况了，</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldVal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">synchronized</span> (f) &#123;   <span class="hljs-comment">//在前面的循环中f肯定是被设定为了哈希表某个位置上的头结点，这里直接把它作为锁加锁了，防止同一时间其他线程也在操作哈希表中这个位置上的链表或是红黑树</span><br>                <span class="hljs-keyword">if</span> (tabAt(tab, i) == f) &#123;<br>                    <span class="hljs-keyword">if</span> (fh &gt;= <span class="hljs-number">0</span>) &#123;    <span class="hljs-comment">//头结点的哈希值大于等于0说明是链表，下面就是针对链表的一些列操作</span><br>                        ...实现细节略<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> TreeBin) &#123;   <span class="hljs-comment">//肯定不大于0，肯定也不是-1，还判断是不是TreeBin，所以不用猜了，肯定是红黑树，下面就是针对红黑树的情况进行操作</span><br>                      <span class="hljs-comment">//在ConcurrentHashMap并不是直接存储的TreeNode，而是TreeBin</span><br>                        ...实现细节略<br>                    &#125;<br>                &#125;<br>            &#125;<br>          <span class="hljs-comment">//根据链表长度决定是否要进化为红黑树</span><br>            <span class="hljs-keyword">if</span> (binCount != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)<br>                    treeifyBin(tab, i);   <span class="hljs-comment">//注意这里只是可能会进化为红黑树，如果当前哈希表的长度小于64，它会优先考虑对哈希表进行扩容</span><br>                <span class="hljs-keyword">if</span> (oldVal != <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span> oldVal;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    addCount(<span class="hljs-number">1L</span>, binCount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>怎么样，是不是感觉看着挺复杂，其实也还好，总结一下就是：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h02vkx608bj21eo0iwad0.jpg"alt="image-20220308230825627" /></p><p>我们接着来看看<code>get()</code>操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="hljs-type">int</span> n, eh; K ek;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> spread(key.hashCode());   <span class="hljs-comment">//计算哈希值</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (e = tabAt(tab, (n - <span class="hljs-number">1</span>) &amp; h)) != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 如果头结点就是我们要找的，那直接返回值就行了</span><br>        <span class="hljs-keyword">if</span> ((eh = e.hash) == h) &#123;<br>            <span class="hljs-keyword">if</span> ((ek = e.key) == key || (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek)))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>      <span class="hljs-comment">//要么是正在扩容，要么就是红黑树，负数只有这两种情况</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (eh &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> (p = e.find(h, key)) != <span class="hljs-literal">null</span> ? p.val : <span class="hljs-literal">null</span>;<br>      <span class="hljs-comment">//确认无误，肯定在列表里，开找</span><br>        <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (e.hash == h &amp;&amp;<br>                ((ek = e.key) == key || (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek))))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>    &#125;<br>  <span class="hljs-comment">//没找到只能null了</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>综上，ConcurrentHashMap的put操作，实际上是对哈希表上的所有头结点元素分别加锁，理论上来说哈希表的长度很大程度上决定了ConcurrentHashMap在同一时间能够处理的线程数量，这也是为什么<code>treeifyBin()</code>会优先考虑为哈希表进行扩容的原因。显然，这种加锁方式比JDK7的分段锁机制性能更好。</p><p>其实这里也只是简单地介绍了一下它的运行机制，ConcurrentHashMap真正的难点在于扩容和迁移操作，我们主要了解的是他的并发执行机制，有关它的其他实现细节，这里暂时不进行讲解。</p><h3 id="阻塞队列">阻塞队列</h3><p>除了我们常用的容器类之外，JUC还提供了各种各样的阻塞队列，用于不同的工作场景。</p><p>阻塞队列本身也是队列，但是它是适用于多线程环境下的，基于ReentrantLock实现的，它的接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlockingQueue</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br>   <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">//入队，如果队列已满，返回false否则返回true（非阻塞）</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">//入队，如果队列已满，阻塞线程直到能入队为止</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br><br>    <span class="hljs-comment">//入队，如果队列已满，阻塞线程直到能入队或超时、中断为止，入队成功返回true否则false</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException;<br><br>    <span class="hljs-comment">//出队，如果队列为空，阻塞线程直到能出队为止</span><br>    E <span class="hljs-title function_">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException;<br><br>    <span class="hljs-comment">//出队，如果队列为空，阻塞线程直到能出队超时、中断为止，出队成功正常返回，否则返回null</span><br>    E <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException;<br><br>    <span class="hljs-comment">//返回此队列理想情况下（在没有内存或资源限制的情况下）可以不阻塞地入队的数量，如果没有限制，则返回 Integer.MAX_VALUE</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">remainingCapacity</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object o)</span>;<br><br>  <span class="hljs-comment">//一次性从BlockingQueue中获取所有可用的数据对象（还可以指定获取数据的个数）</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">drainTo</span><span class="hljs-params">(Collection&lt;? <span class="hljs-built_in">super</span> E&gt; c)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">drainTo</span><span class="hljs-params">(Collection&lt;? <span class="hljs-built_in">super</span> E&gt; c, <span class="hljs-type">int</span> maxElements)</span>;<br></code></pre></div></td></tr></table></figure><p>比如现在有一个容量为3的阻塞队列，这个时候一个线程<code>put</code>向其添加了三个元素，第二个线程接着<code>put</code>向其添加三个元素，那么这个时候由于容量已满，会直接被阻塞，而这时第三个线程从队列中取走2个元素，线程二停止阻塞，先丢两个进去，还有一个还是进不去，所以说继续阻塞。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1h03qghwg2nj21sc0gawhb.jpg"alt="image-20220309165644403" /></p><p>利用阻塞队列，我们可以轻松地实现消费者和生产者模式，还记得我们在JavaSE中的实战吗？</p><blockquote><p>所谓的生产者消费者模型，是通过一个容器来解决生产者和消费者的强耦合问题。通俗的讲，就是生产者在不断的生产，消费者也在不断的消费，可是消费者消费的产品是生产者生产的，这就必然存在一个中间容器，我们可以把这个容器想象成是一个货架，当货架空的时候，生产者要生产产品，此时消费者在等待生产者往货架上生产产品，而当货架有货物的时候，消费者可以从货架上拿走商品，生产者此时等待货架出现空位，进而补货，这样不断的循环。</p></blockquote><p>通过多线程编程，来模拟一个餐厅的2个厨师和3个顾客，假设厨师炒出一个菜的时间为3秒，顾客吃掉菜品的时间为4秒，窗口上只能放一个菜。</p><p>我们来看看，使用阻塞队列如何实现，这里我们就使用<code>ArrayBlockingQueue</code>实现类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        BlockingQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">supplier</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>                    System.err.println(time()+<span class="hljs-string">&quot;生产者 &quot;</span>+name+<span class="hljs-string">&quot; 正在准备餐品...&quot;</span>);<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>                    System.err.println(time()+<span class="hljs-string">&quot;生产者 &quot;</span>+name+<span class="hljs-string">&quot; 已出餐！&quot;</span>);<br>                    queue.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>                    System.out.println(time()+<span class="hljs-string">&quot;消费者 &quot;</span>+name+<span class="hljs-string">&quot; 正在等待出餐...&quot;</span>);<br>                    queue.take();<br>                    System.out.println(time()+<span class="hljs-string">&quot;消费者 &quot;</span>+name+<span class="hljs-string">&quot; 取到了餐品。&quot;</span>);<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">4</span>);<br>                    System.out.println(time()+<span class="hljs-string">&quot;消费者 &quot;</span>+name+<span class="hljs-string">&quot; 已经将饭菜吃完了！&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(supplier, <span class="hljs-string">&quot;Supplier-&quot;</span>+i).start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(consumer, <span class="hljs-string">&quot;Consumer-&quot;</span>+i).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">time</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[&quot;</span>+format.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) + <span class="hljs-string">&quot;] &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，阻塞队列在多线程环境下的作用是非常明显的，算上ArrayBlockingQueue，一共有三种常用的阻塞队列：</p><ul><li>ArrayBlockingQueue：有界带缓冲阻塞队列（就是队列是有容量限制的，装满了肯定是不能再装的，只能阻塞，数组实现）</li><li>SynchronousQueue：无缓冲阻塞队列（相当于没有容量的ArrayBlockingQueue，因此只有阻塞的情况）</li><li>LinkedBlockingQueue：无界带缓冲阻塞队列（没有容量限制，也可以限制容量，也会阻塞，链表实现）</li></ul><p>这里我们以ArrayBlockingQueue为例进行源码解读，我们先来看看构造方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> ReentrantLock lock;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notEmpty;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notFull;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayBlockingQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity, <span class="hljs-type">boolean</span> fair)</span> &#123;<br>    <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-built_in">this</span>.items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>    lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(fair);   <span class="hljs-comment">//底层采用锁机制保证线程安全性，这里我们可以选择使用公平锁或是非公平锁</span><br>    notEmpty = lock.newCondition();   <span class="hljs-comment">//这里创建了两个Condition（都属于lock）一会用于入队和出队的线程阻塞控制</span><br>    notFull =  lock.newCondition();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们来看<code>put</code>和<code>offer</code>方法是如何实现的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    checkNotNull(e);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;    <span class="hljs-comment">//可以看到这里也是使用了类里面的ReentrantLock进行加锁操作</span><br>    lock.lock();    <span class="hljs-comment">//保证同一时间只有一个线程进入</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (count == items.length)   <span class="hljs-comment">//直接看看队列是否已满，如果没满则直接入队，如果已满则返回false</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            enqueue(e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    checkNotNull(e);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;    <span class="hljs-comment">//同样的，需要进行加锁操作</span><br>    lock.lockInterruptibly();    <span class="hljs-comment">//注意这里是可以响应中断的</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == items.length)<br>            notFull.await();    <span class="hljs-comment">//可以看到当队列已满时会直接挂起当前线程，在其他线程出队操作时会被唤醒</span><br>        enqueue(e);   <span class="hljs-comment">//直到队列有空位才将线程入队</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> E <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// assert lock.getHoldCount() == 1;</span><br>    <span class="hljs-comment">// assert items[takeIndex] != null;</span><br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-built_in">this</span>.items;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-type">E</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (E) items[takeIndex];<br>    items[takeIndex] = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (++takeIndex == items.length)<br>        takeIndex = <span class="hljs-number">0</span>;<br>    count--;<br>    <span class="hljs-keyword">if</span> (itrs != <span class="hljs-literal">null</span>)<br>        itrs.elementDequeued();<br>    notFull.signal();    <span class="hljs-comment">//出队操作会调用notFull的signal方法唤醒被挂起处于等待状态的线程</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们来看出队操作：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();    <span class="hljs-comment">//出队同样进行加锁操作，保证同一时间只能有一个线程执行</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> (count == <span class="hljs-number">0</span>) ? <span class="hljs-literal">null</span> : dequeue();   <span class="hljs-comment">//如果队列不为空则出队，否则返回null</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lockInterruptibly();    <span class="hljs-comment">//可以响应中断进行加锁</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>)<br>            notEmpty.await();    <span class="hljs-comment">//和入队相反，也是一直等直到队列中有元素之后才可以出队，在入队时会唤醒此线程</span><br>        <span class="hljs-keyword">return</span> dequeue();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(E x)</span> &#123;<br>    <span class="hljs-comment">// assert lock.getHoldCount() == 1;</span><br>    <span class="hljs-comment">// assert items[putIndex] == null;</span><br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-built_in">this</span>.items;<br>    items[putIndex] = x;<br>    <span class="hljs-keyword">if</span> (++putIndex == items.length)<br>        putIndex = <span class="hljs-number">0</span>;<br>    count++;<br>    notEmpty.signal();    <span class="hljs-comment">//对notEmpty的signal唤醒操作</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>可见，如果各位对锁的使用非常熟悉的话，那么在阅读这些源码的时候，就会非常轻松了。</p><p>接着我们来看一个比较特殊的队列SynchronousQueue，它没有任何容量，也就是说正常情况下出队必须和入队操作成对出现，我们先来看它的内部，可以看到内部有一个抽象类Transferer，它定义了一个<code>transfer</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Transferer</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可以是put也可以是take操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 如果不是空，即作为生产者，那么表示会将传入参数元素e交给消费者</span><br><span class="hljs-comment">     *          如果为空，即作为消费者，那么表示会从生产者那里得到一个元素e并返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> 是否可以超时</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> 超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 不为空就是从生产者那里返回的，为空表示要么被中断要么超时。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">transfer</span><span class="hljs-params">(E e, <span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> nanos)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>乍一看，有点迷惑，难不成还要靠这玩意去实现put和take操作吗？实际上它是直接以生产者消费者模式进行的，由于不需要依靠任何容器结构来暂时存放数据，所以我们可以直接通过<code>transfer</code>方法来对生产者和消费者之间的数据进行传递。</p><p>比如一个线程put一个新的元素进入，这时如果没有其他线程调用take方法获取元素，那么会持续被阻塞，直到有线程取出元素，而<code>transfer</code>正是需要等生产者消费者双方都到齐了才能进行交接工作，单独只有其中一方都需要进行等待。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();  <span class="hljs-comment">//判空</span><br>    <span class="hljs-keyword">if</span> (transferer.transfer(e, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>) == <span class="hljs-literal">null</span>) &#123;   <span class="hljs-comment">//直接使用transfer方法进行数据传递</span><br>        Thread.interrupted();    <span class="hljs-comment">//为空表示要么被中断要么超时</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>它在公平和非公平模式下，有两个实现，这里我们来看公平模式下的SynchronousQueue是如何实现的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransferQueue</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Transferer</span>&lt;E&gt; &#123;<br>     <span class="hljs-comment">//头结点（头结点仅作为头结点，后续节点才是真正等待的线程节点）</span><br>     <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> QNode head;<br>     <span class="hljs-comment">//尾结点</span><br>     <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> QNode tail;<br><br>    <span class="hljs-comment">/** 节点有生产者和消费者角色之分 */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QNode</span> &#123;<br>        <span class="hljs-keyword">volatile</span> QNode next;          <span class="hljs-comment">// 后继节点</span><br>        <span class="hljs-keyword">volatile</span> Object item;         <span class="hljs-comment">// 存储的元素</span><br>        <span class="hljs-keyword">volatile</span> Thread waiter;       <span class="hljs-comment">// 处于等待的线程，和之前的AQS一样的思路，每个线程等待的时候都会被封装为节点</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> isData;         <span class="hljs-comment">// 是生产者节点还是消费者节点</span><br></code></pre></div></td></tr></table></figure><p>公平模式下，Transferer的实现是TransferQueue，是以先进先出的规则的进行的，内部有一个QNode类来保存等待的线程。</p><p>好了，我们直接上<code>transfer()</code>方法的实现（这里再次提醒各位，多线程环境下的源码分析和单线程的分析不同，我们需要时刻关注当前代码块的加锁状态，如果没有加锁，一定要具有多线程可能会同时运行的意识，这个意识在以后你自己处理多线程问题伴随着你，才能保证你的思路在多线程环境下是正确的）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">E <span class="hljs-title function_">transfer</span><span class="hljs-params">(E e, <span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> nanos)</span> &#123;   <span class="hljs-comment">//注意这里面没加锁，肯定会多个线程之间竞争</span><br>    <span class="hljs-type">QNode</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isData</span> <span class="hljs-operator">=</span> (e != <span class="hljs-literal">null</span>);   <span class="hljs-comment">//e为空表示消费者，不为空表示生产者</span><br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">QNode</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>        <span class="hljs-type">QNode</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span> || h == <span class="hljs-literal">null</span>)         <span class="hljs-comment">// 头结点尾结点任意为空（但是在构造的时候就已经不是空了）</span><br>            <span class="hljs-keyword">continue</span>;                       <span class="hljs-comment">// 自旋</span><br><br>        <span class="hljs-keyword">if</span> (h == t || t.isData == isData) &#123; <span class="hljs-comment">// 头结点等于尾结点表示队列中只有一个头结点，肯定是空，或者尾结点角色和当前节点一样，这两种情况下，都需要进行入队操作</span><br>            <span class="hljs-type">QNode</span> <span class="hljs-variable">tn</span> <span class="hljs-operator">=</span> t.next;<br>            <span class="hljs-keyword">if</span> (t != tail)                  <span class="hljs-comment">// 如果这段时间内t被其他线程修改了，如果是就进下一轮循环重新来</span><br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (tn != <span class="hljs-literal">null</span>) &#123;               <span class="hljs-comment">// 继续校验是否为队尾，如果tn不为null，那肯定是其他线程改了队尾，可以进下一轮循环重新来了</span><br>                advanceTail(t, tn);<span class="hljs-comment">// CAS将新的队尾节点设置为tn，成不成功都无所谓，反正这一轮肯定没戏了</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="hljs-number">0</span>)        <span class="hljs-comment">// 超时返回null</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>)<br>                s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QNode</span>(e, isData);   <span class="hljs-comment">//构造当前结点，准备加入等待队列</span><br>            <span class="hljs-keyword">if</span> (!t.casNext(<span class="hljs-literal">null</span>, s))        <span class="hljs-comment">// CAS添加当前节点为尾结点的下一个，如果失败肯定其他线程又抢先做了，直接进下一轮循环重新来</span><br>                <span class="hljs-keyword">continue</span>;<br><br>            advanceTail(t, s);              <span class="hljs-comment">// 上面的操作基本OK了，那么新的队尾元素就修改为s</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> awaitFulfill(s, e, timed, nanos);   <span class="hljs-comment">//开始等待s所对应的消费者或是生产者进行交接，比如s现在是生产者，那么它就需要等到一个消费者的到来才会继续（这个方法会先进行自旋等待匹配，如果自旋一定次数后还是没有匹配成功，那么就挂起）</span><br>            <span class="hljs-keyword">if</span> (x == s) &#123;                   <span class="hljs-comment">// 如果返回s本身说明等待状态下被取消</span><br>                clean(t, s);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!s.isOffList()) &#123;           <span class="hljs-comment">// 如果s操作完成之后没有离开队列，那么这里将其手动丢弃</span><br>                advanceHead(t, s);          <span class="hljs-comment">// 将s设定为新的首节点(注意头节点仅作为头结点，并非处于等待的线程节点)</span><br>                <span class="hljs-keyword">if</span> (x != <span class="hljs-literal">null</span>)              <span class="hljs-comment">// 删除s内的其他信息</span><br>                    s.item = s;<br>                s.waiter = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> (x != <span class="hljs-literal">null</span>) ? (E)x : e;   <span class="hljs-comment">//假如当前是消费者，直接返回x即可，x就是从生产者那里拿来的元素</span><br><br>        &#125; <span class="hljs-keyword">else</span> &#123;                            <span class="hljs-comment">// 这种情况下就是与队列中结点类型匹配的情况了（注意队列要么为空要么只会存在一种类型的节点，因为一旦出现不同类型的节点马上会被交接掉）</span><br>            <span class="hljs-type">QNode</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> h.next;               <span class="hljs-comment">// 获取头结点的下一个接口，准备进行交接工作</span><br>            <span class="hljs-keyword">if</span> (t != tail || m == <span class="hljs-literal">null</span> || h != head)<br>                <span class="hljs-keyword">continue</span>;                   <span class="hljs-comment">// 判断其他线程是否先修改，如果修改过那么开下一轮</span><br><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> m.item;<br>            <span class="hljs-keyword">if</span> (isData == (x != <span class="hljs-literal">null</span>) ||    <span class="hljs-comment">// 判断节点类型，如果是相同的操作，那肯定也是有问题的</span><br>                x == m ||                   <span class="hljs-comment">// 或是当前操作被取消</span><br>                !m.casItem(x, e)) &#123;         <span class="hljs-comment">// 上面都不是？那么最后再进行CAS替换m中的元素，成功表示交接成功，失败就老老实实重开吧</span><br>                advanceHead(h, m);          <span class="hljs-comment">// dequeue and retry</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            advanceHead(h, m);              <span class="hljs-comment">// 成功交接，新的头结点可以改为m了，原有的头结点直接不要了</span><br>            LockSupport.unpark(m.waiter);   <span class="hljs-comment">// m中的等待交接的线程可以继续了，已经交接完成</span><br>            <span class="hljs-keyword">return</span> (x != <span class="hljs-literal">null</span>) ? (E)x : e;  <span class="hljs-comment">// 同上，该返回什么就返回什么</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以，总结为以下流程：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h08pt2hn9rj21rw0mojw7.jpg"alt="image-20220314002203511" /></p><p>对于非公平模式下的SynchronousQueue，则是采用的栈结构来存储等待节点，但是思路也是与这里的一致，需要等待并进行匹配操作，各位如果感兴趣可以继续了解一下非公平模式下的SynchronousQueue实现。</p><p>在JDK7的时候，基于SynchronousQueue产生了一个更强大的TransferQueue，它保留了SynchronousQueue的匹配交接机制，并且与等待队列进行融合。</p><p>我们知道，SynchronousQueue并没有使用锁，而是采用CAS操作保证生产者与消费者的协调，但是它没有容量，而LinkedBlockingQueue虽然是有容量且无界的，但是内部基本都是基于锁实现的，性能并不是很好，这时，我们就可以将它们各自的优点单独拿出来，揉在一起，就成了性能更高的LinkedTransferQueue</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    LinkedTransferQueue&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedTransferQueue</span>&lt;&gt;();<br>    queue.put(<span class="hljs-string">&quot;1&quot;</span>);  <span class="hljs-comment">//插入时，会先检查是否有其他线程等待获取，如果是，直接进行交接，否则插入到存储队列中</span><br>   queue.put(<span class="hljs-string">&quot;2&quot;</span>);  <span class="hljs-comment">//不会像SynchronousQueue那样必须等一个匹配的才可以</span><br>    queue.forEach(System.out::println);   <span class="hljs-comment">//直接打印所有的元素，这在SynchronousQueue下只能是空，因为单独的入队或出队操作都会被阻塞</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>相比 <code>SynchronousQueue</code>，它多了一个可以存储的队列，我们依然可以像阻塞队列那样获取队列中所有元素的值，简单来说，<code>LinkedTransferQueue</code>其实就是一个多了存储队列的<code>SynchronousQueue</code>。</p><p>接着我们来了解一些其他的队列：</p><ul><li>PriorityBlockingQueue -是一个支持优先级的阻塞队列，元素的获取顺序按优先级决定。</li><li>DelayQueue - 它能够实现延迟获取元素，同样支持优先级。</li></ul><p>我们先来看优先级阻塞队列：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    PriorityBlockingQueue&lt;Integer&gt; queue =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityBlockingQueue</span>&lt;&gt;(<span class="hljs-number">10</span>, Integer::compare);   <span class="hljs-comment">//可以指定初始容量（可扩容）和优先级比较规则，这里我们使用升序</span><br>    queue.add(<span class="hljs-number">3</span>);<br>    queue.add(<span class="hljs-number">1</span>);<br>    queue.add(<span class="hljs-number">2</span>);<br>    System.out.println(queue);    <span class="hljs-comment">//注意保存顺序并不会按照优先级排列，所以可以看到结果并不是排序后的结果</span><br>    System.out.println(queue.poll());   <span class="hljs-comment">//但是出队顺序一定是按照优先级进行的</span><br>    System.out.println(queue.poll());<br>    System.out.println(queue.poll());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们的重点是DelayQueue，它能实现延时出队，也就是说当一个元素插入后，如果没有超过一定时间，那么是无法让此元素出队的。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayQueue</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Delayed</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueue</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockingQueue</span>&lt;E&gt; &#123;<br></code></pre></div></td></tr></table></figure><p>可以看到此类只接受Delayed的实现类作为元素：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Delayed</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;Delayed&gt; &#123;  <span class="hljs-comment">//注意这里继承了Comparable，它支持优先级</span><br><br>    <span class="hljs-comment">//获取剩余等待时间，正数表示还需要进行等待，0或负数表示等待结束</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们手动实现一个：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Delayed</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> time;   <span class="hljs-comment">//延迟时间，这里以毫秒为单位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> priority;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> startTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String data;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(<span class="hljs-type">long</span> time, <span class="hljs-type">int</span> priority, String data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.time = TimeUnit.SECONDS.toMillis(time);   <span class="hljs-comment">//秒转换为毫秒</span><br>        <span class="hljs-built_in">this</span>.priority = priority;<br>        <span class="hljs-built_in">this</span>.startTime = System.currentTimeMillis();   <span class="hljs-comment">//这里我们以毫秒为单位</span><br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">leftTime</span> <span class="hljs-operator">=</span> time - (System.currentTimeMillis() - startTime); <span class="hljs-comment">//计算剩余时间 = 设定时间 - 已度过时间(= 当前时间 - 开始时间)</span><br>        <span class="hljs-keyword">return</span> unit.convert(leftTime, TimeUnit.MILLISECONDS);   <span class="hljs-comment">//注意进行单位转换，单位由队列指定（默认是纳秒单位）</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed o)</span> &#123;<br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> Test)<br>            <span class="hljs-keyword">return</span> priority - ((Test) o).priority;   <span class="hljs-comment">//优先级越小越优先</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们在主方法中尝试使用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    DelayQueue&lt;Test&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayQueue</span>&lt;&gt;();<br>    queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;2号&quot;</span>));   <span class="hljs-comment">//1秒钟延时</span><br>    queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;1号&quot;</span>));   <span class="hljs-comment">//1秒钟延时，优先级最高</span><br><br>    System.out.println(queue.take());    <span class="hljs-comment">//注意出队顺序是依照优先级来的，即使一个元素已经可以出队了，依然需要等待优先级更高的元素到期</span><br>    System.out.println(queue.take());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们来研究一下DelayQueue是如何实现的，首先来看<code>add()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> offer(e);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        q.offer(e);   <span class="hljs-comment">//注意这里是向内部维护的一个优先级队列添加元素，并不是DelayQueue本身存储元素</span><br>        <span class="hljs-keyword">if</span> (q.peek() == e) &#123;   <span class="hljs-comment">//如果入队后队首就是当前元素，那么直接进行一次唤醒操作（因为有可能之前就有其他线程等着take了）</span><br>            leader = <span class="hljs-literal">null</span>;<br>            available.signal();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(E e)</span> &#123;<br>    offer(e);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到无论是哪种入队操作，都会加锁进行，属于常规操作。我们接着来看<code>take()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;   <span class="hljs-comment">//出队也要先加锁，基操</span><br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;    <span class="hljs-comment">//无限循环，常规操作</span><br>            <span class="hljs-type">E</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> q.peek();    <span class="hljs-comment">//获取队首元素</span><br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)     <span class="hljs-comment">//如果为空那肯定队列为空，先等着吧，等有元素进来</span><br>                available.await();<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> first.getDelay(NANOSECONDS);    <span class="hljs-comment">//获取延迟，这里传入的时间单位是纳秒</span><br>                <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> q.poll();     <span class="hljs-comment">//如果获取到延迟时间已经小于0了，那说明ok，可以直接出队返回</span><br>                first = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span> (leader != <span class="hljs-literal">null</span>)   <span class="hljs-comment">//这里用leader来减少不必要的等待时间，如果不是null那说明有线程在等待，为null说明没有线程等待</span><br>                    available.await();   <span class="hljs-comment">//如果其他线程已经在等元素了，那么当前线程直接进永久等待状态</span><br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">Thread</span> <span class="hljs-variable">thisThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                    leader = thisThread;    <span class="hljs-comment">//没有线程等待就将leader设定为当前线程</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        available.awaitNanos(delay);     <span class="hljs-comment">//获取到的延迟大于0，那么就需要等待延迟时间，再开始下一次获取</span><br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        <span class="hljs-keyword">if</span> (leader == thisThread)<br>                            leader = <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (leader == <span class="hljs-literal">null</span> &amp;&amp; q.peek() != <span class="hljs-literal">null</span>)<br>            available.signal();   <span class="hljs-comment">//当前take结束之后唤醒一个其他永久等待状态下的线程</span><br>        lock.unlock();   <span class="hljs-comment">//解锁，完事</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到此，有关并发容器的讲解就到这里。</p><p>下一章我们会继续讲解线程池以及并发工具类。</p><h1 id="并发编程进阶">并发编程进阶</h1><p>欢迎来到JUC学习的最后一章，王炸当然是放在最后了。</p><h2 id="线程池">线程池</h2><p>在我们的程序中，多多少少都会用到多线程技术，而我们以往都是使用Thread类来创建一个新的线程：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>));<br>    t.start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>利用多线程，我们的程序可以更加合理地使用CPU多核心资源，在同一时间完成更多的工作。但是，如果我们的程序频繁地创建线程，由于线程的创建和销毁也需要占用系统资源，因此这样会降低我们整个程序的性能，那么怎么做，才能更高效地使用多线程呢？</p><p>我们其实可以将已创建的线程复用，利用池化技术，就像数据库连接池一样，我们也可以创建很多个线程，然后反复地使用这些线程，而不对它们进行销毁。</p><p>虽然听起来这个想法比较新颖，但是实际上线程池早已利用到各个地方，比如我们的Tomcat服务器，要在同一时间接受和处理大量的请求，那么就必须要在短时间内创建大量的线程，结束后又进行销毁，这显然会导致很大的开销，因此这种情况下使用线程池显然是更好的解决方案。</p><p>由于线程池可以反复利用已有线程执行多线程操作，所以它一般是有容量限制的，当所有的线程都处于工作状态时，那么新的多线程请求会被阻塞，直到有一个线程空闲出来为止，实际上这里就会用到我们之前讲解的阻塞队列。</p><p>所以我们可以暂时得到下面一个样子：</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h09oslzmw2j21o20i277f.jpg"alt="image-20220314203232154" /></p><p>当然，JUC提供的线程池肯定没有这么简单，接下来就让我们深入进行了解。</p><h3 id="线程池的使用">线程池的使用</h3><p>我们可以直接创建一个新的线程池对象，它已经提前帮助我们实现好了线程的调度机制，我们先来看它的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-literal">null</span> || threadFactory == <span class="hljs-literal">null</span> || handler == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-built_in">this</span>.acc = System.getSecurityManager() == <span class="hljs-literal">null</span> ?<br>            <span class="hljs-literal">null</span> :<br>            AccessController.getContext();<br>    <span class="hljs-built_in">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-built_in">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-built_in">this</span>.workQueue = workQueue;<br>    <span class="hljs-built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-built_in">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-built_in">this</span>.handler = handler;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参数稍微有一点多，这里我们依次进行讲解：</p><ul><li>corePoolSize：<strong>核心线程池大小</strong>，我们每向线程池提交一个多线程任务时，都会创建一个新的<code>核心线程</code>，无论是否存在其他空闲线程，直到到达核心线程池大小为止，之后会尝试复用线程资源。当然也可以在一开始就全部初始化好，调用<code>prestartAllCoreThreads()</code>即可。</li><li>maximumPoolSize：<strong>最大线程池大小</strong>，当目前线程池中所有的线程都处于运行状态，并且这时来了新的多线程任务，如果当前线程池中线程数量小于最大线程池大小，那么会继续创建新的<code>非核心线程</code>运行，直到最大大小。</li><li>keepAliveTime：<strong>线程最大空闲时间</strong>，当一个<code>非核心线程</code>空闲超过一定时间，会自动销毁。</li><li>unit：<strong>线程最大空闲时间的时间单位</strong></li><li>workQueue：<strong>线程等待队列</strong>，当线程池中确实无法分配线程执行任务的时候，就会将任务暂时存到等待队列中，直到有线程资源可用为止，这里可以使用我们上一章学到的阻塞队列。</li><li>threadFactory：<strong>线程创建工厂</strong>，我们可以干涉线程池中线程的创建过程，进行自定义。</li><li>handler：<strong>拒绝策略</strong>，当等待队列和线程池都没有空间了，真的不能再来新的任务时，来了个新的多线程任务，那么只能拒绝了，这时就会根据当前设定的拒绝策略进行处理。</li></ul><p>最为重要的就是线程池大小的限定了，这个也是很有学问的，合理地分配大小会使得线程池的执行效率事半功倍：</p><ul><li>首先我们可以分析一下，线程池执行任务的特性，是CPU 密集型还是 IO密集型<ul><li><strong>CPU密集型：</strong>主要是执行计算任务，响应时间很快，CPU一直在运行，这种任务CPU的利用率很高，那么线程数应该是根据CPU 核心数来决定，CPU 核心数 = 最大同时执行线程数，以 i5-9400F处理器为例，CPU 核心数为 6，那么最多就能同时执行 6 个线程。</li><li><strong>IO密集型：</strong>主要是进行 IO 操作，因为执行 IO操作的时间比较较长，比如从硬盘读取数据之类的，CPU就得等着IO操作，很容易出现空闲状态，导致CPU的利用率不高，这种情况下可以适当增加线程池的大小，让更多的线程可以一起进行IO操作，一般可以配置为CPU核心数的2倍。</li></ul></li></ul><p>这里我们手动创建一个新的线程池看看效果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>,   <span class="hljs-comment">//2个核心线程，最大线程数为4个</span><br>                    <span class="hljs-number">3</span>, TimeUnit.SECONDS,        <span class="hljs-comment">//最大空闲时间为3秒钟</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">2</span>));     <span class="hljs-comment">//这里使用容量为2的ArrayBlockingQueue队列</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;   <span class="hljs-comment">//开始6个任务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        executor.execute(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 开始执行！（&quot;</span>+ finalI);<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 已结束！（&quot;</span>+finalI);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);    <span class="hljs-comment">//看看当前线程池中的线程数量</span><br>    System.out.println(<span class="hljs-string">&quot;线程池中线程数量：&quot;</span>+executor.getPoolSize());<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);     <span class="hljs-comment">//等到超过空闲时间</span><br>    System.out.println(<span class="hljs-string">&quot;线程池中线程数量：&quot;</span>+executor.getPoolSize());<br><br>    executor.shutdownNow();    <span class="hljs-comment">//使用完线程池记得关闭，不然程序不会结束，它会取消所有等待中的任务以及试图中断正在执行的任务，关闭后，无法再提交任务，一律拒绝</span><br>  <span class="hljs-comment">//executor.shutdown();     同样可以关闭，但是会执行完等待队列中的任务再关闭</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们创建了一个核心容量为2，最大容量为4，等待队列长度为2，空闲时间为3秒的线程池，现在我们向其中执行6个任务，每个任务都会进行1秒钟休眠，那么当线程池中4个线程都被占用时，还有两个线程就只能进入到等待队列中了，当线程池中4个线程完成后，等待队列中的两个任务才能开始执行。并且在等待5秒后，超过了线程池的最大空闲时间，<code>非核心线程</code>被回收了，所以线程池中只有2个线程存在。</p><p>那么要是等待队列设定为没有容量的SynchronousQueue呢，这个时候会发生什么？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> 开始执行！（<span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> 开始执行！（<span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> 开始执行！（<span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> 开始执行！（<span class="hljs-number">1</span><br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.util.concurrent.RejectedExecutionException: Task com.test.Main$$Lambda$<span class="hljs-number">1</span>/<span class="hljs-number">1283928880</span>@682a0b20 rejected from java.util.concurrent.ThreadPoolExecutor@3d075dc0[Running, <span class="hljs-type">pool</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>, <span class="hljs-type">active</span> <span class="hljs-variable">threads</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>, <span class="hljs-type">queued</span> <span class="hljs-variable">tasks</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, <span class="hljs-type">completed</span> <span class="hljs-variable">tasks</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>]<br>at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:<span class="hljs-number">2063</span>)<br>at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:<span class="hljs-number">830</span>)<br>at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="hljs-number">1379</span>)<br>at com.test.Main.main(Main.java:<span class="hljs-number">15</span>)<br></code></pre></div></td></tr></table></figure><p>可以看到，前4个任务都可以正常执行，但是到第五个任务时，直接抛出了异常，这其实就是因为等待队列的容量为0，相当于没有容量，那么这个时候，就只能拒绝任务了，拒绝的操作会根据拒绝策略决定。</p><p>线程池的拒绝策略默认有以下几个：</p><ul><li>AbortPolicy(默认)：像上面一样，直接抛异常。</li><li>CallerRunsPolicy：直接让提交任务的线程运行这个任务，比如在主线程向线程池提交了任务，那么就直接由主线程执行。</li><li>DiscardOldestPolicy：丢弃队列中最近的一个任务，替换为当前任务。</li><li>DiscardPolicy：什么也不用做。</li></ul><p>这里我们进行一下测试：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>,<br>                    <span class="hljs-number">3</span>, TimeUnit.SECONDS,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());   <span class="hljs-comment">//使用另一个构造方法，最后一个参数传入策略，比如这里我们使用了CallerRunsPolicy策略</span><br></code></pre></div></td></tr></table></figure><p>CallerRunsPolicy策略是谁提交的谁自己执行，所以：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> 开始执行！（<span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> 开始执行！（<span class="hljs-number">1</span><br>main 开始执行！（<span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> 开始执行！（<span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> 开始执行！（<span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> 已结束！（<span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> 已结束！（<span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> 已结束！（<span class="hljs-number">0</span><br>main 已结束！（<span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> 已结束！（<span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> 开始执行！（<span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> 已结束！（<span class="hljs-number">5</span><br>线程池中线程数量：<span class="hljs-number">4</span><br>线程池中线程数量：<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>可以看到，当队列塞不下时，直接在主线程运行任务，运行完之后再继续向下执行。</p><p>我们吧策略修改为DiscardOldestPolicy试试看：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>,<br>                    <span class="hljs-number">3</span>, TimeUnit.SECONDS,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>),    <span class="hljs-comment">//这里设置为ArrayBlockingQueue，长度为1</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());   <br></code></pre></div></td></tr></table></figure><p>它会移除等待队列中的最近的一个任务，所以可以看到有一个任务实际上是被抛弃了的：</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-1</span> 开始执行！（0<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-4</span> 开始执行！（4<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-3</span> 开始执行！（3<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-2</span> 开始执行！（1<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-1</span> 已结束！（0<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-4</span> 已结束！（4<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-1</span> 开始执行！（5<br>线程池中线程数量：4<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-3</span> 已结束！（3<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-2</span> 已结束！（1<br>pool<span class="hljs-string">-1</span>-thread<span class="hljs-string">-1</span> 已结束！（5<br>线程池中线程数量：2<br></code></pre></div></td></tr></table></figure><p>比较有意思的是，如果选择没有容量的SynchronousQueue作为等待队列会爆栈：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> 开始执行！（<span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> 开始执行！（<span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> 开始执行！（<span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> 开始执行！（<span class="hljs-number">3</span><br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.StackOverflowError<br>at java.util.concurrent.SynchronousQueue.offer(SynchronousQueue.java:<span class="hljs-number">912</span>)<br>at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="hljs-number">1371</span>)<br>...<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> 已结束！（<span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> 已结束！（<span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> 已结束！（<span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> 已结束！（<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>这是为什么呢？我们来看看这个拒绝策略的源码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiscardOldestPolicy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RejectedExecutionHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DiscardOldestPolicy</span><span class="hljs-params">()</span> &#123; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!e.isShutdown()) &#123;<br>            e.getQueue().poll();   <span class="hljs-comment">//会先执行一次出队操作，但是这对于SynchronousQueue来说毫无意义</span><br>            e.execute(r);     <span class="hljs-comment">//这里会再次调用execute方法</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，它会先对等待队列进行出队操作，但是由于SynchronousQueue压根没容量，所有这个操作毫无意义，然后就会递归执行<code>execute</code>方法，而进入之后，又发现没有容量不能插入，于是又重复上面的操作，这样就会无限的递归下去，最后就爆栈了。</p><p>当然，除了使用官方提供的4种策略之外，我们还可以使用自定义的策略：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>,<br>                    <span class="hljs-number">3</span>, TimeUnit.SECONDS,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;(),<br>                    (r, executor1) -&gt; &#123;   <span class="hljs-comment">//比如这里我们也来实现一个就在当前线程执行的策略</span><br>                        System.out.println(<span class="hljs-string">&quot;哎呀，线程池和等待队列都满了，你自己耗子尾汁吧&quot;</span>);<br>                        r.run();   <span class="hljs-comment">//直接运行</span><br>                    &#125;);<br></code></pre></div></td></tr></table></figure><p>接着我们来看线程创建工厂，我们可以自己决定如何创建新的线程：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>,<br>                    <span class="hljs-number">3</span>, TimeUnit.SECONDS,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;我的自定义线程-&quot;</span>+counter++);<br>                        &#125;<br>                    &#125;);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        executor.execute(() -&gt; System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 开始执行！&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里传入的Runnable对象就是我们提交的任务，可以看到需要我们返回一个Thread对象，其实就是线程池创建线程的过程，而如何创建这个对象，以及它的一些属性，就都由我们来决定。</p><p>各位有没有想过这样一个情况，如果我们的任务在运行过程中出现异常了，那么是不是会导致线程池中的线程被销毁呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,   <span class="hljs-comment">//最大容量和核心容量锁定为1</span><br>            <span class="hljs-number">0</span>, TimeUnit.MILLISECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;());<br>    executor.execute(() -&gt; &#123;<br>        System.out.println(Thread.currentThread().getName());<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;我是异常！&quot;</span>);<br>    &#125;);<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    executor.execute(() -&gt; &#123;<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，出现异常之后，再次提交新的任务，执行的线程是一个新的线程了。</p><p>除了我们自己创建线程池之外，官方也提供了很多的线程池定义，我们可以使用<code>Executors</code>工具类来快速创建线程池：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);   <span class="hljs-comment">//直接创建一个固定容量的线程池</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到它的内部实现为：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                  <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里直接将最大线程和核心线程数量设定为一样的，并且等待时间为0，因为压根不需要，并且采用的是一个无界的LinkedBlockingQueue作为等待队列。</p><p>使用newSingleThreadExecutor来创建只有一个线程的线程池：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>    <span class="hljs-comment">//创建一个只有一个线程的线程池</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>原理如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到这里并不是直接创建的一个ThreadPoolExecutor对象，而是套了一层FinalizableDelegatedExecutorService，那么这个又是什么东西呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DelegatedExecutorService</span> &#123;<br>    FinalizableDelegatedExecutorService(ExecutorService executor) &#123;<br>        <span class="hljs-built_in">super</span>(executor);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">//在GC时，会执行finalize方法，此方法中会关闭掉线程池，释放资源</span><br>        <span class="hljs-built_in">super</span>.shutdown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegatedExecutorService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExecutorService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ExecutorService e;    <span class="hljs-comment">//被委派对象</span><br>    DelegatedExecutorService(ExecutorService executor) &#123; e = executor; &#125;   <span class="hljs-comment">//实际上所以的操作都是让委派对象执行的，有点像代理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123; e.execute(command); &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123; e.shutdown(); &#125;<br>    <span class="hljs-keyword">public</span> List&lt;Runnable&gt; <span class="hljs-title function_">shutdownNow</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> e.shutdownNow(); &#125;<br></code></pre></div></td></tr></table></figure><p>所以，下面两种写法的区别在于：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor1</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor2</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>前者实际上是被代理了，我们没办法直接修改前者的相关属性，显然使用前者创建只有一个线程的线程池更加专业和安全（可以防止属性被修改）一些。</p><p>最后我们来看<code>newCachedThreadPool</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>    <span class="hljs-comment">//它是一个会根据需要无限制创建新线程的线程池</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们来看看它的实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                  <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，核心线程数为0，那么也就是说所有的线程都是<code>非核心线程</code>，也就是说线程空闲时间超过1秒钟，一律销毁。但是它的最大容量是<code>Integer.MAX_VALUE</code>，也就是说，它可以无限制地增长下去，所以这玩意一定要慎用。</p><h3 id="执行带返回值的任务">执行带返回值的任务</h3><p>一个多线程任务不仅仅可以是void无返回值任务，比如我们现在需要执行一个任务，但是我们需要在任务执行之后得到一个结果，这个时候怎么办呢？</p><p>这里我们就可以使用到Future了，它可以返回任务的计算结果，我们可以通过它来获取任务的结果以及任务当前是否完成：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();   <span class="hljs-comment">//直接用Executors创建，方便就完事了</span><br>    Future&lt;String&gt; future = executor.submit(() -&gt; <span class="hljs-string">&quot;我是字符串!&quot;</span>);     <span class="hljs-comment">//使用submit提交任务，会返回一个Future对象，注意提交的对象可以是Runable也可以是Callable，这里使用的是Callable能够自定义返回值</span><br>    System.out.println(future.get());    <span class="hljs-comment">//如果任务未完成，get会被阻塞，任务完成返回Callable执行结果返回值</span><br>    executor.shutdown();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当然结果也可以一开始就定义好，然后等待Runnable执行完之后再返回：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>    Future&lt;String&gt; future = executor.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;我是字符串！&quot;</span>);<br>    System.out.println(future.get());<br>    executor.shutdown();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>还可以通过传入FutureTask对象的方式：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>    FutureTask&lt;String&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(() -&gt; <span class="hljs-string">&quot;我是字符串！&quot;</span>);<br>    service.submit(task);<br>    System.out.println(task.get());<br>    executor.shutdown();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以还通过Future对象获取当前任务的一些状态：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>    Future&lt;String&gt; future = executor.submit(() -&gt; <span class="hljs-string">&quot;都看到这里了，不赏UP主一个一键三连吗？&quot;</span>);<br>    System.out.println(future.get());<br>    System.out.println(<span class="hljs-string">&quot;任务是否执行完成：&quot;</span>+future.isDone());<br>    System.out.println(<span class="hljs-string">&quot;任务是否被取消：&quot;</span>+future.isCancelled());<br>    executor.shutdown();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们来试试看在任务执行途中取消任务：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>    Future&lt;String&gt; future = executor.submit(() -&gt; &#123;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这次一定！&quot;</span>;<br>    &#125;);<br>    System.out.println(future.cancel(<span class="hljs-literal">true</span>));<br>    System.out.println(future.isCancelled());<br>    executor.shutdown();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="执行定时任务">执行定时任务</h3><p>既然线程池怎么强大，那么线程池能不能执行定时任务呢？我们之前如果需要执行一个定时任务，那么肯定会用到Timer和TimerTask，但是它只会创建一个线程处理我们的定时任务，无法实现多线程调度，并且它无法处理异常情况一旦抛出未捕获异常那么会直接终止，显然我们需要一个更加强大的定时器。</p><p>JDK5之后，我们可以使用ScheduledThreadPoolExecutor来提交定时任务，它继承自ThreadPoolExecutor，并且所有的构造方法都必须要求最大线程池容量为Integer.MAX_VALUE，并且都是采用的DelayedWorkQueue作为等待队列。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize)</span> &#123;<br>    <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="hljs-number">0</span>, NANOSECONDS,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                                   ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="hljs-number">0</span>, NANOSECONDS,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>(), threadFactory);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                                   RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="hljs-number">0</span>, NANOSECONDS,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>(), handler);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                                   ThreadFactory threadFactory,</span><br><span class="hljs-params">                                   RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="hljs-number">0</span>, NANOSECONDS,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>(), threadFactory, handler);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们来测试一下它的方法，这个方法可以提交一个延时任务，只有到达指定时间之后才会开始：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>  <span class="hljs-comment">//直接设定核心线程数为1</span><br>    <span class="hljs-type">ScheduledThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//这里我们计划在3秒后执行</span><br>    executor.schedule(() -&gt; System.out.println(<span class="hljs-string">&quot;HelloWorld!&quot;</span>), <span class="hljs-number">3</span>, TimeUnit.SECONDS);<br><br>    executor.shutdown();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们也可以像之前一样，传入一个Callable对象，用于接收返回值：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">ScheduledThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span>(<span class="hljs-number">2</span>);<br>  <span class="hljs-comment">//这里使用ScheduledFuture</span><br>    ScheduledFuture&lt;String&gt; future = executor.schedule(() -&gt; <span class="hljs-string">&quot;????&quot;</span>, <span class="hljs-number">3</span>, TimeUnit.SECONDS);<br>    System.out.println(<span class="hljs-string">&quot;任务剩余等待时间：&quot;</span>+future.getDelay(TimeUnit.MILLISECONDS) / <span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;任务执行结果：&quot;</span>+future.get());<br>    executor.shutdown();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到<code>schedule</code>方法返回了一个ScheduledFuture对象，和Future一样，它也支持返回值的获取、包括对任务的取消同时还支持获取剩余等待时间。</p><p>那么如果我们希望按照一定的频率不断执行任务呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">ScheduledThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span>(<span class="hljs-number">2</span>);<br>    executor.scheduleAtFixedRate(() -&gt; System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>),<br>            <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>  <span class="hljs-comment">//三秒钟延迟开始，之后每隔一秒钟执行一次</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>Executors也为我们预置了newScheduledThreadPool方法用于创建线程池：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br>    service.schedule(() -&gt; System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>), <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="线程池实现原理">线程池实现原理</h3><p>前面我们了解了线程池的使用，那么接着我们来看看它的详细实现过程，结构稍微有点复杂，坐稳，发车了。</p><p>这里需要首先介绍一下ctl变量：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//这个变量比较关键，用到了原子AtomicInteger，用于同时保存线程池运行状态和线程数量（使用原子类是为了保证原子性）</span><br><span class="hljs-comment">//它是通过拆分32个bit位来保存数据的，前3位保存状态，后29位保存工作线程数量（那要是工作线程数量29位装不下不就GG？）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ctl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COUNT_BITS</span> <span class="hljs-operator">=</span> Integer.SIZE - <span class="hljs-number">3</span>;    <span class="hljs-comment">//29位，线程数量位</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CAPACITY</span>   <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS) - <span class="hljs-number">1</span>;   <span class="hljs-comment">//计算得出最大容量（1左移29位，最大容量为2的29次方-1）</span><br><br><span class="hljs-comment">// 所有的运行状态，注意都是只占用前3位，不会占用后29位</span><br><span class="hljs-comment">// 接收新任务，并等待执行队列中的任务</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RUNNING</span>    <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;   <span class="hljs-comment">//111 | 0000... (后29数量位，下同)</span><br><span class="hljs-comment">// 不接收新任务，但是依然等待执行队列中的任务</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHUTDOWN</span>   <span class="hljs-operator">=</span>  <span class="hljs-number">0</span> &lt;&lt; COUNT_BITS;   <span class="hljs-comment">//000 | 数量位</span><br><span class="hljs-comment">// 不接收新任务，也不执行队列中的任务，并且还要中断正在执行中的任务</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">STOP</span>       <span class="hljs-operator">=</span>  <span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;   <span class="hljs-comment">//001 | 数量位</span><br><span class="hljs-comment">// 所有的任务都已结束，线程数量为0，即将完全关闭</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TIDYING</span>    <span class="hljs-operator">=</span>  <span class="hljs-number">2</span> &lt;&lt; COUNT_BITS;   <span class="hljs-comment">//010 | 数量位</span><br><span class="hljs-comment">// 完全关闭</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TERMINATED</span> <span class="hljs-operator">=</span>  <span class="hljs-number">3</span> &lt;&lt; COUNT_BITS;   <span class="hljs-comment">//011 | 数量位</span><br><br><span class="hljs-comment">// 封装和解析ctl变量的一些方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">runStateOf</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>     &#123; <span class="hljs-keyword">return</span> c &amp; ~CAPACITY; &#125;   <span class="hljs-comment">//对CAPACITY取反就是后29位全部为0，前三位全部为1，接着与c进行与运算，这样就可以只得到前三位的结果了，所以这里是取运行状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">workerCountOf</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>  &#123; <span class="hljs-keyword">return</span> c &amp; CAPACITY; &#125;<br><span class="hljs-comment">//同上，这里是为了得到后29位的结果，所以这里是取线程数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ctlOf</span><span class="hljs-params">(<span class="hljs-type">int</span> rs, <span class="hljs-type">int</span> wc)</span> &#123; <span class="hljs-keyword">return</span> rs | wc; &#125;   <br><span class="hljs-comment">// 比如上面的RUNNING, 0，进行与运算之后：</span><br><span class="hljs-comment">// 111 | 0000000000000000000000000</span><br></code></pre></div></td></tr></table></figure><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24egy1h0adhrjujsj21o605gwes.jpg"alt="image-20220315104707467" /></p><p>我们先从最简单的入手，看看在调用<code>execute</code>方法之后，线程池会做些什么：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//这个就是我们指定的阻塞队列</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;<br><br><span class="hljs-comment">//再次提醒，这里没加锁！！该有什么意识不用我说了吧，所以说ctl才会使用原子类。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();     <span class="hljs-comment">//如果任务为null，那执行个寂寞，所以说直接空指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();      <span class="hljs-comment">//获取ctl的值，一会要读取信息的</span><br>    <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;   <span class="hljs-comment">//判断工作线程数量是否小于核心线程数</span><br>        <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-literal">true</span>))    <span class="hljs-comment">//如果是，那不管三七二十一，直接加新的线程执行，然后返回即可</span><br>            <span class="hljs-keyword">return</span>;<br>        c = ctl.get();    <span class="hljs-comment">//如果线程添加失败（有可能其他线程也在对线程池进行操作），那就更新一下c的值</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;   <span class="hljs-comment">//继续判断，如果当前线程池是运行状态，那就尝试向阻塞队列中添加一个新的等待任务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">recheck</span> <span class="hljs-operator">=</span> ctl.get();   <span class="hljs-comment">//再次获取ctl的值</span><br>        <span class="hljs-keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))   <span class="hljs-comment">//这里是再次确认当前线程池是否关闭，如果添加等待任务后线程池关闭了，那就把刚刚加进去任务的又拿出来</span><br>            reject(command);   <span class="hljs-comment">//然后直接拒绝当前任务的提交（会根据我们的拒绝策略决定如何进行拒绝操作）</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)   <span class="hljs-comment">//如果这个时候线程池依然在运行状态，那么就检查一下当前工作线程数是否为0，如果是那就直接添加新线程执行</span><br>            addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);   <span class="hljs-comment">//添加一个新的非核心线程</span><br>      <span class="hljs-comment">//其他情况就啥也不用做了</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-literal">false</span>))   <span class="hljs-comment">//这种情况要么就是线程池没有运行，要么就是队列满了，这里再尝试添加一个非核心线程碰碰运气</span><br>        reject(command);   <span class="hljs-comment">//要是实在不行就拒绝</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>是不是感觉思路还挺清晰的，我们接着来看<code>addWorker</code>是怎么创建和执行任务的，又是一大堆代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-type">boolean</span> core)</span> &#123;<br>  <span class="hljs-comment">//这里给最外层循环打了个标签，方便一会的跳转操作</span><br>    retry:<br>    <span class="hljs-keyword">for</span> (;;) &#123;    <span class="hljs-comment">//无限循环，老套路了，注意这里全程没加锁</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();     <span class="hljs-comment">//获取ctl值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);    <span class="hljs-comment">//解析当前的运行状态</span><br><br>        <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;   <span class="hljs-comment">//判断线程池是否不是处于运行状态</span><br>            ! (rs == SHUTDOWN &amp;&amp;   <span class="hljs-comment">//如果不是运行状态，判断线程是SHUTDOWN状态并、任务不为null、等待队列不为空，只要有其中一者不满足，直接返回false，添加失败</span><br>               firstTask == <span class="hljs-literal">null</span> &amp;&amp;   <br>               ! workQueue.isEmpty()))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (;;) &#123;   <span class="hljs-comment">//内层又一轮无限循环，这个循环是为了将线程计数增加，然后才可以真正地添加一个新的线程</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);    <span class="hljs-comment">//解析当前的工作线程数量</span><br>            <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY ||<br>                wc &gt;= (core ? corePoolSize : maximumPoolSize))    <span class="hljs-comment">//判断一下还装得下不，如果装得下，看看是核心线程还是非核心线程，如果是核心线程，不能大于核心线程数的限制，如果是非核心线程，不能大于最大线程数限制</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))    <span class="hljs-comment">//CAS自增线程计数，如果增加成功，任务完成，直接跳出继续</span><br>                <span class="hljs-keyword">break</span> retry;    <span class="hljs-comment">//注意这里要直接跳出最外层循环，所以用到了标签（类似于goto语句）</span><br>            c = ctl.get();  <span class="hljs-comment">// 如果CAS失败，更新一下c的值</span><br>            <span class="hljs-keyword">if</span> (runStateOf(c) != rs)    <span class="hljs-comment">//如果CAS失败的原因是因为线程池状态和一开始的不一样了，那么就重新从外层循环再来一次</span><br>                <span class="hljs-keyword">continue</span> retry;    <span class="hljs-comment">//注意这里要直接从最外层循环继续，所以用到了标签（类似于goto语句）</span><br>            <span class="hljs-comment">// 如果是其他原因导致的CAS失败，那只可能是其他线程同时在自增，所以重新再来一次内层循环</span><br>        &#125;<br>    &#125;<br><br>  <span class="hljs-comment">//好了，线程计数自增也完了，接着就是添加新的工作线程了</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerStarted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//工作线程是否已启动</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerAdded</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;    <span class="hljs-comment">//工作线程是否已添加</span><br>    <span class="hljs-type">Worker</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;     <span class="hljs-comment">//暂时理解为工作线程，别急，我们之后会解读Worker类</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(firstTask);     <span class="hljs-comment">//创建新的工作线程，传入我们提交的任务</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.thread;    <span class="hljs-comment">//拿到工作线程中封装的Thread对象</span><br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;      <span class="hljs-comment">//如果线程不为null，那就可以安排干活了</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;      <span class="hljs-comment">//又是ReentrantLock加锁环节，这里开始就是只有一个线程能进入了</span><br>            mainLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// Recheck while holding lock.</span><br>                <span class="hljs-comment">// Back out on ThreadFactory failure or if</span><br>                <span class="hljs-comment">// shut down before lock acquired.</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(ctl.get());    <span class="hljs-comment">//获取当前线程的运行状态</span><br><br>                <span class="hljs-keyword">if</span> (rs &lt; SHUTDOWN ||<br>                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-literal">null</span>)) &#123;    <span class="hljs-comment">//只有当前线程池是正在运行状态，或是SHUTDOWN状态且firstTask为空，那么就继续</span><br>                    <span class="hljs-keyword">if</span> (t.isAlive()) <span class="hljs-comment">// 检查一下线程是否正在运行状态</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();   <span class="hljs-comment">//如果是那肯定是不能运行我们的任务的</span><br>                    workers.add(w);    <span class="hljs-comment">//直接将新创建的Work丢进 workers 集合中</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> workers.size();   <span class="hljs-comment">//看看当前workers的大小</span><br>                    <span class="hljs-keyword">if</span> (s &gt; largestPoolSize)   <span class="hljs-comment">//这里是记录线程池运行以来，历史上的最多线程数</span><br>                        largestPoolSize = s;<br>                    workerAdded = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//工作线程已添加</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                mainLock.unlock();   <span class="hljs-comment">//解锁</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (workerAdded) &#123;<br>                t.start();   <span class="hljs-comment">//启动线程</span><br>                workerStarted = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//工作线程已启动</span><br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (! workerStarted)    <span class="hljs-comment">//如果线程在上面的启动过程中失败了</span><br>            addWorkerFailed(w);    <span class="hljs-comment">//将w移出workers并将计数器-1，最后如果线程池是终止状态，会尝试加速终止线程池</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> workerStarted;   <span class="hljs-comment">//返回是否成功</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们来看Worker类是如何实现的，它继承自AbstractQueuedSynchronizer，时隔两章，居然再次遇到AQS，那也就是说，它本身就是一把锁：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">//用来干活的线程</span><br>    <span class="hljs-keyword">final</span> Thread thread;<br>    <span class="hljs-comment">//要执行的第一个任务，构造时就确定了的</span><br>    Runnable firstTask;<br>    <span class="hljs-comment">//干活数量计数器，也就是这个线程完成了多少个任务</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> completedTasks;<br><br>    Worker(Runnable firstTask) &#123;<br>        setState(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 执行Task之前不让中断，将AQS的state设定为-1</span><br>        <span class="hljs-built_in">this</span>.firstTask = firstTask;<br>        <span class="hljs-built_in">this</span>.thread = getThreadFactory().newThread(<span class="hljs-built_in">this</span>);   <span class="hljs-comment">//通过预定义或是我们自定义的线程工厂创建线程</span><br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        runWorker(<span class="hljs-built_in">this</span>);   <span class="hljs-comment">//真正开始干活，包括当前活干完了又要等新的活来，就从这里开始，一会详细介绍</span><br>    &#125;<br><br>   <span class="hljs-comment">//0就是没加锁，1就是已加锁</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getState() != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后我们来看看一个Worker到底是怎么在进行任务的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runWorker</span><span class="hljs-params">(Worker w)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> Thread.currentThread();   <span class="hljs-comment">//获取当前线程</span><br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> w.firstTask;    <span class="hljs-comment">//取出要执行的任务</span><br>    w.firstTask = <span class="hljs-literal">null</span>;   <span class="hljs-comment">//然后把Worker中的任务设定为null</span><br>    w.unlock(); <span class="hljs-comment">// 因为一开始为-1，这里是通过unlock操作将其修改回0，只有state大于等于0才能响应中断</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">completedAbruptly</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//只要任务不为null，或是任务为空但是可以从等待队列中取出任务不为空，那么就开始执行这个任务，注意这里是无限循环，也就是说如果当前没有任务了，那么会在getTask方法中卡住，因为要从阻塞队列中等着取任务</span><br>        <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = getTask()) != <span class="hljs-literal">null</span>) &#123;<br>            w.lock();    <span class="hljs-comment">//对当前Worker加锁，这里其实并不是防其他线程，而是在shutdown时保护此任务的运行</span><br>            <br>          <span class="hljs-comment">//由于线程池在STOP状态及以上会禁止新线程加入并且中断正在进行的线程</span><br>            <span class="hljs-keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||   <span class="hljs-comment">//只要线程池是STOP及以上的状态，那肯定是不能开始新任务的</span><br>                 (Thread.interrupted() &amp;&amp;     <span class="hljs-comment">//线程是否已经被打上中断标记并且线程一定是STOP及以上</span><br>                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;<br>                !wt.isInterrupted())   <span class="hljs-comment">//再次确保线程被没有打上中断标记</span><br>                wt.interrupt();     <span class="hljs-comment">//打中断标记</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                beforeExecute(wt, task);  <span class="hljs-comment">//开始之前的准备工作，这里暂时没有实现</span><br>                <span class="hljs-type">Throwable</span> <span class="hljs-variable">thrown</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    task.run();    <span class="hljs-comment">//OK，开始执行任务</span><br>                &#125; <span class="hljs-keyword">catch</span> (RuntimeException x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Error x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(x);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    afterExecute(task, thrown);    <span class="hljs-comment">//执行之后的工作，也没实现</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                task = <span class="hljs-literal">null</span>;    <span class="hljs-comment">//任务已完成，不需要了</span><br>                w.completedTasks++;   <span class="hljs-comment">//任务完成数++</span><br>                w.unlock();    <span class="hljs-comment">//解锁</span><br>            &#125;<br>        &#125;<br>        completedAbruptly = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">//如果能走到这一步，那说明上面的循环肯定是跳出了，也就是说这个Worker可以丢弃了</span><br>      <span class="hljs-comment">//所以这里会直接将 Worker 从 workers 里删除掉</span><br>        processWorkerExit(w, completedAbruptly);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>那么它是怎么从阻塞队列里面获取任务的呢：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Runnable <span class="hljs-title function_">getTask</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">timedOut</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Did the last poll() time out?</span><br><br>    <span class="hljs-keyword">for</span> (;;) &#123;    <span class="hljs-comment">//无限循环获取</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();   <span class="hljs-comment">//获取ctl </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);      <span class="hljs-comment">//解析线程池运行状态</span><br><br>        <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;      <span class="hljs-comment">//判断是不是没有必要再执行等待队列中的任务了，也就是处于关闭线程池的状态了</span><br>            decrementWorkerCount();     <span class="hljs-comment">//直接减少一个工作线程数量</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    <span class="hljs-comment">//返回null，这样上面的runWorker就直接结束了，下同</span><br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);   <span class="hljs-comment">//如果线程池运行正常，那就获取当前的工作线程数量</span><br><br>        <span class="hljs-comment">// Are workers subject to culling?</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">timed</span> <span class="hljs-operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;   <span class="hljs-comment">//如果线程数大于核心线程数或是允许核心线程等待超时，那么就标记为可超时的</span><br><br>      <span class="hljs-comment">//超时或maximumPoolSize在运行期间被修改了，并且线程数大于1或等待队列为空，那也是不能获取到任务的</span><br>        <span class="hljs-keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))<br>            &amp;&amp; (wc &gt; <span class="hljs-number">1</span> || workQueue.isEmpty())) &#123;<br>            <span class="hljs-keyword">if</span> (compareAndDecrementWorkerCount(c))   <span class="hljs-comment">//如果CAS减少工作线程成功</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    <span class="hljs-comment">//返回null</span><br>            <span class="hljs-keyword">continue</span>;   <span class="hljs-comment">//否则开下一轮循环</span><br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> timed ?<br>                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :   <span class="hljs-comment">//如果可超时，那么最多等到超时时间</span><br>                workQueue.take();    <span class="hljs-comment">//如果不可超时，那就一直等着拿任务</span><br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>)    <span class="hljs-comment">//如果成功拿到任务，ok，返回</span><br>                <span class="hljs-keyword">return</span> r;<br>            timedOut = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//否则就是超时了，下一轮循环将直接返回null</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException retry) &#123;<br>            timedOut = <span class="hljs-literal">false</span>;<br>        &#125;<br>      <span class="hljs-comment">//开下一轮循环吧</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>虽然我们的源码解读越来越深，但是只要各位的思路不断，依然是可以继续往下看的。到此，有关<code>execute()</code>方法的源码解读，就先到这里。</p><p>接着我们来看当线程池关闭时会做什么事情：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//普通的shutdown会继续将等待队列中的线程执行完成后再关闭线程池</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//判断是否有权限终止</span><br>        checkShutdownAccess();<br>      <span class="hljs-comment">//CAS将线程池运行状态改为SHUTDOWN状态，还算比较温柔，详细过程看下面</span><br>        advanceRunState(SHUTDOWN);<br>       <span class="hljs-comment">//让闲着的线程（比如正在等新的任务）中断，但是并不会影响正在运行的线程，详细过程请看下面</span><br>        interruptIdleWorkers();<br>        onShutdown(); <span class="hljs-comment">//给ScheduledThreadPoolExecutor提供的钩子方法，就是等ScheduledThreadPoolExecutor去实现的，当前类没有实现</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mainLock.unlock();<br>    &#125;<br>    tryTerminate();   <span class="hljs-comment">//最后尝试终止线程池</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">advanceRunState</span><span class="hljs-params">(<span class="hljs-type">int</span> targetState)</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();    <span class="hljs-comment">//获取ctl</span><br>        <span class="hljs-keyword">if</span> (runStateAtLeast(c, targetState) ||    <span class="hljs-comment">//是否大于等于指定的状态</span><br>            ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c))))   <span class="hljs-comment">//CAS设置ctl的值</span><br>            <span class="hljs-keyword">break</span>;   <span class="hljs-comment">//任意一个条件OK就可以结束了</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interruptIdleWorkers</span><span class="hljs-params">(<span class="hljs-type">boolean</span> onlyOne)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (Worker w : workers) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.thread;    <span class="hljs-comment">//拿到Worker中的线程</span><br>            <span class="hljs-keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123;   <span class="hljs-comment">//先判断一下线程是不是没有被中断然后尝试加锁，但是通过前面的runWorker()源代码我们得知，开始之后是让Worker加了锁的，所以如果线程还在执行任务，那么这里肯定会false</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    t.interrupt();    <span class="hljs-comment">//如果走到这里，那么说明线程肯定是一个闲着的线程，直接给中断吧</span><br>                &#125; <span class="hljs-keyword">catch</span> (SecurityException ignore) &#123;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    w.unlock();    <span class="hljs-comment">//解锁</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (onlyOne)   <span class="hljs-comment">//如果只针对一个Worker，那么就结束循环</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mainLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>而<code>shutdownNow()</code>方法也差不多，但是这里会更直接一些：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//shutdownNow开始后，不仅不允许新的任务到来，也不会再执行等待队列的线程，而且会终止正在执行的线程</span><br><span class="hljs-keyword">public</span> List&lt;Runnable&gt; <span class="hljs-title function_">shutdownNow</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Runnable&gt; tasks;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        checkShutdownAccess();<br>      <span class="hljs-comment">//这里就是直接设定为STOP状态了，不再像shutdown那么温柔</span><br>        advanceRunState(STOP);<br>      <span class="hljs-comment">//直接中断所有工作线程，详细过程看下面</span><br>        interruptWorkers();<br>      <span class="hljs-comment">//取出仍处于阻塞队列中的线程</span><br>        tasks = drainQueue();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mainLock.unlock();<br>    &#125;<br>    tryTerminate();<br>    <span class="hljs-keyword">return</span> tasks;   <span class="hljs-comment">//最后返回还没开始的任务</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interruptWorkers</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (Worker w : workers)   <span class="hljs-comment">//遍历所有Worker</span><br>            w.interruptIfStarted();   <span class="hljs-comment">//无差别对待，一律加中断标记</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mainLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后的最后，我们再来看看<code>tryTerminate()</code>是怎么完完全全终止掉一个线程池的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryTerminate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;     <span class="hljs-comment">//无限循环</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();    <span class="hljs-comment">//上来先获取一下ctl值</span><br>      <span class="hljs-comment">//只要是正在运行 或是 线程池基本上关闭了 或是 处于SHUTDOWN状态且工作队列不为空，那么这时还不能关闭线程池，返回</span><br>        <span class="hljs-keyword">if</span> (isRunning(c) ||<br>            runStateAtLeast(c, TIDYING) ||<br>            (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))<br>            <span class="hljs-keyword">return</span>;<br>      <br>      <span class="hljs-comment">//走到这里，要么处于SHUTDOWN状态且等待队列为空或是STOP状态</span><br>        <span class="hljs-keyword">if</span> (workerCountOf(c) != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果工作线程数不是0，这里也会中断空闲状态下的线程</span><br>            interruptIdleWorkers(ONLY_ONE);   <span class="hljs-comment">//这里最多只中断一个空闲线程，然后返回</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>      <span class="hljs-comment">//走到这里，工作线程也为空了，可以终止线程池了</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>        mainLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="hljs-number">0</span>))) &#123;   <span class="hljs-comment">//先CAS将状态设定为TIDYING表示基本终止，正在做最后的操作</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    terminated();   <span class="hljs-comment">//终止，暂时没有实现</span><br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    ctl.set(ctlOf(TERMINATED, <span class="hljs-number">0</span>));   <span class="hljs-comment">//最后将状态设定为TERMINATED，线程池结束了它年轻的生命</span><br>                    termination.signalAll();    <span class="hljs-comment">//如果有线程调用了awaitTermination方法，会等待当前线程池终止，到这里差不多就可以唤醒了</span><br>                &#125;<br>                <span class="hljs-keyword">return</span>;   <span class="hljs-comment">//结束</span><br>            &#125;<br>          <span class="hljs-comment">//注意如果CAS失败会直接进下一轮循环重新判断</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            mainLock.unlock();<br>        &#125;<br>        <span class="hljs-comment">// else retry on failed CAS</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>OK，有关线程池的实现原理，我们就暂时先介绍到这里，关于更高级的定时任务线程池，这里就不做讲解了。</p><hr /><h2 id="并发工具类">并发工具类</h2><h3 id="计数器锁-countdownlatch">计数器锁 CountDownLatch</h3><p>多任务同步神器。它允许一个或多个线程，等待其他线程完成工作，比如现在我们有这样的一个需求：</p><ul><li>有20个计算任务，我们需要先将这些任务的结果全部计算出来，每个任务的执行时间未知</li><li>当所有任务结束之后，立即整合统计最终结果</li></ul><p>要实现这个需求，那么有一个很麻烦的地方，我们不知道任务到底什么时候执行完毕，那么可否将最终统计延迟一定时间进行呢？但是最终统计无论延迟多久进行，要么不能保证所有任务都完成，要么可能所有任务都完成了而这里还在等。</p><p>所以说，我们需要一个能够实现子任务同步的工具。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">20</span>);  <span class="hljs-comment">//创建一个初始值为10的计数器锁</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep((<span class="hljs-type">long</span>) (<span class="hljs-number">2000</span> * <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble()));<br>                System.out.println(<span class="hljs-string">&quot;子任务&quot;</span>+ finalI +<span class="hljs-string">&quot;执行完成！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            latch.countDown();   <span class="hljs-comment">//每执行一次计数器都会-1</span><br>        &#125;).start();<br>    &#125;<br><br>    <span class="hljs-comment">//开始等待所有的线程完成，当计数器为0时，恢复运行</span><br>    latch.await();   <span class="hljs-comment">//这个操作可以同时被多个线程执行，一起等待，这里只演示了一个</span><br>    System.out.println(<span class="hljs-string">&quot;所有子任务都完成！任务完成！！！&quot;</span>);<br>  <br>  <span class="hljs-comment">//注意这个计数器只能使用一次，用完只能重新创一个，没有重置的说法</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们在调用<code>await()</code>方法之后，实际上就是一个等待计数器衰减为0的过程，而进行自减操作则由各个子线程来完成，当子线程完成工作后，那么就将计数器-1，所有的子线程完成之后，计数器为0，结束等待。</p><p>那么它是如何实现的呢？实现 原理非常简单：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatch</span> &#123;<br>   <span class="hljs-comment">//同样是通过内部类实现AbstractQueuedSynchronizer</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <br>        Sync(<span class="hljs-type">int</span> count) &#123;   <span class="hljs-comment">//这里直接使用AQS的state作为计数器（可见state能被玩出各种花样），也就是说一开始就加了count把共享锁，当线程调用countdown时，就解一层锁</span><br>            setState(count);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState();<br>        &#125;<br><br>      <span class="hljs-comment">//采用共享锁机制，因为可以被不同的线程countdown，所以实现的tryAcquireShared和tryReleaseShared</span><br>      <span class="hljs-comment">//获取这把共享锁其实就是去等待state被其他线程减到0</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-comment">// 每次执行都会将state值-1，直到为0</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//如果已经是0了，那就false</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c-<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))   <span class="hljs-comment">//CAS设置state值，失败直接下一轮循环</span><br>                    <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;    <span class="hljs-comment">//返回c-1之后，是不是0，如果是那就true，否则false，也就是说只有刚好减到0的时候才会返回true</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CountDownLatch</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;count &lt; 0&quot;</span>);  <span class="hljs-comment">//count那肯定不能小于0啊</span><br>        <span class="hljs-built_in">this</span>.sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sync</span>(count);   <span class="hljs-comment">//构造Sync对象，将count作为state初始值</span><br>    &#125;<br><br>   <span class="hljs-comment">//通过acquireSharedInterruptibly方法获取共享锁，但是如果state不为0，那么会被持续阻塞，详细原理下面讲</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//同上，但是会超时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>    &#125;<br><br>   <span class="hljs-comment">//countDown其实就是解锁一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countDown</span><span class="hljs-params">()</span> &#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//获取当前的计数，也就是AQS中state的值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getCount();<br>    &#125;<br><br>    <span class="hljs-comment">//这个就不说了</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot;[Count = &quot;</span> + sync.getCount() + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在深入讲解之前，我们先大致了解一下CountDownLatch的基本实现思路：</p><ul><li>利用共享锁实现</li><li>在一开始的时候就是已经上了count层锁的状态，也就是<code>state = count</code></li><li><code>await()</code>就是加共享锁，但是必须<code>state</code>为<code>0</code>才能加锁成功，否则按照AQS的机制，会进入等待队列阻塞，加锁成功后结束阻塞</li><li><code>countDown()</code>就是解<code>1</code>层锁，也就是靠这个方法一点一点把<code>state</code>的值减到<code>0</code></li></ul><p>由于我们前面只对独占锁进行了讲解，没有对共享锁进行讲解，这里还是稍微提一下它：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)   <span class="hljs-comment">//上来就调用tryAcquireShared尝试以共享模式获取锁，小于0则失败，上面判断的是state==0返回1，否则-1，也就是说如果计数器不为0，那么这里会判断成功</span><br>        doAcquireShared(arg);   <span class="hljs-comment">//计数器不为0的时候，按照它的机制，那么会阻塞，所以我们来看看doAcquireShared中是怎么进行阻塞的</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addWaiter(Node.SHARED);   <span class="hljs-comment">//向等待队列中添加一个新的共享模式结点</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;    <span class="hljs-comment">//无限循环</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();   <span class="hljs-comment">//获取当前节点的前驱的结点</span><br>            <span class="hljs-keyword">if</span> (p == head) &#123;    <span class="hljs-comment">//如果p就是头结点，那么说明当前结点就是第一个等待节点</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> tryAcquireShared(arg);    <span class="hljs-comment">//会再次尝试获取共享锁</span><br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;      <span class="hljs-comment">//要是获取成功</span><br>                    setHeadAndPropagate(node, r);   <span class="hljs-comment">//那么就将当前节点设定为新的头结点，并且会继续唤醒后继节点</span><br>                    p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                    <span class="hljs-keyword">if</span> (interrupted)<br>                        selfInterrupt();<br>                    failed = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;   <span class="hljs-comment">//和独占模式下一样的操作，这里不多说了</span><br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);   <span class="hljs-comment">//如果最后都还是没获取到，那么就cancel</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//其实感觉大体上和独占模式的获取有点像，但是它多了个传播机制，会继续唤醒后续节点</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head; <span class="hljs-comment">// 取出头结点并将当前节点设定为新的头结点</span><br>    setHead(node);<br>    <br>  <span class="hljs-comment">//因为一个线程成功获取到共享锁之后，有可能剩下的等待中的节点也有机会拿到共享锁</span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>        (h = head) == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//如果propagate大于0（表示共享锁还能继续获取）或是h.waitStatus &lt; 0，这是由于在其他线程释放共享锁时，doReleaseShared会将状态设定为PROPAGATE表示可以传播唤醒，后面会讲</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())<br>            doReleaseShared();   <span class="hljs-comment">//继续唤醒下一个等待节点</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们接着来看，它的countdown过程：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;   <span class="hljs-comment">//直接尝试释放锁，如果成功返回true（在CountDownLatch中只有state减到0的那一次，会返回true）</span><br>        doReleaseShared();    <span class="hljs-comment">//这里也会调用doReleaseShared继续唤醒后面的结点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//其他情况false</span><br>  <span class="hljs-comment">//不过这里countdown并没有用到这些返回值</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doReleaseShared</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;   <span class="hljs-comment">//无限循环</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;    <span class="hljs-comment">//获取头结点</span><br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h != tail) &#123;    <span class="hljs-comment">//如果头结点不为空且头结点不是尾结点，那么说明等待队列中存在节点</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> h.waitStatus;    <span class="hljs-comment">//取一下头结点的等待状态</span><br>            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) &#123;    <span class="hljs-comment">//如果是SIGNAL，那么就CAS将头结点的状态设定为初始值</span><br>                <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">continue</span>;            <span class="hljs-comment">//失败就开下一轮循环重来</span><br>                unparkSuccessor(h);    <span class="hljs-comment">//和独占模式一样，当锁被释放，都会唤醒头结点的后继节点，doAcquireShared循环继续，如果成功，那么根据setHeadAndPropagate，又会继续调用当前方法，不断地传播下去，让后面的线程一个一个地获取到共享锁，直到不能再继续获取为止</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp;<br>                     !compareAndSetWaitStatus(h, <span class="hljs-number">0</span>, Node.PROPAGATE))   <span class="hljs-comment">//如果等待状态是默认值0，那么说明后继节点已经被唤醒，直接将状态设定为PROPAGATE，它代表在后续获取资源的时候，够向后面传播</span><br>                <span class="hljs-keyword">continue</span>;                <span class="hljs-comment">//失败就开下一轮循环重来</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (h == head)                   <span class="hljs-comment">// 如果头结点发生了变化，不会break，而是继续循环，否则直接break退出</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可能看完之后还是有点乱，我们再来理一下：</p><ul><li>共享锁是线程共享的，同一时刻能有多个线程拥有共享锁。</li><li>如果一个线程刚获取了共享锁，那么在其之后等待的线程也很有可能能够获取到锁，所以得传播下去继续尝试唤醒后面的结点，不像独占锁，独占的压根不需要考虑这些。</li><li>如果一个线程刚释放了锁，不管是独占锁还是共享锁，都需要唤醒后续等待结点的线程。</li></ul><p>回到CountDownLatch，再结合整个AQS共享锁的实现机制，进行一次完整的推导，看明白还是比较简单的。</p><h3 id="循环屏障-cyclicbarrier">循环屏障 CyclicBarrier</h3><p>好比一场游戏，我们必须等待房间内人数足够之后才能开始，并且游戏开始之后玩家需要同时进入游戏以保证公平性。</p><p>假如现在游戏房间内一共5人，但是游戏开始需要10人，所以我们必须等待剩下5人到来之后才能开始游戏，并且保证游戏开始时所有玩家都是同时进入，那么怎么实现这个功能呢？我们可以使用CyclicBarrier，翻译过来就是循环屏障，那么这个屏障正式为了解决这个问题而出现的。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">10</span>,   <span class="hljs-comment">//创建一个初始值为10的循环屏障</span><br>                () -&gt; System.out.println(<span class="hljs-string">&quot;飞机马上就要起飞了，各位特种兵请准备！&quot;</span>));   <span class="hljs-comment">//人等够之后执行的任务</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep((<span class="hljs-type">long</span>) (<span class="hljs-number">2000</span> * <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble()));<br>                System.out.println(<span class="hljs-string">&quot;玩家 &quot;</span>+ finalI +<span class="hljs-string">&quot; 进入房间进行等待... (&quot;</span>+barrier.getNumberWaiting()+<span class="hljs-string">&quot;/10)&quot;</span>);<br><br>                barrier.await();    <span class="hljs-comment">//调用await方法进行等待，直到等待的线程足够多为止</span><br><br>                <span class="hljs-comment">//开始游戏，所有玩家一起进入游戏</span><br>                System.out.println(<span class="hljs-string">&quot;玩家 &quot;</span>+ finalI +<span class="hljs-string">&quot; 进入游戏！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，循环屏障会不断阻挡线程，直到被阻挡的线程足够多时，才能一起冲破屏障，并且在冲破屏障时，我们也可以做一些其他的任务。这和人多力量大的道理是差不多的，当人足够多时方能冲破阻碍，到达美好的明天。当然，屏障由于是可循环的，所以它在被冲破后，会重新开始计数，继续阻挡后续的线程：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">//创建一个初始值为5的循环屏障</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;   <span class="hljs-comment">//创建5个线程</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep((<span class="hljs-type">long</span>) (<span class="hljs-number">2000</span> * <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextDouble()));<br>                System.out.println(<span class="hljs-string">&quot;玩家 &quot;</span>+ finalI +<span class="hljs-string">&quot; 进入房间进行等待... (&quot;</span>+barrier.getNumberWaiting()+<span class="hljs-string">&quot;/5)&quot;</span>);<br><br>                barrier.await();    <span class="hljs-comment">//调用await方法进行等待，直到等待线程到达5才会一起继续执行</span><br><br>                <span class="hljs-comment">//人数到齐之后，可以开始游戏了</span><br>                System.out.println(<span class="hljs-string">&quot;玩家 &quot;</span>+ finalI +<span class="hljs-string">&quot; 进入游戏！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，通过使用循环屏障，我们可以对线程进行一波一波地放行，每一波都放行5个线程，当然除了自动重置之外，我们也可以调用<code>reset()</code>方法来手动进行重置操作，同样会重新计数：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">//创建一个初始值为10的计数器锁</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                barrier.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br><br>    Thread.sleep(<span class="hljs-number">500</span>);   <span class="hljs-comment">//等一下上面的线程开始运行</span><br>    System.out.println(<span class="hljs-string">&quot;当前屏障前的等待线程数：&quot;</span>+barrier.getNumberWaiting());<br><br>    barrier.reset();<br>    System.out.println(<span class="hljs-string">&quot;重置后屏障前的等待线程数：&quot;</span>+barrier.getNumberWaiting());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，在调用<code>reset()</code>之后，处于等待状态下的线程，全部被中断并且抛出BrokenBarrierException异常，循环屏障等待线程数归零。那么要是处于等待状态下的线程被中断了呢？屏障的线程等待数量会不会自动减少？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            barrier.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>    t.start();<br>    t.interrupt();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，当<code>await()</code>状态下的线程被中断，那么屏障会直接变成损坏状态，一旦屏障损坏，那么这一轮就无法再做任何等待操作了。也就是说，本来大家计划一起合力冲破屏障，结果有一个人摆烂中途退出了，那么所有人的努力都前功尽弃，这一轮的屏障也不可能再被冲破了（所以CyclicBarrier告诉我们，不要做那个害群之马，要相信你的团队，不然没有好果汁吃），只能进行<code>reset()</code>重置操作进行重置才能恢复正常。</p><p>乍一看，怎么感觉和之前讲的CountDownLatch有点像，好了，这里就得区分一下了，千万别搞混：</p><ul><li>CountDownLatch：<ol type="1"><li>它只能使用一次，是一个一次性的工具</li><li>它是一个或多个线程用于等待其他线程完成的同步工具</li></ol></li><li>CyclicBarrier<ol type="1"><li>它可以反复使用，允许自动或手动重置计数</li><li>它是让一定数量的线程在同一时间开始运行的同步工具</li></ol></li></ul><p>我们接着来看循环屏障的实现细节：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CyclicBarrier</span> &#123;<br>    <span class="hljs-comment">//内部类，存放broken标记，表示屏障是否损坏，损坏的屏障是无法正常工作的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generation</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">broken</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/** 内部维护一个可重入锁 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">/** 再维护一个Condition */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">trip</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-comment">/** 这个就是屏障的最大阻挡容量，就是构造方法传入的初始值 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> parties;<br>    <span class="hljs-comment">/* 在屏障破裂时做的事情 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable barrierCommand;<br>    <span class="hljs-comment">/** 当前这一轮的Generation对象，每一轮都有一个新的，用于保存broken标记 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Generation</span> <span class="hljs-variable">generation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generation</span>();<br><br>    <span class="hljs-comment">//默认为最大阻挡容量，每来一个线程-1，和CountDownLatch挺像，当屏障破裂或是被重置时，都会将其重置为最大阻挡容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br><br>  <span class="hljs-comment">//构造方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CyclicBarrier</span><span class="hljs-params">(<span class="hljs-type">int</span> parties, Runnable barrierAction)</span> &#123;<br>        <span class="hljs-keyword">if</span> (parties &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        <span class="hljs-built_in">this</span>.parties = parties;<br>        <span class="hljs-built_in">this</span>.count = parties;<br>        <span class="hljs-built_in">this</span>.barrierCommand = barrierAction;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CyclicBarrier</span><span class="hljs-params">(<span class="hljs-type">int</span> parties)</span> &#123;<br>        <span class="hljs-built_in">this</span>(parties, <span class="hljs-literal">null</span>);<br>    &#125;<br>  <br>    <span class="hljs-comment">//开启下一轮屏障，一般屏障被冲破之后，就自动重置了，进入到下一轮</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextGeneration</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 唤醒所有等待状态的线程</span><br>        trip.signalAll();<br>        <span class="hljs-comment">// 重置count的值</span><br>        count = parties;<br>      <span class="hljs-comment">//创建新的Generation对象</span><br>        generation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generation</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//破坏当前屏障，变为损坏状态，之后就不能再使用了，除非重置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">breakBarrier</span><span class="hljs-params">()</span> &#123;<br>        generation.broken = <span class="hljs-literal">true</span>;<br>        count = parties;<br>        trip.signalAll();<br>    &#125;<br>  <br>  <span class="hljs-comment">//开始等待</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dowait(<span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (TimeoutException toe) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(toe); <span class="hljs-comment">// 因为这里没有使用定时机制，不可能发生异常，如果发生怕是出了错误</span><br>        &#125;<br>    &#125;<br>    <br>  <span class="hljs-comment">//可超时的等待</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException,<br>               BrokenBarrierException,<br>               TimeoutException &#123;<br>        <span class="hljs-keyword">return</span> dowait(<span class="hljs-literal">true</span>, unit.toNanos(timeout));<br>    &#125;<br><br>    <span class="hljs-comment">//这里就是真正的等待流程了，让我们细细道来</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dowait</span><span class="hljs-params">(<span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> nanos)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException,<br>               TimeoutException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>        lock.lock();   <span class="hljs-comment">//加锁，注意，因为多个线程都会调用await方法，因此只有一个线程能进，其他都被卡着了</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Generation</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> generation;   <span class="hljs-comment">//获取当前这一轮屏障的Generation对象</span><br><br>            <span class="hljs-keyword">if</span> (g.broken)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();   <span class="hljs-comment">//如果这一轮屏障已经损坏，那就没办法使用了</span><br><br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;   <span class="hljs-comment">//如果当前等待状态的线程被中断，那么会直接破坏掉屏障，并抛出中断异常（破坏屏障的第1种情况）</span><br>                breakBarrier();<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> --count;     <span class="hljs-comment">//如果上面都没有出现不正常，那么就走正常流程，首先count自减并赋值给index，index表示当前是等待的第几个线程</span><br>            <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果自减之后就是0了，那么说明来的线程已经足够，可以冲破屏障了</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">ranAction</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> barrierCommand;<br>                    <span class="hljs-keyword">if</span> (command != <span class="hljs-literal">null</span>)<br>                        command.run();   <span class="hljs-comment">//执行冲破屏障后的任务，如果这里抛异常了，那么会进finally</span><br>                    ranAction = <span class="hljs-literal">true</span>;<br>                    nextGeneration();   <span class="hljs-comment">//一切正常，开启下一轮屏障（方法进入之后会唤醒所有等待的线程，这样所有的线程都可以同时继续运行了）然后返回0，注意最下面finally中会解锁，不然其他线程唤醒了也拿不到锁啊</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!ranAction)   <span class="hljs-comment">//如果是上面出现异常进来的，那么也会直接破坏屏障（破坏屏障的第2种情况）</span><br>                        breakBarrier();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 能走到这里，那么说明当前等待的线程数还不够多，不足以冲破屏障</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;   <span class="hljs-comment">//无限循环，一直等，等到能冲破屏障或是出现异常为止</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!timed)<br>                        trip.await();    <span class="hljs-comment">//如果不是定时的，那么就直接永久等待</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0L</span>)<br>                        nanos = trip.awaitNanos(nanos);   <span class="hljs-comment">//否则最多等一段时间</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;    <span class="hljs-comment">//等的时候会判断是否被中断（依然是破坏屏障的第1种情况）</span><br>                    <span class="hljs-keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;<br>                        breakBarrier();<br>                        <span class="hljs-keyword">throw</span> ie;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        Thread.currentThread().interrupt();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (g.broken)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();   <span class="hljs-comment">//如果线程被唤醒之后发现屏障已经被破坏，那么直接抛异常</span><br><br>                <span class="hljs-keyword">if</span> (g != generation)   <span class="hljs-comment">//成功冲破屏障开启下一轮，那么直接返回当前是第几个等待的线程。</span><br>                    <span class="hljs-keyword">return</span> index;<br><br>                <span class="hljs-keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="hljs-number">0L</span>) &#123;   <span class="hljs-comment">//线程等待超时，也会破坏屏障（破坏屏障的第3种情况）然后抛异常</span><br>                    breakBarrier();<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeoutException</span>();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();    <span class="hljs-comment">//最后别忘了解锁，不然其他线程拿不到锁</span><br>        &#125;<br>    &#125;<br><br>  <span class="hljs-comment">//不多说了</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getParties</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> parties;<br>    &#125;<br><br>  <span class="hljs-comment">//判断是否被破坏，也是加锁访问，因为有可能这时有其他线程正在执行dowait</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBroken</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> generation.broken;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>  <span class="hljs-comment">//重置操作，也要加锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            breakBarrier();   <span class="hljs-comment">// 先破坏这一轮的线程，注意这个方法会先破坏再唤醒所有等待的线程，那么所有等待的线程会直接抛BrokenBarrierException异常（详情请看上方dowait倒数第13行）</span><br>            nextGeneration(); <span class="hljs-comment">// 开启下一轮</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>  <span class="hljs-comment">//获取等待线程数量，也要加锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumberWaiting</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> parties - count;   <span class="hljs-comment">//最大容量 - 当前剩余容量 = 正在等待线程数</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看完了CyclicBarrier的源码之后，是不是感觉比CountDownLatch更简单一些？</p><h3 id="信号量-semaphore">信号量 Semaphore</h3><p>还记得我们在《操作系统》中学习的信号量机制吗？它在解决进程之间的同步问题中起着非常大的作用。</p><blockquote><p>信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。</p></blockquote><p>通过使用信号量，我们可以决定某个资源同一时间能够被访问的最大线程数，它相当于对某个资源的访问进行了流量控制。简单来说，它就是一个可以被N个线程占用的排它锁（因此也支持公平和非公平模式），我们可以在最开始设定Semaphore的许可证数量，每个线程都可以获得1个或n个许可证，当许可证耗尽或不足以供其他线程获取时，其他线程将被阻塞。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-comment">//每一个Semaphore都会在一开始获得指定的许可证数数量，也就是许可证配额</span><br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">2</span>);   <span class="hljs-comment">//许可证配额设定为2</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                semaphore.acquire();   <span class="hljs-comment">//申请一个许可证</span><br>                System.out.println(<span class="hljs-string">&quot;许可证申请成功！&quot;</span>);<br>                semaphore.release();   <span class="hljs-comment">//归还一个许可证</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-comment">//每一个Semaphore都会在一开始获得指定的许可证数数量，也就是许可证配额</span><br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);   <span class="hljs-comment">//许可证配额设定为3</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                semaphore.acquire(<span class="hljs-number">2</span>);    <span class="hljs-comment">//一次性申请两个许可证</span><br>                System.out.println(<span class="hljs-string">&quot;许可证申请成功！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们也可以通过Semaphore获取一些常规信息：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);   <span class="hljs-comment">//只配置一个许可证，5个线程进行争抢，不内卷还想要许可证？</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(semaphore::acquireUninterruptibly).start();   <span class="hljs-comment">//可以以不响应中断（主要是能简写一行，方便）</span><br>    Thread.sleep(<span class="hljs-number">500</span>);<br>    System.out.println(<span class="hljs-string">&quot;剩余许可证数量：&quot;</span>+semaphore.availablePermits());<br>    System.out.println(<span class="hljs-string">&quot;是否存在线程等待许可证：&quot;</span>+(semaphore.hasQueuedThreads() ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;否&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;等待许可证线程数量：&quot;</span>+semaphore.getQueueLength());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以手动回收掉所有的许可证：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(semaphore::acquireUninterruptibly).start();<br>    Thread.sleep(<span class="hljs-number">500</span>);<br>    System.out.println(<span class="hljs-string">&quot;收回剩余许可数量：&quot;</span>+semaphore.drainPermits());   <span class="hljs-comment">//直接回收掉剩余的许可证</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们模拟一下，比如现在有10个线程同时进行任务，任务要求是执行某个方法，但是这个方法最多同时只能由5个线程执行，这里我们使用信号量就非常合适。</p><h3 id="数据交换-exchanger">数据交换 Exchanger</h3><p>线程之间的数据传递也可以这么简单。</p><p>使用Exchanger，它能够实现线程之间的数据交换：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Exchanger&lt;String&gt; exchanger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exchanger</span>&lt;&gt;();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;收到主线程传递的交换数据：&quot;</span>+exchanger.exchange(<span class="hljs-string">&quot;AAAA&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;).start();<br>    System.out.println(<span class="hljs-string">&quot;收到子线程传递的交换数据：&quot;</span>+exchanger.exchange(<span class="hljs-string">&quot;BBBB&quot;</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在调用<code>exchange</code>方法后，当前线程会等待其他线程调用同一个exchanger对象的<code>exchange</code>方法，当另一个线程也调用之后，方法会返回对方线程传入的参数。</p><p>可见功能还是比较简单的。</p><h3 id="forkjoin框架">Fork/Join框架</h3><p>在JDK7时，出现了一个新的框架用于并行执行任务，它的目的是为了把大型任务拆分为多个小任务，最后汇总多个小任务的结果，得到整大任务的结果，并且这些小任务都是同时在进行，大大提高运算效率。Fork就是拆分，Join就是合并。</p><p>我们来演示一下实际的情况，比如一个算式：18x7+36x8+9x77+8x53，可以拆分为四个小任务：18x7、36x8、9x77、8x53，最后我们只需要将这四个任务的结果加起来，就是我们原本算式的结果了，有点归并排序的味道。</p><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h0c43lq5kfj223e0lg42t.jpg"alt="image-20220316225312840" /></p><p>它不仅仅只是拆分任务并使用多线程，而且还可以利用工作窃取算法，提高线程的利用率。</p><blockquote><p><strong>工作窃取算法：</strong>是指某个线程从其他队列里窃取任务来执行。一个大任务分割为若干个互不依赖的子任务，为了减少线程间的竞争，把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务待处理。干完活的线程与其等着，不如帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。</p></blockquote><p><imgsrc="https://tva1.sinaimg.cn/large/e6c9d24ely1h0c4kgoen9j21s00gmwis.jpg"alt="image-20220316230928072" /></p><p>现在我们来看看如何使用它，这里以计算1-1000的和为例，我们可以将其拆分为8个小段的数相加，比如1-125、126-250...，最后再汇总即可，它也是依靠线程池来实现的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>        <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>();<br>        System.out.println(pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubTask</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)).get());<br>    &#125;<br><br><br>  <span class="hljs-comment">//继承RecursiveTask，这样才可以作为一个任务，泛型就是计算结果类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Integer&gt; &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> start;   <span class="hljs-comment">//比如我们要计算一个范围内所有数的和，那么就需要限定一下范围，这里用了两个int存放</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> end;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">SubTask</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>            <span class="hljs-built_in">this</span>.start = start;<br>            <span class="hljs-built_in">this</span>.end = end;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span>(end - start &gt; <span class="hljs-number">125</span>) &#123;    <span class="hljs-comment">//每个任务最多计算125个数的和，如果大于继续拆分，小于就可以开始算了</span><br>                <span class="hljs-type">SubTask</span> <span class="hljs-variable">subTask1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubTask</span>(start, (end + start) / <span class="hljs-number">2</span>);<br>                subTask1.fork();    <span class="hljs-comment">//会继续划分子任务执行</span><br>                <span class="hljs-type">SubTask</span> <span class="hljs-variable">subTask2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubTask</span>((end + start) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, end);<br>                subTask2.fork();   <span class="hljs-comment">//会继续划分子任务执行</span><br>                <span class="hljs-keyword">return</span> subTask1.join() + subTask2.join();   <span class="hljs-comment">//越玩越有递归那味了</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 开始计算 &quot;</span>+start+<span class="hljs-string">&quot;-&quot;</span>+end+<span class="hljs-string">&quot; 的值!&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++) &#123;<br>                    res += i;<br>                &#125;<br>                <span class="hljs-keyword">return</span> res;   <span class="hljs-comment">//返回的结果会作为join的结果</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">2</span> 开始计算 <span class="hljs-number">1</span>-<span class="hljs-number">125</span> 的值!<br><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">2</span> 开始计算 <span class="hljs-number">126</span>-<span class="hljs-number">250</span> 的值!<br><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">0</span> 开始计算 <span class="hljs-number">376</span>-<span class="hljs-number">500</span> 的值!<br><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">6</span> 开始计算 <span class="hljs-number">751</span>-<span class="hljs-number">875</span> 的值!<br><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">3</span> 开始计算 <span class="hljs-number">626</span>-<span class="hljs-number">750</span> 的值!<br><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">5</span> 开始计算 <span class="hljs-number">501</span>-<span class="hljs-number">625</span> 的值!<br><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">4</span> 开始计算 <span class="hljs-number">251</span>-<span class="hljs-number">375</span> 的值!<br><span class="hljs-attribute">ForkJoinPool</span>-<span class="hljs-number">1</span>-worker-<span class="hljs-number">7</span> 开始计算 <span class="hljs-number">876</span>-<span class="hljs-number">1000</span> 的值!<br><span class="hljs-attribute">500500</span><br></code></pre></div></td></tr></table></figure><p>可以看到，结果非常正确，但是整个计算任务实际上是拆分为了8个子任务同时完成的，结合多线程，原本的单线程任务，在多线程的加持下速度成倍提升。</p><p>包括Arrays工具类提供的并行排序也是利用了ForkJoinPool来实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parallelSort</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] a)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> a.length, p, g;<br>    <span class="hljs-keyword">if</span> (n &lt;= MIN_ARRAY_SORT_GRAN ||<br>        (p = ForkJoinPool.getCommonPoolParallelism()) == <span class="hljs-number">1</span>)<br>        DualPivotQuicksort.sort(a, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArraysParallelSortHelpers</span>.FJByte.Sorter<br>            (<span class="hljs-literal">null</span>, a, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[n], <span class="hljs-number">0</span>, n, <span class="hljs-number">0</span>,<br>             ((g = n / (p &lt;&lt; <span class="hljs-number">2</span>)) &lt;= MIN_ARRAY_SORT_GRAN) ?<br>             MIN_ARRAY_SORT_GRAN : g).invoke();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>并行排序的性能在多核心CPU环境下，肯定是优于普通排序的，并且排序规模越大优势越显著。</p><p>至此，并发编程篇完结。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 容器复习</title>
    <link href="/2022/03/15/Java-%E5%AE%B9%E5%99%A8%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/03/15/Java-%E5%AE%B9%E5%99%A8%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>转载自：<ahref="https://javaguide.cn/java/collection/java-collection-questions-01.html"class="uri">https://javaguide.cn/java/collection/java-collection-questions-01.html</a></p><h2 id="集合概述">集合概述</h2><h3 id="java-集合概览">Java 集合概览</h3><p>Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是<code>Collection</code>接口，主要用于存放单一元素；另一个是<code>Map</code> 接口，主要用于存放键值对。对于<code>Collection</code>接口，下面又有三个主要的子接口：<code>List</code>、<code>Set</code> 和<code>Queue</code>。</p><p>Java 集合框架如下图所示：</p><p><img src="https://i.imgur.com/Js0FD02.png" /></p><p><img src="https://i.imgur.com/8xr538m.png" /></p><p>注：图中只列举了主要的继承派生关系，并没有列举所有关系。比方省略了<code>AbstractList</code>,<code>NavigableSet</code>等抽象类以及其他的一些辅助类，如想深入了解，可自行查看源码。</p><h3 id="说说-list-set-queue-map-四者的区别">说说 List, Set, Queue, Map四者的区别？</h3><ul><li><code>List</code>(对付顺序的好帮手):存储的元素是有序的、可重复的。</li><li><code>Set</code>(注重独一无二的性质):存储的元素是无序的、不可重复的。</li><li><code>Queue</code>(实现排队功能的叫号机):按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</li><li><code>Map</code>(用 key 来搜索的专家):使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，"x" 代表key，"y" 代表 value，key 是无序的、不可重复的，value是无序的、可重复的，每个键最多映射到一个值。</li></ul><h3 id="集合框架底层数据结构总结">集合框架底层数据结构总结</h3><p>先来看一下 <code>Collection</code> 接口下面的集合。</p><h4 id="list">List</h4><ul><li><code>Arraylist</code>： <code>Object[]</code> 数组</li><li><code>Vector</code>：<code>Object[]</code> 数组</li><li><code>LinkedList</code>： 双向链表(JDK1.6 之前为循环链表，JDK1.7取消了循环)</li></ul><h4 id="set">Set</h4><ul><li><code>HashSet</code>(无序，唯一): 基于 <code>HashMap</code>实现的，底层采用 <code>HashMap</code> 来保存元素</li><li><code>LinkedHashSet</code>: <code>LinkedHashSet</code> 是<code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code>来实现的。有点类似于我们之前说的 <code>LinkedHashMap</code> 其内部是基于<code>HashMap</code> 实现一样，不过还是有一点点区别的</li><li><code>TreeSet</code>(有序，唯一): 红黑树(自平衡的排序二叉树)</li></ul><h4 id="queue">Queue</h4><ul><li><code>PriorityQueue</code>: <code>Object[]</code>数组来实现二叉堆</li><li><code>ArrayQueue</code>: <code>Object[]</code> 数组 + 双指针</li></ul><p>再来看看 <code>Map</code> 接口下面的集合。</p><h4 id="map">Map</h4><ul><li><code>HashMap</code>： JDK1.8 之前 <code>HashMap</code>由数组+链表组成的，数组是 <code>HashMap</code>的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）（将链表转换成红黑树前会判断，如果当前数组的长度小于64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间</li><li><code>LinkedHashMap</code>： <code>LinkedHashMap</code> 继承自<code>HashMap</code>，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，<code>LinkedHashMap</code>在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看：<ahref="https://www.imooc.com/article/22931">《LinkedHashMap源码详细分析（JDK1.8）》</a></li><li><code>Hashtable</code>： 数组+链表组成的，数组是<code>Hashtable</code> 的主体，链表则是主要为了解决哈希冲突而存在的</li><li><code>TreeMap</code>： 红黑树（自平衡的排序二叉树）</li></ul><h3 id="如何选用集合">如何选用集合?</h3><p>主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用<code>Map</code> 接口下的集合，需要排序时选择<code>TreeMap</code>,不需要排序时就选择<code>HashMap</code>,需要保证线程安全就选用<code>ConcurrentHashMap</code>。</p><p>当我们只需要存放元素值时，就选择实现<code>Collection</code>接口的集合，需要保证元素唯一时选择实现 <code>Set</code> 接口的集合比如<code>TreeSet</code> 或 <code>HashSet</code>，不需要就选择实现<code>List</code> 接口的比如 <code>ArrayList</code> 或<code>LinkedList</code>，然后再根据实现这些接口的集合的特点来选用。</p><h3 id="为什么要使用集合">为什么要使用集合？</h3><p>当我们需要保存一组类型相同的数据的时候，我们应该是用一个容器来保存，这个容器就是数组，但是，使用数组存储对象具有一定的弊端，因为我们在实际开发中，存储的数据的类型是多种多样的，于是，就出现了“集合”，集合同样也是用来存储多个数据的。</p><p>数组的缺点是一旦声明之后，长度就不可变了；同时，声明数组时的数据类型也决定了该数组存储的数据的类型；而且，数组存储的数据是有序的、可重复的，特点单一。但是集合提高了数据存储的灵活性，Java集合不仅可以用来存储不同类型不同数量的对象，还可以保存具有映射关系的数据。</p><h2 id="collection-子接口之-list">Collection 子接口之 List</h2><h3 id="arraylist-和-vector-的区别">Arraylist 和 Vector 的区别?</h3><ul><li><code>ArrayList</code> 是 <code>List</code> 的主要实现类，底层使用<code>Object[ ]</code>存储，适用于频繁的查找工作，线程不安全 ；</li><li><code>Vector</code> 是 <code>List</code>的古老实现类，底层使用<code>Object[ ]</code> 存储，线程安全的。</li></ul><h3 id="arraylist-与-linkedlist-区别">Arraylist 与 LinkedList 区别?</h3><ol type="1"><li><strong>是否保证线程安全：</strong> <code>ArrayList</code> 和<code>LinkedList</code> 都是不同步的，也就是不保证线程安全；</li><li><strong>底层数据结构：</strong> <code>Arraylist</code> 底层使用的是<strong><code>Object</code> 数组</strong>；<code>LinkedList</code>底层使用的是 <strong>双向链表</strong> 数据结构（JDK1.6之前为循环链表，JDK1.7取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）</li><li><strong>插入和删除是否受元素位置的影响：</strong><ul><li><code>ArrayList</code>采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。比如：执行<code>add(E e)</code>方法的时候， <code>ArrayList</code>会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。但是如果要在指定位置 i插入和删除元素的话（<code>add(int index, E element)</code>）时间复杂度就为O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。</li><li><code>LinkedList</code>采用链表存储，所以，如果是在头尾插入或者删除元素不受元素位置的影响（<code>add(E e)</code>、<code>addFirst(E e)</code>、<code>addLast(E e)</code>、<code>removeFirst()</code>、 <code>removeLast()</code>），近似 O(1)，如果是要在指定位置<code>i</code>插入和删除元素的话（<code>add(int index, E element)</code>，<code>remove(Object o)</code>）时间复杂度近似为 O(n) ，因为需要先移动到指定位置再插入。</li></ul></li><li><strong>是否支持快速随机访问：</strong> <code>LinkedList</code>不支持高效的随机元素访问，而 <code>ArrayList</code>支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</li><li><strong>内存空间占用：</strong> ArrayList 的空 间浪费主要体现在在list 列表的结尾会预留一定的容量空间，而 LinkedList的空间花费则体现在它的每一个元素都需要消耗比 ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。</li></ol><h4id="补充内容双向链表和双向循环链表">补充内容:双向链表和双向循环链表</h4><p><strong>双向链表：</strong> 包含两个指针，一个 prev指向前一个节点，一个 next 指向后一个节点。</p><blockquote><p>另外推荐一篇把双向链表讲清楚的文章：<ahref="https://juejin.cn/post/6844903648154271757">https://juejin.cn/post/6844903648154271757</a></p></blockquote><p><imgsrc="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/双向链表.png"alt="双向链表" /></p><p><strong>双向循环链表：</strong> 最后一个节点的 next 指向 head，而head 的 prev 指向最后一个节点，构成一个环。</p><p><imgsrc="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/双向循环链表.png"alt="双向循环链表" /></p><h4 id="补充内容randomaccess-接口">补充内容:RandomAccess 接口</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RandomAccess</span> &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>查看源码我们发现实际上 <code>RandomAccess</code>接口中什么都没有定义。所以，在我看来 <code>RandomAccess</code>接口不过是一个标识罢了。标识什么？标识实现这个接口的类具有随机访问功能。</p><p>在 <code>binarySearch（)</code> 方法中，它要判断传入的 list 是否<code>RandomAccess</code>的实例，如果是，调用<code>indexedBinarySearch()</code>方法，如果不是，那么调用<code>iteratorBinarySearch()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt;<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List&lt;? extends Comparable&lt;? <span class="hljs-built_in">super</span> T&gt;&gt; list, T key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (list <span class="hljs-keyword">instanceof</span> RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)<br>        <span class="hljs-keyword">return</span> Collections.indexedBinarySearch(list, key);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> Collections.iteratorBinarySearch(list, key);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>ArrayList</code> 实现了 <code>RandomAccess</code> 接口， 而<code>LinkedList</code>没有实现。为什么呢？我觉得还是和底层数据结构有关！<code>ArrayList</code>底层是数组，而 <code>LinkedList</code>底层是链表。数组天然支持随机访问，时间复杂度为O(1)，所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为O(n)，所以不支持快速随机访问。，<code>ArrayList</code> 实现了<code>RandomAccess</code> 接口，就表明了他具有快速随机访问功能。<code>RandomAccess</code> 接口只是标识，并不是说 <code>ArrayList</code>实现 <code>RandomAccess</code> 接口才具有快速随机访问功能的！</p><h3 id="说一说-arraylist-的扩容机制吧">说一说 ArrayList的扩容机制吧</h3><p>详见笔主的这篇文章:<ahref="https://javaguide.cn/java/collection/arraylist-source-code/#_2-arraylist-核心源码解读">ArrayList扩容机制分析</a></p><h2 id="collection-子接口之-set">Collection 子接口之 Set</h2><h3 id="comparable-和-comparator-的区别">comparable 和 Comparator的区别</h3><ul><li><code>comparable</code> 接口实际上是出自<code>java.lang</code>包它有一个 <code>compareTo(Object obj)</code>方法用来排序</li><li><code>comparator</code>接口实际上是出自 java.util包它有一个<code>compare(Object obj1, Object obj2)</code>方法用来排序</li></ul><p>一般我们需要对一个集合使用自定义排序时，我们就要重写<code>compareTo()</code>方法或<code>compare()</code>方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写<code>compareTo()</code>方法和使用自制的<code>Comparator</code>方法或者以两个Comparator来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的<code>Collections.sort()</code>.</p><h4 id="comparator-定制排序">Comparator 定制排序</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCompatator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        ArrayList&lt;Integer&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        arrayList.add(-<span class="hljs-number">1</span>);<br>        arrayList.add(<span class="hljs-number">3</span>);<br>        arrayList.add(<span class="hljs-number">3</span>);<br>        arrayList.add(-<span class="hljs-number">5</span>);<br>        arrayList.add(<span class="hljs-number">7</span>);<br>        arrayList.add(<span class="hljs-number">4</span>);<br>        arrayList.add(-<span class="hljs-number">9</span>);<br>        arrayList.add(-<span class="hljs-number">7</span>);<br>        System.out.println(<span class="hljs-string">&quot;原始数组:&quot;</span>);<br>        System.out.println(arrayList);<br>        <span class="hljs-comment">// void reverse(List list)：反转</span><br>        Collections.reverse(arrayList);<br>        System.out.println(<span class="hljs-string">&quot;Collections.reverse(arrayList):&quot;</span>);<br>        System.out.println(arrayList);<br><br>        <span class="hljs-comment">// void sort(List list),按自然排序的升序排序</span><br>        Collections.sort(arrayList);<br>        System.out.println(<span class="hljs-string">&quot;Collections.sort(arrayList):&quot;</span>);<br>        System.out.println(arrayList);<br>        <span class="hljs-comment">// 定制排序的用法</span><br>        Collections.sort(arrayList, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o2.compareTo(o1);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;定制排序后：&quot;</span>);<br>        System.out.println(arrayList);<br><br>        <span class="hljs-comment">// 再次定制</span><br>        Collections.sort(arrayList, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;再次定制后：&quot;</span>);<br>        System.out.println(arrayList);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Output:</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">原始数组:<br>[<span class="hljs-string">-1</span>, 3, 3, <span class="hljs-string">-5</span>, 7, 4, <span class="hljs-string">-9</span>, <span class="hljs-string">-7</span>]<br>Collections.reverse(arrayList):<br>[<span class="hljs-string">-7</span>, <span class="hljs-string">-9</span>, 4, 7, <span class="hljs-string">-5</span>, 3, 3, <span class="hljs-string">-1</span>]<br>Collections.sort(arrayList):<br>[<span class="hljs-string">-9</span>, <span class="hljs-string">-7</span>, <span class="hljs-string">-5</span>, <span class="hljs-string">-1</span>, 3, 3, 4, 7]<br>定制排序后：<br>[7, 4, 3, 3, <span class="hljs-string">-1</span>, <span class="hljs-string">-5</span>, <span class="hljs-string">-7</span>, <span class="hljs-string">-9</span>]<br>再次定制后：<br>[<span class="hljs-string">-9</span>, <span class="hljs-string">-7</span>, <span class="hljs-string">-5</span>, <span class="hljs-string">-1</span>, 3, 3, 4, 7]<br></code></pre></div></td></tr></table></figure><h4 id="重写-compareto-方法实现按年龄来排序">重写 compareTo方法实现按年龄来排序</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列</span><br><span class="hljs-comment">// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他</span><br><span class="hljs-comment">// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Person&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * T重写compareTo方法实现按年龄来排序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Person o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.age &gt; o.getAge()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.age &lt; o.getAge()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">import</span> com.fan.pojo.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCompareTo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        TreeMap&lt;Person, String&gt; pdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        pdata.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">30</span>), <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        pdata.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">20</span>), <span class="hljs-string">&quot;lisi&quot;</span>);<br>        pdata.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">10</span>), <span class="hljs-string">&quot;wangwu&quot;</span>);<br>        pdata.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">5</span>), <span class="hljs-string">&quot;xiaohong&quot;</span>);<br>        <span class="hljs-comment">// 得到key的值的同时得到key所对应的值</span><br>        Set&lt;Person&gt; keys = pdata.keySet();<br>        <span class="hljs-keyword">for</span> (Person key : keys) &#123;<br>            System.out.println(key.getAge() + <span class="hljs-string">&quot;-&quot;</span> + key.getName() + <span class="hljs-string">&quot; &quot;</span> + pdata.get(key));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Output：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">5-小红 xiaohong<br>10-王五 wangwu<br>20-李四 lisi<br>30-张三 zhangsan<br></code></pre></div></td></tr></table></figure><h3id="无序性和不可重复性的含义是什么">无序性和不可重复性的含义是什么</h3><p>1、什么是无序性？无序性不等于随机性，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</p><p>2、什么是不可重复性？不可重复性是指添加的元素按照 equals()判断时，返回 false，需要同时重写 equals()方法和 HashCode()方法。</p><h3 id="比较-hashsetlinkedhashset-和-treeset-三者的异同">比较HashSet、LinkedHashSet 和 TreeSet 三者的异同</h3><ul><li><code>HashSet</code>、<code>LinkedHashSet</code> 和<code>TreeSet</code> 都是 <code>Set</code>接口的实现类，都能保证元素唯一，并且都不是线程安全的。</li><li><code>HashSet</code>、<code>LinkedHashSet</code> 和<code>TreeSet</code>的主要区别在于底层数据结构不同。<code>HashSet</code>的底层数据结构是哈希表（基于 <code>HashMap</code>实现）。<code>LinkedHashSet</code>的底层数据结构是链表和哈希表，元素的插入和取出顺序满足FIFO。<code>TreeSet</code>底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。</li><li>底层数据结构不同又导致这三者的应用场景不同。<code>HashSet</code>用于不需要保证元素插入和取出顺序的场景，<code>LinkedHashSet</code>用于保证元素的插入和取出顺序满足 FIFO 的场景，<code>TreeSet</code>用于支持对元素自定义排序规则的场景。</li></ul><h2 id="collection-子接口之-queue">Collection 子接口之 Queue</h2><h3 id="queue-与-deque-的区别">Queue 与 Deque 的区别</h3><p><code>Queue</code>是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循<strong>先进先出（FIFO）</strong> 规则。</p><p><code>Queue</code> 扩展了 <code>Collection</code> 的接口，根据<strong>因为容量问题而导致操作失败后处理方式的不同</strong>可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。</p><table><thead><tr class="header"><th><code>Queue</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr class="odd"><td>插入队尾</td><td>add(E e)</td><td>offer(E e)</td></tr><tr class="even"><td>删除队首</td><td>remove()</td><td>poll()</td></tr><tr class="odd"><td>查询队首元素</td><td>element()</td><td>peek()</td></tr></tbody></table><p><code>Deque</code> 是双端队列，在队列的两端均可以插入或删除元素。</p><p><code>Deque</code> 扩展了 <code>Queue</code> 的接口,增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：</p><table><thead><tr class="header"><th><code>Deque</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr class="odd"><td>插入队首</td><td>addFirst(E e)</td><td>offerFirst(E e)</td></tr><tr class="even"><td>插入队尾</td><td>addLast(E e)</td><td>offerLast(E e)</td></tr><tr class="odd"><td>删除队首</td><td>removeFirst()</td><td>pollFirst()</td></tr><tr class="even"><td>删除队尾</td><td>removeLast()</td><td>pollLast()</td></tr><tr class="odd"><td>查询队首元素</td><td>getFirst()</td><td>peekFirst()</td></tr><tr class="even"><td>查询队尾元素</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p>事实上，<code>Deque</code> 还提供有 <code>push()</code> 和<code>pop()</code> 等其他方法，可用于模拟栈。</p><h3 id="arraydeque-与-linkedlist-的区别">ArrayDeque 与 LinkedList的区别</h3><p><code>ArrayDeque</code> 和 <code>LinkedList</code> 都实现了<code>Deque</code> 接口，两者都具有队列的功能，但两者有什么区别呢？</p><ul><li><p><code>ArrayDeque</code> 是基于可变长的数组和双指针来实现，而<code>LinkedList</code> 则通过链表来实现。</p></li><li><p><code>ArrayDeque</code> 不支持存储 <code>NULL</code> 数据，但<code>LinkedList</code> 支持。</p></li><li><p><code>ArrayDeque</code> 是在 JDK1.6才被引入的，而<code>LinkedList</code> 早在 JDK1.2时就已经存在。</p></li><li><p><code>ArrayDeque</code> 插入时可能存在扩容过程,不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code>不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。</p></li></ul><p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比<code>LinkedList</code> 更好。此外，<code>ArrayDeque</code>也可以用于实现栈。</p><h3 id="说一说-priorityqueue">说一说 PriorityQueue</h3><p><code>PriorityQueue</code> 是在 JDK1.5 中被引入的, 其与<code>Queue</code>的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。</p><p>这里列举其相关的一些要点：</p><ul><li><code>PriorityQueue</code>利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据</li><li><code>PriorityQueue</code> 通过堆元素的上浮和下沉，实现了在 O(logn)的时间复杂度内插入元素和删除堆顶元素。</li><li><code>PriorityQueue</code> 是非线程安全的，且不支持存储<code>NULL</code> 和 <code>non-comparable</code> 的对象。</li><li><code>PriorityQueue</code> 默认是小顶堆，但可以接收一个<code>Comparator</code>作为构造参数，从而来自定义元素优先级的先后。</li></ul><p><code>PriorityQueue</code>在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第K大的数、带权图的遍历等，所以需要会熟练使用才行。</p><h2 id="map-接口">Map 接口</h2><h3 id="hashmap-和-hashtable-的区别">HashMap 和 Hashtable 的区别</h3><ol type="1"><li><strong>线程是否安全：</strong> <code>HashMap</code>是非线程安全的，<code>Hashtable</code> 是线程安全的,因为<code>Hashtable</code> 内部的方法基本都经过<code>synchronized</code>修饰。（如果你要保证线程安全的话就使用 <code>ConcurrentHashMap</code>吧！）；</li><li><strong>效率：</strong> 因为线程安全的问题，<code>HashMap</code>要比 <code>Hashtable</code> 效率高一点。另外，<code>Hashtable</code>基本被淘汰，不要在代码中使用它；</li><li><strong>对 Null key 和 Null value 的支持：</strong><code>HashMap</code> 可以存储 null 的 key 和 value，但 null作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和null 值，否则会抛出 <code>NullPointerException</code>。</li><li><strong>初始容量大小和每次扩充容量大小的不同 ：</strong> ①创建时如果不指定容量初始值，<code>Hashtable</code> 默认的初始大小为11，之后每次扩充，容量变为原来的 2n+1。<code>HashMap</code>默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而<code>HashMap</code> 会将其扩充为 2 的幂次方大小（<code>HashMap</code>中的<code>tableSizeFor()</code>方法保证，下面给出了源代码）。也就是说<code>HashMap</code> 总是使用 2的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。</li><li><strong>底层数据结构：</strong> JDK1.8 以后的 <code>HashMap</code>在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）（将链表转换成红黑树前会判断，如果当前数组的长度小于64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable没有这样的机制。</li></ol><p><strong><code>HashMap</code> 中带有初始容量的构造函数：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                            initialCapacity);<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>        initialCapacity = MAXIMUM_CAPACITY;<br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                            loadFactor);<br>    <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>    <span class="hljs-built_in">this</span>.threshold = tableSizeFor(initialCapacity);<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>下面这个方法保证了 <code>HashMap</code> 总是使用 2的幂作为哈希表的大小。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Returns a power of two size for the given target capacity.</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="hashmap-和-hashset-区别">HashMap 和 HashSet 区别</h3><p>如果你看过 <code>HashSet</code>源码的话就应该知道：<code>HashSet</code> 底层就是基于<code>HashMap</code> 实现的。（<code>HashSet</code>的源码非常非常少，因为除了<code>clone()</code>、<code>writeObject()</code>、<code>readObject()</code>是<code>HashSet</code> 自己不得不实现之外，其他方法都是直接调用<code>HashMap</code> 中的方法。</p><table><colgroup><col style="width: 38%" /><col style="width: 61%" /></colgroup><thead><tr class="header"><th style="text-align: center;"><code>HashMap</code></th><th style="text-align: center;"><code>HashSet</code></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">实现了 <code>Map</code> 接口</td><td style="text-align: center;">实现 <code>Set</code> 接口</td></tr><tr class="even"><td style="text-align: center;">存储键值对</td><td style="text-align: center;">仅存储对象</td></tr><tr class="odd"><td style="text-align: center;">调用 <code>put()</code>向 map中添加元素</td><td style="text-align: center;">调用 <code>add()</code>方法向<code>Set</code> 中添加元素</td></tr><tr class="even"><td style="text-align: center;"><code>HashMap</code> 使用键（Key）计算<code>hashcode</code></td><td style="text-align: center;"><code>HashSet</code> 使用成员对象来计算<code>hashcode</code> 值，对于两个对象来说 <code>hashcode</code>可能相同，所以<code>equals()</code>方法用来判断对象的相等性</td></tr></tbody></table><h3 id="hashmap-和-treemap-区别">HashMap 和 TreeMap 区别</h3><p><code>TreeMap</code> 和<code>HashMap</code>都继承自<code>AbstractMap</code>，但是需要注意的是<code>TreeMap</code>它还实现了<code>NavigableMap</code>接口和<code>SortedMap</code>接口。</p><p>实现 <code>NavigableMap</code> 接口让 <code>TreeMap</code>有了对集合内元素的搜索的能力。</p><p>实现<code>SortedMap</code>接口让 <code>TreeMap</code>有了对集合中的元素根据键排序的能力。默认是按 key的升序排序，不过我们也可以指定排序的比较器。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        TreeMap&lt;Person, String&gt; treeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Person&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Person person1, Person person2)</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> person1.getAge() - person2.getAge();<br>                <span class="hljs-keyword">return</span> Integer.compare(num, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>        treeMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">3</span>), <span class="hljs-string">&quot;person1&quot;</span>);<br>        treeMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">18</span>), <span class="hljs-string">&quot;person2&quot;</span>);<br>        treeMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">35</span>), <span class="hljs-string">&quot;person3&quot;</span>);<br>        treeMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">16</span>), <span class="hljs-string">&quot;person4&quot;</span>);<br>        treeMap.entrySet().stream().forEach(personStringEntry -&gt; &#123;<br>            System.out.println(personStringEntry.getValue());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出:</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">perso<span class="hljs-symbol">n1</span><br>perso<span class="hljs-symbol">n4</span><br>perso<span class="hljs-symbol">n2</span><br>perso<span class="hljs-symbol">n3</span><br></code></pre></div></td></tr></table></figure><p>可以看出，<code>TreeMap</code> 中的元素已经是按照 <code>Person</code>的 age 字段的升序来排列了。</p><p>上面，我们是通过传入匿名内部类的方式实现的，你可以将代码替换成 Lambda表达式实现的方式：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TreeMap&lt;Person, String&gt; treeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;((person1, person2) -&gt; &#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> person1.getAge() - person2.getAge();<br>  <span class="hljs-keyword">return</span> Integer.compare(num, <span class="hljs-number">0</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><strong>综上，相比于<code>HashMap</code>来说 <code>TreeMap</code>主要多了对集合中的元素根据键排序的能力以及对集合内元素的搜索的能力。</strong></p><h3 id="hashset-如何检查重复">HashSet 如何检查重复</h3><p>以下内容摘自我的 Java 启蒙书《Head first java》第二版：</p><p>当你把对象加入<code>HashSet</code>时，<code>HashSet</code>会先计算对象的<code>hashcode</code>值来判断对象加入的位置，同时也会与其他加入的对象的<code>hashcode</code> 值作比较，如果没有相符的<code>hashcode</code>，<code>HashSet</code>会假设对象没有重复出现。但是如果发现有相同 <code>hashcode</code>值的对象，这时会调用<code>equals()</code>方法来检查<code>hashcode</code>相等的对象是否真的相同。如果两者相同，<code>HashSet</code>就不会让加入操作成功。</p><p>在openjdk8中，<code>HashSet</code>的<code>add()</code>方法只是简单的调用了<code>HashMap</code>的<code>put()</code>方法，并且判断了一下返回值以确保是否有重复元素。直接看一下<code>HashSet</code>中的源码：<br /><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Returns: true if this set did not already contain the specified element</span><br><span class="hljs-comment">// 返回值：当set中没有包含add的元素时返回真</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><p>而在<code>HashMap</code>的<code>putVal()</code>方法中也能看到如下说明：<br /><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Returns : previous value, or null if none</span><br><span class="hljs-comment">// 返回值：如果插入位置没有元素返回null，否则返回上一个元素</span><br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">                   <span class="hljs-type">boolean</span> evict)</span> &#123;<br>...<br>&#125;<br></code></pre></div></td></tr></table></figure></p><p>也就是说，在openjdk8中，实际上无论<code>HashSet</code>中是否已经存在了某元素，<code>HashSet</code>都会直接插入，只是会在<code>add()</code>方法的返回值处告诉我们插入前是否存在相同元素。</p><p><strong><code>hashCode()</code>与 <code>equals()</code>的相关规定：</strong></p><ol type="1"><li>如果两个对象相等，则 <code>hashcode</code> 一定也是相同的</li><li>两个对象相等,对两个 <code>equals()</code> 方法返回 true</li><li>两个对象有相同的 <code>hashcode</code> 值，它们也不一定是相等的</li><li>综上，<code>equals()</code> 方法被覆盖过，则 <code>hashCode()</code>方法也必须被覆盖</li><li><code>hashCode()</code>的默认行为是对堆上的对象产生独特值。如果没有重写<code>hashCode()</code>，则该 class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li></ol><p><strong>==与 equals 的区别</strong></p><p>对于基本类型来说，== 比较的是值是否相等；</p><p>对于引用类型来说，==比较的是两个引用是否指向同一个对象地址（两者在内存中存放的地址（堆内存地址）是否指向同一个地方）；</p><p>对于引用类型（包括包装类型）来说，equals如果没有被重写，对比它们的地址是否相等；如果 equals()方法被重写（例如String），则比较的是地址里的内容。</p><h3 id="hashmap-的底层实现">HashMap 的底层实现</h3><h4 id="jdk1.8-之前">JDK1.8 之前</h4><p>JDK1.8 之前 <code>HashMap</code> 底层是 <strong>数组和链表</strong>结合在一起使用也就是 <strong>链表散列</strong>。<strong>HashMap 通过 key的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 (n - 1) &amp;hash 判断当前元素存放的位置（这里的 n指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的hash 值以及 key是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。</strong></p><p><strong>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法换句话说使用扰动函数之后可以减少碰撞。</strong></p><p><strong>JDK 1.8 HashMap 的 hash 方法源码:</strong></p><p>JDK 1.8 的 hash 方法 相比于 JDK 1.7 hash方法更加简化，但是原理不变。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-comment">// key.hashCode()：返回散列值也就是hashcode</span><br>    <span class="hljs-comment">// ^ ：按位异或</span><br>    <span class="hljs-comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span><br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对比一下 JDK1.7 的 HashMap 的 hash 方法源码.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(<span class="hljs-type">int</span> h)</span> &#123;<br>    <span class="hljs-comment">// This function ensures that hashCodes that differ only by</span><br>    <span class="hljs-comment">// constant multiples at each bit position have a bounded</span><br>    <span class="hljs-comment">// number of collisions (approximately 8 at default load factor).</span><br><br>    h ^= (h &gt;&gt;&gt; <span class="hljs-number">20</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="hljs-number">7</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">4</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>相比于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash方法的性能会稍差一点点，因为毕竟扰动了 4 次。</p><p>所谓 <strong>“拉链法”</strong>就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p><h4 id="jdk1.8-之后">JDK1.8 之后</h4><p>相比于之前的版本， JDK1.8之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）（将链表转换成红黑树前会判断，如果当前数组的长度小于64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</p><p><img src="./images/jdk1.8之后的内部结构-HashMap.png"alt="jdk1.8之后的内部结构-HashMap" /></p><blockquote><p>TreeMap、TreeSet 以及 JDK1.8 之后的 HashMap底层都用到了红黑树。红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p></blockquote><h3 id="hashmap-的长度为什么是-2-的幂次方">HashMap 的长度为什么是 2的幂次方</h3><p>为了能让 HashMap存取高效，尽量较少碰撞，也就是要尽量把数据分配均匀。我们上面也讲到了过了，Hash值的范围值-2147483648 到 2147483647，前后加起来大概 40亿的映射空间，只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。但问题是一个40亿长度的数组，内存是放不下的。所以这个散列值是不能直接拿来用的。用之前还要先做对数组的长度取模运算，得到的余数才能用来要存放的位置也就是对应的数组下标。这个数组下标的计算方法是“<code>(n - 1) &amp; hash</code>”。（n 代表数组长度）。这也就解释了HashMap 的长度为什么是 2 的幂次方。</p><p><strong>这个算法应该如何设计呢？</strong></p><p>我们首先可能会想到采用%取余的操作来实现。但是，重点来了：<strong>“取余(%)操作中如果除数是2 的幂次则等价于与其除数减一的与(&amp;)操作（也就是说hash%length==hash&amp;(length-1)的前提是 length 是 2 的 n次方；）。”</strong> 并且 <strong>采用二进制位操作&amp;，相对于%能够提高运算效率，这就解释了 HashMap 的长度为什么是 2的幂次方。</strong></p><h3 id="hashmap-多线程操作导致死循环问题">HashMap多线程操作导致死循环问题</h3><p>主要原因在于并发下的 Rehash会造成元素之间会形成一个循环链表。不过，jdk 1.8后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用ConcurrentHashMap 。</p><p>详情请查看：<a href="https://coolshell.cn/articles/9606.html"class="uri">https://coolshell.cn/articles/9606.html</a></p><h3 id="hashmap-有哪几种常见的遍历方式">HashMap有哪几种常见的遍历方式?</h3><p><a href="https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw">HashMap的 7 种遍历方式与性能分析！</a></p><h3 id="concurrenthashmap-和-hashtable-的区别">ConcurrentHashMap 和Hashtable 的区别</h3><p><code>ConcurrentHashMap</code> 和 <code>Hashtable</code>的区别主要体现在实现线程安全的方式上不同。</p><ul><li><strong>底层数据结构：</strong> JDK1.7 的<code>ConcurrentHashMap</code> 底层采用 <strong>分段的数组+链表</strong>实现，JDK1.8 采用的数据结构跟 <code>HashMap1.8</code>的结构一样，数组+链表/红黑二叉树。<code>Hashtable</code> 和 JDK1.8之前的 <code>HashMap</code> 的底层数据结构类似都是采用<strong>数组+链表</strong> 的形式，数组是 HashMap的主体，链表则是主要为了解决哈希冲突而存在的；</li><li><strong>实现线程安全的方式（重要）：</strong> ① <strong>在 JDK1.7的时候，<code>ConcurrentHashMap</code>（分段锁）</strong>对整个桶数组进行了分割分段(<code>Segment</code>)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。<strong>到了 JDK1.8 的时候已经摒弃了 <code>Segment</code>的概念，而是直接用 <code>Node</code>数组+链表+红黑树的数据结构来实现，并发控制使用 <code>synchronized</code>和 CAS 来操作。（JDK1.6 以后 对 <code>synchronized</code>锁做了很多优化）</strong> 整个看起来就像是优化过且线程安全的<code>HashMap</code>，虽然在 JDK1.8 中还能看到 <code>Segment</code>的数据结构，但是已经简化了属性，只是为了兼容旧版本；②<strong><code>Hashtable</code>(同一把锁)</strong> :使用<code>synchronized</code>来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用put 添加元素，另一个线程不能使用 put 添加元素，也不能使用get，竞争会越来越激烈效率越低。</li></ul><p><strong>两者的对比图：</strong></p><p><strong>Hashtable:</strong></p><p><imgsrc="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/HashTable全表锁.png"alt="Hashtable全表锁" /></p><p style="text-align:right;font-size:13px;color:gray">https://www.cnblogs.com/chengxiao/p/6842045.html&gt;</p><p><strong>JDK1.7 的 ConcurrentHashMap：</strong></p><p><imgsrc="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/ConcurrentHashMap分段锁.jpg"alt="JDK1.7的ConcurrentHashMap" /></p><p style="text-align:right;font-size:13px;color:gray">https://www.cnblogs.com/chengxiao/p/6842045.html&gt;</p><p><strong>JDK1.8 的 ConcurrentHashMap：</strong></p><p><imgsrc="https://javaguide.cn/assets/java8_concurrenthashmap.c9951bb5.png"alt="Java8 ConcurrentHashMap 存储结构（图片来自 javadoop）" /></p><p>JDK1.8 的 <code>ConcurrentHashMap</code> 不再是 <strong>Segment 数组+ HashEntry 数组 + 链表</strong>，而是 <strong>Node 数组 + 链表 /红黑树</strong>。不过，Node 只能用于链表的情况，红黑树的情况需要使用<strong><code>TreeNode</code></strong>。当冲突链表达到一定长度时，链表会转换成红黑树。</p><h3id="concurrenthashmap-线程安全的具体实现方式底层具体实现">ConcurrentHashMap线程安全的具体实现方式/底层具体实现</h3><h4 id="jdk1.7上面有示意图">JDK1.7（上面有示意图）</h4><p>首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。</p><p><strong><code>ConcurrentHashMap</code> 是由 <code>Segment</code>数组结构和 <code>HashEntry</code> 数组结构组成</strong>。</p><p>Segment 实现了 <code>ReentrantLock</code>,所以 <code>Segment</code>是一种可重入锁，扮演锁的角色。<code>HashEntry</code>用于存储键值对数据。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Segment</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一个 <code>ConcurrentHashMap</code> 里包含一个 <code>Segment</code>数组。<code>Segment</code> 的结构和 <code>HashMap</code>类似，是一种数组和链表结构，一个 <code>Segment</code> 包含一个<code>HashEntry</code> 数组，每个 <code>HashEntry</code>是一个链表结构的元素，每个 <code>Segment</code> 守护着一个<code>HashEntry</code> 数组里的元素，当对 <code>HashEntry</code>数组的数据进行修改时，必须首先获得对应的 <code>Segment</code> 的锁。</p><h4 id="jdk1.8-上面有示意图">JDK1.8 （上面有示意图）</h4><p><code>ConcurrentHashMap</code> 取消了 <code>Segment</code>分段锁，采用 CAS 和 <code>synchronized</code> 来保证并发安全。数据结构跟HashMap1.8 的结构类似，数组+链表/红黑二叉树。Java 8在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为O(N)）转换为红黑树（寻址时间复杂度为 O(log(N))）</p><p><code>synchronized</code>只锁定当前链表或红黑二叉树的首节点，这样只要 hash不冲突，就不会产生并发，效率又提升 N 倍。</p><h2 id="collections-工具类">Collections 工具类</h2><p>Collections 工具类常用方法:</p><ol type="1"><li>排序</li><li>查找,替换操作</li><li>同步控制(不推荐，需要线程安全的集合类型时请考虑使用 JUC包下的并发集合)</li></ol><h3 id="排序操作">排序操作</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(List list)</span><span class="hljs-comment">//反转</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">shuffle</span><span class="hljs-params">(List list)</span><span class="hljs-comment">//随机排序</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(List list)</span><span class="hljs-comment">//按自然排序的升序排序</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(List list, Comparator c)</span><span class="hljs-comment">//定制排序，由Comparator控制排序逻辑</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(List list, <span class="hljs-type">int</span> i , <span class="hljs-type">int</span> j)</span><span class="hljs-comment">//交换两个索引位置的元素</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(List list, <span class="hljs-type">int</span> distance)</span><span class="hljs-comment">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面</span><br></code></pre></div></td></tr></table></figure><h3 id="查找替换操作">查找,替换操作</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list, Object key)</span><span class="hljs-comment">//对List进行二分查找，返回索引，注意List必须是有序的</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(Collection coll)</span><span class="hljs-comment">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(Collection coll, Comparator c)</span><span class="hljs-comment">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">fill</span><span class="hljs-params">(List list, Object obj)</span><span class="hljs-comment">//用指定的元素代替指定list中的所有元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">frequency</span><span class="hljs-params">(Collection c, Object o)</span><span class="hljs-comment">//统计元素出现次数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">indexOfSubList</span><span class="hljs-params">(List list, List target)</span><span class="hljs-comment">//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target)</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(List list, Object oldVal, Object newVal)</span><span class="hljs-comment">//用新元素替换旧元素</span><br></code></pre></div></td></tr></table></figure><h3 id="同步控制">同步控制</h3><p><code>Collections</code>提供了多个<code>synchronizedXxx()</code>方法·，该方法可以将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。</p><p>我们知道<code>HashSet</code>，<code>TreeSet</code>，<code>ArrayList</code>,<code>LinkedList</code>,<code>HashMap</code>,<code>TreeMap</code>都是线程不安全的。<code>Collections</code>提供了多个静态方法可以把他们包装成线程同步的集合。</p><p><strong>最好不要用下面这些方法，效率非常低，需要线程安全的集合类型时请考虑使用JUC 包下的并发集合。</strong></p><p>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">synchronizedCollection(Collection&lt;T&gt;  c) <span class="hljs-comment">//返回指定 collection 支持的同步（线程安全的）collection。</span><br>synchronizedList(List&lt;T&gt; list)<span class="hljs-comment">//返回指定列表支持的同步（线程安全的）List。</span><br>synchronizedMap(Map&lt;K,V&gt; m) <span class="hljs-comment">//返回由指定映射支持的同步（线程安全的）Map。</span><br>synchronizedSet(Set&lt;T&gt; s) <span class="hljs-comment">//返回指定 set 支持的同步（线程安全的）set。</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 基础复习</title>
    <link href="/2022/03/15/Java-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/03/15/Java-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>转载自：<ahref="https://javaguide.cn/java/basis/java-basic-questions-01.html"class="uri">https://javaguide.cn/java/basis/java-basic-questions-01.html</a></p><h2 id="基础概念与常识">基础概念与常识</h2><h3 id="java-语言有哪些特点">Java 语言有哪些特点?</h3><ol type="1"><li>简单易学；</li><li>面向对象（封装，继承，多态）；</li><li>平台无关性（Java 虚拟机实现平台无关性）；</li><li>支持多线程（C++语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而Java 语言却提供了多线程支持）；</li><li>可靠性；</li><li>安全性；</li><li>支持网络编程并且很方便（Java语言诞生本身就是为简化网络编程设计的，因此 Java语言不仅支持网络编程而且很方便）；</li><li>编译与解释并存；</li></ol><blockquote><p>**🐛 修正：C++11 开始（2011 年的时候）,C++就引入了多线程库，在windows、linux、macos都可以使用<code>std::thread</code>和<code>std::async</code>来创建线程。参考链接：<ahref="http://www.cplusplus.com/reference/thread/thread/?kw=thread"class="uri">http://www.cplusplus.com/reference/thread/thread/?kw=thread</a></p></blockquote><p>🌈 拓展一下：</p><p>“Write Once, RunAnywhere（一次编写，随处运行）”这句宣传口号，真心经典，流传了好多年！以至于，直到今天，依然有很多人觉得跨平台是Java 语言最大的优势。实际上，跨平台已经不是 Java 最大的卖点了，各种 JDK新特性也不是。目前市面上虚拟化技术已经非常成熟，比如你通过 Docker就很容易实现跨平台了。在我看来，Java 强大的生态才是！</p><h3 id="jvm-vs-jdk-vs-jre">JVM vs JDK vs JRE</h3><h4 id="jvm">JVM</h4><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><p><strong>JVM 并不是只有一种！只要满足 JVM规范，每个公司、组织或者个人都可以开发自己的专属 JVM。</strong>也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM规范的一种实现而已。</p><p>除了我们平时最常用的 HotSpot VM 外，还有 J9 VM、Zing VM、JRockit VM等 JVM 。维基百科上就有常见 JVM 的对比：<ahref="https://en.wikipedia.org/wiki/Comparison_of_Java_virtual_machines">Comparisonof Java virtual machines</a> ，感兴趣的可以去看看。并且，你可以在 <ahref="https://docs.oracle.com/javase/specs/index.html">Java SESpecifications</a> 上找到各个版本的 JDK 对应的 JVM 规范。</p><h4 id="jdk-和-jre">JDK 和 JRE</h4><p>JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE所拥有的一切，还有编译器（javac）和工具（如 javadoc 和jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Javaservlet，并且需要使用 JDK 来编译 servlet。</p><h4 id="什么是-servlet-和-jsp">什么是 Servlet 和 JSP？</h4><p>用Java开发Web应用程序时用到的技术主要有两种，即Servlet和JSP。Servlet是在服务器端执行的Java程序，一个被称为Servlet容器的程序（其实就是服务器）负责执行Java程序。而JSP(Java Server Page)则是一个页面，由JSP容器负责执行。</p><p>Servlet和JSP两者最大的区别就是，Servlet以Java程序为主，输出HTML代码时需要使用out.println函数，也就是说Java中内嵌HTML；而JSP则以HTML页面为主，需要写Java代码时则在页面中直接插入Java代码，即HTML中内嵌Java。</p><h3id="什么是字节码采用字节码的好处是什么">什么是字节码?采用字节码的好处是什么?</h3><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为<code>.class</code>的文件），它不面向任何特定的处理器，只面向虚拟机。Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以，Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p><p><strong>Java 程序从源代码到运行的过程如下所示：</strong></p><p><code>.java</code> <span class="math inline">\(\rightarrow\)</span><code>javac 编译</code> <span class="math inline">\(\rightarrow\)</span><code>.class</code> <span class="math inline">\(\rightarrow\)</span><code>解释器&amp;JIT</code> <spanclass="math inline">\(\rightarrow\)</span> <code>机器可理解的代码</code><span class="math inline">\(\rightarrow\)</span> <code>OS</code></p><p>我们需要格外注意的是 <code>.class-&gt;机器码</code> 这一步。在这一步JVM类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于Java 解释器的。这也解释了我们为什么经常会说 <strong>Java是编译与解释共存的语言</strong> 。</p><blockquote><p>HotSpot 采用了惰性评估(LazyEvaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是JIT 所需要编译的部分。JVM会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK9 引入了一种新的编译模式 AOT(Ahead of TimeCompilation)，它是直接将字节码编译成机器码，这样就避免了 JIT预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是，AOT编译器的编译质量是肯定比不上 JIT 编译器的。</p></blockquote><h3 id="为什么说-java-语言编译与解释并存">为什么说 Java语言“编译与解释并存”？</h3><p>其实这个问题我们讲字节码的时候已经提到过，因为比较重要，所以我们这里再提一下。</p><p>我们可以将高级编程语言按照程序的执行方式分为两种：</p><ul><li><strong>编译型</strong> ：<ahref="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80">编译型语言</a>会通过<ahref="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8">编译器</a>将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有C、C++、Go、Rust 等等。</li><li><strong>解释型</strong> ：<ahref="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80">解释型语言</a>会通过<ahref="https://zh.wikipedia.org/wiki/直譯器">解释器</a>一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有Python、JavaScript、PHP 等等。</li></ul><p>根据维基百科介绍：</p><blockquote><p>为了改善编译语言的效率而发展出的<ahref="https://zh.wikipedia.org/wiki/即時編譯">即时编译</a>技术，已经缩小了这两种语言间的差距。这种技术混合了编译语言与解释型语言的优点，它像编译语言一样，先把程序源代码编译成<ahref="https://zh.wikipedia.org/wiki/字节码">字节码</a>。到执行期时，再将字节码直译，之后执行。<ahref="https://zh.wikipedia.org/wiki/Java">Java</a>与<ahref="https://zh.wikipedia.org/wiki/LLVM">LLVM</a>是这种技术的代表产物。</p><p>相关阅读：<ahref="https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html">基本功| Java 即时编译器原理解析及实践</a></p></blockquote><p><strong>为什么说 Java 语言“编译与解释并存”？</strong></p><p>这是因为 Java语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java程序要经过先编译，后解释两个步骤，由 Java编写的程序需要先经过编译步骤，生成字节码（<code>.class</code>文件），这种字节码必须由 Java 解释器来解释执行。</p><h3 id="oracle-jdk-vs-openjdk">Oracle JDK vs OpenJDK</h3><p>可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么Oracle JDK 和 OpenJDK之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。</p><p>对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在2012 年有一个更详细的答案：</p><blockquote><p>问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK的代码之间有什么区别？</p><p>答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和Java WebStart的实现，以及一些闭源的第三方组件，如图形光栅化器，一些开源的第三方组件，如Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源Oracle JDK 的所有部分，除了我们考虑商业功能的部分。</p></blockquote><p><strong>总结：</strong></p><ol type="1"><li>Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：<ahref="https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence">https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence</a>。</li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK的代码几乎相同，但 Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK就可以解决问题；</li><li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK相比提供了更好的性能；</li><li>Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK 使用 BCL/OTN 协议获得许可，而 OpenJDK 根据 GPL v2许可获得许可。</li></ol><p>🌈 拓展一下：</p><ul><li>BCL 协议（Oracle Binary Code License Agreement）： 可以使用JDK（支持商用），但是不能进行修改。</li><li>OTN 协议（Oracle Technology Network License Agreement）： 11及之后新发布的 JDK用的都是这个协议，可以自己私下用，但是商用需要付费。</li></ul><p><imgsrc="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/20210425151835918.png" /></p><p>相关阅读 👍：<ahref="https://www.baeldung.com/oracle-jdk-vs-openjdk">《DifferencesBetween Oracle JDK and OpenJDK》</a></p><h3 id="java-和-c-的区别">Java 和 C++ 的区别?</h3><p>我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++比呀！没办法！！！就算没学过 C++，也要记下来。</p><p>虽然，Java 和 C++都是面向对象的语言，都支持封装、继承和多态，但是，它们还是有挺多不相同的地方：</p><ul><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java的类不可以多继承，但是接口可以多继承。</li><li>Java有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。</li><li>C ++同时支持方法重载和操作符重载，但是 Java只支持方法重载（操作符重载增加了复杂性，这与 Java最初的设计思想不符）。</li><li>......</li></ul><h2 id="基本语法">基本语法</h2><h3 id="字符型常量和字符串常量的区别">字符型常量和字符串常量的区别?</h3><ol type="1"><li><strong>形式</strong> :字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0个或若干个字符。</li><li><strong>含义</strong> : 字符常量相当于一个整型值( ASCII值),可以参加表达式运算;字符串常量代表一个地址值(该字符串在内存中存放位置)。</li><li><strong>占内存大小</strong> ： 字符常量只占 2 个字节;字符串常量占若干个字节。</li></ol><p>(<strong>注意： <code>char</code> 在 Java 中占两个字节</strong>)</p><h3 id="注释有哪几种形式">注释有哪几种形式？</h3><p>Java 中的注释有三种：</p><ol type="1"><li><p>单行注释</p></li><li><p>多行注释</p></li><li><p>文档注释。</p></li></ol><p>在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。</p><p>《Clean Code》这本书明确指出：</p><blockquote><p><strong>代码的注释不是越详细越好。实际上好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。</strong></p><p><strong>若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。</strong></p><p>举个例子：</p><p>去掉下面复杂的注释，只需要创建一个与注释所言同一事物的函数即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// check to see if the employee is eligible for full benefits</span><br><span class="hljs-keyword">if</span> ((employee.flags &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; <span class="hljs-number">65</span>))<br></code></pre></div></td></tr></table></figure><p>应替换为</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (employee.isEligibleForFullBenefits())<br></code></pre></div></td></tr></table></figure></blockquote><h3 id="标识符和关键字的区别是什么">标识符和关键字的区别是什么？</h3><p>在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了<strong>标识符</strong> 。简单来说， <strong>标识符就是一个名字</strong>。</p><p>有一些标识符，Java语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是<strong>关键字</strong>。简单来说，<strong>关键字是被赋予特殊含义的标识</strong>符。比如，在我们的日常生活中，如果我们想要开一家店，则要给这个店起一个名字，起的这个“名字”就叫标识符。但是我们店的名字不能叫“警察局”，因为“警察局”这个名字已经被赋予了特殊的含义，而“警察局”就是我们日常生活中的关键字。</p><h3 id="java-语言关键字有哪些">Java 语言关键字有哪些？</h3><table><colgroup><col style="width: 26%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /></colgroup><thead><tr class="header"><th style="text-align: left;">分类</th><th>关键字</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">访问控制</td><td>private</td><td>protected</td><td>public</td><td></td><td></td><td></td><td></td></tr><tr class="even"><td style="text-align: left;">类，方法和变量修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td></tr><tr class="odd"><td style="text-align: left;"></td><td>new</td><td>static</td><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td>enum</td></tr><tr class="even"><td style="text-align: left;">程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td></tr><tr class="odd"><td style="text-align: left;"></td><td>for</td><td>instanceof</td><td>switch</td><td>case</td><td>default</td><td>assert</td><td></td></tr><tr class="even"><td style="text-align: left;">错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td>finally</td><td></td><td></td></tr><tr class="odd"><td style="text-align: left;">包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td style="text-align: left;">基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td></tr><tr class="odd"><td style="text-align: left;"></td><td>short</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td style="text-align: left;">变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td></tr><tr class="odd"><td style="text-align: left;">保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。</p><p><code>default</code>这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。</p><ul><li>在程序控制中，当在 <code>switch</code>中匹配不到任何情况时，可以使用 <code>default</code>来编写默认匹配的情况。</li><li>在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用<code>default</code> 关键字来定义一个方法的默认实现。</li><li>在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符<code>default</code>，但是这个修饰符加上了就会报错。</li></ul></blockquote><p>注意 ⚠️：虽然 <code>true</code>, <code>false</code>, 和<code>null</code>看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。</p><p>官方文档：<ahref="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></p><h3 id="自增自减运算符">自增自减运算符</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少1，Java提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。</p><p>++ 和 --运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。例如，当<code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当<code>b = a++</code> 时，先赋值(赋值给 b)，再自增（自己增加1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。</p><ul><li>前置 ++ 与后置 ++ 都是先将变量的值加1，而不是前置++先加1然后运算，而后置++ 先运算后加1。</li><li>从程序上说，后置 ++先将变量赋值给一个临时变量，然后将变量的值加1，接下来使用那个临时变量参与运算。</li><li>从指令上说，后置 ++在执行增值指令（iinc）前，先将变量的值压入栈，执行增值指令后，使用的是之前压入栈的值。</li></ul><h3 id="continuebreak-和-return-的区别是什么">continue、break 和 return的区别是什么？</h3><p>在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后，提前终止循环，这就需要用到下面几个关键词：</p><ol type="1"><li><code>continue</code>：指跳出当前的这一次循环，继续下一次循环。</li><li><code>break</code> ：指跳出整个循环体，继续执行循环下面的语句。</li></ol><p><code>return</code> 用于跳出所在方法，结束该方法的运行。return一般有两种用法：</p><ol type="1"><li><code>return;</code> ：直接使用 return结束方法执行，用于没有返回值函数的方法</li><li><code>return value;</code> ：return一个特定值，用于有返回值函数的方法</li></ol><p>思考一下：下列语句的运行结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>            flag = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;4&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;xixi&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        System.out.println(<span class="hljs-string">&quot;haha&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;heihei&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">0<br>xixi<br>1<br>2<br>xixi<br>3<br>haha<br></code></pre></div></td></tr></table></figure><h3 id="方法">方法</h3><h4id="什么是方法的返回值方法有哪几种类型">什么是方法的返回值?方法有哪几种类型？</h4><p><strong>方法的返回值</strong>是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！</p><p>我们可以按照方法的返回值和参数类型将方法分为下面这几种：</p><p><strong>1.无参数无返回值的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//......</span><br>&#125;<br><span class="hljs-comment">// 下面这个方法也没有返回值，虽然用到了 return</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">if</span> (...) &#123;<br>        <span class="hljs-comment">// 表示结束方法的执行,下方的输出语句不会执行</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.println(a);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>2.有参数无返回值的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(Parameter <span class="hljs-number">1</span>, ..., Parameter n)</span> &#123;<br>    <span class="hljs-comment">//......</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>3.有返回值无参数的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//......</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>4.有返回值有参数的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f4</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a * b;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4id="静态方法为什么不能调用非静态成员">静态方法为什么不能调用非静态成员?</h4><p>这个需要结合 JVM 的相关知识，主要原因如下：</p><ol type="1"><li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。</li><li>在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</li></ol><h4 id="静态方法和实例方法有何不同">静态方法和实例方法有何不同？</h4><p><strong>1、调用方式</strong></p><p>在外部调用静态方法时，可以使用 <code>类名.方法名</code>的方式，也可以使用 <code>对象.方法名</code>的方式，而实例方法只有后面这种方式。也就是说，<strong>调用静态方法可以无需创建对象</strong>。</p><p>不过，需要注意的是一般不建议使用 <code>对象.方法名</code>的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。</p><p>因此，一般建议使用 <code>类名.方法名</code>的方式来调用静态方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//......</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staicMethod</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-comment">//......</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-comment">// 调用实例方法</span><br>        person.method();<br>        <span class="hljs-comment">// 调用静态方法</span><br>        Person.staicMethod()<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>2、访问类成员是否存在限制</strong></p><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。</p><h4 id="重载和重写的区别">重载和重写的区别</h4><blockquote><p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p><p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p></blockquote><p><strong>重载</strong></p><p>发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p><p>《Java 核心技术》这本书是这样介绍重载的：</p><blockquote><p>如果多个方法(比如 <code>StringBuilder</code>的构造方法)有相同的名字、不同的参数， 便产生了重载。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。如果编译器找不到匹配的参数， 就会产生编译时错误， 因为根本不存在匹配，或者没有一个比其他的更好(这个过程被称为重载解析(overloadingresolution))。</p><p>Java 允许重载任何方法， 而不只是构造器方法。</p></blockquote><p>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</p><p><strong>重写</strong></p><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p><ol type="1"><li>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li><li>如果父类方法访问修饰符为 <code>private/final/static</code>则子类就不能重写该方法，但是被 <code>static</code>修饰的方法能够被再次声明。</li><li>构造方法无法被重写</li></ol><p>综上：<strong>重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。</strong></p><table><colgroup><col style="width: 12%" /><col style="width: 9%" /><col style="width: 78%" /></colgroup><thead><tr class="header"><th style="text-align: left;">区别点</th><th style="text-align: left;">重载方法</th><th style="text-align: left;">重写方法</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">发生范围</td><td style="text-align: left;">同一个类</td><td style="text-align: left;">子类</td></tr><tr class="even"><td style="text-align: left;">参数列表</td><td style="text-align: left;">必须修改</td><td style="text-align: left;">一定不能修改</td></tr><tr class="odd"><td style="text-align: left;">返回类型</td><td style="text-align: left;">可修改</td><tdstyle="text-align: left;">子类方法返回值类型应比父类方法返回值类型更小或相等</td></tr><tr class="even"><td style="text-align: left;">异常</td><td style="text-align: left;">可修改</td><tdstyle="text-align: left;">子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</td></tr><tr class="odd"><td style="text-align: left;">访问修饰符</td><td style="text-align: left;">可修改</td><tdstyle="text-align: left;">一定不能做更严格的限制（可以降低限制）</td></tr><tr class="even"><td style="text-align: left;">发生阶段</td><td style="text-align: left;">编译期</td><td style="text-align: left;">运行期</td></tr></tbody></table><p><strong>为什么 private/final/static 方法不能被重写？</strong></p><ul><li>我们知道，如果在父类中修饰了一个private的方法，子类继承之后，对子类也是不可见的。子类重写则在编译阶段就会报错。</li><li>final中文意思是最终，其修饰的，无论是属性还是方法，都不能被修改，对于方法，就是不不能被重写，但是可以被重载。</li><li>Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法类的任何实例都不相关，所以概念上不适用。</li></ul><p><strong>方法的重写要遵循“两同两小一大”</strong>（以下内容摘录自《疯狂Java 讲义》）：</p><ul><li>“两同”即方法名相同、形参列表相同；</li><li>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</li><li>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</li></ul><p>⭐️ 关于 <strong>重写的返回值类型</strong>这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是void和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;超级英雄&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;超人&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Hero <span class="hljs-title function_">hero</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperSuperMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SuperMan</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;超级超级英雄&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> SuperMan <span class="hljs-title function_">hero</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMan</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="和-equals-的区别">== 和 equals() 的区别</h3><p><strong><code>==</code></strong>对于基本类型和引用类型的作用效果是不同的：</p><ul><li>对于基本数据类型来说，<code>==</code> 比较的是值。</li><li>对于引用数据类型来说，<code>==</code> 比较的是对象的内存地址。</li></ul><blockquote><p>因为 Java 只有值传递，所以，对于 ==来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。</p></blockquote><p><strong><code>equals()</code></strong>不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类，因此所有的类都有<code>equals()</code>方法。</p><p><code>Object</code> 类 <code>equals()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>     <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>equals()</code> 方法存在两种使用情况：</p><ul><li><strong>类没有重写 <code>equals()</code>方法</strong>：通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是<code>Object</code>类<code>equals()</code>方法。</li><li><strong>类重写了 <code>equals()</code>方法</strong> ：一般我们都重写<code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回true(即，认为这两个对象相等)。</li></ul><p>举个例子（这里只是为了举例。实际上，你按照下面这种写法的话，像 IDEA这种比较智能的 IDE 都会提示你将 <code>==</code> 换成<code>equals()</code> ）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// a 为一个引用</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// b为另一个引用,对象的内容一样</span><br><span class="hljs-type">String</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 放在常量池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 从常量池中查找</span><br>System.out.println(aa == bb);<span class="hljs-comment">// true</span><br>System.out.println(a == b);<span class="hljs-comment">// false</span><br>System.out.println(a.equals(b));<span class="hljs-comment">// true</span><br>System.out.println(<span class="hljs-number">42</span> == <span class="hljs-number">42.0</span>);<span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p><code>String</code> 中的 <code>equals</code> 方法是被重写过的，因为<code>Object</code> 的 <code>equals</code>方法是比较的对象的内存地址，而 <code>String</code> 的<code>equals</code> 方法比较的是对象的值。</p><p>当创建 <code>String</code>类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个<code>String</code> 对象。</p><p><code>String</code>类<code>equals()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">anotherString</span> <span class="hljs-operator">=</span> (String)anObject;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> value.length;<br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-type">char</span> v1[] = value;<br>            <span class="hljs-type">char</span> v2[] = anotherString.value;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="hashcode-与-equals">hashCode() 与 equals()</h3><p>面试官可能会问你：“你重写过 <code>hashCode()</code> 和<code>equals()</code>么?为什么重写 <code>equals()</code> 时必须重写<code>hashCode()</code> 方法？”</p><p>一个非常基础的问题，面试中的重中之重，然而，很多求职者还是会回答不到点子上去。</p><h4 id="hashcode-有什么用">hashCode() 有什么用？</h4><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code>整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。</p><p><code>hashCode()</code>定义在 JDK 的 <code>Object</code>类中，这就意味着 Java 中的任何类都包含有 <code>hashCode()</code>函数。另外需要注意的是： <code>Object</code> 的 <code>hashCode()</code>方法是本地方法，也就是用 C 语言或 C++实现的，该方法通常用来将对象的内存地址转换为整数之后返回。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>;<br></code></pre></div></td></tr></table></figure><p>散列表存储的是键值对(key-value)，它的特点是：<strong>能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</strong></p><h4 id="为什么要有-hashcode">为什么要有 hashCode？</h4><p>我们以“<code>HashSet</code> 如何检查重复”为例子来说明为什么要有<code>hashCode</code>？</p><p>下面这段内容摘自我的 Java 启蒙书《Head First Java》:</p><blockquote><p>当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code>会先计算对象的 <code>hashCode</code>值来判断对象加入的位置，同时也会与其他已经加入的对象的<code>hashCode</code> 值作比较，如果没有相符的<code>hashCode</code>，<code>HashSet</code>会假设对象没有重复出现。但是如果发现有相同 <code>hashCode</code>值的对象，这时会调用 <code>equals()</code> 方法来检查<code>hashCode</code>相等的对象是否真的相同。如果两者相同，<code>HashSet</code>就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了<code>equals</code> 的次数，相应就大大提高了执行速度。</p></blockquote><p>其实， <code>hashCode()</code> 和<code>equals()</code>都是用于比较两个对象是否相等。</p><p><strong>那为什么 JDK 还要同时提供这两个方法呢？</strong></p><p>这是因为在一些容器（比如<code>HashMap</code>、<code>HashSet</code>）中，有了<code>hashCode()</code>之后，判断元素是否在对应容器中的效率会更高（参考添加元素进<code>HastSet</code>的过程）！</p><p>我们在前面也提到了添加元素进<code>HastSet</code>的过程，如果<code>HashSet</code> 在对比的时候，同样的 <code>hashCode</code>有多个对象，它会继续使用 <code>equals()</code>来判断是否真的相同。也就是说 <code>hashCode</code>帮助我们大大缩小了查找成本。</p><p><strong>那为什么不只提供 <code>hashCode()</code>方法呢？</strong></p><p>这是因为两个对象的<code>hashCode</code>值相等并不代表两个对象就相等。</p><p><strong>那为什么两个对象有相同的 <code>hashCode</code>值，它们也不一定是相等的？</strong></p><p>因为 <code>hashCode()</code>所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的<code>hashCode</code> )。</p><p>总结下来就是 ：</p><ul><li>如果两个对象的<code>hashCode</code>值相等，那这两个对象不一定相等（哈希碰撞）。</li><li>如果两个对象的<code>hashCode</code>值相等并且<code>equals()</code>方法也返回<code>true</code>，我们才认为这两个对象相等。</li><li>如果两个对象的<code>hashCode</code>值不相等，我们就可以直接认为这两个对象不相等。</li></ul><p>相信大家看了我前面对 <code>hashCode()</code> 和 <code>equals()</code>的介绍之后，下面这个问题已经难不倒你们了。</p><h4 id="为什么重写-equals-时必须重写-hashcode-方法">为什么重写 equals()时必须重写 hashCode() 方法？</h4><p>因为两个相等的对象的 <code>hashCode</code> 值必须是相等。也就是说如果<code>equals</code> 方法判断两个对象是相等的，那这两个对象的<code>hashCode</code> 值也要相等。</p><p>如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code>方法的话就可能会导致 <code>equals</code>方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。</p><p><strong>思考</strong> ：重写 <code>equals()</code> 时没有重写<code>hashCode()</code> 方法的话，使用 <code>HashMap</code>可能会出现什么问题。</p><p><strong>总结</strong> ：</p><ul><li><code>equals</code> 方法判断两个对象是相等的，那这两个对象的<code>hashCode</code> 值也要相等。</li><li>两个对象有相同的 <code>hashCode</code>值，他们也不一定是相等的（哈希碰撞）。</li></ul><p>更多关于 <code>hashCode()</code> 和 <code>equals()</code>的内容可以查看：<ahref="https://www.cnblogs.com/skywang12345/p/3324958.html">JavahashCode() 和 equals()的若干问题解答</a></p><h3 id="什么是可变长参数">什么是可变长参数？</h3><p>从 Java5 开始，Java支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面的这个<code>printVariable</code> 方法就可以接受 0 个或者多个参数。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">(String... args)</span> &#123;<br>   <span class="hljs-comment">//......</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>另外，可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">(String arg1, String... args)</span> &#123;<br>   <span class="hljs-comment">//......</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？</strong></p><p>答案是会优先匹配固定参数的方法，因为固定参数的方法匹配度更高。</p><p>我们通过下面这个例子来证明一下。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableLengthArgument</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printVariable</span><span class="hljs-params">(String... args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String s : args) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printVariable</span><span class="hljs-params">(String arg1, String arg2)</span> &#123;<br>        System.out.println(arg1 + arg2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        printVariable(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>        printVariable(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">ab<br><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">b</span><br>c<br>d<br></code></pre></div></td></tr></table></figure><p>另外，Java 的可变参数编译后实际会被转换成一个数组，我们看编译后生成的<code>class</code>文件就可以看出来了。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableLengthArgument</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printVariable</span><span class="hljs-params">(String... args)</span> &#123;<br>        String[] var1 = args;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> args.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var3 &lt; var2; ++var3) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> var1[var3];<br>            System.out.println(s);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// ......</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="基本数据类型">基本数据类型</h2><h3 id="java-中的几种基本数据类型了解么">Java中的几种基本数据类型了解么？</h3><p>Java 中有 8 种基本数据类型，分别为：</p><ol type="1"><li>6 种数字类型：<ul><li>4种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>2 种浮点型：<code>float</code>、<code>double</code></li></ul></li><li>1 种字符类型：<code>char</code></li><li>1 种布尔型：<code>boolean</code>。</li></ol><p>这 8 种基本数据类型的默认值以及所占空间的大小如下：</p><table><colgroup><col style="width: 13%" /><col style="width: 6%" /><col style="width: 6%" /><col style="width: 10%" /><col style="width: 63%" /></colgroup><thead><tr class="header"><th style="text-align: left;">基本类型</th><th style="text-align: left;">位数</th><th style="text-align: left;">字节</th><th style="text-align: left;">默认值</th><th>取值范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>byte</code></td><td style="text-align: left;">8</td><td style="text-align: left;">1</td><td style="text-align: left;">0</td><td>-128 ~ 127</td></tr><tr class="even"><td style="text-align: left;"><code>short</code></td><td style="text-align: left;">16</td><td style="text-align: left;">2</td><td style="text-align: left;">0</td><td>-32768 ~ 32767</td></tr><tr class="odd"><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">32</td><td style="text-align: left;">4</td><td style="text-align: left;">0</td><td>-2147483648 ~ 2147483647</td></tr><tr class="even"><td style="text-align: left;"><code>long</code></td><td style="text-align: left;">64</td><td style="text-align: left;">8</td><td style="text-align: left;">0L</td><td>-9223372036854775808 ~ 9223372036854775807</td></tr><tr class="odd"><td style="text-align: left;"><code>char</code></td><td style="text-align: left;">16</td><td style="text-align: left;">2</td><td style="text-align: left;">'u0000'</td><td>0 ~ 65535</td></tr><tr class="even"><td style="text-align: left;"><code>float</code></td><td style="text-align: left;">32</td><td style="text-align: left;">4</td><td style="text-align: left;">0f</td><td>1.4E-45 ~ 3.4028235E38</td></tr><tr class="odd"><td style="text-align: left;"><code>double</code></td><td style="text-align: left;">64</td><td style="text-align: left;">8</td><td style="text-align: left;">0d</td><td>4.9E-324 ~ 1.7976931348623157E308</td></tr><tr class="even"><td style="text-align: left;"><code>boolean</code></td><td style="text-align: left;">1</td><td style="text-align: left;"></td><td style="text-align: left;">false</td><td>true、false</td></tr></tbody></table><p>对于 <code>boolean</code>，官方文档未明确定义，它依赖于 JVM厂商的具体实现。逻辑上理解是占用 1位，但是实际中会考虑计算机高效存储因素。</p><p>另外，Java的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化。这种所占存储空间大小的不变性是Java 程序比用其他大多数语言编写的程序更具可移植性的原因之一（《Java编程思想》2.2 节有提到）。</p><p><strong>注意：</strong></p><ol type="1"><li>Java 里使用 <code>long</code> 类型的数据一定要在数值后面加上<strong>L</strong>，否则将作为整型解析。</li><li><code>char a = 'h'</code>char:单引号，<code>String a = "hello"</code> :双引号。</li></ol><p>这八种基本类型都有对应的包装类分别为：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code>。</p><p>包装类型不赋值就是 <code>Null</code> ，而基本类型有默认值且不是<code>Null</code>。</p><p>另外，这个问题建议还可以先从 JVM 层面来分析。</p><p>基本数据类型直接存放在 Java虚拟机栈中的局部变量表中，而包装类型属于对象类型，我们知道对象实例都存在于堆中。相比于对象类型，基本数据类型占用的空间非常小。</p><blockquote><p>《深入理解 Java 虚拟机》：局部变量表主要存放了编译期可知的基本数据类型<strong>（boolean、byte、char、short、int、float、long、double）</strong>、<strong>对象引用</strong>（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p></blockquote><h3 id="包装类型的常量池技术了解么">包装类型的常量池技术了解么？</h3><p>Java 基本类型的包装类的大部分都实现了常量池技术。</p><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code>这 4 种包装类默认创建了数值 <strong>[-128，127]</strong>的相应类型的缓存数据，<code>Character</code> 创建了数值在<strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回<code>True</code> or <code>False</code>。</p><p><strong>Integer 缓存源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerCache</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong><code>Character</code> 缓存源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Character <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>    <span class="hljs-keyword">if</span> (c &lt;= <span class="hljs-number">127</span>) &#123; <span class="hljs-comment">// must cache</span><br>      <span class="hljs-keyword">return</span> CharacterCache.cache[(<span class="hljs-type">int</span>)c];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>(c);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterCache</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CharacterCache</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Character cache[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>[<span class="hljs-number">127</span> + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cache.length; i++)<br>            cache[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>((<span class="hljs-type">char</span>)i);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong><code>Boolean</code> 缓存源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">boolean</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> (b ? TRUE : FALSE);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p><p>两种浮点数类型的包装类 <code>Float</code>,<code>Double</code>并没有实现常量池技术。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>;<br>System.out.println(i1 == i2);<span class="hljs-comment">// 输出 true</span><br><br><span class="hljs-type">Float</span> <span class="hljs-variable">i11</span> <span class="hljs-operator">=</span> <span class="hljs-number">333f</span>;<br><span class="hljs-type">Float</span> <span class="hljs-variable">i22</span> <span class="hljs-operator">=</span> <span class="hljs-number">333f</span>;<br>System.out.println(i11 == i22);<span class="hljs-comment">// 输出 false</span><br><br><span class="hljs-type">Double</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br>System.out.println(i3 == i4);<span class="hljs-comment">// 输出 false</span><br></code></pre></div></td></tr></table></figure><p>下面我们来看一下问题。下面的代码的输出结果是 <code>true</code> 还是<code>false</code> 呢？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">40</span>);<br>System.out.println(i1==i2);<br></code></pre></div></td></tr></table></figure><p><code>Integer i1=40</code>这一行代码会发生装箱，也就是说这行代码等价于<code>Integer i1=Integer.valueOf(40)</code> 。因此，<code>i1</code>直接使用的是常量池中的对象。而<code>Integer i2 = new Integer(40)</code>会直接创建新的对象。</p><p>因此，答案是 <code>false</code> 。你答对了吗？</p><p>记住：<strong>所有整型包装类对象之间值的比较，全部使用 equals方法比较</strong>。</p><h3id="自动装箱与拆箱了解吗原理是什么">自动装箱与拆箱了解吗？原理是什么？</h3><p><strong>什么是自动拆装箱？</strong></p><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <span class="hljs-comment">//装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> i;   <span class="hljs-comment">//拆箱</span><br></code></pre></div></td></tr></table></figure><p>上面这两行代码对应的字节码为：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">L1<br><br> LINENUMBER <span class="hljs-number">8</span> L1<br><br> ALOAD <span class="hljs-number">0</span><br><br> BIPUSH <span class="hljs-number">10</span><br><br> INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;<br><br> PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;<br><br>L2<br><br> LINENUMBER <span class="hljs-number">9</span> L2<br><br> ALOAD <span class="hljs-number">0</span><br><br> ALOAD <span class="hljs-number">0</span><br><br> GETFIELD AutoBoxTest.i : Ljava/lang/Integer;<br><br> INVOKEVIRTUAL java/lang/Integer.intValue ()I<br><br> PUTFIELD AutoBoxTest.n : I<br><br> RETURN<br></code></pre></div></td></tr></table></figure><p>从字节码中，我们发现装箱其实就是调用了包装类的<code>valueOf()</code>方法，拆箱其实就是调用了<code>xxxValue()</code>方法。</p><p>因此，</p><ul><li><code>Integer i = 10</code> 等价于<code>Integer i = Integer.valueOf(10)</code></li><li><code>int n = i</code> 等价于<code>int n = i.intValue()</code>;</li></ul><p>注意：<strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 应该使用 long 而不是 Long</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= Integer.MAX_VALUE; i++)<br>        sum += i;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="面向对象基础">面向对象基础</h2><h3 id="面向对象和面向过程的区别">面向对象和面向过程的区别</h3><p>两者的主要区别在于解决问题的方式不同：</p><ul><li>面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。</li><li>面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。</li></ul><p>另外，面向对象开发的程序一般更易维护、易复用、易扩展。</p><h3 id="面向过程-面向过程性能比面向对象高">面向过程：面向过程性能比面向对象高？</h3><p>一般来说，是要高的。</p><p>面向过程 ：面向过程性能比面向对象高。因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。</p><p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p><p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p><h3id="成员变量与局部变量的区别有哪些">成员变量与局部变量的区别有哪些？</h3><ul><li><strong>语法形式</strong>：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被<code>public</code>,<code>private</code>,<code>static</code>等修饰符所修饰，而局部变量不能被访问控制修饰符及 <code>static</code>所修饰；但是，成员变量和局部变量都能被 <code>final</code> 所修饰。</li><li><strong>存储方式</strong>：从变量在内存中的存储方式来看,如果成员变量是使用 <code>static</code>修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code>修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li><li><strong>生存时间</strong>：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。</li><li><strong>默认值</strong>：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被<code>final</code>修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li></ul><h3id="创建一个对象用什么运算符对象实体与对象引用有何不同">创建一个对象用什么运算符?对象实体与对象引用有何不同?</h3><p>new 运算符，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。</p><p>一个对象引用可以指向 0 个或 1个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n个引用指向它（可以用 n 条绳子系住一个气球）。</p><h3id="对象的相等与指向他们的引用相等两者有什么不同">对象的相等与指向他们的引用相等,两者有什么不同?</h3><ul><li>对象的相等一般比较的是内存中存放的内容是否相等。</li><li>引用相等一般比较的是他们指向的内存地址是否相等。</li></ul><h3 id="一个类的构造方法的作用是什么">一个类的构造方法的作用是什么?</h3><p>构造方法是一种特殊的方法，主要作用是完成对象的初始化工作。</p><h3id="如果一个类没有声明构造方法该程序能正确执行吗">如果一个类没有声明构造方法，该程序能正确执行吗?</h3><p>如果一个类没有声明构造方法，也可以执行！因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java就不会再添加默认的无参数的构造方法了，这时候，就不能直接 new一个对象而不传递参数了，所以我们一直在不知不觉地使用构造方法，这也是为什么我们在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）。如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。</p><h3id="构造方法有哪些特点是否可被-override">构造方法有哪些特点？是否可被override?</h3><p>构造方法特点如下：</p><ul><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ul><p>构造方法不能被 override（重写）,但是可以overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h3 id="面向对象三大特征">面向对象三大特征</h3><h4 id="封装">封装</h4><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了（当然现在还有很多其他方法，这里只是为了举例子）。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<span class="hljs-comment">//id属性私有化</span><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//name属性私有化</span><br><br>    <span class="hljs-comment">//获取id的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-comment">//设置id的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-comment">//获取name的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">//设置name的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="继承">继承</h4><p>不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间，提高我们的开发效率。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol type="1"><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h4 id="多态">多态</h4><p>多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。</p><p><strong>多态的特点:</strong></p><ul><li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</li><li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</li><li>多态不能调用“只在子类存在但在父类不存在”的方法；</li><li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li></ul><h3id="接口和抽象类有什么共同点和区别">接口和抽象类有什么共同点和区别？</h3><p><strong>共同点</strong> ：</p><ul><li>都不能被实例化。</li><li>都可以包含抽象方法。</li><li>都可以有默认实现的方法（Java 8 可以用 <code>default</code>关键在接口中定义默认方法）。</li></ul><p><strong>区别</strong> ：</p><ul><li>接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。</li><li>一个类只能继承一个类，但是可以实现多个接口。</li><li>接口中的成员变量只能是 <code>public static final</code>类型的，不能被修改且必须有初始值，而抽象类的成员变量默认default，可在子类中被重新定义，也可被重新赋值。</li></ul><h3id="深拷贝和浅拷贝区别了解吗什么是引用拷贝">深拷贝和浅拷贝区别了解吗？什么是引用拷贝？</h3><p>关于深拷贝和浅拷贝区别，我这里先给结论：</p><ul><li><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li><li><strong>深拷贝</strong>：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</li></ul><p>上面的结论没有完全理解的话也没关系，我们来看一个具体的案例！</p><p><strong>浅拷贝</strong></p><p>浅拷贝的示例代码如下，我们这里实现了 <code>Cloneable</code>接口，并重写了 <code>clone()</code> 方法。</p><p><code>clone()</code> 方法的实现很简单，直接调用的是父类<code>Object</code> 的 <code>clone()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 省略构造函数、Getter&amp;Setter方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Address <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (Address) <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">private</span> Address address;<br>    <span class="hljs-comment">// 省略构造函数、Getter&amp;Setter方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) <span class="hljs-built_in">super</span>.clone();<br>            <span class="hljs-keyword">return</span> person;<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试 ：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(<span class="hljs-string">&quot;武汉&quot;</span>));<br><span class="hljs-type">Person</span> <span class="hljs-variable">person1Copy</span> <span class="hljs-operator">=</span> person1.clone();<br><span class="hljs-comment">// true</span><br>System.out.println(person1.getAddress() == person1Copy.getAddress());<br></code></pre></div></td></tr></table></figure><p>从输出结构就可以看出， <code>person1</code> 的克隆对象和<code>person1</code> 使用的仍然是同一个 <code>Address</code> 对象。</p><p><strong>深拷贝</strong></p><p>这里我们简单对 <code>Person</code> 类的 <code>clone()</code>方法进行修改，连带着要把 <code>Person</code> 对象内部的<code>Address</code> 对象一起复制。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Person <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) <span class="hljs-built_in">super</span>.clone();<br>        person.setAddress(person.getAddress().clone());<br>        <span class="hljs-keyword">return</span> person;<br>    &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试 ：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(<span class="hljs-string">&quot;武汉&quot;</span>));<br><span class="hljs-type">Person</span> <span class="hljs-variable">person1Copy</span> <span class="hljs-operator">=</span> person1.clone();<br><span class="hljs-comment">// false</span><br>System.out.println(person1.getAddress() == person1Copy.getAddress());<br></code></pre></div></td></tr></table></figure><p>从输出结构就可以看出，虽然 <code>person1</code> 的克隆对象和<code>person1</code> 包含的 <code>Address</code>对象已经是不同的了。</p><p><strong>那什么是引用拷贝呢？</strong>简单来说，引用拷贝就是两个不同的引用指向同一个对象。</p><p>我专门画了一张图来描述浅拷贝、深拷贝、引用拷贝：</p><p><img src="./images/shallow&amp;deep-copy.png" /></p><h2 id="java-常见对象">Java 常见对象</h2><h3 id="object">Object</h3><h4 id="object-类的常见方法有哪些">Object 类的常见方法有哪些？</h4><p>Object 类是一个特殊的类，是所有类的父类。它主要提供了以下 11个方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getClass()<span class="hljs-comment">//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> <span class="hljs-comment">//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><span class="hljs-comment">//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。</span><br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException<span class="hljs-comment">//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。</span><br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><span class="hljs-comment">//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span><span class="hljs-comment">//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyAll</span><span class="hljs-params">()</span><span class="hljs-comment">//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException<span class="hljs-comment">//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, <span class="hljs-type">int</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException<span class="hljs-comment">//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException<span class="hljs-comment">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span><br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123; &#125;<span class="hljs-comment">//实例被垃圾回收器回收的时候触发的操作</span><br></code></pre></div></td></tr></table></figure><h3 id="string">String</h3><h4id="stringstringbufferstringbuilder-的区别string-为什么是不可变的">String、StringBuffer、StringBuilder的区别？String 为什么是不可变的?</h4><p><strong>可变性</strong></p><p>简单的来说：<code>String</code> 类中使用 <code>final</code>关键字修饰字符数组来保存字符串，<del>所以<code>String</code>对象是不可变的。</del></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>🐛 修正 ： 我们知道被 <code>final</code>关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变，修饰的变量是引用类型则不能再指向其他对象。因此，<code>final</code>关键字修饰的数组保存字符串并不是 <code>String</code>不可变的根本原因，因为这个数组保存的字符串是可变的（<code>final</code>修饰引用类型变量的情况）。</p><p><code>String</code> 真正不可变有下面几点原因：</p><ol type="1"><li>保存字符串的数组被 <code>final</code>修饰且为私有的，并且<code>String</code>类没有提供/暴露修改这个字符串的方法。</li><li><code>String</code> 类被 <code>final</code>修饰导致其不能被继承，进而避免了子类破坏 <code>String</code>不可变。</li></ol><p>相关阅读：<ahref="https://www.zhihu.com/question/20618891/answer/114125846">如何理解String 类型值的不可变？ - 知乎提问</a></p><p>补充（来自<ahref="https://github.com/Snailclimb/JavaGuide/issues/675">issue675</a>）：在 Java 9 之后，<code>String</code>、<code>StringBuilder</code> 与 <code>StringBuffer</code> 的实现改用byte 数组存储字符串。</p></blockquote><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自<code>AbstractStringBuilder</code> 类，在<code>AbstractStringBuilder</code>中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和<code>private</code> 关键字修饰，最关键的是这个<code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法比如<code>append</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStringBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Appendable</span>, CharSequence &#123;<br>    <span class="hljs-type">char</span>[] value;<br>    <span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> appendNull();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> str.length();<br>        ensureCapacityInternal(count + len);<br>        str.getChars(<span class="hljs-number">0</span>, len, value, count);<br>        count += len;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>线程安全性</strong></p><p><code>String</code>中的对象是不可变的，也就可以理解为常量，线程安全。<code>AbstractStringBuilder</code>是 <code>StringBuilder</code> 与 <code>StringBuffer</code>的公共父类，定义了一些字符串的基本操作，如<code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code>等公共方法。<code>StringBuffer</code>对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code>并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能</strong></p><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的<code>String</code> 对象，然后将指针指向新的 <code>String</code>对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code>对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用<code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol type="1"><li>操作少量的数据: 适用 <code>String</code></li><li>单线程操作字符串缓冲区下操作大量数据: 适用<code>StringBuilder</code></li><li>多线程操作字符串缓冲区下操作大量数据: 适用<code>StringBuffer</code></li></ol><h4 id="字符串拼接用-还是-stringbuilder">字符串拼接用“+” 还是StringBuilder?</h4><p>Java 语言本身并不支持运算符重载，“+”和“+=”是专门为 String类重载过的运算符，也是 Java 中仅有的两个重载过的元素符。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;he&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;llo&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> str1 + str2 + str3;<br></code></pre></div></td></tr></table></figure><p>对象引用和“+”的字符串拼接方式，实际上是通过<code>StringBuilder</code> 调用 <code>append()</code>方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个<code>String</code> 对象 。</p><p><imgsrc="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/touzi/image-20220131173604062.png" /></p><p>不过，在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：<strong>编译器不会创建单个<code>StringBuilder</code> 以复用，会导致创建过多的<code>StringBuilder</code> 对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String[] arr = &#123;<span class="hljs-string">&quot;he&quot;</span>, <span class="hljs-string">&quot;llo&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    s += arr[i];<br>&#125;<br>System.out.println(s);<br></code></pre></div></td></tr></table></figure><p><code>StringBuilder</code>对象是在循环内部被创建的，这意味着每循环一次就会创建一个<code>StringBuilder</code> 对象。</p><p><imgsrc="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/touzi/image-20220131175013108.png" /></p><p>如果直接使用 <code>StringBuilder</code>对象进行字符串拼接的话，就不会存在这个问题了。</p><h4 id="stringequals-和-objectequals-有何区别">String#equals() 和Object#equals() 有何区别？</h4><p><code>String</code> 中的 <code>equals</code>方法是被重写过的，比较的是 String 字符串的值是否相等。<code>Object</code> 的 <code>equals</code>方法是比较的对象的内存地址。</p><h4 id="字符串常量池的作用了解吗">字符串常量池的作用了解吗？</h4><p><strong>字符串常量池</strong> 是 JVM为了提升性能和减少内存消耗针对字符串（String类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 放在常量池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 从常量池中查找</span><br>System.out.println(aa==bb);<span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区。JDK1.7的时候，字符串常量池被从方法区拿到了堆中。</p><p>你可以在 JVM 部分找到更多关于字符串常量池的介绍。</p><h2 id="参考">参考</h2><ul><li><ahref="https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre"class="uri">https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre</a></li><li><a href="https://www.educba.com/oracle-vs-openjdk/"class="uri">https://www.educba.com/oracle-vs-openjdk/</a></li><li><ahref="https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk"class="uri">https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 代理的理解与整理</title>
    <link href="/2022/03/14/Java-%E4%BB%A3%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/14/Java-%E4%BB%A3%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>大部分转载自：</p><p><a href="https://javaguide.cn/java/basis/proxy.html"class="uri">https://javaguide.cn/java/basis/proxy.html</a></p><h1 id="代理模式">1、代理模式</h1><p>代理模式是一种比较好理解的设计模式。简单来说就是我们使用代理对象来代替对真实对象(realobject)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p><p>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</p><p>举个例子：你找了小红来帮你问话，小红就可以看作是代理你的代理对象，代理的行为（方法）是问话。</p><p>代理模式有静态代理和动态代理两种实现方式，我们先来看一下静态代理模式的实现。</p><h1 id="静态代理">2、静态代理</h1><p><strong>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（<em>后面会具体演示代码</em>），非常不灵活（<em>比如接口一旦新增加方法，目标对象和代理对象都要进行修改</em>）且麻烦(<em>需要对每个目标类都单独写一个代理类</em>)。</strong>实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p><p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说，<strong>静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class 文件。</strong></p><p>静态代理实现步骤:</p><ol type="1"><li>定义一个接口及其实现类；</li><li>创建一个代理类同样实现这个接口</li><li>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li></ol><p>下面通过代码展示！</p><p><strong>1.定义发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>2.实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message: &quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>3.创建代理类并同样实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SmsService smsService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmsProxy</span><span class="hljs-params">(SmsService smsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.smsService = smsService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 调用方法之前，我们可以添加一点自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method send()&quot;</span>);<br>        smsService.send(message);<br>        <span class="hljs-comment">// 调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method send()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>4.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态代理的理解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SmsService</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>();<br>        <span class="hljs-type">SmsProxy</span> <span class="hljs-variable">smsProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsProxy</span>(smsService);<br>        smsProxy.send(<span class="hljs-string">&quot;Python&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">before method send()<br>send message: Python<br>after method send()<br></code></pre></div></td></tr></table></figure><p>可以输出结果看出，我们已经增加了 <code>SmsServiceImpl</code> 的<code>send()</code> 方法。</p><h1 id="动态代理">3、动态代理</h1><p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(<em>CGLIB动态代理机制</em>)。</p><p><strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到JVM 中的。</strong></p><p>说到动态代理，Spring AOP、RPC框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p><p><strong>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</strong></p><p>就 Java 来说，动态代理的实现方式有很多种，比如 <strong>JDK动态代理</strong>、<strong>CGLIB 动态代理</strong> 等等。</p><h2 id="jdk-动态代理机制">3.1. JDK 动态代理机制</h2><h3 id="介绍">3.1.1. 介绍</h3><p><strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和<code>Proxy</code> 类是核心。</strong></p><p><code>Proxy</code>类中使用频率最高的方法是：<code>newProxyInstance()</code>，这个方法主要用来生成一个代理对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                      Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                      InvocationHandler h)</span><br>    <span class="hljs-keyword">throws</span> IllegalArgumentException <br>&#123;<br>    ......<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个方法一共有 3 个参数：</p><ol type="1"><li><strong>loader</strong>: 类加载器，用于加载代理对象。</li><li><strong>interfaces</strong>: 被代理类实现的一些接口；</li><li><strong>h</strong>: 实现了 <code>InvocationHandler</code>接口的对象；</li></ol><p>要实现动态代理的话，还必须需要实现 <code>InvocationHandler</code>来自定义处理逻辑。当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code>接口类的 <code>invoke</code> 方法来调用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当你使用代理对象调用方法的时候实际会调用到这个方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><br>        <span class="hljs-keyword">throws</span> Throwable;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>invoke()</code> 方法有下面三个参数：</p><ol type="1"><li><strong>proxy</strong>: 动态生成的代理类</li><li><strong>method</strong>: 与代理类对象调用的方法相对应</li><li><strong>args</strong>: 当前 method 方法的参数</li></ol><p>也就是说：<strong>你通过 <code>Proxy</code> 类的<code>newProxyInstance()</code>创建的代理对象在调用方法的时候，实际会调用到实现<code>InvocationHandler</code> 接口的类的 <code>invoke()</code>方法。</strong> 你可以在 <code>invoke()</code>方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><h3 id="jdk-动态代理类使用步骤">3.1.2. JDK 动态代理类使用步骤</h3><ol type="1"><li>定义一个接口及其实现类；</li><li>自定义 <code>InvocationHandler</code>并重写<code>invoke</code>方法，在 <code>invoke</code>方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过<code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code>方法创建代理对象；</li></ol><h3 id="代码示例">3.1.3. 代码示例</h3><p>这样说可能会有点空洞和难以理解，我上个例子，大家感受一下吧！</p><p><strong>1. 定义发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>2. 实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message: &quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>3. 定义一个 JDK 动态代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理类中的真实对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DebugInvocationHandler</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">// 调用方法之前，添加一点自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method: &quot;</span> + method.getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>        <span class="hljs-comment">// 调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method: &quot;</span> + method.getName());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><code>invoke()</code> 方法:当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是<code>invoke()</code> 方法，然后 <code>invoke()</code>方法代替我们去调用了被代理对象的原生方法。</p><p><strong>4. 获取代理对象的工厂类</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdkProxyFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(), <span class="hljs-comment">// 目标类的类加载器</span><br>                target.getClass().getInterfaces(), <span class="hljs-comment">// 代理需要实现的接口，可以指定多个</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugInvocationHandler</span>(target) <span class="hljs-comment">// 代理对象对应的自定义 InvocationHandler</span><br>        );<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><code>getProxy()</code>：主要通过<code>Proxy.newProxyInstance()</code> 方法获取某个类的代理对象</p><p><strong>5. 实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SmsService</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>());<br>        smsService.send(<span class="hljs-string">&quot;Python&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">before <span class="hljs-keyword">method</span>: send<br>send message: Python<br>after <span class="hljs-keyword">method</span>: send<br></code></pre></div></td></tr></table></figure><h2 id="cglib-动态代理机制">3.2. CGLIB 动态代理机制</h2><h3 id="介绍-1">3.2.1. 介绍</h3><p><strong>JDK动态代理有一个最致命的问题是其只能代理实现了接口的类。</strong></p><p><strong>为了解决这个问题，我们可以用 CGLIB动态代理机制来避免。</strong></p><p><a href="https://github.com/cglib/cglib">CGLIB</a>(<em>CodeGeneration Library</em>)是一个基于<ahref="http://www.baeldung.com/java-asm">ASM</a>的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB通过继承方式实现代理。很多知名的开源框架都使用到了<ahref="https://github.com/cglib/cglib">CGLIB</a>， 例如 Spring 中的 AOP模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB动态代理。</p><p><strong>在 CGLIB 动态代理机制中 <code>MethodInterceptor</code> 接口和<code>Enhancer</code> 类是核心。</strong></p><p>你需要自定义 <code>MethodInterceptor</code> 并重写<code>intercept</code> 方法，<code>intercept</code>用于拦截增强被代理类的方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MethodInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Callback</span>&#123;<br>    <span class="hljs-comment">// 拦截被代理类中的方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, java.lang.reflect.Method method, Object[] args, MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol type="1"><li><strong>obj</strong>: 被代理的对象（需要增强的对象）</li><li><strong>method</strong>: 被拦截的方法（需要增强的方法）</li><li><strong>args</strong>: 方法入参</li><li><strong>proxy</strong>: 用于调用原始方法</li></ol><p>你可以通过<code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是<code>MethodInterceptor</code> 中的 <code>intercept</code> 方法。</p><h3 id="cglib-动态代理类使用步骤">3.2.2. CGLIB 动态代理类使用步骤</h3><ol type="1"><li>定义一个类；</li><li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code>方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK动态代理中的 <code>invoke</code> 方法类似；</li><li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li></ol><h3 id="代码示例-1">3.2.3. 代码示例</h3><p>不同于 JDK 动态代理不需要额外的依赖。<ahref="https://github.com/cglib/cglib">CGLIB</a>(<em>Code GenerationLibrary</em>)实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>1.实现一个使用阿里云发送短信的类</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliSmsService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message: &quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>2.自定义<code>MethodInterceptor</code>（方法拦截器）</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugMethodInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object      代理对象(增强的对象)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method      被拦截的方法(需要增强的方法)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> argObjects  参数数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodProxy 用于调用原始方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object object, Method method, Object[] argObjects, MethodProxy methodProxy)</span><br>            <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">// 调用方法之前，添加一点操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method: &quot;</span> + method.getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> methodProxy.invokeSuper(object, argObjects);<br>        <span class="hljs-comment">// 调用方法之后，添加一点操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method: &quot;</span> + method.getName());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>3.获取代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxyFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;?&gt; class1)</span> &#123;<br>        <span class="hljs-comment">// 创建动态代理对象</span><br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        <span class="hljs-comment">// 设置类加载器</span><br>        enhancer.setClassLoader(class1.getClassLoader());<br>        <span class="hljs-comment">// 设置被代理类</span><br>        enhancer.setSuperclass(class1);<br>        <span class="hljs-comment">// 设置方法拦截器</span><br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugMethodInterceptor</span>());<br>        <span class="hljs-comment">// 创建代理类</span><br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>4.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AliSmsService</span> <span class="hljs-variable">aliSmsService</span> <span class="hljs-operator">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);<br>        aliSmsService.send(<span class="hljs-string">&quot;Python&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">before method: send<br>send message: Python<br>after method: send<br></code></pre></div></td></tr></table></figure><h2 id="jdk-动态代理和-cglib-动态代理对比">3.3. JDK 动态代理和 CGLIB动态代理对比</h2><ol type="1"><li><strong>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB可以代理未实现任何接口的类。</strong> 另外， CGLIB动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为final 类型的类和方法。</li><li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK版本的升级，这个优势更加明显。</li></ol><h1 id="静态代理和动态代理的对比">4、静态代理和动态代理的对比</h1><ol type="1"><li><strong>灵活性</strong>：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li><li><strong>JVM 层面</strong>：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li></ol><h1 id="总结">5、总结</h1><p>这篇文章中主要介绍了代理模式的两种实现：静态代理以及动态代理。涵盖了静态代理和动态代理实战、静态代理和动态代理的区别、JDK动态代理和 Cglib 动态代理区别等内容。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode Tricks About Java</title>
    <link href="/2022/03/14/VSCode-Tricks-About-Java/"/>
    <url>/2022/03/14/VSCode-Tricks-About-Java/</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境">配置环境</h1><p>这个参考微软官方文档即可。</p><p>我安装的所有扩展如下：</p><p><img src="https://i.imgur.com/HajbaZC.png" /></p><h1 id="去掉-vscode-关于-java-的一些语法警告">去掉 VSCode 关于 Java的一些语法警告</h1><p>有时候我发现 VSCode提供的语法警告很多，而且很多其实没有必要。那么我们就可以根据需要进行配置了。</p><p>首先，我们创建一个 <code>.settings</code>目录，然后在目录下面添加一个 <code>org.eclipse.jdt.core.prefs</code>文件。</p><p><img src="https://i.imgur.com/uI7Xl6M.png" /></p><p><img src="https://i.imgur.com/aeSAoTi.png" /></p><p>之后我们需要配置忽略什么类型的警告的提示就可以在这个文件里面编辑了。</p><p>比如，我这里去掉的一些警告：</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">org.eclipse.jdt.core.compiler.problem.unusedLocal=ignore<br>org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=ignore<br>org.eclipse.jdt.core.compiler.problem.deprecation=ignore<br>org.eclipse.jdt.core.compiler.source=1.7<br></code></pre></div></td></tr></table></figure><p>完整的配置选项可以参考：</p><p><ahref="https://github.com/jenkinsci/analysis-core-plugin/blob/master/.settings/org.eclipse.jdt.core.prefs"class="uri">https://github.com/jenkinsci/analysis-core-plugin/blob/master/.settings/org.eclipse.jdt.core.prefs</a></p><h1 id="配置-javajvm-编译选项">配置 Java(JVM) 编译选项</h1><p>首先，点开左侧的 <code>Debug</code> 按钮，然后根据提示创建一个<code>launch.json</code> 文件，</p><p><img src="https://i.imgur.com/13R02O9.png" /></p><p>然后，我们就可以在 <code>launch.json</code> 文件里面进行编辑了。</p><p>比如，我这里需要修改一个配置来测试动态代理：</p><p><img src="https://i.imgur.com/zcBjjdu.png" /></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Launch Current File&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;mainClass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vmArgs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--add-opens java.base/java.lang=ALL-UNNAMED&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Launch Main&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;mainClass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.fan.Main&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;projectName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cglibdynamic&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 二分查找相关算法题专项整理</title>
    <link href="/2022/03/14/LeetCode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/14/LeetCode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找">704. 二分查找</h1><p>标标准准的二分查找。</p><p>注意，<code>while</code> 条件是 <code>&lt;=</code>。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = left + (right - left) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:<br>                right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br></code></pre></div></td></tr></table></figure><h1 id="在排序数组中查找元素的第一个和最后一个位置">34.在排序数组中查找元素的第一个和最后一个位置</h1><p>以后遇到二分查找，<code>while</code> 条件只用<code>&lt;=</code>。</p><p>寻找左边界，返回的是 <code>left</code>，而 <code>left</code>的取值范围是 <span class="math inline">\([0,len(nums)]\)</span>，闭区间，也就是可能在右边越界。</p><p>寻找右边界，返回的是 <code>right</code>，而 <code>right</code>的取值范围是 <span class="math inline">\([-1, len(nums) -1]\)</span>，闭区间，可能在左边越界。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchRange</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> res<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> nums[<span class="hljs-number">0</span>] == target <span class="hljs-keyword">else</span> res<br><br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 寻找左边界</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = left + (right - left) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:<br>                right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> left &lt; <span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">and</span> nums[left] == target:<br>            res[<span class="hljs-number">0</span>] = left<br><br>        <span class="hljs-comment"># 寻找右边界</span><br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = left + (right - left) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:<br>                right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> right &gt; -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[right] == target:<br>            res[<span class="hljs-number">1</span>] = right<br><br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    solu = Solution()<br>    <span class="hljs-built_in">print</span>(solu.searchRange([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>], <span class="hljs-number">8</span>))<br>    <span class="hljs-comment"># print(solu.searchRange([2, 2], 3))</span><br>    <span class="hljs-comment"># print(solu.searchRange([2, 2], 2))</span><br>    <span class="hljs-comment"># print(solu.searchRange([1, 3], 1))</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 排列，组合，子集问题相关算法题专项整理</title>
    <link href="/2022/03/13/LeetCode-%E6%8E%92%E5%88%97%EF%BC%8C%E7%BB%84%E5%90%88%EF%BC%8C%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/13/LeetCode-%E6%8E%92%E5%88%97%EF%BC%8C%E7%BB%84%E5%90%88%EF%BC%8C%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="子集">78. 子集</h1><p>回溯法套路。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subsets</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.res = []<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">curRes: <span class="hljs-type">List</span>, startIndex: <span class="hljs-built_in">int</span></span>):<br>            self.res.append(curRes.copy())<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(startIndex, <span class="hljs-built_in">len</span>(nums)):<br>                curRes += [nums[i]]<br>                backtrack(curRes, i + <span class="hljs-number">1</span>)<br>                curRes.pop()<br>        backtrack([], <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    <span class="hljs-built_in">print</span>(solu.subsets([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br><br></code></pre></div></td></tr></table></figure><p>另一种思路是和递归思路比较像，很巧妙。也可以说是动态规划。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subsets</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        res = [[]]<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            res += [item + [num] <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> res]<br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    <span class="hljs-built_in">print</span>(solu.subsets([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br><br></code></pre></div></td></tr></table></figure><h1 id="组合">77. 组合</h1><p>依然是回溯。只不过，根据条件剪去了一些情况。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combine</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.res = []<br>        self.curRes = []<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(self.curRes) == k):<br>                self.res.append(self.curRes.copy())<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, n + <span class="hljs-number">1</span>):<br>                self.curRes.append(i)<br>                backtrack(i + <span class="hljs-number">1</span>, n, k)<br>                self.curRes.pop()<br><br>        backtrack(<span class="hljs-number">1</span>, n, k)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    <span class="hljs-built_in">print</span>(solu.combine(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>))<br><br></code></pre></div></td></tr></table></figure><h1 id="全排列">46. 全排列</h1><p>使用回溯，这里使用了备忘录，即<code>self.used</code>，用来记录是否使用过某一个元素。所以我们在回溯之后要恢复两个东西，一个是备忘录，另一个是<code>curRes</code>。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permute</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.res = []<br>        self.curRes = []<br>        self.used = [<span class="hljs-literal">False</span>] * <span class="hljs-built_in">len</span>(nums)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.curRes) == <span class="hljs-built_in">len</span>(nums):<br>                self.res.append(self.curRes.copy())<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-keyword">if</span> self.used[i]:<br>                    <span class="hljs-keyword">continue</span><br>                self.curRes.append(nums[i])<br>                self.used[i] = <span class="hljs-literal">True</span><br>                backtrack(nums)<br>                self.used[i] = <span class="hljs-literal">False</span><br>                self.curRes.pop()<br><br>        backtrack(nums)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.permute([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br><br></code></pre></div></td></tr></table></figure><p>另一种，递归，有一点巧妙：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permute</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">permutation</span>(<span class="hljs-params">nums</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">yield</span> nums[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">for</span> perm <span class="hljs-keyword">in</span> permutation(nums[<span class="hljs-number">1</span>:]):<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(perm) + <span class="hljs-number">1</span>):<br>                        <span class="hljs-keyword">yield</span> perm[:i] + nums[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] + perm[i:]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(permutation(nums))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.permute([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br><br></code></pre></div></td></tr></table></figure><h1 id="子集-ii">90. 子集 II</h1><p>调试花了一点时间。因为一开始 <code>backtrack(i + 1, nums)</code>里面的 <code>i</code> 搞成了 <code>start</code>。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subsetsWithDup</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.res = []<br>        self.curRes = []<br>        nums.sort()<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span>, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>            self.res.append(self.curRes.copy())<br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, <span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-keyword">if</span> i &gt; start <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                self.curRes.append(nums[i])<br>                backtrack(i + <span class="hljs-number">1</span>, nums)<br>                self.curRes.pop()<br><br>        backtrack(<span class="hljs-number">0</span>, nums)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.subsetsWithDup([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]))<br><br></code></pre></div></td></tr></table></figure><h1 id="组合总和-ii">40. 组合总和 II</h1><p>使用回溯方法解决：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum2</span>(<span class="hljs-params">self, candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.curRes = []<br>        self.res = []<br>        self.trackSum = <span class="hljs-number">0</span><br>        candidates.sort()<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span>, candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target</span>):<br>            <span class="hljs-keyword">if</span> self.trackSum == target:<br>                self.res.append(self.curRes.copy())<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> self.trackSum &gt; target:<br>                <span class="hljs-keyword">return</span><br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, <span class="hljs-built_in">len</span>(candidates)):<br>                <span class="hljs-comment"># 除去重复元素的情况</span><br>                <span class="hljs-keyword">if</span> i &gt; start <span class="hljs-keyword">and</span> candidates[i] == candidates[i - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                self.curRes.append(candidates[i])<br>                self.trackSum += candidates[i]<br>                backtrack(i + <span class="hljs-number">1</span>, candidates, target)<br>                self.trackSum -= candidates[i]<br>                self.curRes.pop()<br><br>        backtrack(<span class="hljs-number">0</span>, candidates, target)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.combinationSum2([<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>], <span class="hljs-number">8</span>))<br>    <span class="hljs-comment"># print(s.combinationSum2([2, 5, 2, 1, 2], 5))</span><br>    <span class="hljs-comment"># print(s.combinationSum2([2, 5, 2, 1, 2], 6))</span><br><br></code></pre></div></td></tr></table></figure><p>之前使用 <code>dfs</code> 解决，其实也是回溯：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum2</span>(<span class="hljs-params">self, candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span>, path: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], res: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> target == <span class="hljs-number">0</span>:<br>                res.append(path)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(candidates)):<br>                <span class="hljs-keyword">if</span> target - candidates[i] &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> candidates[i] == candidates[i - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                dfs(candidates[i + <span class="hljs-number">1</span>:], target - candidates[i],<br>                    path + [candidates[i]], res)<br><br>        res = []<br>        candidates.sort()<br>        dfs(candidates, target, [], res)<br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.combinationSum2([<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>], <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(s.combinationSum2([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">5</span>))<br>    <span class="hljs-built_in">print</span>(s.combinationSum2([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">6</span>))<br><br></code></pre></div></td></tr></table></figure><h1 id="全排列-ii">47. 全排列 II</h1><p>回溯加上剪枝。这里的剪枝有一定的技巧性。</p><p>对于剪枝的判断：重复元素，前面的元素一定要在当前元素之前使用。</p><p>还有，一定要先给数组排序！</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permuteUnique</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.curRes = []<br>        self.res = []<br>        self.used = [<span class="hljs-literal">False</span>] * <span class="hljs-built_in">len</span>(nums)<br>        nums.sort()<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.curRes) == <span class="hljs-built_in">len</span>(nums):<br>                self.res.append(self.curRes.copy())<br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-keyword">if</span> self.used[i]:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.used[i - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                self.curRes.append(nums[i])<br>                self.used[i] = <span class="hljs-literal">True</span><br>                backtrack(nums)<br>                self.used[i] = <span class="hljs-literal">False</span><br>                self.curRes.pop()<br><br>        backtrack(nums)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    s = Solution()<br>    <span class="hljs-comment"># print(s.permuteUnique([1, 1, 2]))</span><br>    <span class="hljs-built_in">print</span>(s.permuteUnique([<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>]))<br><br></code></pre></div></td></tr></table></figure><h1 id="组合总和">39. 组合总和</h1><p>回溯的时候，<code>start</code> 变了。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum</span>(<span class="hljs-params">self, candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.curRes = []<br>        self.res = []<br>        self.trackSum = <span class="hljs-number">0</span><br>        candidates.sort()<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span>, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> self.trackSum == target:<br>                self.res.append(self.curRes.copy())<br>            <span class="hljs-keyword">if</span> self.trackSum &gt; target:<br>                <span class="hljs-keyword">return</span><br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, <span class="hljs-built_in">len</span>(nums)):<br>                self.curRes.append(nums[i])<br>                self.trackSum += nums[i]<br>                backtrack(i, nums, target)<br>                self.trackSum -= nums[i]<br>                self.curRes.pop()<br><br>        backtrack(<span class="hljs-number">0</span>, candidates, target)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.combinationSum([<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>], <span class="hljs-number">9</span>))<br><br></code></pre></div></td></tr></table></figure><p>之前的做法，类似：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum</span>(<span class="hljs-params">self, candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span>, path: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], res: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> target == <span class="hljs-number">0</span>:<br>                res.append(path)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(candidates)):<br>                <span class="hljs-keyword">if</span> target - candidates[i] &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">break</span><br>                dfs(candidates[i:], target - candidates[i],<br>                    path + [candidates[i]], res)<br><br>        res = []<br>        candidates.sort()<br>        dfs(candidates, target, [], res)<br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.combinationSum([<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>], <span class="hljs-number">9</span>))<br><br></code></pre></div></td></tr></table></figure><h1 id="组合总和-iii">216. 组合总和 III</h1><p>依然是回溯加上简单的剪枝。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum3</span>(<span class="hljs-params">self, k: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.curRes = []<br>        self.res = []<br>        self.trackSum = <span class="hljs-number">0</span><br>        self.trackCount = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> self.trackSum == n <span class="hljs-keyword">and</span> self.trackCount == k:<br>                self.res.append(self.curRes.copy())<br><br>            <span class="hljs-keyword">if</span> self.trackSum &gt; n <span class="hljs-keyword">or</span> self.trackCount &gt; k:<br>                <span class="hljs-keyword">return</span><br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, <span class="hljs-number">10</span>):<br>                self.curRes.append(i)<br>                self.trackSum += i<br>                self.trackCount += <span class="hljs-number">1</span><br>                backtrack(i + <span class="hljs-number">1</span>, k, n)<br>                self.trackCount -= <span class="hljs-number">1</span><br>                self.trackSum -= i<br>                self.curRes.pop()<br><br>        backtrack(<span class="hljs-number">1</span>, k, n)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    solu = Solution()<br>    <span class="hljs-built_in">print</span>(solu.combinationSum3(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>))<br>    <span class="hljs-built_in">print</span>(solu.combinationSum3(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>))<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 岛屿相关算法题专项整理</title>
    <link href="/2022/03/12/LeetCode-%E5%B2%9B%E5%B1%BF%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/12/LeetCode-%E5%B2%9B%E5%B1%BF%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="section"></h1>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 链表算法题专项整理</title>
    <link href="/2022/03/11/LeetCode-%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/11/LeetCode-%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://labuladong.github.io/algo/1/8/"class="uri">https://labuladong.github.io/algo/1/8/</a></p><h1 id="合并两个有序链表">21. 合并两个有序链表</h1><p>简单的遍历链表即可，没什么技巧。数据结构课程经典例题。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        dummy = ListNode()<br>        l1 = list1<br>        l2 = list2<br>        res = dummy<br>        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">and</span> l2:<br>            <span class="hljs-keyword">if</span> l1.val &lt; l2.val:<br>                dummy.<span class="hljs-built_in">next</span> = l1<br>                l1 = l1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                dummy.<span class="hljs-built_in">next</span> = l2<br>                l2 = l2.<span class="hljs-built_in">next</span><br>            dummy = dummy.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> l1:<br>            dummy.<span class="hljs-built_in">next</span> = l1<br>        <span class="hljs-keyword">if</span> l2:<br>            dummy.<span class="hljs-built_in">next</span> = l2<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br></code></pre></div></td></tr></table></figure><h1 id="合并k个升序链表">23. 合并K个升序链表</h1><p>经典的优先队列问题。</p><p>利用优先队列来处理，但是这里的实现不怎么好，因为这里是一次性把所有的节点全部都加入到优先队列中去，然后再一个一个弹出来。其实我的想法是单独给ListNode类配置一个比较函数，这样，我们可以每次把每一条链表的头节点加进去即可。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Optional</span><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue<br><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeKLists</span>(<span class="hljs-params">self, lists: <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[ListNode]]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        pq = PriorityQueue()<br>        dummy = ListNode(-<span class="hljs-number">1</span>)<br>        res = dummy<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lists)):<br>            curNode = lists[i]<br>            <span class="hljs-keyword">while</span> curNode:<br>                pq.put(curNode.val)<br>                curNode = curNode.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> pq.empty():<br>            dummy.<span class="hljs-built_in">next</span> = ListNode(pq.get())<br>            dummy = dummy.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    <span class="hljs-comment"># lists = [ListNode(1), ListNode(4), ListNode(5)]</span><br>    <span class="hljs-comment"># lists = [ListNode(1), ListNode(3), ListNode(4)]</span><br>    lists = [ListNode(<span class="hljs-number">1</span>), ListNode(<span class="hljs-number">2</span>), ListNode(<span class="hljs-number">3</span>)]<br>    res = solu.mergeKLists(lists)<br>    <span class="hljs-keyword">while</span> res:<br>        <span class="hljs-built_in">print</span>(res.val)<br>        res = res.<span class="hljs-built_in">next</span><br><br></code></pre></div></td></tr></table></figure><h1 id="删除链表的倒数第-n-个结点">19. 删除链表的倒数第 N 个结点</h1><p>一趟遍历，利用一个小技巧，先走 n步数，然后再来一个指针，同时走，第一个指针走到最后一个节点的时候，刚好第二个指针走到了倒数第n 个节点的前一个节点。</p><p>注意一下删除倒数 n 个节点的情况，即删除第一个节点的情况。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNthFromEnd</span>(<span class="hljs-params">self, head: ListNode, n: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        res = head<br>        headCopy = head<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            headCopy = headCopy.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 如果删除第倒数 size 个节点</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> headCopy:<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> headCopy.<span class="hljs-built_in">next</span>:<br>            head = head.<span class="hljs-built_in">next</span><br>            headCopy = headCopy.<span class="hljs-built_in">next</span><br>        <br>        head.<span class="hljs-built_in">next</span> = head.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> res<br><br></code></pre></div></td></tr></table></figure><h1 id="链表的中间结点">876. 链表的中间结点</h1><p>简单的快慢指针技巧。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">middleNode</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        slowP = head<br>        fastP = head<br>        <span class="hljs-keyword">while</span> fastP <span class="hljs-keyword">and</span> fastP.<span class="hljs-built_in">next</span>:<br>            fastP = fastP.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            slowP = slowP.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> slowP<br><br></code></pre></div></td></tr></table></figure><h1 id="环形链表">141. 环形链表</h1><p>依然是快满指针技巧。</p><p>这里还要证明一个点，就是一定能相遇吗？</p><p>答：能。假设慢指针走了 <span class="math inline">\(k\)</span>步，则快指针走了 <span class="math inline">\(2k\)</span> 步，用 <spanclass="math inline">\(m\)</span> 表示环的节点数。我们只要找到一个 <spanclass="math inline">\(a\)</span>，使得下面式子成立即可：</p><p><span class="math display">\[2k - k = am\]</span></p><p>因为 <span class="math inline">\(k\)</span> 为任意正整数，所以 <spanclass="math inline">\(a = \displaystyle\frac{k}{m}\)</span>一定可以取到。证毕。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hasCycle</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> head.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        slowP = head<br>        fastP = head<br>        <span class="hljs-keyword">while</span> fastP <span class="hljs-keyword">and</span> fastP.<span class="hljs-built_in">next</span>:<br>            slowP = slowP.<span class="hljs-built_in">next</span><br>            fastP = fastP.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> slowP == fastP:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br></code></pre></div></td></tr></table></figure><h1 id="环形链表-ii">142. 环形链表 II</h1><p><img src="https://i.imgur.com/bqzYCD0.png" /></p><p>这道题第一次是觉得很难的。当时好像看了题解也想得不是很明白。当时用的还是C 语言。</p><p>现在想来，不过是一道小学的追及问题。</p><p><img src="https://i.imgur.com/WKtEhU9.png" /></p><p>利用快慢指针。有一个困惑我的点，就是真的不会出现快指针先跨越了慢指针，然后在之后的路程中再和慢指针相遇吗？答案当然是不可能的。我们可以把每一次要走的距离用单位1来考虑，如果快指针想要跨越慢指针，那么一定是建立在快慢指针已经相遇的情况下。</p><p>然后问题就好解决了。我们把慢指针进入环之前走过的距离设为 <spanclass="math inline">\(x\)</span>，把进入环之后直到相遇点之间的距离设为<span class="math inline">\(y\)</span>，然后，我们把慢指针重设为<code>head</code>，然后让快慢指针同时以每次步进 1的速率往后面走，那么，它们在环的起点一定会相遇。</p><p>因为第一次相遇的时候，慢指针走了 <span class="math inline">\(x +y\)</span> 步，快指针走了 <span class="math inline">\(2(x + y)\)</span>步，然后快指针是比慢指针多走了一圈环的，那么，快指针如果想要再次走到环的起点，需要走<span class="math inline">\(x\)</span>步，而我们慢指针重设后，要走到环的起点，也是要走 <spanclass="math inline">\(x\)</span> 步。思路就显而易见了。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">detectCycle</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        slowP = head<br>        fastP = head<br>        <span class="hljs-keyword">while</span> fastP <span class="hljs-keyword">and</span> fastP.<span class="hljs-built_in">next</span>:<br>            slowP = slowP.<span class="hljs-built_in">next</span><br>            fastP = fastP.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> slowP == fastP:<br>                slowP = head<br>                <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> fastP == slowP:<br>                    slowP = slowP.<span class="hljs-built_in">next</span><br>                    fastP = fastP.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">return</span> fastP<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br></code></pre></div></td></tr></table></figure><h1 id="相交链表">160. 相交链表</h1><p>这题的思路是拼接。</p><p><img src="https://i.imgur.com/bjAcxJ8.png" /></p><p>假设 A 由 a 和 c 组成，B 由 b 和 c 组成，那么，把 B 拼到 A的后面，就变成了 a + c + b + c，把 A 拼到 B 的后面，就是 b + c + a +c，前面的 <code>a + c + b</code> 和 <code>b + c + a</code>长度是相同的，那么找到相交节点就比较容易了。</p><p>还有一种思路，就是利用环形链表找入口的方法。也比较容易理解。也容易想。</p><p>写法一：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getIntersectionNode</span>(<span class="hljs-params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:<br>        p1 = headA<br>        p2 = headB<br>        <span class="hljs-keyword">while</span> p1 != p2:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p1:<br>                p1 = headB<br>            <span class="hljs-keyword">else</span>:<br>                p1 = p1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p2:<br>                p2 = headA<br>            <span class="hljs-keyword">else</span>:<br>                p2 = p2.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> p1<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    headA = ListNode(<span class="hljs-number">1</span>)<br>    headA.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-number">9</span>)<br>    headA.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-number">1</span>)<br>    headB = ListNode(<span class="hljs-number">3</span>)<br>    headC = ListNode(<span class="hljs-number">2</span>)<br>    headC.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-number">4</span>)<br>    headA.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = headC<br>    headB.<span class="hljs-built_in">next</span> = headC<br>    <span class="hljs-built_in">print</span>(solu.getIntersectionNode(headA, headB).val)<br><br></code></pre></div></td></tr></table></figure><p>写法二：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getIntersectionNode</span>(<span class="hljs-params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:<br>        p1 = headA<br>        p2 = headB<br>        flag = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> p1 <span class="hljs-keyword">and</span> p2:<br>            <span class="hljs-keyword">if</span> p1 == p2:<br>                <span class="hljs-keyword">return</span> p1<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p1.<span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> flag:<br>                p1 = headB<br>                flag = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">else</span>:<br>                p1 = p1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p2.<span class="hljs-built_in">next</span>:<br>                p2 = headA<br>            <span class="hljs-keyword">else</span>:<br>                p2 = p2.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> p1<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    headA = ListNode(<span class="hljs-number">1</span>)<br>    headA.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-number">9</span>)<br>    headA.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-number">1</span>)<br>    headB = ListNode(<span class="hljs-number">3</span>)<br>    headC = ListNode(<span class="hljs-number">2</span>)<br>    headC.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-number">4</span>)<br>    headA.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = headC<br>    headB.<span class="hljs-built_in">next</span> = headC<br>    <span class="hljs-built_in">print</span>(solu.getIntersectionNode(headA, headB).val)<br><br></code></pre></div></td></tr></table></figure><p>这个写法二让我调试了好长时间。虽然思路简单，但是实际跑的时候还得注意细节。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何下载 openjdk7 和 openjdk8 的源码</title>
    <link href="/2022/03/11/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD-openjdk7-%E5%92%8C-openjdk8-%E7%9A%84%E6%BA%90%E7%A0%81/"/>
    <url>/2022/03/11/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD-openjdk7-%E5%92%8C-openjdk8-%E7%9A%84%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>我们来到 openjdk 官网的下载页面：<ahref="https://download.java.net/openjdk/jdk7"class="uri">https://download.java.net/openjdk/jdk7</a>，</p><p><img src="https://i.imgur.com/nagbScY.png" /></p><p>然后我们点击下载的链接，发现这个链接好像有问题，然后上网搜索，发现这个链接确实有问题，</p><p>我们使用浏览器工具查看这个链接，发现为：</p><p><img src="https://i.imgur.com/aGenvsl.png" /></p><p>实际上，正确的链接应该是：</p><p><ahref="https://download.java.net/openjdk/jdk7/promoted/b147/openjdk-7-fcs-src-b147-27_jun_2011.zip"class="uri">https://download.java.net/openjdk/jdk7/promoted/b147/openjdk-7-fcs-src-b147-27_jun_2011.zip</a></p><p>同理，jdk8 的链接如下：</p><p><ahref="https://download.java.net/openjdk/jdk8/promoted/b132/openjdk-8-src-b132-03_mar_2014.zip"class="uri">https://download.java.net/openjdk/jdk8/promoted/b132/openjdk-8-src-b132-03_mar_2014.zip</a></p><p>按：搁这捉迷藏呢。</p><hr /><p>参考：</p><p>1、<a href="https://www.jianshu.com/p/71554d45edc1"class="uri">https://www.jianshu.com/p/71554d45edc1</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 二叉树算法题专项整理</title>
    <link href="/2022/03/10/LeetCode-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/10/LeetCode-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://labuladong.github.io/algo/1/7/"class="uri">https://labuladong.github.io/algo/1/7/</a></p><h3 id="二叉树的最大深度">104. 二叉树的最大深度</h3><p>利用二叉树的递归遍历：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.depth = <span class="hljs-number">0</span><br>        self.res = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>                <span class="hljs-keyword">return</span><br>            self.depth += <span class="hljs-number">1</span><br>            self.res = <span class="hljs-built_in">max</span>(self.res, self.depth)<br>            traverse(root.left)<br>            traverse(root.right)<br>            self.depth -= <span class="hljs-number">1</span><br><br>        traverse(root)<br>        <span class="hljs-keyword">return</span> self.res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    root = TreeNode(<span class="hljs-number">3</span>)<br>    root.left = TreeNode(<span class="hljs-number">9</span>)<br>    root.right = TreeNode(<span class="hljs-number">20</span>)<br>    root.right.left = TreeNode(<span class="hljs-number">15</span>)<br>    root.right.right = TreeNode(<span class="hljs-number">7</span>)<br>    <span class="hljs-built_in">print</span>(solu.maxDepth(root))<br><br></code></pre></div></td></tr></table></figure><p>利用分解的方法，就是朴素的递归思想：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(self.maxDepth(root.left), self.maxDepth(root.right)) + <span class="hljs-number">1</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        left = self.maxDepth(root.left)<br>        right = self.maxDepth(root.right)<br>        res = <span class="hljs-built_in">max</span>(left, right) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br><br></code></pre></div></td></tr></table></figure><h3 id="二叉树的直径">543. 二叉树的直径</h3><p>绷不住啦，这题的 AC 必须得记录一下。调试了好多下。</p><p>一定要注意题目中的 <code>这条路径可能穿过也可能不穿过根结点。</code>真的是有点坑的。</p><p><img src="https://i.imgur.com/yEfuP1h.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">diameterOfBinaryTree</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root <span class="hljs-keyword">or</span> (<span class="hljs-keyword">not</span> root.left <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> root.right):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        self.diameter = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">root: TreeNode</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            left = dfs(root.left)<br>            right = dfs(root.right)<br>            res = <span class="hljs-built_in">max</span>(left, right) + <span class="hljs-number">1</span><br>            self.diameter = <span class="hljs-built_in">max</span>(self.diameter, left + right)<br>            <span class="hljs-keyword">return</span> res<br><br>        dfs(root)<br>        <span class="hljs-keyword">return</span> self.diameter<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    root = TreeNode(<span class="hljs-number">1</span>)<br>    root.left = TreeNode(<span class="hljs-number">2</span>)<br>    root.left.left = TreeNode(<span class="hljs-number">4</span>)<br>    root.left.right = TreeNode(<span class="hljs-number">5</span>)<br>    root.right = TreeNode(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solu.diameterOfBinaryTree(root))<br><br>    <span class="hljs-comment"># treeNodeList = [1, 2, 3, 4, 5]</span><br>    <span class="hljs-comment"># tree = createBTree(treeNodeList, 0)</span><br>    <span class="hljs-comment"># levelTraverse(tree)</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode BFS 算法题专项整理</title>
    <link href="/2022/03/10/LeetCode-BFS-%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/10/LeetCode-BFS-%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://labuladong.github.io/algo/1/6/"class="uri">https://labuladong.github.io/algo/1/6/</a></p><h1 id="leetcode-111">LeetCode 111</h1><ol start="111" type="1"><li>二叉树的最小深度</li></ol><p>这个 BFS 比较简单。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minDepth</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># BFS</span><br>        queue = []<br>        resDepth = <span class="hljs-number">0</span><br>        queue.append(root)<br>        resDepth += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> queue:<br>            size = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size):<br>                curNode = queue.pop(<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> curNode.left <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> curNode.right):<br>                    <span class="hljs-keyword">return</span> resDepth<br>                <span class="hljs-keyword">if</span> (curNode.left):<br>                    queue.append(curNode.left)<br>                <span class="hljs-keyword">if</span> (curNode.right):<br>                    queue.append(curNode.right)<br>            resDepth += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> resDepth<br></code></pre></div></td></tr></table></figure><h1 id="leetcode-752">LeetCode 752</h1><ol start="752" type="1"><li>打开转盘锁</li></ol><p>这题如果理解了 BFS 的话，白板编程应该也不是很难。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">AC。修复了逻辑 bug 之后。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">openLock</span>(<span class="hljs-params">self, deadends: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], target: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">upOneBitOfLock</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, n: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> s[n] == <span class="hljs-string">&#x27;9&#x27;</span>:<br>                res = s[<span class="hljs-number">0</span>:n] + <span class="hljs-string">&#x27;0&#x27;</span> + s[n + <span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">else</span>:<br>                res = s[<span class="hljs-number">0</span>:n] + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(s[n]) + <span class="hljs-number">1</span>) + s[n + <span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">return</span> res<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">downOneBitOfLock</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, n: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> s[n] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                res = s[<span class="hljs-number">0</span>:n] + <span class="hljs-string">&#x27;9&#x27;</span> + s[n + <span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">else</span>:<br>                res = s[<span class="hljs-number">0</span>:n] + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(s[n]) - <span class="hljs-number">1</span>) + s[n + <span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">return</span> res<br><br>        deadends = <span class="hljs-built_in">set</span>(deadends)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;0000&#x27;</span> <span class="hljs-keyword">in</span> deadends:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;0000&#x27;</span> == target:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        queue = []<br>        visited = <span class="hljs-built_in">set</span>()<br>        resSteps = <span class="hljs-number">0</span><br>        queue.append(<span class="hljs-string">&#x27;0000&#x27;</span>)<br>        <span class="hljs-keyword">while</span>(queue):<br>            size = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size):<br>                curNode = queue.pop(<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    upNode = upOneBitOfLock(curNode, j)<br>                    <span class="hljs-keyword">if</span> (upNode <span class="hljs-keyword">in</span> deadends) <span class="hljs-keyword">or</span> (upNode <span class="hljs-keyword">in</span> visited):<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> upNode == target:<br>                        resSteps += <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">return</span> resSteps<br>                    queue.append(upNode)<br>                    visited.add(upNode)<br>                <span class="hljs-comment"># 注意这里的向下拨动要和上面的向上波动给分离开，不能放在一个循环里面，</span><br>                <span class="hljs-comment"># 不然，continue 会导致没有考虑所有的情况</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    downNode = downOneBitOfLock(curNode, j)<br>                    <span class="hljs-keyword">if</span> (downNode <span class="hljs-keyword">in</span> deadends) <span class="hljs-keyword">or</span> (downNode <span class="hljs-keyword">in</span> visited):<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> downNode == target:<br>                        resSteps += <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">return</span> resSteps<br>                    queue.append(downNode)<br>                    visited.add(downNode)<br>            resSteps += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    deadends = [<span class="hljs-string">&quot;8430&quot;</span>, <span class="hljs-string">&quot;5911&quot;</span>, <span class="hljs-string">&quot;4486&quot;</span>, <span class="hljs-string">&quot;7174&quot;</span>, <span class="hljs-string">&quot;9772&quot;</span>, <span class="hljs-string">&quot;0731&quot;</span>, <span class="hljs-string">&quot;9550&quot;</span>, <span class="hljs-string">&quot;3449&quot;</span>,<br>                <span class="hljs-string">&quot;4437&quot;</span>, <span class="hljs-string">&quot;3837&quot;</span>, <span class="hljs-string">&quot;1870&quot;</span>, <span class="hljs-string">&quot;5798&quot;</span>, <span class="hljs-string">&quot;9583&quot;</span>, <span class="hljs-string">&quot;9512&quot;</span>, <span class="hljs-string">&quot;5686&quot;</span>, <span class="hljs-string">&quot;5131&quot;</span>,<br>                <span class="hljs-string">&quot;0736&quot;</span>, <span class="hljs-string">&quot;3051&quot;</span>, <span class="hljs-string">&quot;2141&quot;</span>, <span class="hljs-string">&quot;2989&quot;</span>, <span class="hljs-string">&quot;6368&quot;</span>, <span class="hljs-string">&quot;2004&quot;</span>, <span class="hljs-string">&quot;1012&quot;</span>, <span class="hljs-string">&quot;8736&quot;</span>,<br>                <span class="hljs-string">&quot;0363&quot;</span>, <span class="hljs-string">&quot;3589&quot;</span>, <span class="hljs-string">&quot;8568&quot;</span>, <span class="hljs-string">&quot;6457&quot;</span>, <span class="hljs-string">&quot;3467&quot;</span>, <span class="hljs-string">&quot;1967&quot;</span>, <span class="hljs-string">&quot;1055&quot;</span>, <span class="hljs-string">&quot;6637&quot;</span>,<br>                <span class="hljs-string">&quot;1951&quot;</span>, <span class="hljs-string">&quot;0575&quot;</span>, <span class="hljs-string">&quot;4603&quot;</span>, <span class="hljs-string">&quot;2606&quot;</span>, <span class="hljs-string">&quot;0710&quot;</span>, <span class="hljs-string">&quot;4169&quot;</span>, <span class="hljs-string">&quot;7009&quot;</span>, <span class="hljs-string">&quot;6554&quot;</span>,<br>                <span class="hljs-string">&quot;6128&quot;</span>, <span class="hljs-string">&quot;2876&quot;</span>, <span class="hljs-string">&quot;8151&quot;</span>, <span class="hljs-string">&quot;4423&quot;</span>, <span class="hljs-string">&quot;0727&quot;</span>, <span class="hljs-string">&quot;8130&quot;</span>, <span class="hljs-string">&quot;3571&quot;</span>, <span class="hljs-string">&quot;4801&quot;</span>,<br>                <span class="hljs-string">&quot;8968&quot;</span>, <span class="hljs-string">&quot;6084&quot;</span>, <span class="hljs-string">&quot;3156&quot;</span>, <span class="hljs-string">&quot;3087&quot;</span>, <span class="hljs-string">&quot;0594&quot;</span>, <span class="hljs-string">&quot;9811&quot;</span>, <span class="hljs-string">&quot;3902&quot;</span>, <span class="hljs-string">&quot;4690&quot;</span>,<br>                <span class="hljs-string">&quot;6468&quot;</span>, <span class="hljs-string">&quot;2743&quot;</span>, <span class="hljs-string">&quot;8560&quot;</span>, <span class="hljs-string">&quot;9064&quot;</span>, <span class="hljs-string">&quot;4231&quot;</span>, <span class="hljs-string">&quot;6056&quot;</span>, <span class="hljs-string">&quot;2551&quot;</span>, <span class="hljs-string">&quot;8556&quot;</span>,<br>                <span class="hljs-string">&quot;2541&quot;</span>, <span class="hljs-string">&quot;5460&quot;</span>, <span class="hljs-string">&quot;5657&quot;</span>, <span class="hljs-string">&quot;1151&quot;</span>, <span class="hljs-string">&quot;5123&quot;</span>, <span class="hljs-string">&quot;3521&quot;</span>, <span class="hljs-string">&quot;2200&quot;</span>, <span class="hljs-string">&quot;9333&quot;</span>,<br>                <span class="hljs-string">&quot;9685&quot;</span>, <span class="hljs-string">&quot;4871&quot;</span>, <span class="hljs-string">&quot;9138&quot;</span>, <span class="hljs-string">&quot;5807&quot;</span>, <span class="hljs-string">&quot;2191&quot;</span>, <span class="hljs-string">&quot;2601&quot;</span>, <span class="hljs-string">&quot;1792&quot;</span>, <span class="hljs-string">&quot;3470&quot;</span>,<br>                <span class="hljs-string">&quot;9096&quot;</span>, <span class="hljs-string">&quot;0185&quot;</span>, <span class="hljs-string">&quot;0367&quot;</span>, <span class="hljs-string">&quot;6862&quot;</span>, <span class="hljs-string">&quot;1757&quot;</span>, <span class="hljs-string">&quot;6904&quot;</span>, <span class="hljs-string">&quot;4485&quot;</span>, <span class="hljs-string">&quot;7973&quot;</span>,<br>                <span class="hljs-string">&quot;7201&quot;</span>, <span class="hljs-string">&quot;2571&quot;</span>, <span class="hljs-string">&quot;3829&quot;</span>, <span class="hljs-string">&quot;0868&quot;</span>, <span class="hljs-string">&quot;4632&quot;</span>, <span class="hljs-string">&quot;6975&quot;</span>, <span class="hljs-string">&quot;2026&quot;</span>, <span class="hljs-string">&quot;3463&quot;</span>,<br>                <span class="hljs-string">&quot;2341&quot;</span>, <span class="hljs-string">&quot;4647&quot;</span>, <span class="hljs-string">&quot;3680&quot;</span>, <span class="hljs-string">&quot;3282&quot;</span>, <span class="hljs-string">&quot;3761&quot;</span>, <span class="hljs-string">&quot;4410&quot;</span>, <span class="hljs-string">&quot;3397&quot;</span>, <span class="hljs-string">&quot;3357&quot;</span>,<br>                <span class="hljs-string">&quot;4038&quot;</span>, <span class="hljs-string">&quot;6505&quot;</span>, <span class="hljs-string">&quot;1655&quot;</span>, <span class="hljs-string">&quot;3812&quot;</span>, <span class="hljs-string">&quot;3558&quot;</span>, <span class="hljs-string">&quot;4759&quot;</span>, <span class="hljs-string">&quot;1112&quot;</span>, <span class="hljs-string">&quot;8836&quot;</span>,<br>                <span class="hljs-string">&quot;5348&quot;</span>, <span class="hljs-string">&quot;9113&quot;</span>, <span class="hljs-string">&quot;1627&quot;</span>, <span class="hljs-string">&quot;3249&quot;</span>, <span class="hljs-string">&quot;0537&quot;</span>, <span class="hljs-string">&quot;4227&quot;</span>, <span class="hljs-string">&quot;7952&quot;</span>, <span class="hljs-string">&quot;8855&quot;</span>,<br>                <span class="hljs-string">&quot;3592&quot;</span>, <span class="hljs-string">&quot;2054&quot;</span>, <span class="hljs-string">&quot;3175&quot;</span>, <span class="hljs-string">&quot;6665&quot;</span>, <span class="hljs-string">&quot;4088&quot;</span>, <span class="hljs-string">&quot;9959&quot;</span>, <span class="hljs-string">&quot;3809&quot;</span>, <span class="hljs-string">&quot;7379&quot;</span>,<br>                <span class="hljs-string">&quot;6949&quot;</span>, <span class="hljs-string">&quot;8063&quot;</span>, <span class="hljs-string">&quot;3686&quot;</span>, <span class="hljs-string">&quot;8078&quot;</span>, <span class="hljs-string">&quot;0925&quot;</span>, <span class="hljs-string">&quot;5167&quot;</span>, <span class="hljs-string">&quot;2075&quot;</span>, <span class="hljs-string">&quot;4665&quot;</span>,<br>                <span class="hljs-string">&quot;2628&quot;</span>, <span class="hljs-string">&quot;8242&quot;</span>, <span class="hljs-string">&quot;9831&quot;</span>, <span class="hljs-string">&quot;1397&quot;</span>, <span class="hljs-string">&quot;5547&quot;</span>, <span class="hljs-string">&quot;9449&quot;</span>, <span class="hljs-string">&quot;6512&quot;</span>, <span class="hljs-string">&quot;6083&quot;</span>,<br>                <span class="hljs-string">&quot;9682&quot;</span>, <span class="hljs-string">&quot;2215&quot;</span>, <span class="hljs-string">&quot;3236&quot;</span>, <span class="hljs-string">&quot;2457&quot;</span>, <span class="hljs-string">&quot;6211&quot;</span>, <span class="hljs-string">&quot;5536&quot;</span>, <span class="hljs-string">&quot;8674&quot;</span>, <span class="hljs-string">&quot;2647&quot;</span>,<br>                <span class="hljs-string">&quot;9752&quot;</span>, <span class="hljs-string">&quot;5433&quot;</span>, <span class="hljs-string">&quot;0186&quot;</span>, <span class="hljs-string">&quot;5904&quot;</span>, <span class="hljs-string">&quot;1526&quot;</span>, <span class="hljs-string">&quot;5347&quot;</span>, <span class="hljs-string">&quot;1387&quot;</span>, <span class="hljs-string">&quot;3153&quot;</span>,<br>                <span class="hljs-string">&quot;1353&quot;</span>, <span class="hljs-string">&quot;6069&quot;</span>, <span class="hljs-string">&quot;9995&quot;</span>, <span class="hljs-string">&quot;9496&quot;</span>, <span class="hljs-string">&quot;0003&quot;</span>, <span class="hljs-string">&quot;3400&quot;</span>, <span class="hljs-string">&quot;1692&quot;</span>, <span class="hljs-string">&quot;6870&quot;</span>,<br>                <span class="hljs-string">&quot;4445&quot;</span>, <span class="hljs-string">&quot;3063&quot;</span>, <span class="hljs-string">&quot;0708&quot;</span>, <span class="hljs-string">&quot;3278&quot;</span>, <span class="hljs-string">&quot;6961&quot;</span>, <span class="hljs-string">&quot;3063&quot;</span>, <span class="hljs-string">&quot;0249&quot;</span>, <span class="hljs-string">&quot;0375&quot;</span>,<br>                <span class="hljs-string">&quot;1763&quot;</span>, <span class="hljs-string">&quot;1804&quot;</span>, <span class="hljs-string">&quot;4695&quot;</span>, <span class="hljs-string">&quot;6493&quot;</span>, <span class="hljs-string">&quot;7573&quot;</span>, <span class="hljs-string">&quot;9977&quot;</span>, <span class="hljs-string">&quot;1108&quot;</span>, <span class="hljs-string">&quot;0856&quot;</span>,<br>                <span class="hljs-string">&quot;5631&quot;</span>, <span class="hljs-string">&quot;4799&quot;</span>, <span class="hljs-string">&quot;4164&quot;</span>, <span class="hljs-string">&quot;0844&quot;</span>, <span class="hljs-string">&quot;2600&quot;</span>, <span class="hljs-string">&quot;1785&quot;</span>, <span class="hljs-string">&quot;1587&quot;</span>, <span class="hljs-string">&quot;4510&quot;</span>,<br>                <span class="hljs-string">&quot;9012&quot;</span>, <span class="hljs-string">&quot;7497&quot;</span>, <span class="hljs-string">&quot;4923&quot;</span>, <span class="hljs-string">&quot;2560&quot;</span>, <span class="hljs-string">&quot;0338&quot;</span>, <span class="hljs-string">&quot;3839&quot;</span>, <span class="hljs-string">&quot;5624&quot;</span>, <span class="hljs-string">&quot;1980&quot;</span>,<br>                <span class="hljs-string">&quot;1514&quot;</span>, <span class="hljs-string">&quot;4634&quot;</span>, <span class="hljs-string">&quot;2855&quot;</span>, <span class="hljs-string">&quot;7012&quot;</span>, <span class="hljs-string">&quot;3626&quot;</span>, <span class="hljs-string">&quot;7032&quot;</span>, <span class="hljs-string">&quot;6145&quot;</span>, <span class="hljs-string">&quot;5663&quot;</span>,<br>                <span class="hljs-string">&quot;4395&quot;</span>, <span class="hljs-string">&quot;0724&quot;</span>, <span class="hljs-string">&quot;4711&quot;</span>, <span class="hljs-string">&quot;1573&quot;</span>, <span class="hljs-string">&quot;6904&quot;</span>, <span class="hljs-string">&quot;8100&quot;</span>, <span class="hljs-string">&quot;2649&quot;</span>, <span class="hljs-string">&quot;3890&quot;</span>,<br>                <span class="hljs-string">&quot;8110&quot;</span>, <span class="hljs-string">&quot;8067&quot;</span>, <span class="hljs-string">&quot;1460&quot;</span>, <span class="hljs-string">&quot;0186&quot;</span>, <span class="hljs-string">&quot;6098&quot;</span>, <span class="hljs-string">&quot;2459&quot;</span>, <span class="hljs-string">&quot;6991&quot;</span>, <span class="hljs-string">&quot;9372&quot;</span>,<br>                <span class="hljs-string">&quot;8539&quot;</span>, <span class="hljs-string">&quot;8418&quot;</span>, <span class="hljs-string">&quot;7944&quot;</span>, <span class="hljs-string">&quot;0499&quot;</span>, <span class="hljs-string">&quot;9276&quot;</span>, <span class="hljs-string">&quot;1525&quot;</span>, <span class="hljs-string">&quot;1281&quot;</span>, <span class="hljs-string">&quot;8738&quot;</span>,<br>                <span class="hljs-string">&quot;5054&quot;</span>, <span class="hljs-string">&quot;7869&quot;</span>, <span class="hljs-string">&quot;6599&quot;</span>, <span class="hljs-string">&quot;8018&quot;</span>, <span class="hljs-string">&quot;7530&quot;</span>, <span class="hljs-string">&quot;2327&quot;</span>, <span class="hljs-string">&quot;3681&quot;</span>, <span class="hljs-string">&quot;5248&quot;</span>,<br>                <span class="hljs-string">&quot;4291&quot;</span>, <span class="hljs-string">&quot;7300&quot;</span>, <span class="hljs-string">&quot;8854&quot;</span>, <span class="hljs-string">&quot;2591&quot;</span>, <span class="hljs-string">&quot;8744&quot;</span>, <span class="hljs-string">&quot;3052&quot;</span>, <span class="hljs-string">&quot;6369&quot;</span>, <span class="hljs-string">&quot;3669&quot;</span>,<br>                <span class="hljs-string">&quot;8501&quot;</span>, <span class="hljs-string">&quot;8455&quot;</span>, <span class="hljs-string">&quot;5726&quot;</span>, <span class="hljs-string">&quot;1211&quot;</span>, <span class="hljs-string">&quot;8793&quot;</span>, <span class="hljs-string">&quot;6889&quot;</span>, <span class="hljs-string">&quot;9315&quot;</span>, <span class="hljs-string">&quot;0738&quot;</span>,<br>                <span class="hljs-string">&quot;6805&quot;</span>, <span class="hljs-string">&quot;5980&quot;</span>, <span class="hljs-string">&quot;7485&quot;</span>, <span class="hljs-string">&quot;2333&quot;</span>, <span class="hljs-string">&quot;0140&quot;</span>, <span class="hljs-string">&quot;4708&quot;</span>, <span class="hljs-string">&quot;9558&quot;</span>, <span class="hljs-string">&quot;9026&quot;</span>,<br>                <span class="hljs-string">&quot;4349&quot;</span>, <span class="hljs-string">&quot;5978&quot;</span>, <span class="hljs-string">&quot;4989&quot;</span>, <span class="hljs-string">&quot;5238&quot;</span>, <span class="hljs-string">&quot;3217&quot;</span>, <span class="hljs-string">&quot;5938&quot;</span>, <span class="hljs-string">&quot;9660&quot;</span>, <span class="hljs-string">&quot;5858&quot;</span>,<br>                <span class="hljs-string">&quot;2118&quot;</span>, <span class="hljs-string">&quot;7657&quot;</span>, <span class="hljs-string">&quot;5896&quot;</span>, <span class="hljs-string">&quot;3195&quot;</span>, <span class="hljs-string">&quot;8997&quot;</span>, <span class="hljs-string">&quot;1688&quot;</span>, <span class="hljs-string">&quot;2863&quot;</span>, <span class="hljs-string">&quot;9356&quot;</span>,<br>                <span class="hljs-string">&quot;4208&quot;</span>, <span class="hljs-string">&quot;5438&quot;</span>, <span class="hljs-string">&quot;2642&quot;</span>, <span class="hljs-string">&quot;4138&quot;</span>, <span class="hljs-string">&quot;7466&quot;</span>, <span class="hljs-string">&quot;6154&quot;</span>, <span class="hljs-string">&quot;0926&quot;</span>, <span class="hljs-string">&quot;2556&quot;</span>,<br>                <span class="hljs-string">&quot;9574&quot;</span>, <span class="hljs-string">&quot;4497&quot;</span>, <span class="hljs-string">&quot;9633&quot;</span>, <span class="hljs-string">&quot;0585&quot;</span>, <span class="hljs-string">&quot;1390&quot;</span>, <span class="hljs-string">&quot;5093&quot;</span>, <span class="hljs-string">&quot;3047&quot;</span>, <span class="hljs-string">&quot;0430&quot;</span>,<br>                <span class="hljs-string">&quot;7482&quot;</span>, <span class="hljs-string">&quot;0750&quot;</span>, <span class="hljs-string">&quot;6229&quot;</span>, <span class="hljs-string">&quot;8714&quot;</span>, <span class="hljs-string">&quot;4765&quot;</span>, <span class="hljs-string">&quot;0941&quot;</span>, <span class="hljs-string">&quot;1780&quot;</span>, <span class="hljs-string">&quot;6262&quot;</span>,<br>                <span class="hljs-string">&quot;0925&quot;</span>, <span class="hljs-string">&quot;5631&quot;</span>, <span class="hljs-string">&quot;9167&quot;</span>, <span class="hljs-string">&quot;0885&quot;</span>, <span class="hljs-string">&quot;7713&quot;</span>, <span class="hljs-string">&quot;5576&quot;</span>, <span class="hljs-string">&quot;3775&quot;</span>, <span class="hljs-string">&quot;9652&quot;</span>,<br>                <span class="hljs-string">&quot;0733&quot;</span>, <span class="hljs-string">&quot;7467&quot;</span>, <span class="hljs-string">&quot;5301&quot;</span>, <span class="hljs-string">&quot;9365&quot;</span>, <span class="hljs-string">&quot;7978&quot;</span>, <span class="hljs-string">&quot;4736&quot;</span>, <span class="hljs-string">&quot;3309&quot;</span>, <span class="hljs-string">&quot;6965&quot;</span>,<br>                <span class="hljs-string">&quot;4703&quot;</span>, <span class="hljs-string">&quot;5897&quot;</span>, <span class="hljs-string">&quot;8460&quot;</span>, <span class="hljs-string">&quot;9619&quot;</span>, <span class="hljs-string">&quot;0572&quot;</span>, <span class="hljs-string">&quot;6297&quot;</span>, <span class="hljs-string">&quot;7701&quot;</span>, <span class="hljs-string">&quot;7554&quot;</span>,<br>                <span class="hljs-string">&quot;8669&quot;</span>, <span class="hljs-string">&quot;5426&quot;</span>, <span class="hljs-string">&quot;6474&quot;</span>, <span class="hljs-string">&quot;5540&quot;</span>, <span class="hljs-string">&quot;5038&quot;</span>, <span class="hljs-string">&quot;3880&quot;</span>, <span class="hljs-string">&quot;1657&quot;</span>, <span class="hljs-string">&quot;7574&quot;</span>,<br>                <span class="hljs-string">&quot;1108&quot;</span>, <span class="hljs-string">&quot;4369&quot;</span>, <span class="hljs-string">&quot;7782&quot;</span>, <span class="hljs-string">&quot;9742&quot;</span>, <span class="hljs-string">&quot;5301&quot;</span>, <span class="hljs-string">&quot;6984&quot;</span>, <span class="hljs-string">&quot;3158&quot;</span>, <span class="hljs-string">&quot;2869&quot;</span>,<br>                <span class="hljs-string">&quot;0599&quot;</span>, <span class="hljs-string">&quot;2147&quot;</span>, <span class="hljs-string">&quot;6962&quot;</span>, <span class="hljs-string">&quot;9722&quot;</span>, <span class="hljs-string">&quot;3597&quot;</span>, <span class="hljs-string">&quot;9015&quot;</span>, <span class="hljs-string">&quot;3115&quot;</span>, <span class="hljs-string">&quot;9051&quot;</span>,<br>                <span class="hljs-string">&quot;8269&quot;</span>, <span class="hljs-string">&quot;6967&quot;</span>, <span class="hljs-string">&quot;5392&quot;</span>, <span class="hljs-string">&quot;4401&quot;</span>, <span class="hljs-string">&quot;6579&quot;</span>, <span class="hljs-string">&quot;8997&quot;</span>, <span class="hljs-string">&quot;8933&quot;</span>, <span class="hljs-string">&quot;9297&quot;</span>,<br>                <span class="hljs-string">&quot;0151&quot;</span>, <span class="hljs-string">&quot;8820&quot;</span>, <span class="hljs-string">&quot;3297&quot;</span>, <span class="hljs-string">&quot;6723&quot;</span>, <span class="hljs-string">&quot;1755&quot;</span>, <span class="hljs-string">&quot;1163&quot;</span>, <span class="hljs-string">&quot;8896&quot;</span>, <span class="hljs-string">&quot;7122&quot;</span>,<br>                <span class="hljs-string">&quot;4859&quot;</span>, <span class="hljs-string">&quot;5504&quot;</span>, <span class="hljs-string">&quot;0857&quot;</span>, <span class="hljs-string">&quot;4682&quot;</span>, <span class="hljs-string">&quot;8177&quot;</span>, <span class="hljs-string">&quot;8702&quot;</span>, <span class="hljs-string">&quot;9167&quot;</span>, <span class="hljs-string">&quot;9410&quot;</span>,<br>                <span class="hljs-string">&quot;0130&quot;</span>, <span class="hljs-string">&quot;2789&quot;</span>, <span class="hljs-string">&quot;7492&quot;</span>, <span class="hljs-string">&quot;5938&quot;</span>, <span class="hljs-string">&quot;3012&quot;</span>, <span class="hljs-string">&quot;4137&quot;</span>, <span class="hljs-string">&quot;3414&quot;</span>, <span class="hljs-string">&quot;2245&quot;</span>,<br>                <span class="hljs-string">&quot;4292&quot;</span>, <span class="hljs-string">&quot;6945&quot;</span>, <span class="hljs-string">&quot;5446&quot;</span>, <span class="hljs-string">&quot;6614&quot;</span>, <span class="hljs-string">&quot;2977&quot;</span>, <span class="hljs-string">&quot;8640&quot;</span>, <span class="hljs-string">&quot;9242&quot;</span>, <span class="hljs-string">&quot;7603&quot;</span>,<br>                <span class="hljs-string">&quot;8349&quot;</span>, <span class="hljs-string">&quot;9420&quot;</span>, <span class="hljs-string">&quot;0538&quot;</span>, <span class="hljs-string">&quot;4222&quot;</span>, <span class="hljs-string">&quot;0599&quot;</span>, <span class="hljs-string">&quot;8459&quot;</span>, <span class="hljs-string">&quot;8738&quot;</span>, <span class="hljs-string">&quot;4764&quot;</span>,<br>                <span class="hljs-string">&quot;6717&quot;</span>, <span class="hljs-string">&quot;7575&quot;</span>, <span class="hljs-string">&quot;5965&quot;</span>, <span class="hljs-string">&quot;9816&quot;</span>, <span class="hljs-string">&quot;9975&quot;</span>, <span class="hljs-string">&quot;4994&quot;</span>, <span class="hljs-string">&quot;2612&quot;</span>, <span class="hljs-string">&quot;0344&quot;</span>,<br>                <span class="hljs-string">&quot;6450&quot;</span>, <span class="hljs-string">&quot;9088&quot;</span>, <span class="hljs-string">&quot;4898&quot;</span>, <span class="hljs-string">&quot;6379&quot;</span>, <span class="hljs-string">&quot;4127&quot;</span>, <span class="hljs-string">&quot;1574&quot;</span>, <span class="hljs-string">&quot;9044&quot;</span>, <span class="hljs-string">&quot;0434&quot;</span>,<br>                <span class="hljs-string">&quot;5928&quot;</span>, <span class="hljs-string">&quot;6679&quot;</span>, <span class="hljs-string">&quot;1753&quot;</span>, <span class="hljs-string">&quot;8940&quot;</span>, <span class="hljs-string">&quot;7563&quot;</span>, <span class="hljs-string">&quot;0545&quot;</span>, <span class="hljs-string">&quot;4575&quot;</span>, <span class="hljs-string">&quot;6407&quot;</span>,<br>                <span class="hljs-string">&quot;6213&quot;</span>, <span class="hljs-string">&quot;8327&quot;</span>, <span class="hljs-string">&quot;3978&quot;</span>, <span class="hljs-string">&quot;9187&quot;</span>, <span class="hljs-string">&quot;2996&quot;</span>, <span class="hljs-string">&quot;1956&quot;</span>, <span class="hljs-string">&quot;8819&quot;</span>, <span class="hljs-string">&quot;9591&quot;</span>,<br>                <span class="hljs-string">&quot;7802&quot;</span>, <span class="hljs-string">&quot;4747&quot;</span>, <span class="hljs-string">&quot;9094&quot;</span>, <span class="hljs-string">&quot;0179&quot;</span>, <span class="hljs-string">&quot;0806&quot;</span>, <span class="hljs-string">&quot;2509&quot;</span>, <span class="hljs-string">&quot;4026&quot;</span>, <span class="hljs-string">&quot;4850&quot;</span>,<br>                <span class="hljs-string">&quot;2495&quot;</span>, <span class="hljs-string">&quot;3945&quot;</span>, <span class="hljs-string">&quot;4994&quot;</span>, <span class="hljs-string">&quot;5971&quot;</span>, <span class="hljs-string">&quot;3401&quot;</span>, <span class="hljs-string">&quot;0218&quot;</span>, <span class="hljs-string">&quot;6584&quot;</span>, <span class="hljs-string">&quot;7688&quot;</span>,<br>                <span class="hljs-string">&quot;6138&quot;</span>, <span class="hljs-string">&quot;7047&quot;</span>, <span class="hljs-string">&quot;9456&quot;</span>, <span class="hljs-string">&quot;0173&quot;</span>, <span class="hljs-string">&quot;1406&quot;</span>, <span class="hljs-string">&quot;1564&quot;</span>, <span class="hljs-string">&quot;3055&quot;</span>, <span class="hljs-string">&quot;8725&quot;</span>,<br>                <span class="hljs-string">&quot;4835&quot;</span>, <span class="hljs-string">&quot;4737&quot;</span>, <span class="hljs-string">&quot;6279&quot;</span>, <span class="hljs-string">&quot;5291&quot;</span>, <span class="hljs-string">&quot;0145&quot;</span>, <span class="hljs-string">&quot;0002&quot;</span>, <span class="hljs-string">&quot;1263&quot;</span>, <span class="hljs-string">&quot;9518&quot;</span>,<br>                <span class="hljs-string">&quot;1251&quot;</span>, <span class="hljs-string">&quot;8224&quot;</span>, <span class="hljs-string">&quot;6779&quot;</span>, <span class="hljs-string">&quot;4113&quot;</span>, <span class="hljs-string">&quot;8680&quot;</span>, <span class="hljs-string">&quot;2946&quot;</span>, <span class="hljs-string">&quot;1685&quot;</span>, <span class="hljs-string">&quot;2057&quot;</span>,<br>                <span class="hljs-string">&quot;9520&quot;</span>, <span class="hljs-string">&quot;4099&quot;</span>, <span class="hljs-string">&quot;7785&quot;</span>, <span class="hljs-string">&quot;1134&quot;</span>, <span class="hljs-string">&quot;2152&quot;</span>, <span class="hljs-string">&quot;4719&quot;</span>, <span class="hljs-string">&quot;6038&quot;</span>, <span class="hljs-string">&quot;1599&quot;</span>,<br>                <span class="hljs-string">&quot;6750&quot;</span>, <span class="hljs-string">&quot;9273&quot;</span>, <span class="hljs-string">&quot;7755&quot;</span>, <span class="hljs-string">&quot;3134&quot;</span>, <span class="hljs-string">&quot;2345&quot;</span>, <span class="hljs-string">&quot;8208&quot;</span>, <span class="hljs-string">&quot;5750&quot;</span>, <span class="hljs-string">&quot;5850&quot;</span>,<br>                <span class="hljs-string">&quot;2019&quot;</span>, <span class="hljs-string">&quot;0350&quot;</span>, <span class="hljs-string">&quot;9013&quot;</span>, <span class="hljs-string">&quot;6911&quot;</span>, <span class="hljs-string">&quot;6095&quot;</span>, <span class="hljs-string">&quot;6843&quot;</span>, <span class="hljs-string">&quot;3157&quot;</span>, <span class="hljs-string">&quot;9049&quot;</span>,<br>                <span class="hljs-string">&quot;0801&quot;</span>, <span class="hljs-string">&quot;2739&quot;</span>, <span class="hljs-string">&quot;9691&quot;</span>, <span class="hljs-string">&quot;3511&quot;</span>]<br>    target = <span class="hljs-string">&quot;2248&quot;</span><br>    <span class="hljs-built_in">print</span>(solu.openLock(deadends, target))<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 三月份每日一题</title>
    <link href="/2022/03/08/LeetCode-%E4%B8%89%E6%9C%88%E4%BB%BD%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <url>/2022/03/08/LeetCode-%E4%B8%89%E6%9C%88%E4%BB%BD%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/TB9TPG5.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">platesBetweenCandles</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, queries: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(queries)<br>        preSum, preSumArray = <span class="hljs-number">0</span>, [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(s)<br>        leftCandle, leftArray = -<span class="hljs-number">1</span>, [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>                preSum += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                leftCandle = i<br>            preSumArray[i] = preSum<br>            leftArray[i] = leftCandle<br><br>        rightCandle, rightArray = <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>, [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;|&#x27;</span>:<br>                rightCandle = i<br>            rightArray[i] = rightCandle<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(queries)):<br>            leftIndex = rightArray[queries[i][<span class="hljs-number">0</span>]]<br>            rightIndex = leftArray[queries[i][<span class="hljs-number">1</span>]]<br>            <span class="hljs-keyword">if</span> leftIndex &lt; rightIndex:<br>                res[i] = preSumArray[rightIndex] - preSumArray[leftIndex]<br><br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    str1 = <span class="hljs-string">&quot;**|**|***|&quot;</span><br>    <span class="hljs-built_in">print</span>(solu.platesBetweenCandles(str1, [[<span class="hljs-number">2</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">9</span>]]))<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode tricks for this Blog</title>
    <link href="/2022/03/08/VSCode-tricks-for-this-Blog/"/>
    <url>/2022/03/08/VSCode-tricks-for-this-Blog/</url>
    
    <content type="html"><![CDATA[<p>另一个博客上也有类似的文章，用来记录 VSCode 使用过程中的tips。故取这个题目。</p><h3 id="vscode-设置某一个特定编程语言的缩进">VSCode设置某一个特定编程语言的缩进</h3><p>比如设置 vue 文件的缩进：</p><p><img src="https://i.imgur.com/1fxmybl.png" /></p><p>然后，我按 <code>Alt + Shift + F</code>会让我配置默认的代码格式化的工具，我选择的就是 vue官方的语言支持插件：Volar.</p><p><img src="https://i.imgur.com/gLbPa1r.png" /></p><h3 id="去掉-java-的-main-函数上面的-run-debug">去掉 Java 的 main函数上面的 <code>run | debug</code></h3><p>在设置里面搜索 <code>debug</code>，然后找到<code>Java Debugger</code> 中的<code>Java&gt;Debug&gt;Settings: Enable Run Debug Code Lens</code>，然后取消下面的勾选：</p><p><img src="https://i.imgur.com/IJyFP8d.png" /></p><h3 id="vscode-的-quick-fix快速修复快捷键不生效">VSCode 的 quickfix(快速修复)快捷键不生效</h3><p>原因：与微软输入法的切换中英文标点的快捷键冲突。</p><p>解决方法：</p><p>找到微软输入法的设置，然后取消 <code>Ctrl + .</code>的快捷键即可。</p><p><img src="https://i.imgur.com/Fw0Kfu8.png" /></p><h3 id="vscode-中解决-maven-的-pom.xml-依赖问题">VSCode 中解决 maven 的pom.xml 依赖问题</h3><p>要么在命令行执行：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">mvn dependency:sources<br></code></pre></div></td></tr></table></figure><p>要么，用 maven 进行 build 一下：</p><p><img src="https://i.imgur.com/6ClXPDn.png" /></p><h3 id="vscode-如何改变整体的-scale">VSCode 如何改变整体的 scale</h3><p><code>view-&gt;appearence-&gt;zoom in/out</code>。</p><p><img src="%5BImgur%5D(https://i.imgur.com/6RSZJMq.png)" /></p><p>或者使用快捷键 <code>Ctrl +</code> 或者 <code>Ctrl -</code>。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 46-50 记录</title>
    <link href="/2022/03/05/LeetCode-46-50-%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/05/LeetCode-46-50-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="section">46</h1><p><a href="https://leetcode-cn.com/problems/permutations/"class="uri">https://leetcode-cn.com/problems/permutations/</a></p><p><img src="https://i.imgur.com/N43gvoL.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permute</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">permutation</span>(<span class="hljs-params">nums</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">yield</span> nums[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">for</span> perm <span class="hljs-keyword">in</span> permutation(nums[<span class="hljs-number">1</span>:]):<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(perm) + <span class="hljs-number">1</span>):<br>                        <span class="hljs-keyword">yield</span> perm[:i] + nums[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] + perm[i:]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(permutation(nums))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.permute([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br><br></code></pre></div></td></tr></table></figure><p>就是递归。想到了就是想到了。思路的话都好想，就是怎么转化成代码。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归算法题专项整理</title>
    <link href="/2022/03/04/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/03/04/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E9%A2%98%E4%B8%93%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode Markdown Preview Enhanced 无法渲染出 imgur 的图片</title>
    <link href="/2022/03/03/VSCode-Markdown-Preview-Enhanced-%E6%97%A0%E6%B3%95%E6%B8%B2%E6%9F%93%E5%87%BA-imgur-%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    <url>/2022/03/03/VSCode-Markdown-Preview-Enhanced-%E6%97%A0%E6%B3%95%E6%B8%B2%E6%9F%93%E5%87%BA-imgur-%E7%9A%84%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>最近一段时间，发现 VSCode 写 Markdown 无法预览我的 imgur图床的图片了，但是使用 Hexo 渲染好，到浏览器中访问却是正常的，然后去imgur的设置中看，也没有发现什么端倪。然后测试内网的图片链接能否正常显示，发现是可以的。</p><p>之后想到了应该是代理的原因，在 <code>settings.json</code>中设置代理如下：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;http.proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;http.proxyStrictSSL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;https.proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></div></td></tr></table></figure><p>然后刷新一下，问题解决。</p><p>这个问题出现的原因，我猜测应该是 VSCode 更新的缘故。这个<code>1.64.2</code> 版本的 VSCode 应该有一些Bug，这个代理，在以往的版本中都是直接继承系统代理的。到这个版本突然就给我整了个失效，然后回退到之前的版本中竟然都没有解决。另外一个光标显示的Bug，即光标的顶部闪烁的时候显示有残影，如果回退到之前的版本，倒是解决了。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cannot resolve symbol &#39;validation&#39; 问题的解决</title>
    <link href="/2022/03/02/Cannot-resolve-symbol-validation-%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/03/02/Cannot-resolve-symbol-validation-%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>问题描述：</p><p><img src="https://i.imgur.com/nJ6uRTI.png" /></p><p>问题解决：</p><p>直接到 maven repo 中找到相关的包，导入到 <code>pom.xml</code>中即可：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javax.validation/validation-api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.validation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>validation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot-maven-plugin 报红问题的解决</title>
    <link href="/2022/03/02/spring-boot-maven-plugin-%E6%8A%A5%E7%BA%A2%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/03/02/spring-boot-maven-plugin-%E6%8A%A5%E7%BA%A2%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>问题描述：</p><p>在 <code>pom.xml</code> 中的</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>会报红。</p><p>解决：</p><p>根据 IDEA的提示，发现应该是没有声明版本号的原因，因此，在下面声明版本号即可：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA tricks</title>
    <link href="/2022/03/02/IDEA-tricks/"/>
    <url>/2022/03/02/IDEA-tricks/</url>
    
    <content type="html"><![CDATA[<h1 id="搜索相关">搜索相关</h1><ul><li><code>Ctrl+Shift+N</code>：按文件名搜索文件，相当于 VSCode 中的<code>Ctrl + P</code>。</li></ul><h1 id="窗口操作相关">窗口操作相关</h1><ul><li><code>Ctrl + F4</code>：关闭当前的 Tab。</li></ul><h1 id="快捷键">快捷键</h1><ul><li><code>Ctrl + Alt + L</code>：格式化代码。</li><li><code>Alt + 1</code>：toggle 左边的侧边栏，相当于 VSCode 中的<code>Ctrl + B</code>。</li><li><code>Alt + F12</code>：toggle 命令行终端。</li><li><code>Ctrl + Shift + A</code>：然后输入<code>plugin</code>，就会召唤出插件窗口。</li><li><code>Ctrl + Alt + B</code>：从接口中的方法跳转到其实现类。</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 配置自己的 maven</title>
    <link href="/2022/03/02/IDEA-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84-maven/"/>
    <url>/2022/03/02/IDEA-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84-maven/</url>
    
    <content type="html"><![CDATA[<p>开始复习 Java。</p><h1 id="下载">下载</h1><p>首先，去 maven <ahref="https://maven.apache.org/download.cgi">官网</a> 下载 maven的压缩包，</p><p><img src="https://i.imgur.com/pMaexBu.png" /></p><p>下载好之后解压缩，然后将 <code>bin</code> 目录添加到环境变量：</p><p><img src="https://i.imgur.com/woCHqyQ.png" /></p><p>然后在命令行测试一下：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">mvn <span class="hljs-literal">-v</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/MghlN1x.png" /></p><p>如果正常输出版本号，则初步配置成功。</p><h1 id="配置镜像">配置镜像</h1><p>打开 <code>conf</code> 目录下的 <code>settings.py</code></p><p><img src="https://i.imgur.com/clQYnDi.png" /></p><p><img src="https://i.imgur.com/UL7kdeo.png" /></p><p>修改镜像配置：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/3obRfRa.png" /></p><p>添加本地仓库地址：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>C:\FDisk\maven\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/gupN8nL.png" /></p><p>到这里，基本配置就完成了。</p><h1 id="在-idea-中的配置">在 IDEA 中的配置</h1><p>先配置 <code>New Projects Setup</code>，</p><p><img src="https://i.imgur.com/sJeofSf.png" /></p><p><img src="https://i.imgur.com/CIQDjSU.png" /></p><p>然后再在普通的设置里面再配置一次就可以了。</p><hr /><p>参考：</p><p>1、<a href="https://zhuanlan.zhihu.com/p/122429605"class="uri">https://zhuanlan.zhihu.com/p/122429605</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 笔试面试题目复习</title>
    <link href="/2022/03/02/Java-%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/03/02/Java-%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>老师，我，我，我想面试 Python。</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 41-45 记录</title>
    <link href="/2022/03/02/LeetCode-41-45-%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/02/LeetCode-41-45-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="section">41</h1><p><a href="https://leetcode-cn.com/problems/first-missing-positive/"class="uri">https://leetcode-cn.com/problems/first-missing-positive/</a></p><p><img src="https://i.imgur.com/GTw85J6.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">firstMissingPositive</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] &lt;= <span class="hljs-number">0</span>:<br>                nums[i] = <span class="hljs-built_in">len</span>(nums) + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            num = <span class="hljs-built_in">abs</span>(nums[i])<br>            <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num &lt;= <span class="hljs-built_in">len</span>(nums):<br>                nums[num - <span class="hljs-number">1</span>] = -<span class="hljs-built_in">abs</span>(nums[num - <span class="hljs-number">1</span>])<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums) + <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.firstMissingPositive([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]))<br>    <span class="hljs-built_in">print</span>(s.firstMissingPositive([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]))<br>    <span class="hljs-built_in">print</span>(s.firstMissingPositive([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]))<br>    <span class="hljs-built_in">print</span>(s.firstMissingPositive([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]))<br>    <span class="hljs-built_in">print</span>(s.firstMissingPositive([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br>    <span class="hljs-built_in">print</span>(s.firstMissingPositive([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))<br>    <span class="hljs-built_in">print</span>(s.firstMissingPositive([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))<br><br></code></pre></div></td></tr></table></figure><p>这道题的主要思路是对数字进行标记。专业一点的说法，是哈希表。因此，最后的时间复杂度为<span class="math inline">\(O(N)\)</span>，空间复杂度为 <spanclass="math inline">\(O(1)\)</span>。</p><p>要注意在第二趟标记的时候，后面的数在被访问到之前可能会被修改为负数，因此，我们要加一点处理，即：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>    num = <span class="hljs-built_in">abs</span>(nums[i])<br>    <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num &lt;= <span class="hljs-built_in">len</span>(nums):<br>        nums[num - <span class="hljs-number">1</span>] = -<span class="hljs-built_in">abs</span>(nums[num - <span class="hljs-number">1</span>])<br></code></pre></div></td></tr></table></figure><h1 id="section-1">42</h1><p><a href="https://leetcode-cn.com/problems/trapping-rain-water/"class="uri">https://leetcode-cn.com/problems/trapping-rain-water/</a></p><p><img src="https://i.imgur.com/Dm8hrdS.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> height:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        n = <span class="hljs-built_in">len</span>(height)<br>        left = [<span class="hljs-number">0</span>] * n<br>        right = [<span class="hljs-number">0</span>] * n<br>        left[<span class="hljs-number">0</span>] = height[<span class="hljs-number">0</span>]<br>        right[n-<span class="hljs-number">1</span>] = height[n-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            left[i] = <span class="hljs-built_in">max</span>(left[i-<span class="hljs-number">1</span>], height[i])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            right[i] = <span class="hljs-built_in">max</span>(right[i+<span class="hljs-number">1</span>], height[i])<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            res += <span class="hljs-built_in">min</span>(left[i], right[i]) - height[i]<br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.trap([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]))<br><br></code></pre></div></td></tr></table></figure><p>主要是理解这张图：</p><p><img src="https://i.imgur.com/kOEIqcC.png" /></p><p>以中间的最高的柱子为基准，然后左右开弓。结合代码和图形，解题是不算太难的。</p><h1 id="section-2">43</h1>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于本博客访问的一点说明</title>
    <link href="/2022/03/01/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E7%9A%84%E4%B8%80%E7%82%B9%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/03/01/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E7%9A%84%E4%B8%80%E7%82%B9%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>2023.0206 凌晨更新</p><p>这个寒假一直折腾输入法和双拼，所以写博客的时间不大有。</p><p>好吧，其实真正的原因是我的笔记方式最近换成了 Obsidian，Ob的效率是相当高的，所以，记博客的动力就减少了好多。</p><p>截至目前为止，我的小鹤双拼速度大概已经来到了原来全拼速度的一半，Ob的碎碎知识点倒是记录了不少，</p><p><img src="https://i.imgur.com/cZxVnKK.png" /></p><hr /><p>限于经济原因，本博客的大部分图片(除了较早的博客)采用的图床为 <ahref="https://imgur.com/">imgur</a>，因此，访客需要连接代理(VPN)方可完整加载出本博客的图片。</p><p>另，记录一下我目前解决不了的问题。2022.09.08 开始。</p><blockquote><p>1、为什么 HashMap 的负载因子是 0.75？</p></blockquote><p>别跟我说去看原码的注释，源码的注释你要是真的看过就不会说这句话。我想要的是严谨的数学方面的解释或者说，证明。我目前在网上没有看到一个人能够清晰地解释这个问题。一群蠢材。成天面试题面试题，面的什么东西？有一个面试官可以回答出来这个问题吗？我估计一个都没有。呵。</p><p>面试着就更不用说了。</p><blockquote><p>2、Windows 10/11 在 125%及以上的缩放的情况下，浏览器中的中键的滚动图标，放大镜等等一系列图标失真模糊的问题。</p></blockquote><p>在浏览器中可以通过 css手动更换资源的方式来解决。但是其他的软件，如果是套壳那啥浏览器客户端的软件，没办法手动换，比如VSCode，该怎样？微软还有谷歌的程序员的脑子里塞得都是什么东西。不要说人家是强迫症，完美主义者，还没到那种程度，这种东西都做不好，每天的饭都是粪坑里挖出来的吗？</p><blockquote><p>3、Windows11 的多屏显示在 Win + Tab 之间 toggle的时候，扩展的屏幕会闪一下。多虚拟桌面。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 99</title>
    <link href="/2022/02/27/LeetCode-99/"/>
    <url>/2022/02/27/LeetCode-99/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://leetcode-cn.com/problems/recover-binary-search-tree/"class="uri">https://leetcode-cn.com/problems/recover-binary-search-tree/</a></p><p><img src="https://i.imgur.com/DaJHl1s.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recoverTree</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify root in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        nodes = []<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">node: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>                <span class="hljs-keyword">return</span><br>            dfs(node.left)<br>            nodes.append(node)<br>            dfs(node.right)<br>        dfs(root)<br>        x = <span class="hljs-literal">None</span><br>        y = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nodes) - <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> nodes[i].val &gt; nodes[i + <span class="hljs-number">1</span>].val:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x:  <span class="hljs-comment"># if x is None, then this is the first time we see a violation</span><br>                    x = nodes[i]<br>                y = nodes[i + <span class="hljs-number">1</span>]  <span class="hljs-comment"># y is the second violation</span><br>        x.val, y.val = y.val, x.val<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">node: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>        <span class="hljs-keyword">return</span><br>    dfs(node.left)<br>    <span class="hljs-built_in">print</span>(node.val)<br>    dfs(node.right)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = TreeNode(<span class="hljs-number">7</span>)<br>    root.left = TreeNode(<span class="hljs-number">2</span>)<br>    root.right = TreeNode(<span class="hljs-number">6</span>)<br>    root.left.left = TreeNode(<span class="hljs-number">1</span>)<br>    root.left.right = TreeNode(<span class="hljs-number">3</span>)<br>    root.right.left = TreeNode(<span class="hljs-number">5</span>)<br>    root.right.right = TreeNode(<span class="hljs-number">4</span>)<br>    Solution().recoverTree(root)<br>    dfs(root)<br><br></code></pre></div></td></tr></table></figure><p>首先，我们理解题意，发现给定的二叉搜索树中只需要交换一次就能将树的性质恢复。所以，我们先对二叉搜索树进行先序遍历，然后找出两个不对劲的位置，交换这两个节点的值即可。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter 启动别人的开源项目(web)出错问题解决</title>
    <link href="/2022/02/26/flutter-%E5%90%AF%E5%8A%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-web-%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/02/26/flutter-%E5%90%AF%E5%8A%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-web-%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
      <tag>bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter 初次使用时遇到的问题</title>
    <link href="/2022/02/26/flutter-%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/02/26/flutter-%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>首先说明一下，我的 flutter遇到的问题是在配置安卓开发环境时候遇到的。因此，如果是 web 开发或者 ios或者是其他，解决办法可能不一样。</p><h1 id="flutter-doctor-proxy-configuration-no_proxy-is-not-set">flutterdoctor Proxy Configuration ! NO_PROXY is not set</h1><p>这个问题其实是花费我最长时间的一个。</p><p>一开始我按照网上的解决办法去设置<code>NO_PROXY</code>，都是说要设置成 <code>localhost,127.0.0.1</code>的。但是，如果这样设置，flutter doctor 又会报如下的错误：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">[!] Proxy Configuration<br>    ! NO_PROXY does not contain ::<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/BzyhQvR.png" /></p><p>然后看这个报错信息，我把 <code>NO_PROXY</code> 设置成了<code>localhost,127.0.0.1,::1</code>，</p><p><img src="https://i.imgur.com/pjNZag8.png" /></p><h1 id="dskia-4980-shader-compilation-error">D/skia ( 4980): Shadercompilation error</h1><p>这个问题的解决方法我是在 Youtube 上遇到的。链接：<ahref="https://www.youtube.com/watch?v=OLD0ISim8iQ&amp;ab_channel=BhutanIO"class="uri">https://www.youtube.com/watch?v=OLD0ISim8iQ&amp;ab_channel=BhutanIO</a></p><p>具体的解决步骤如下：</p><p><img src="https://i.imgur.com/iv1DGf9.png" /></p><p><img src="https://i.imgur.com/N284rnr.png" /></p><p>将上图 3 处的选项改成图中所示即可。</p>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter 学习笔记</title>
    <link href="/2022/02/26/flutter-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/02/26/flutter-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">flutter create projectname<br></code></pre></div></td></tr></table></figure><h1 id="如何去掉-debug-标签">如何去掉 DEBUG 标签</h1><p>在 VSCode 中，可以 <code>Ctrl + Shift + P</code>，然后搜索<code>Toggle Debug-mode banner</code>，点击即可关闭。</p><p><img src="https://i.imgur.com/39ftQ4m.png" /></p>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 36-40 记录</title>
    <link href="/2022/02/22/LeetCode-36-40-%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/22/LeetCode-36-40-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="section">36</h1><p><a href="https://leetcode-cn.com/problems/valid-sudoku/"class="uri">https://leetcode-cn.com/problems/valid-sudoku/</a></p><p><img src="https://i.imgur.com/jfBTH0T.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValidSudoku</span>(<span class="hljs-params">self, board: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-built_in">help</span> = <span class="hljs-number">10</span>  <span class="hljs-comment"># 辅助将 &quot;.&quot; 转化成不重复的数字</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            row = <span class="hljs-built_in">set</span>()<br>            col = <span class="hljs-built_in">set</span>()<br>            box = <span class="hljs-built_in">set</span>()<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>                row.add(board[i][j] <span class="hljs-keyword">if</span> board[i][j] != <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">help</span>)<br>                <span class="hljs-built_in">help</span> += <span class="hljs-number">1</span><br>                col.add(board[j][i] <span class="hljs-keyword">if</span> board[j][i] != <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">help</span>)<br>                <span class="hljs-built_in">help</span> += <span class="hljs-number">1</span><br>                box.add(board[i // <span class="hljs-number">3</span> * <span class="hljs-number">3</span> + j // <span class="hljs-number">3</span>][i % <span class="hljs-number">3</span> * <span class="hljs-number">3</span> + j % <span class="hljs-number">3</span>]<br>                        <span class="hljs-keyword">if</span> board[i // <span class="hljs-number">3</span> * <span class="hljs-number">3</span> + j // <span class="hljs-number">3</span>][i % <span class="hljs-number">3</span> * <span class="hljs-number">3</span> + j % <span class="hljs-number">3</span>] != <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">help</span>)<br>                <span class="hljs-built_in">help</span> += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) != <span class="hljs-number">9</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(col) != <span class="hljs-number">9</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(box) != <span class="hljs-number">9</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solu = Solution()<br>    board = [[<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>],<br>             [<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>],<br>             [<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>]]<br>    board = [[<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>],<br>             [<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>],<br>             [<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>],<br>             [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>]]<br><br>    res = solu.isValidSudoku(board)<br>    <span class="hljs-built_in">print</span>(res)<br><br></code></pre></div></td></tr></table></figure><p>这里最直观的想法肯定是使用不重复的 set集合来处理这个问题。因此代码实现起来还是相对容易的，主要是那个<code>box</code> 的坐标确认要注意一下。</p><h1 id="section-1">37</h1><p><a href="https://leetcode-cn.com/problems/sudoku-solver/"class="uri">https://leetcode-cn.com/problems/sudoku-solver/</a></p><p><img src="https://i.imgur.com/Svp3SkU.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Optional</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findNext</span>(<span class="hljs-params">self, board: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>                <span class="hljs-keyword">if</span> board[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>:<br>                    <span class="hljs-keyword">return</span> i, j<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, board: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]], i: <span class="hljs-built_in">int</span>, j: <span class="hljs-built_in">int</span>, num: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">if</span> board[row][j] == num:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">if</span> board[i][col] == num:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i // <span class="hljs-number">3</span> * <span class="hljs-number">3</span>, i // <span class="hljs-number">3</span> * <span class="hljs-number">3</span> + <span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j // <span class="hljs-number">3</span> * <span class="hljs-number">3</span>, j // <span class="hljs-number">3</span> * <span class="hljs-number">3</span> + <span class="hljs-number">3</span>):<br>                <span class="hljs-keyword">if</span> board[row][col] == num:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">solveSudokuHelper</span>(<span class="hljs-params">self, board, i=<span class="hljs-number">0</span>, j=<span class="hljs-number">0</span></span>):<br>        i, j = self.findNext(board)<br>        <span class="hljs-keyword">if</span> i == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">if</span> self.isValid(board, i, j, <span class="hljs-built_in">str</span>(num)):<br>                board[i][j] = <span class="hljs-built_in">str</span>(num)<br>                <span class="hljs-keyword">if</span> self.solveSudokuHelper(board, i, j):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                board[i][j] = <span class="hljs-string">&#x27;.&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">solveSudoku</span>(<span class="hljs-params">self, board: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify board in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.solveSudokuHelper(board)<br>        <span class="hljs-keyword">return</span><br><br><br>board = [[<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>         [<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>         [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>         [<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>],<br>         [<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>],<br>         [<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>],<br>         [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>         [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>],<br>         [<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>]]<br><br>Solution().solveSudoku(board)<br><br><span class="hljs-built_in">print</span>(board)<br><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/nz58VE2.png" /></p><p>注：这里对于每一个小的 3 x 3的部分，也是按照上面的图中的坐标轴来分析的。</p><p>再次写这道题，感觉还是 Python写代码更加容易让人理解呀。回溯算法，清晰明了。</p><p>参考：</p><p><ahref="https://stackoverflow.com/questions/1697334/algorithm-for-solving-sudoku"class="uri">https://stackoverflow.com/questions/1697334/algorithm-for-solving-sudoku</a></p><h1 id="section-2">38</h1><p><a href="https://leetcode-cn.com/problems/count-and-say/"class="uri">https://leetcode-cn.com/problems/count-and-say/</a></p><p><img src="https://i.imgur.com/RHOT2QQ.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countAndSay</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;1&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            s = self.countAndSay(n-<span class="hljs-number">1</span>)<br>            res = <span class="hljs-string">&#x27;&#x27;</span><br>            count = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)):<br>                <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> s[i] != s[i+<span class="hljs-number">1</span>]:<br>                    res += <span class="hljs-built_in">str</span>(count) + s[i]<br>                    count = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sol = Solution()<br>    <span class="hljs-built_in">print</span>(sol.countAndSay(<span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(sol.countAndSay(<span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">print</span>(sol.countAndSay(<span class="hljs-number">3</span>))<br>    <span class="hljs-built_in">print</span>(sol.countAndSay(<span class="hljs-number">4</span>))<br>    <span class="hljs-built_in">print</span>(sol.countAndSay(<span class="hljs-number">5</span>))<br><br></code></pre></div></td></tr></table></figure><p>理解题目的意思之后，这道题其实就是一个简单的递归。如果对递归比较熟悉的话，这道题很快就能写出来。</p><h1 id="section-3">39</h1><p><a href="https://leetcode-cn.com/problems/combination-sum/"class="uri">https://leetcode-cn.com/problems/combination-sum/</a></p><p><img src="https://i.imgur.com/9NLLM42.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum</span>(<span class="hljs-params">self, candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span>, path: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], res: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> target == <span class="hljs-number">0</span>:<br>                res.append(path)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(candidates)):<br>                <span class="hljs-keyword">if</span> target - candidates[i] &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">break</span><br>                dfs(candidates[i:], target - candidates[i],<br>                    path + [candidates[i]], res)<br><br>        res = []<br>        candidates.sort()<br>        dfs(candidates, target, [], res)<br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.combinationSum([<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>], <span class="hljs-number">9</span>))<br><br></code></pre></div></td></tr></table></figure><p>看到这题，应该立马能想到dfs。注意一点，就是在进行深度优先搜索的时候，要先对待选数组<code>candidates</code> 进行排序。不然，搜索的结果可能会不全。</p><h1 id="section-4">40</h1><p><a href="https://leetcode-cn.com/problems/combination-sum-ii/"class="uri">https://leetcode-cn.com/problems/combination-sum-ii/</a></p><p><img src="https://i.imgur.com/9JplEZh.png" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum2</span>(<span class="hljs-params">self, candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">candidates: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span>, path: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], res: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> target == <span class="hljs-number">0</span>:<br>                res.append(path)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(candidates)):<br>                <span class="hljs-keyword">if</span> target - candidates[i] &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> candidates[i] == candidates[i - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                dfs(candidates[i + <span class="hljs-number">1</span>:], target - candidates[i],<br>                    path + [candidates[i]], res)<br><br>        res = []<br>        candidates.sort()<br>        dfs(candidates, target, [], res)<br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Solution()<br>    <span class="hljs-built_in">print</span>(s.combinationSum2([<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>], <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(s.combinationSum2([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">5</span>))<br>    <span class="hljs-built_in">print</span>(s.combinationSum2([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">6</span>))<br><br></code></pre></div></td></tr></table></figure><p>依然是 dfs，不过，要注意，这个不能够重复使用列表中的元素。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA2021.3.2 激活</title>
    <link href="/2022/02/22/IDEA2021-3-2-%E6%BF%80%E6%B4%BB/"/>
    <url>/2022/02/22/IDEA2021-3-2-%E6%BF%80%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<p>2022.3.6 更新</p><p>之前一直是好好的，今天发现要重新输入激活码，填入激活码之后可以正常使用：</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">4W9NP3KV9E-eyJsaWNlbnNlSWQiOiI0VzlOUDNLVjlFIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDEyMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTYyNTA2MDI4NyIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-WlwI3NBiapY7em4MmP7qdZcTK2wvAt5f7FNwaH65H6SBvWnFGpe8M2VrSWCEBIGFQpv+VFJLghJKLjaRUcVOY6ttC6G4uKTpuPzELgcckez+/9DPrYj+alvLYFpS6UWy4uqzsjC/sHgcbNiCQjZQMVhj8Wflv9ts8SfWUqTwtciG8eBrzbyipXOVrRn5Wpk3l6ifL71HZsMy3bDLU8Lkt3UQBNVFZhXWBcNyY/WB9CQGX+6aXtbFA9p/hjbTZL050UoeM30rz0UkzPmfiIupbb3KNPKPArQkU8gw6pF7AcRSLuU3HNqq8RDbrXDYSXY9vtoD3Oi18ijlagVANrhjpQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD<br></code></pre></div></td></tr></table></figure><hr /><p>记录一下 IDEA 2021.3.2 的激活过程。</p><p>直接跟着教程 <ahref="https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3"class="uri">https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3</a>走即可。</p><p>我是在 IDEA 开着的时候执行脚本的。</p><p>然后执行完脚本查看激活的界面，发现所有的工作已经完成了。</p><p><img src="https://i.imgur.com/nzI4wxQ.png" /></p><p><img src="https://i.imgur.com/nzI4wxQ.png" /></p><p>激活到了 2099 年好像。</p><p>没办法，学校的教育邮箱被屏蔽了。只好出此下策。</p><p>最后，最好取消一下 IDEA 的自动检查更新。教程 <ahref="https://www.exception.site/article/30"class="uri">https://www.exception.site/article/30</a>。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 问题记录</title>
    <link href="/2022/02/22/Git-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/22/Git-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="gitignore-对某个文件夹无法生效">.gitignore对某个文件(夹)无法生效</h1><p>如果编写的规则没有错误的话，那么问题就很有可能出在了<code>.gitignore</code> 文件中的规则所作用的文件之前已经被添加到了 Git的仓库中。</p><p>我们可以执行以下命令来解决这个问题：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> -rf --cached .<br>git add .<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git reset 命令</title>
    <link href="/2022/02/21/git-reset-%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/02/21/git-reset-%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p><p>git reset 命令语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reset [--soft | --mixed | --hard] [HEAD]<br></code></pre></div></td></tr></table></figure><p><code>--mixed</code>为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reset  [HEAD] <br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git reset HEAD^            <span class="hljs-comment"># 回退所有内容到上一个版本  </span><br>$ git reset HEAD^ hello.php  <span class="hljs-comment"># 回退 hello.php 文件的版本到上一个版本  </span><br>$ git  reset  052e           <span class="hljs-comment"># 回退到指定版本</span><br></code></pre></div></td></tr></table></figure><hr /><p>参考：</p><p>1、<a href="https://www.runoob.com/git/git-reset.html"class="uri">https://www.runoob.com/git/git-reset.html</a><br />2、<a href="https://zhuanlan.zhihu.com/p/346993796"class="uri">https://zhuanlan.zhihu.com/p/346993796</a><br />3、<a href="https://zhuanlan.zhihu.com/p/346723062"class="uri">https://zhuanlan.zhihu.com/p/346723062</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何理解/阅读 git diff 输出的信息</title>
    <link href="/2022/02/20/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-%E9%98%85%E8%AF%BB-git-diff-%E8%BE%93%E5%87%BA%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/02/20/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-%E9%98%85%E8%AF%BB-git-diff-%E8%BE%93%E5%87%BA%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>当我学会如何阅读 <code>git diff/patch</code> 时，我觉得我对 git内部机制的理解有所提高。这里有一个示例来阐释不同的部分：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">diff --git a/bootstrap.sh b/bootstrap.sh<br>index e98ae1c..9073c4d 100644<br>--- a/bootstrap.sh<br>+++ b/bootstrap.sh<br>@@ -1,6 +1,6 @@<br> <span class="hljs-comment">#!/usr/bin/env bash</span><br> <br>-apt-get update<br>+sudo apt-get update<br> <br> wget -qO- https://raw.githubusercontent.com/...  <br> <br>@@ -9,3 +9,4 @@ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /home/vagrant/.nvm/...  </span><br><span class="hljs-string"> source /home/vagrant/.profile  </span><br><span class="hljs-string"> </span><br><span class="hljs-string"> nvm install node  </span><br><span class="hljs-string">+nvm alias default node</span><br></code></pre></div></td></tr></table></figure><p>第 1 行到第 4 行有一些关于 <code>diff</code>的信息——包括了原始文件和修改(新增)后的文件的名称。</p><p>在第 5 行，<code>@@</code>表示一个新的<strong>块(hunk)</strong>(注释一)的开始。</p><ul><li>第 5 行，<code>-1,6</code> 表示：在这个 <code>diff</code>被应用之前，原始的文件起始于第 1 行，一共有 6 行。</li><li>第 5 行，<code>+1,6</code> 表示：在这个 <code>diff</code>被应用之后，修改(新增)后的文件起始于第 1 行，一共有 6 行。</li><li>第 6 行，<code>#1/usr/bin/env bash</code>是原始文件的一部分，而且保持不变，因为该行开始于一个空格。</li><li>第 7 行是一个保持不变的空行。</li><li>第 8 行， 由于以 <code>-</code> 开始，<code>apt-get update</code>被移除。</li><li>第 9 行，<code>sudo apt-get update</code> 是被添加的部分，以<code>+</code> 开始。</li></ul><p>因为这个块有 1 行被移除，有 1 行属于后添加的，在这个<code>diff</code> 被应用之前和之后，总行数保持不变。第 5 行<code>@ -1,6 +1,6 @@</code> 的意思就显然了。</p><p>现在，让我们看一下位于第 13 到 17 行的第 2 块。</p><ul><li>第 13 行，<code>-9,3 +9,4</code> 表示以下信息显示：原始文件从第 9行开始，有 3 行代码，修改后(新增)的文件，从第 9 行开始，有 4行代码。</li><li>第 14-16 行，全部以空格开头(表示没有变化)。</li><li>第 17 行，<code>nvm alias default node</code> 前面有一个<code>+</code>，所以这是一个新增的内容。</li></ul><p><strong>Q&amp;A:</strong></p><p>问：第 5 行和第 13 行最后 <code>@@</code>后面为什么前一个是空白，而后一个有内容？</p><p>答：如果是从第一行开始，似乎 <code>@@</code>后面就会留白，而如果从下面的某一行开始(一般这种情况内容都会比较多)，那么内容的开始部分就会直接显示在<code>@@</code> 后面。我们只需要记住，<code>@@</code>后面出现的内容也是文件的内容就可以了。</p><p><strong>补充</strong></p><ul><li>尚未缓存的改动：<code>git diff</code>，即显示当前工作区与暂存区之间的差异。</li><li>查看已缓存的改动：<code>git diff --cached</code>，即，显示暂存区与上一次提交(commit)之间的差异。</li><li>查看已缓存的与未缓存的所有改动：<code>git diff HEAD</code></li><li>显示摘要而非整个 diff：<code>git diff --stat</code></li><li>如果要显示某一个具体文件的改动，可以在后面加上文件名，如：<code>git diff [filename]</code>。</li></ul><hr /><p>注释一：块(hunk)是 Git中的一个特有的概念。这里不必细究。只需要知道，Git处理文件是一块一块地处理的。</p><p>原文地址：<ahref="https://therobinkim.com/blog/how-to-read-a-git-diff"class="uri">https://therobinkim.com/blog/how-to-read-a-git-diff</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 学习笔记</title>
    <link href="/2022/02/20/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/02/20/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>对于 Git的使用，我们开始似乎不用纠结。不就是一个版本控制工具嘛，它的最主要的功能是版本控制。虽然经常可以听到，什么Git 的功能很强大很强大啦，然后学起来很难很难啦。听上去真是让人泄气。</p><p>可是，我们很多人似乎没有搞懂自己的需求，一开始我们可以先学一点最核心的关于版本控制的命令嘛。这个学会了，估计对于当下也差不多了。人家陶渊明也说过“好读书不求甚解”，咱可以不用强制要求自己一下子就什么都学会，学会一点点也是很快乐的。</p><h1 id="git-版本控制基础用法">Git 版本控制基础用法</h1><p>这里主要是对 Git 的最重要的功能——版本控制相关命令进行记录和理解。</p><h2id="创建历史版本以供将来回溯即创建读档点">创建历史版本以供将来回溯，即创建读档点</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git init<br></code></pre></div></td></tr></table></figure><p>这是初始化 Git 仓库的命令。这个命令会在当前目录下生成一个<code>.git</code>目录，这个文件夹掌管着版本控制的奥秘。暂时可以不用理解。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add filename<br></code></pre></div></td></tr></table></figure><p>这个命令是将名为 <code>filename</code> 的文件添加到 Git本地仓库中。如果想要将当前文件夹下的所有文件都添加到 Git仓库中，则可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br></code></pre></div></td></tr></table></figure><p>这个 <code>.</code> 是通配符。这个命令还是很常用的。一般来说可以和<code>.gitignore</code> 文件配合使用。</p><p>关于这个 <code>git add</code>命令，我们修改了哪个文件，那么，我们就要将那个文件 <code>add</code>一下。这样，仓库才会记录那个变化。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git status<br></code></pre></div></td></tr></table></figure><p>这个命令用来查看 Git 仓库的状态。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git commit --message <span class="hljs-string">&quot;First Commit&quot;</span><br></code></pre></div></td></tr></table></figure><p>这个命令用来提交已经修改的变化，这个命令执行完，就表示一个“快照”被创建好了。将来就可以通过相关命令回到这个状态。</p><p>其中， <code>--message</code>选项表示提交的信息。将来可以通过这些信息来推断这个版本的仓库作了哪些改变。</p><p>我们还可以直接使用：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git commit<br></code></pre></div></td></tr></table></figure><p>这样我们就会跳到 Vim 模式来输入一段信息，然后 <code>wq</code>保存。其实和 <code>--message</code> 功能相同。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git diff<br></code></pre></div></td></tr></table></figure><p>这个命令用来查看当前工作区与暂存区之间的差异。具体可以看另一篇博客。</p><h2 id="回退到某一个读档点">回退到某一个读档点</h2><h3 id="git-reset">git reset</h3><p>详见 <a href="">git reset 命令</a></p><p>回退版本。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reset [--soft | --mixed | --hard] [HEAD]<br></code></pre></div></td></tr></table></figure><p><code>--mixed</code>为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git reset HEAD^            <span class="hljs-comment"># 回退所有内容到上一个版本  </span><br>$ git reset HEAD^ hello.php  <span class="hljs-comment"># 回退 hello.php 文件的版本到上一个版本  </span><br>$ git  reset  052e           <span class="hljs-comment"># 回退到指定版本</span><br></code></pre></div></td></tr></table></figure><p><code>--soft</code> 参数用于回退到某个版本。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reset --soft HEAD<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git reset --soft HEAD~3 <span class="hljs-comment"># 回退上上上一个版本</span><br></code></pre></div></td></tr></table></figure><h1 id="git-常用命令">Git 常用命令</h1><h2 id="查看配置列表">1、查看配置列表</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --list<br></code></pre></div></td></tr></table></figure><h2 id="设置或者更改用户名和邮箱">2、设置或者更改用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;fanlumaster&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;1730976608@qq.com&quot;</span><br></code></pre></div></td></tr></table></figure><hr /><p>参考：</p><p>1、菜鸟教程</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerShell Tricks Track</title>
    <link href="/2022/02/20/PowerShell-Tricks-Track/"/>
    <url>/2022/02/20/PowerShell-Tricks-Track/</url>
    
    <content type="html"><![CDATA[<h1 id="powershell-如何显示隐藏文件">PowerShell 如何显示隐藏文件</h1><p>方法：在相应的命令后面加上 <code>-Force</code> 选项。</p><p>如：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> <span class="hljs-literal">-Force</span><br></code></pre></div></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">ls</span> <span class="hljs-literal">-Force</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PowerShell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>PowerShell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django 学习笔记</title>
    <link href="/2022/02/14/Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/02/14/Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="bugs-解决记录">Bugs 解决记录</h1><h2id="django.template.exceptions.templatedoesnotexist">django.template.exceptions.TemplateDoesNotExist</h2><p><ahref="https://stackoverflow.com/questions/65425433/django-template-exceptions-templatedoesnotexist-hello">StackOverflow</a></p><h2 id="dash-符号命令问题">dash 符号命令问题</h2><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search-area&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;search_input&#125;&#125;&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>后端：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">context[<span class="hljs-string">&#x27;search_input&#x27;</span>] = search_input<br></code></pre></div></td></tr></table></figure><p>上面这样是对的，但是如果把下划线 <code>_</code> 换成 <code>-</code>就会出错。这个应该是命名规范的问题。</p><h2 id="django-重命名项目名根目录">Django 重命名项目名(根目录)</h2><p>这里使用的开发工具是 VSCode。</p><p>我们在修改根目录名称和根目录下的同名文件夹之后，我们可以利用 VSCode的全局替换把所有的旧文件名给新文件名即可。</p><h2 id="django-查询子类问题">Django 查询子类问题</h2><p><code>models</code> 中的代码如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Project</span>(models.Model):<br>    <span class="hljs-comment"># owner = models.ForeignKey(&#x27;auth.User&#x27;, related_name=&#x27;projects&#x27;, on_delete=models.CASCADE)</span><br>    title = models.CharField(max_length=<span class="hljs-number">200</span>)<br>    description = models.TextField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># featured_image =</span><br>    demo_link = models.CharField(max_length=<span class="hljs-number">1000</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)<br>    source_link = models.CharField(max_length=<span class="hljs-number">1000</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)<br>    vote_totle = models.IntegerField(default=<span class="hljs-number">0</span>)<br>    vote_ratio = models.IntegerField(default=<span class="hljs-number">0</span>)<br>    tags = models.ManyToManyField(<span class="hljs-string">&#x27;Tag&#x27;</span>, blank=<span class="hljs-literal">True</span>)<br>    created = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">id</span> = models.UUIDField(default=uuid.uuid4, unique=<span class="hljs-literal">True</span>,<br>                          primary_key=<span class="hljs-literal">True</span>, editable=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> self.title<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Review</span>(models.Model):<br><br>    VOTE_TYPE = (<br>        (<span class="hljs-string">&#x27;up&#x27;</span>, <span class="hljs-string">&#x27;up&#x27;</span>),<br>        (<span class="hljs-string">&#x27;down&#x27;</span>, <span class="hljs-string">&#x27;down&#x27;</span>),<br>    )<br><br>    <span class="hljs-comment"># owner</span><br>    project = models.ForeignKey(<br>        Project, on_delete=models.CASCADE, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)<br>    body = models.TextField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)<br>    value = models.CharField(max_length=<span class="hljs-number">50</span>, choices=VOTE_TYPE)<br>    updated = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>)<br>    created = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">id</span> = models.UUIDField(default=uuid.uuid4, unique=<span class="hljs-literal">True</span>,<br>                          primary_key=<span class="hljs-literal">True</span>, editable=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> self.value<br></code></pre></div></td></tr></table></figure><p>这里是想要以 <code>Project</code> 来查询 <code>reveiw</code>，其实<code>Project</code> 是 <code>Review</code>的外键，这里查询的语法比较特殊，和 <code>tags</code>这种多对多的查询是不一样的，正确的语句如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">project</span>(<span class="hljs-params">request, pk</span>):<br>    projectObj = Project.objects.get(<span class="hljs-built_in">id</span>=pk)<br>    tags = projectObj.tags.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 查询 tags</span><br>    reviews = projectObj.review_set.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 查询 reviews</span><br>    context = &#123;<span class="hljs-string">&#x27;project&#x27;</span>: projectObj, <span class="hljs-string">&#x27;tags&#x27;</span>: tags, <span class="hljs-string">&#x27;reviews&#x27;</span>: reviews&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;projects/single-project.html&#x27;</span>, context)<br></code></pre></div></td></tr></table></figure><p>其实，我们可以设置一下外键的 <code>related_name</code>，就可以像查询<code>tags</code> 一样查询 <code>reviews</code> 了：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">project = models.ForeignKey(<br>        Project, on_delete=models.CASCADE, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, related_name=<span class="hljs-string">&#x27;reviews&#x27;</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">reviews = projectObj.reviews.<span class="hljs-built_in">all</span>()<br></code></pre></div></td></tr></table></figure><h1 id="some-知识点">Some 知识点</h1><p>关于 <code>form</code> 表单，如果 <code>action</code>的值为空的话，那么 <code>POST</code> 提交的东西会被提交到当前的<code>URL</code>，即会被送到当前的 <code>URL</code> 对应的<code>views</code> 中的方法进行处理。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jetpack Compose 入门</title>
    <link href="/2021/12/30/Jetpack-Compose-%E5%85%A5%E9%97%A8/"/>
    <url>/2021/12/30/Jetpack-Compose-%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>跟着<ahref="https://developer.android.com/codelabs/jetpack-compose-basics#0">官方教程</a>在做，最后的效果就是这个样子的：</p><p><img src="https://i.imgur.com/0UlBzWs.gif" /></p><p>这个效果图是从安卓官网上搬过来的，实际上跟着这个 codelab在学习就是相当于做一次实验了。最后做出来的效果和教程中的是吻合的。</p><p>我终于体验到了声明式 UI 的魅力。制作 UI 很方便，做出来的 UI也好看。尤其是渲染列表的时候，本来是要用那个XML，又要用适配器之类的，那样做是很繁琐的。现在只需要写一个遍历语句即可。</p><p>说明，这个所有的代码基本上都是在 <code>MainActivity.kt</code>文件里面。</p><p>其实，要我写究竟学到了什么，我想，最多学到的是<code>by remember</code> 这个语法的用法？</p><p>然后就是对这个动画效果有了一点认识。</p><p>代码是完全照着教程来写的，这里将其上传到 GitHub 上留作纪念。</p><p>现阶段还是有点迷茫，一个小小的想法是，先尽量地多写代码，能总结的，就先总结着，总之不断往前走就是。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Jetpack Compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jetpack Compose State</title>
    <link href="/2021/12/29/Jetpack-Compose-State/"/>
    <url>/2021/12/29/Jetpack-Compose-State/</url>
    
    <content type="html"><![CDATA[<p>事情的发端是关于 <code>by remember</code> 的使用。然后找到 <ahref="https://developer.android.com/jetpack/compose/state">文档</a>。</p><p>目前只能够粗浅理解。</p><figure class="highlight kt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kt"><span class="hljs-keyword">package</span> com.fan.statelearning<br><br><span class="hljs-keyword">import</span> android.os.Bundle<br><span class="hljs-keyword">import</span> androidx.activity.ComponentActivity<br><span class="hljs-keyword">import</span> androidx.activity.compose.setContent<br><span class="hljs-keyword">import</span> androidx.compose.foundation.layout.Column<br><span class="hljs-keyword">import</span> androidx.compose.foundation.layout.padding<br><span class="hljs-keyword">import</span> androidx.compose.material.MaterialTheme<br><span class="hljs-keyword">import</span> androidx.compose.material.OutlinedTextField<br><span class="hljs-keyword">import</span> androidx.compose.material.Text<br><span class="hljs-keyword">import</span> androidx.compose.runtime.*<br><span class="hljs-keyword">import</span> androidx.compose.ui.Modifier<br><span class="hljs-keyword">import</span> androidx.compose.ui.unit.dp<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">ComponentActivity</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContent &#123;<br>            HelloContent()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Composable</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">HelloContent</span><span class="hljs-params">()</span></span> &#123;<br>        Column(modifier = Modifier.padding(<span class="hljs-number">16.</span>dp)) &#123;<br>            <span class="hljs-keyword">var</span> name <span class="hljs-keyword">by</span> remember &#123; mutableStateOf(<span class="hljs-string">&quot;&quot;</span>) &#125;<br>            <span class="hljs-keyword">if</span> (name.isNotEmpty()) &#123;<br>                Text(<br>                    text = <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$name</span>!&quot;</span>,<br>                    modifier = Modifier.padding(bottom = <span class="hljs-number">8.</span>dp),<br>                    style = MaterialTheme.typography.h5<br>                )<br>            &#125;<br>            OutlinedTextField(<br>                value = name,<br>                onValueChange = &#123; name = it &#125;,<br>                label = &#123; Text(<span class="hljs-string">&quot;Name&quot;</span>) &#125;<br>            )<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/r5zxuL5.png" /></p><p>简而言之，这个 <code>by remember</code>是为了让数据可以动态变化的。这是一个语法糖。在上面的例子中，<code>name</code>所绑定的数据一旦发生了变化，那么，使用了 <code>name</code> 属性的的<code>Text</code> 组件就会 recompose。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Little Tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Jetpack Compose Study</title>
    <link href="/2021/12/26/Android-Jetpack-Compose-Study/"/>
    <url>/2021/12/26/Android-Jetpack-Compose-Study/</url>
    
    <content type="html"><![CDATA[<p>关于这个 Android Jetpack Compose的学习，我觉得看视频学习比看书学习要更加高效。因此，我决定跟着 YT上面的一个视频系列把这个基础先过一遍，并且在这里记录以下学习笔记。</p><p>教程先看一遍，然后也结合着官方的文档教程来进行笔记的整理。</p><p>以问题的方式来记录学习过程似乎也还行。</p><h1 id="create-first-jetpack-compose-app">Create First Jetpack ComposeApp</h1><p>中规中矩，创建一个新的 Empty Compose 项目即可。</p><p><img src="https://i.imgur.com/fn0uaRB.png" /></p><p><img src="https://i.imgur.com/p2EYmN4.png" /></p><h1 id="rows-columns-and-basic-sizing">Rows, Columns and BasicSizing</h1><p>如果直接铺陈组件，那么组件之间会重叠，</p><figure class="highlight kt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kt"><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ArtistCard</span><span class="hljs-params">()</span></span> &#123;<br>    Column &#123;<br>        Text(<span class="hljs-string">&quot;Alfred Sisley&quot;</span>)<br>        Text(<span class="hljs-string">&quot;3 minutes ago&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/RyNOlNm.png" /></p><p>使用 <code>Row</code> 和 <code>Column</code> 可以来调整布局，</p><figure class="highlight kt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kt"><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ArtistCard</span><span class="hljs-params">(artist: <span class="hljs-type">Artist</span>)</span></span> &#123;<br>    Row(verticalAlignment = Alignment.CenterVertically) &#123;<br>        Image(<span class="hljs-comment">/*...*/</span>)<br>        Column &#123;<br>            Text(artist.name)<br>            Text(artist.lastSeenOnline)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>备份：</p><figure class="highlight kt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kt"><span class="hljs-keyword">package</span> com.fan.basicscodelab<br><br><span class="hljs-keyword">import</span> android.os.Bundle<br><span class="hljs-keyword">import</span> androidx.activity.ComponentActivity<br><span class="hljs-keyword">import</span> androidx.activity.compose.setContent<br><span class="hljs-keyword">import</span> androidx.compose.animation.core.Spring<br><span class="hljs-keyword">import</span> androidx.compose.animation.core.animateDpAsState<br><span class="hljs-keyword">import</span> androidx.compose.animation.core.spring<br><span class="hljs-keyword">import</span> androidx.compose.foundation.layout.*<br><span class="hljs-keyword">import</span> androidx.compose.foundation.lazy.LazyColumn<br><span class="hljs-keyword">import</span> androidx.compose.foundation.lazy.items<br><span class="hljs-keyword">import</span> androidx.compose.material.*<br><span class="hljs-keyword">import</span> androidx.compose.runtime.*<br><span class="hljs-keyword">import</span> androidx.compose.runtime.saveable.rememberSaveable<br><span class="hljs-keyword">import</span> androidx.compose.ui.Alignment<br><span class="hljs-keyword">import</span> androidx.compose.ui.Modifier<br><span class="hljs-keyword">import</span> androidx.compose.ui.res.stringResource<br><span class="hljs-keyword">import</span> androidx.compose.ui.text.font.FontWeight<br><span class="hljs-keyword">import</span> androidx.compose.ui.tooling.preview.Preview<br><span class="hljs-keyword">import</span> androidx.compose.ui.unit.dp<br><span class="hljs-keyword">import</span> com.fan.basicscodelab.ui.theme.BasicsCodelabTheme<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">ComponentActivity</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContent &#123;<br>            BasicsCodelabTheme &#123;<br>                MyApp()<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(name: <span class="hljs-type">String</span>)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> expanded <span class="hljs-keyword">by</span> remember &#123; mutableStateOf(<span class="hljs-literal">false</span>) &#125;<br><br>    <span class="hljs-keyword">val</span> extraPadding <span class="hljs-keyword">by</span> animateDpAsState(<br>        <span class="hljs-keyword">if</span> (expanded) <span class="hljs-number">48.</span>dp <span class="hljs-keyword">else</span> <span class="hljs-number">0.</span>dp,<br>        animationSpec = spring(<br>            dampingRatio = Spring.DampingRatioMediumBouncy,<br>            stiffness = Spring.StiffnessLow<br>        )<br>    )<br><br>    Surface(<br>        color = MaterialTheme.colors.primary,<br>        modifier = Modifier.padding(vertical = <span class="hljs-number">4.</span>dp, horizontal = <span class="hljs-number">8.</span>dp)<br>    ) &#123;<br>        Row(modifier = Modifier.padding(<span class="hljs-number">24.</span>dp)) &#123;<br>            Column(modifier = Modifier<br>                .weight(<span class="hljs-number">1f</span>)<br>                .padding(bottom = extraPadding.coerceAtLeast(<span class="hljs-number">0.</span>dp))<br>            ) &#123;<br>                Text(text = <span class="hljs-string">&quot;Hello, &quot;</span>)<br>                Text(text = name, style = MaterialTheme.typography.h4.copy(<br>                    fontWeight = FontWeight.ExtraBold<br>                ))<br>            &#125;<br>            OutlinedButton(<br>                onClick = &#123; expanded = !expanded &#125;,<br>            ) &#123;<br>                Text(<span class="hljs-keyword">if</span> (expanded)&#123;<br>                    stringResource(R.string.show_less)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    stringResource(R.string.show_more)<br>                &#125;)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">MyApp</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> shouldShowOnboarding <span class="hljs-keyword">by</span> rememberSaveable &#123; mutableStateOf(<span class="hljs-literal">true</span>) &#125;<br><br>    <span class="hljs-keyword">if</span> (shouldShowOnboarding) &#123;<br>        OnboardingScreen(onContinueClicked = &#123; shouldShowOnboarding = <span class="hljs-literal">false</span> &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Greetings()<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Composable</span><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greetings</span><span class="hljs-params">(names: <span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt; = List(<span class="hljs-number">1000</span>)</span></span> &#123; <span class="hljs-string">&quot;<span class="hljs-variable">$it</span>&quot;</span> &#125;) &#123;<br>    LazyColumn(modifier = Modifier.padding(vertical = <span class="hljs-number">4.</span>dp)) &#123;<br>        items(items = names) &#123; name -&gt; Greeting(name = name)&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">OnboardingScreen</span><span class="hljs-params">(onContinueClicked: () -&gt; <span class="hljs-type">Unit</span>)</span></span> &#123;<br><br>    Surface &#123;<br>        Column(<br>            modifier = Modifier.fillMaxSize(),<br>            verticalArrangement = Arrangement.Center,<br>            horizontalAlignment = Alignment.CenterHorizontally<br>        ) &#123;<br>            Text(text = <span class="hljs-string">&quot;Welcome to the Basics Codelab!&quot;</span>)<br>            Button(<br>                modifier = Modifier.padding(vertical = <span class="hljs-number">24.</span>dp),<br>                onClick = onContinueClicked<br>            ) &#123;<br>                Text(text = <span class="hljs-string">&quot;Continue&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理课程设计报告</title>
    <link href="/2021/12/24/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/12/24/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="数字图像处理课程设计报告">数字图像处理课程设计报告</h1><h2 id="题目要求">题目要求</h2><p>人员结构化信息处理。能对视频的人员进行行走方向、上衣颜色、下衣颜色、是否携带行李，（还可以考虑性别？发型？眼镜？衣服款式？）等进行结构化信息提取，并建立检索系统。</p><h2 id="项目简介">项目简介</h2><p>当下，covid-19 肆虐全球，在这样的背景下，我们可以利用 Python进行一些简单的人物检测，比如，在地铁出入口这样的场景中，我们可以识别出来往的人群，他们的外貌特征，是否佩戴口罩等等。本项目主要利用opencv-python库，对视频中的人物进行检测，并对每一帧进行信息提取，然后保存其结构化数据，以供检索。</p><h2 id="安装与使用说明">安装与使用说明</h2><p>开发环境说明：</p><ul><li>操作系统：Windows 11 专业版</li><li>IDE：VSCode，版本：1.63.2</li><li>VSCode Plugin: Microsoft Python Plugin</li><li>Python：3.9.9，本 Python 环境为 Windows 下的 Scoop包管理工具安装版本</li></ul><p>然后是涉及到的 Python 库：</p><p>实验所需要的所有 Python 库。如下。</p><ol type="1"><li>opencv-python</li><li>numpy</li><li>imutils</li></ol><p>Imutils are a series of convenience functions to make basic imageprocessing functions such as translation, rotation, resizing,skeletonization, and displaying Matplotlib images easier with OpenCV andboth Python 2.7 and Python 3.</p><ol start="4" type="1"><li>dlib</li></ol><p>这是一个包含机器学习算法和工具的库。安装这个需要 PC 上有 VisualStudio for C++.</p><p>当然，如果提示没有 cmake 的话，还需要安装 cmake，使用<code>pip install cmake</code> 即可。</p><ol start="5" type="1"><li><p>scipy</p></li><li><p>webcolors</p></li></ol><p>然后，运行目录下的 <code>person_detection.py</code> 文件：</p><p><img src="https://i.imgur.com/HHmuW9E.png" /></p><p>可以通过命令行执行，也可以通过 VSCode 来执行。注意，如果是在 VSCode中执行，还需要配置 Python 的工作目录，即，在 <code>settings.json</code>中添加以下配置：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;python.terminal.executeInFileDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br></code></pre></div></td></tr></table></figure><p>即，将 Python的工作目录设置成当前的目录，这样就可以识别相对路径。</p><p>运行结果如下：</p><p><img src="https://i.imgur.com/Xl5spbW.png" /></p><p>对于方向的说明：这里呈现的方向是采用向量的形式，即，根据 opencv本身固有的坐标系，然后使用向量的坐标形式来展示人物行走的方向。</p><p>退出程序说明：按 <code>q</code> 退出程序。</p><h2 id="设计文档">设计文档</h2><p>项目的主要任务是对人物的识别，这其实是属于 Object Detection的范畴。关于 ObjectDetection，这其实是一个流行很久的领域，它是与计算机视觉(ComputerVison)和图像处理(ImageProcessing)相关的一个分支，常用的方法有如下两个分支：</p><ul><li>Non-neural approaches:<ul><li>Viola–Jones object detection framework based on Haar features</li><li>Scale-invariant feature transform (SIFT)</li><li>Histogram of oriented gradients (HOG) features</li></ul></li><li>Neural network approaches:<ul><li>Region Proposals (R-CNN, Fast R-CNN, Faster R-CNN, cascadeR-CNN.)</li><li>Single Shot MultiBox Detector (SSD)</li><li>You Only Look Once (YOLO)</li><li>Single-Shot Refinement Neural Network for Object Detection(RefineDet)</li><li>Retina-Net</li><li>Deformable convolutional networks</li></ul></li></ul><p>本次实验，主要采用 SSD 方法来进行识别，即 Single Shot MultiBoxDetector。因为考虑到手上计算机的性能问题，故没有使用另外一个非常流行的技术，即YOLO。而且，本次实验由于要识别的对象比较简单，所以就直接采用了 GitHub上已有的模型文件来进行处理，这样可以有效降低对于计算机性能的要求，从而可以使注意力集中到实验本身。</p><p>项目的整体思路是先检测出人物，然后给每一个检测出来的人物打上标签，之后对检测出来的人物进行遍历，然后识别其行走方向，然后再识别其上衣和下衣的颜色。最后将这些信息进行结构化处理，并保存到txt 文件中，以供检索。</p><h2 id="人物识别">人物识别</h2><p>首先，加载模型文件</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 训练好的模型文件</span><br>protopath = <span class="hljs-string">&quot;MobileNetSSD_deploy.prototxt&quot;</span><br>modelpath = <span class="hljs-string">&quot;MobileNetSSD_deploy.caffemodel&quot;</span><br>detector = cv2.dnn.readNetFromCaffe(prototxt=protopath, caffeModel=modelpath)<br></code></pre></div></td></tr></table></figure><p>然后，对每一帧进行处理</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">blob = cv2.dnn.blobFromImage(frame, <span class="hljs-number">0.007843</span>, (W, H), <span class="hljs-number">127.5</span>)<br><br>detector.setInput(blob)<br>person_detections = detector.forward()<br>rects = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(<span class="hljs-number">0</span>, person_detections.shape[<span class="hljs-number">2</span>]):<br>    confidence = person_detections[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, i, <span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> confidence &gt; <span class="hljs-number">0.5</span>:<br>        idx = <span class="hljs-built_in">int</span>(person_detections[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>])<br><br>        <span class="hljs-keyword">if</span> CLASSES[idx] != <span class="hljs-string">&quot;person&quot;</span>:<br>            <span class="hljs-keyword">continue</span><br><br>        person_box = person_detections[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, i, <span class="hljs-number">3</span>:<span class="hljs-number">7</span>] * np.array([W, H, W, H])<br>        (startX, startY, endX, endY) = person_box.astype(<span class="hljs-string">&quot;int&quot;</span>)<br>        rects.append(person_box)<br><br>        <span class="hljs-comment"># cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 0, 255), 2)</span><br><br>boundingboxes = np.array(rects)<br>boundingboxes = boundingboxes.astype(<span class="hljs-built_in">int</span>)<br>rects = non_max_suppression_fast(boundingboxes, <span class="hljs-number">0.3</span>)<br><br>objects = tracker.update(rects)<br><br><span class="hljs-keyword">for</span> index, (objectId, bbox) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(objects.items()):<br>    x1, y1, x2, y2 = bbox<br>    <span class="hljs-keyword">if</span> frame_count == <span class="hljs-number">9</span> <span class="hljs-keyword">and</span> x1 != pre_coord_lists[index][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> y1 != pre_coord_lists[index][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>        pre_coord_lists[index][<span class="hljs-number">0</span>] = pre_coord_lists[index][<span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># print(pre_coord_lists[index][1])</span><br>        <span class="hljs-comment"># print(&#x27;runtest&#x27;)</span><br>        pre_coord_lists[index][<span class="hljs-number">1</span>] = (x1, y1)<br>    <span class="hljs-comment"># print(&#x27;coordinate:&#x27;, bbox)</span><br>    <span class="hljs-comment"># print(pre_coord_lists[index])</span><br>    x1 = <span class="hljs-built_in">int</span>(x1)<br>    y1 = <span class="hljs-built_in">int</span>(y1)<br>    x2 = <span class="hljs-built_in">int</span>(x2)<br>    y2 = <span class="hljs-built_in">int</span>(y2)<br><br>    cv2.rectangle(frame, (x1, y1), (x2, y2), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># tag a person with a unique ID</span><br>    text = <span class="hljs-string">&quot;ID: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(objectId)<br>    cv2.putText(frame, text, (x1, y1 - <span class="hljs-number">22</span>), cv2.FONT_HERSHEY_COMPLEX_SMALL, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>对于检测出来的人物，我们用长方形将其裁剪出来。</p><h2 id="检测人物行走方向">检测人物行走方向</h2><p>这里主要利用了一个二维list，列表的第一项存放的上一个时刻的人物的坐标，第二项存放的是当前时刻的人物的坐标，然后把两个坐标相减，就得到了方向向量，这个方向向量就是人物的行走方向。</p><p>关键代码如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">pre_coord_lists = [[(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)] <span class="hljs-comment"># hard codes, need to be refactored later</span><br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">for</span> index, (objectId, bbox) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(objects.items()):<br>    x1, y1, x2, y2 = bbox<br>    <span class="hljs-keyword">if</span> frame_count == <span class="hljs-number">9</span> <span class="hljs-keyword">and</span> x1 != pre_coord_lists[index][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> y1 != pre_coord_lists[index][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>        pre_coord_lists[index][<span class="hljs-number">0</span>] = pre_coord_lists[index][<span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># print(pre_coord_lists[index][1])</span><br>        <span class="hljs-comment"># print(&#x27;runtest&#x27;)</span><br>        pre_coord_lists[index][<span class="hljs-number">1</span>] = (x1, y1)<br>    <span class="hljs-comment"># print(&#x27;coordinate:&#x27;, bbox)</span><br>    <span class="hljs-comment"># print(pre_coord_lists[index])</span><br>    x1 = <span class="hljs-built_in">int</span>(x1)<br>    y1 = <span class="hljs-built_in">int</span>(y1)<br>    x2 = <span class="hljs-built_in">int</span>(x2)<br>    y2 = <span class="hljs-built_in">int</span>(y2)<br><br>    cv2.rectangle(frame, (x1, y1), (x2, y2), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># tag a person with a unique ID</span><br>    text = <span class="hljs-string">&quot;ID: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(objectId)<br>    cv2.putText(frame, text, (x1, y1 - <span class="hljs-number">22</span>), cv2.FONT_HERSHEY_COMPLEX_SMALL, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># detect and show the moving direction of a detected person</span><br>    direct_vector = (pre_coord_lists[index][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - pre_coord_lists[index][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], pre_coord_lists[index][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - pre_coord_lists[index][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br>    direction_text = <span class="hljs-string">&quot;direction: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(direct_vector)<br>    cv2.putText(frame, direction_text, (x1, y1 - <span class="hljs-number">5</span>), cv2.FONT_HERSHEY_COMPLEX_SMALL, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><h2 id="检测衣服的颜色">检测衣服的颜色</h2><p>首先，对于每一个识别出来的人物，我们使用 opencv将其裁剪出来，然后对于人物进行切割，分别对上身和下身进行处理，然后，这里使用的检测方法比较，即分别计算出人物上半身和下半身的中心坐标，然后将中心点的像素取出来，并将其转换成相应的颜色。</p><p>关键代码：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># crop a person from a frame</span><br>crop_img = frame[y1:y2, x1:x2]<br><span class="hljs-comment"># cv2.imwrite(&#x27;draft.jpg&#x27;, crop_img)</span><br><span class="hljs-comment"># detect color of a person&#x27;s body</span><br>center_coordX = (<span class="hljs-built_in">int</span>)((x1 + x2) / <span class="hljs-number">2</span>)<br>center_coordY = (<span class="hljs-built_in">int</span>)((y1 + y2) / <span class="hljs-number">2</span>)<br>top_half_coordY = (<span class="hljs-built_in">int</span>)((y1 + center_coordY) / <span class="hljs-number">2</span>)<br>bottom_half_coordY = (<span class="hljs-built_in">int</span>)((center_coordY + y2) / <span class="hljs-number">2</span>)<br>top_half_color = frame[top_half_coordY, center_coordX]<br>bottom_half_color = frame[bottom_half_coordY, center_coordX]<br><span class="hljs-comment"># convert BGR to RGB first</span><br>top_half_color = (top_half_color[<span class="hljs-number">2</span>], top_half_color[<span class="hljs-number">1</span>], top_half_color[<span class="hljs-number">0</span>])<br>bottom_half_color = (bottom_half_color[<span class="hljs-number">2</span>], bottom_half_color[<span class="hljs-number">1</span>], bottom_half_color[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># print(&#x27;top_half_color_BGR:&#x27;, top_half_color)</span><br><span class="hljs-comment"># print(&#x27;bottom_half_color_BGR:&#x27;, bottom_half_color)</span><br>top_half_named_color = convert_rgb_to_names(top_half_color)<br>bottom_half_named_color = convert_rgb_to_names(bottom_half_color)<br><span class="hljs-keyword">if</span> frame_count == <span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;top color:&#x27;</span>, top_half_named_color)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;bottom color:&#x27;</span>, bottom_half_named_color)<br></code></pre></div></td></tr></table></figure><p>注意这里的将 RGB 值转换成具体的颜色名称的函数，</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 将 RGB 值转换成最接近的颜色具体名称</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_rgb_to_names</span>(<span class="hljs-params">rgb_tuple</span>):<br>    <br>    <span class="hljs-comment"># a dictionary of all the hex and their respective names in css3</span><br>    css3_db = CSS3_HEX_TO_NAMES<br>    names = []<br>    rgb_values = []<br>    <span class="hljs-keyword">for</span> color_hex, color_name <span class="hljs-keyword">in</span> css3_db.items():<br>        names.append(color_name)<br>        rgb_values.append(hex_to_rgb(color_hex))<br>    <br>    kdt_db = KDTree(rgb_values)<br>    distance, index = kdt_db.query(rgb_tuple)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;closest match: <span class="hljs-subst">&#123;names[index]&#125;</span>&#x27;</span><br></code></pre></div></td></tr></table></figure><p>这里的颜色名称采用的是 css3 中的颜色表，由于有些 RGB 值在 css3中并没有直接对应的颜色名称，所以，对于这种情况，我们就利用该函数将其转换成接近的颜色名称。这里需要用到scipy 库中的 KDTree 数据结构。</p><h2 id="建立结构化检索">建立结构化检索</h2><p>这里主要是将每一帧处理好的数据保存到 txt 文件中，然后可以利用 Python的文件读写操作对文件进行处理和检索。</p><h2 id="特色与创新">特色与创新</h2><p>在人物检测方面，采用了当下比较流行的技术SSD，对于提高检测的准确性很有帮助。在识别和提取人物衣服颜色的处理过程中，使用了 KDTree 数据结构，使得对于颜色的转换更为准确和便捷。</p><h2 id="不足与展望">不足与展望</h2><p>本次实验的不足之处主要在于识别的准确性还有待提高。对于实验整体的功能性，也有很多的进步空间。比如对于人物口罩的识别，对于人物的行李的识别。</p><p>对于信息结构化检索，也可以利用 pymysql 操作 MySQL 数据库，将数据存到MySQL 中，这样，存取效率相比于 txt 文件，有很大的优势。</p>]]></content>
    
    
    <categories>
      
      <category>作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android RecyclerView</title>
    <link href="/2021/12/22/Android-RecyclerView/"/>
    <url>/2021/12/22/Android-RecyclerView/</url>
    
    <content type="html"><![CDATA[<p>首先，添加依赖，</p><p><img src="https://i.imgur.com/9uoMRK7.png" /></p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">implementation <span class="hljs-string">&quot;androidx.recyclerview:recyclerview:1.2.1&quot;</span><br></code></pre></div></td></tr></table></figure><p>另外，如果想要在 kotlin 文件中直接使用组件的 id来调用类，那么，还需要加上这一行</p><p><img src="https://i.imgur.com/wF5cKYc.png" /></p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">id <span class="hljs-string">&#x27;kotlin-android-extensions&#x27;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用快捷键</title>
    <link href="/2021/11/28/Linux-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/11/28/Linux-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="截图">截图</h1><ul><li><code>PrtSc</code>：全屏捕捉，截取的图片保存在 <code>Pictures</code>目录下。</li><li><code>Shift + PrtSc</code>：自由选定区域，截取的图片保存在<code>Pictures</code> 目录下。</li><li>Alt + PtrSc：截图当前窗口，截取的图片保存在 <code>Pictures</code>目录下。</li><li>Ctrl + PrtSc：全屏截图，保存到剪贴板中。</li><li>Ctrl + Shift + PrtSc：自由选定区域，截取的图片保存到剪贴板中。</li><li>Ctrl + Alt + PrtSc：截取当前窗口，截取的图片保存到剪贴板中。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 的复制粘贴</title>
    <link href="/2021/11/26/vim-%E7%9A%84%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4/"/>
    <url>/2021/11/26/vim-%E7%9A%84%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4/</url>
    
    <content type="html"><![CDATA[<p>本文内容转载自：<ahref="https://www.cnblogs.com/huahuayu/p/12235242.html"class="uri">https://www.cnblogs.com/huahuayu/p/12235242.html</a></p><h1 id="vim-内部复制粘贴剪切">vim 内部复制、粘贴、剪切</h1><h2 id="选择文本">选择文本</h2><ul><li>v + 光标移动（按字符选择）高亮所要的文本，然后进行各种操作比如，<ul><li>d 表示删除</li><li>c 表示更改选中的文字 按：按 c 之后会将选中的内容删除，然后模式转为INSERT 模式。</li></ul></li><li>V（按行选择）。 按：V 不太好用。</li></ul><h2 id="复制-yank">复制 y(ank)</h2><ul><li><code>y</code>：用 v 命令选中文本后，用 y 进行复制</li><li><code>yy</code>：复制当前行，然后用 p 进行粘贴</li><li><code>5yy</code>：复制从当前行开始的 5 行按：如果文本短的话，直接就可以使用这个命令来复制全部文本</li><li><code>y_</code>：等同于 yy</li><li><code>Y</code>：等同于 yy</li><li><code>yw</code>：复制当前单词</li><li><code>y$</code>：从当前位置复制到行尾</li><li><code>y0</code>：从当前行复制到行首</li><li><code>y^</code>：从当前位置向左复制到第一个非空白字符<br /><img src="https://i.imgur.com/Je6B8Jy.png" /><br />按：这里是从 21 行的 t 字符使用这个命令，然后复制的结果是 24行的内容。</li><li><code>yG</code>：从当前行复制到文件结束</li><li><code>y20G</code>：从当前行复制到第 20 行</li><li><code>y?bar</code>：复制至上一个出现 bar 的地方</li></ul><h2 id="粘贴-paste">粘贴 p(aste)</h2><ul><li><code>p</code>：小写，在光标位置之后粘贴，其实是粘贴在光标的下一行。</li><li><code>P</code>：大写，在光标位置之前粘贴，其实是粘贴在光标的上一行。</li></ul><h2 id="剪切">剪切</h2><ul><li><code>v</code> + 方向键(hjkl)选中内容 + <code>d</code> 剪切 +<code>p</code> 粘贴</li></ul><h1 id="剪贴板寄存器">剪贴板(寄存器)</h1><h2 id="默认剪贴板">默认剪贴板</h2><p>vim has 26 named registers "a/A" to "z/Z". Vim fills or updates thecontent of these registers only when we tell it to do so. That is tosay, we have 26 clipboards in Vim.</p><p>更多内容，参考 <a href="https://www.baeldung.com/linux/vim-registers"class="uri">https://www.baeldung.com/linux/vim-registers</a></p><h1 id="系统剪贴板">系统剪贴板</h1><p>vim 支持系统剪贴板，需要打开 clipboard功能。使用下面的命令，检查当前版本的 vim 是否支持 clipboard，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim --version | grep <span class="hljs-string">&quot;clipboard&quot;</span></span><br>+clipboard         +keymap            +printer           +vertsplit<br>+emacs_tags        +mouse_gpm         -sun_workshop      +xterm_clipboard<br></code></pre></div></td></tr></table></figure><p><code>+clipboard</code> 代表支持，<code>-clipboard</code>代表不支持。</p><p>如果不支持的话，需要重新安装别的版本的vim，这个在网上也有相关的教程，暂时不再赘述。</p><h2 id="vim-复制到系统剪贴板">vim 复制到系统剪贴板</h2><p>我们只需要设置 vim 默认使用系统剪贴板即可。在确定 vim 支持<code>+clipboard</code> 之后，如果想 <code>y/p</code>直接和系统剪贴板打通，可以在 <code>~/.vimrc</code> 中加上如下配置：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> clipboard^=unnamed,unnamedplus<br></code></pre></div></td></tr></table></figure><p>还有其他的方法，这里暂时不去研究。用到的时候再说。</p>]]></content>
    
    
    <categories>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BST 二叉搜索树</title>
    <link href="/2021/11/26/BST-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2021/11/26/BST-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>二叉搜索树的定义如下：</p><p>一个二叉搜索树是一棵二叉树，它可以为空。如果不为空，它将满足以下性质：</p><p>(1). 非空左子树的所有键值小于其根节点的键值； (2).非空右子树的所有键值大于其根节点的键值； (3).左、右子树都是二叉搜索树。</p><p>下面给出二叉搜索树的 C 语言实现。</p><p>文件结构如下：</p><div class="hljs code-wrapper"><pre><code class="hljs">.├── fatal.h├── main├── main.c├── tree.c└── tree.h0 directories, 5 files</code></pre></div><h4 id="tree.h">tree.h</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><br><span class="hljs-comment">/* START: fig4_16.txt */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Tree_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Tree_H</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span>;</span> <span class="hljs-comment">// 定义结构体节点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">Position</span>;</span> <span class="hljs-comment">// 指向节点的指针</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">SearchTree</span>;</span> <span class="hljs-comment">// 指针，表示搜索树，是搜索树的根节点</span><br><br>SearchTree <span class="hljs-title function_">MakeEmpty</span><span class="hljs-params">( SearchTree T )</span>;<br>Position <span class="hljs-title function_">Find</span><span class="hljs-params">( ElementType X, SearchTree T )</span>;<br>Position <span class="hljs-title function_">FindMin</span><span class="hljs-params">( SearchTree T )</span>;<br>Position <span class="hljs-title function_">FindMax</span><span class="hljs-params">( SearchTree T )</span>;<br>SearchTree <span class="hljs-title function_">Insert</span><span class="hljs-params">( ElementType X, SearchTree T )</span>;<br>SearchTree <span class="hljs-title function_">Delete</span><span class="hljs-params">( ElementType X, SearchTree T )</span>;<br>ElementType <span class="hljs-title function_">Retrieve</span><span class="hljs-params">( Position P )</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">/* _Tree_H */</span></span><br><br><span class="hljs-comment">/* END */</span><br></code></pre></div></td></tr></table></figure><h4 id="tree.c">tree.c</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tree.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fatal.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span></span><br><span class="hljs-class">&#123;</span><br>    ElementType Element; <span class="hljs-comment">// 树节点存储的元素</span><br>    SearchTree Left; <span class="hljs-comment">// 左子树</span><br>    SearchTree Right; <span class="hljs-comment">// 右子树</span><br>&#125;;<br><br><span class="hljs-comment">/* START: fig4_17.txt */</span><br><span class="hljs-comment">// 建立一棵空树</span><br>SearchTree<br><span class="hljs-title function_">MakeEmpty</span><span class="hljs-params">(SearchTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        MakeEmpty(T-&gt;Left); <span class="hljs-comment">// 递归删除左子树</span><br>        MakeEmpty(T-&gt;Right); <span class="hljs-comment">// 递归删除右子树</span><br>        <span class="hljs-built_in">free</span>(T); <span class="hljs-comment">// 释放该节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">/* END */</span><br><br><span class="hljs-comment">/* START: fig4_18.txt */</span><br><span class="hljs-comment">// 二叉搜索树的查找操作</span><br>Position<br><span class="hljs-title function_">Find</span><span class="hljs-params">(ElementType X, SearchTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (X &lt; T-&gt;Element) <span class="hljs-comment">// 如果待查找元素比根节点小，那么递归查找左子树</span><br>        <span class="hljs-keyword">return</span> Find(X, T-&gt;Left);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (X &gt; T-&gt;Element) <span class="hljs-comment">// 如果待查找元素比根节点大，那么递归查找右子树</span><br>        <span class="hljs-keyword">return</span> Find(X, T-&gt;Right);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-comment">/* END */</span><br><br><span class="hljs-comment">/* START: fig4_19.txt */</span><br><span class="hljs-comment">// 查找最小元素，即找出最左边的叶子节点</span><br>Position<br><span class="hljs-title function_">FindMin</span><span class="hljs-params">(SearchTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T-&gt;Left == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> T;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> FindMin(T-&gt;Left);<br>&#125;<br><span class="hljs-comment">/* END */</span><br><br><span class="hljs-comment">/* START: fig4_20.txt */</span><br><span class="hljs-comment">// 查找最大值</span><br>Position<br><span class="hljs-title function_">FindMax</span><span class="hljs-params">(SearchTree T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">while</span> (T-&gt;Right != <span class="hljs-literal">NULL</span>)<br>            T = T-&gt;Right;<br><br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-comment">/* END */</span><br><br><span class="hljs-comment">/* START: fig4_22.txt */</span><br><span class="hljs-comment">// 插入操作</span><br>SearchTree<br><span class="hljs-title function_">Insert</span><span class="hljs-params">(ElementType X, SearchTree T)</span><br>&#123;<br><span class="hljs-comment">/* 1*/</span>      <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>            &#123;<br>        <span class="hljs-comment">/* Create and return a one-node tree 创建并返回一个单节点树 */</span><br><span class="hljs-comment">/* 2*/</span>          T = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br><span class="hljs-comment">/* 3*/</span>          <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br><span class="hljs-comment">/* 4*/</span>              FatalError(<span class="hljs-string">&quot;Out of space!!!&quot;</span>); <span class="hljs-comment">// 空间用尽的情况</span><br>                <span class="hljs-keyword">else</span><br>                &#123;<br><span class="hljs-comment">/* 5*/</span>              T-&gt;Element = X; <span class="hljs-comment">// 赋值</span><br><span class="hljs-comment">/* 6*/</span>              T-&gt;Left = T-&gt;Right = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 左右子树置空</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span><br><span class="hljs-comment">/* 7*/</span>      <span class="hljs-keyword">if</span> (X &lt; T-&gt;Element)<br><span class="hljs-comment">/* 8*/</span>          T-&gt;Left = Insert(X, T-&gt;Left); <span class="hljs-comment">// 递归寻找合适的插入位置</span><br>            <span class="hljs-keyword">else</span><br><span class="hljs-comment">/* 9*/</span>      <span class="hljs-keyword">if</span> (X &gt; T-&gt;Element)<br><span class="hljs-comment">/*10*/</span>          T-&gt;Right = Insert(X, T-&gt;Right);<br>            <span class="hljs-comment">/* Else X is in the tree already; we&#x27;ll do nothing */</span><br><br><span class="hljs-comment">/*11*/</span>      <span class="hljs-keyword">return</span> T;  <span class="hljs-comment">/* Do not forget this line!! */</span><br>&#125;<br><span class="hljs-comment">/* END */</span><br><br><span class="hljs-comment">/* START: fig4_25.txt */</span><br><span class="hljs-comment">// 删除操作</span><br>SearchTree<br><span class="hljs-title function_">Delete</span><span class="hljs-params">(ElementType X, SearchTree T)</span><br>&#123;<br>    Position TmpCell;<br><br>    <span class="hljs-comment">// 寻找节点</span><br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>        Error(<span class="hljs-string">&quot;Element not found&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (X &lt; T-&gt;Element)  <span class="hljs-comment">/* Go left */</span><br>        T-&gt;Left = Delete(X, T-&gt;Left);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (X &gt; T-&gt;Element)  <span class="hljs-comment">/* Go right */</span><br>        T-&gt;Right = Delete(X, T-&gt;Right);<br>    <span class="hljs-keyword">else</span>  <span class="hljs-comment">/* Found element to be deleted 找到了该删除的节点 */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (T-&gt;Left &amp;&amp; T-&gt;Right)  <span class="hljs-comment">/* Two children 有两个孩子 */</span><br>        &#123;<br>            <span class="hljs-comment">/* Replace with smallest in right subtree 用右子树中最小的节点进行替换 */</span><br>            TmpCell = FindMin(T-&gt;Right); <span class="hljs-comment">// 找出右子树中最小的节点</span><br>            T-&gt;Element = TmpCell-&gt;Element; <span class="hljs-comment">// 替换</span><br>            T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right); <span class="hljs-comment">// 删除刚刚的那个在右子树中最小的节点</span><br>        &#125; <span class="hljs-keyword">else</span>  <span class="hljs-comment">/* One or zero children 有 1 个或者 0 个孩子 */</span><br>        &#123;<br>            TmpCell = T;<br>            <span class="hljs-keyword">if</span> (T-&gt;Left == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">/* Also handles 0 children */</span><br>                T = T-&gt;Right; <span class="hljs-comment">// 如果左子树为空，那么将 T 更新为右子树，下同</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T-&gt;Right == <span class="hljs-literal">NULL</span>)<br>                T = T-&gt;Left;<br>            <span class="hljs-built_in">free</span>(TmpCell); <span class="hljs-comment">// 释放原来的 T 节点</span><br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-comment">/* END */</span><br><br><span class="hljs-comment">// 取出 Position P 中的元素</span><br>ElementType<br><span class="hljs-title function_">Retrieve</span><span class="hljs-params">(Position P)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> P-&gt;Element;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="main.ctesttree.c测试函数">main.c(testtree.c，测试函数)</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tree.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">( )</span><br>&#123;<br>    SearchTree T;<br>    Position P;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><br>    T = MakeEmpty( <span class="hljs-literal">NULL</span> ); <span class="hljs-comment">// 创建一棵空树</span><br>    <span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++, j = ( j + <span class="hljs-number">7</span> ) % <span class="hljs-number">50</span> ) <span class="hljs-comment">// 将 50 个数插入树中</span><br>        T = Insert( j, T );<br>    <span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++ )<br>        <span class="hljs-keyword">if</span>( ( P = Find( i, T ) ) == <span class="hljs-literal">NULL</span> || Retrieve( P ) != i ) <span class="hljs-comment">// 测试查找函数</span><br>            <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Error at %d\n&quot;</span>, i );<br><br>    <span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i += <span class="hljs-number">2</span> )<br>        T = Delete( i, T ); <span class="hljs-comment">// 以 1 为步长，作删除操作</span><br><br>    <span class="hljs-comment">// 测试删除操作是否成功</span><br>    <span class="hljs-keyword">for</span>( i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">50</span>; i += <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">if</span>( ( P = Find( i, T ) ) == <span class="hljs-literal">NULL</span> || Retrieve( P ) != i )<br>            <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Error at %d\n&quot;</span>, i );<br>    <span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i += <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">if</span>( ( P = Find( i, T ) ) != <span class="hljs-literal">NULL</span> )<br>            <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Error at %d\n&quot;</span>, i );<br><br>    <span class="hljs-comment">// 打印最大数和最小数</span><br>    <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Min is %d, Max is %d\n&quot;</span>, Retrieve( FindMin( T ) ),<br>            Retrieve( FindMax( T ) ) );<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试结果：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20201015170025.png"alt="20201015170025" /></p><h4 id="定义错误的头文件-fatal.h">定义错误的头文件 fatal.h</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Error(Str)        FatalError( Str )</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FatalError(Str)   fprintf( stderr, <span class="hljs-string">&quot;%s\n&quot;</span>, Str ), exit( 1 )</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注：关于删除的操作的图解，用来备忘</p></blockquote><p>删除具有 1 个儿子的节点 4 的前后情况：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20201015165134.png"alt="20201015165134" /></p><p>删除具有 2 个儿子的节点 2 的前后情况：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20201015165708.png"alt="20201015165708" /></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>陈越</tag>
      
      <tag>博客园让人失望</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的问题与 url 答案 list</title>
    <link href="/2021/11/06/%E6%88%91%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E-url-%E7%AD%94%E6%A1%88-list/"/>
    <url>/2021/11/06/%E6%88%91%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E-url-%E7%AD%94%E6%A1%88-list/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Ubuntu 21.10 如何隐藏桌面图标？</p></blockquote><p><ahref="https://askubuntu.com/questions/1335398/ubuntu-21-04-remove-trash-user-and-drive-icon-from-desktop"class="uri">https://askubuntu.com/questions/1335398/ubuntu-21-04-remove-trash-user-and-drive-icon-from-desktop</a></p>]]></content>
    
    
    <categories>
      
      <category>问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask Web 开发（第 2 版）阅读札记</title>
    <link href="/2021/11/05/Flask-Web-%E5%BC%80%E5%8F%91%EF%BC%88%E7%AC%AC-2-%E7%89%88%EF%BC%89%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/11/05/Flask-Web-%E5%BC%80%E5%8F%91%EF%BC%88%E7%AC%AC-2-%E7%89%88%EF%BC%89%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>本书实践环境为 Ubuntu20.04。</p><h1 id="第-1-章-安装">第 1 章 安装</h1><blockquote><p>Flask 的 3 个主要依赖？</p></blockquote><ul><li>路由、调试和 Web 服务器网关接口（WSGI，Web server gatewayinterface）子系统由 Werkzeug 提供；</li><li>模板系统由 Jinja2 提供；</li><li>命令行集成由 Click 提供。</li></ul><blockquote><p>Python 虚拟环境的好处？</p></blockquote><p>虚拟环境是 Python解释器的一个私有副本，在这个环境中你可以安装私有包，而且不会影响系统中安装的全局Python 解释器。</p><p>虚拟环境非常有用，可以避免你安装的 Python版本和包与系统预装的发生冲突。为每个项目单独创建虚拟环境，可以保证应用只能访问所在虚拟环境中的包，从而保持全局解释器的干净整洁，使其只作为创建更多虚拟环境的源。与直接使用系统全局的Python 解释器相比，使用虚拟环境还有个好处，那就是不需要管理员权限。</p><blockquote><p>如何使用 Ubuntu 系统预装的 Python3 来创建虚拟环境？</p></blockquote><p>需要先安装 <code>python3-venv</code> 包：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install python3-venv</span><br></code></pre></div></td></tr></table></figure><p>然后创建：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 -m venv venv</span><br></code></pre></div></td></tr></table></figure><p>按：最后一个 <code>venv</code> 是虚拟环境的名称，可以自由更改。</p><blockquote><p>如何激活虚拟环境？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> venv/bin/activate</span><br></code></pre></div></td></tr></table></figure><blockquote><p>需要安装哪些包？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">(venv) $ pip install flask<br></code></pre></div></td></tr></table></figure><p>可以使用 <code>pip freeze</code> 命名查看安装了哪些包。</p><p><img src="https://i.imgur.com/MPWSETu.png" /></p><h1 id="第-2-章-应用的基本结构">第 2 章 应用的基本结构</h1><blockquote><p>WSGI 有什么用处？</p></blockquote><p>Web 服务器使用一种名为 Web 服务器网关接口（WSGI，Web server gatewayinterface，读作“wiz-ghee”）的协议，把接收自客户端的所有请求都转交给这个对象处理。</p><blockquote><p>何为 Flask 应用的应用实例？</p></blockquote><p>所有 Flask 应用都必须创建一个应用实例。应用实例是 Flask类的对象，通常由下述代码创建：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br></code></pre></div></td></tr></table></figure><blockquote><p>传给 Flask 应用构造函数的 <code>__name__</code> 参数有什么用？</p></blockquote><p>Flask用这个参数确定应用的位置，进而找到应用中其他文件的位置，例如图像和模板。</p><blockquote><p>何为路由？</p></blockquote><p>处理 URL 和函数之间的关系的程序称为路由。</p><blockquote><p>在 Flask 应用中如何定义路由？</p></blockquote><p>最简便的方式是使用应用实例提供的 <code>app.route</code> 装饰器。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span><br></code></pre></div></td></tr></table></figure><p>还有一种更传统的方式：使用 <code>app.add_url_rule()</code>方法。这个方式最简单的形式接受 3 个参数：URL、端点名和视图函数。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span><br><br>app.add_url_rule(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>, index)<br></code></pre></div></td></tr></table></figure><p>按：这个和前面使用装饰器的代码达到的效果相同。</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Linux 命令行大全》阅读札记</title>
    <link href="/2021/11/04/%E3%80%8ALinux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/11/04/%E3%80%8ALinux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理学习笔记</title>
    <link href="/2021/11/03/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/03/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>系电子科大网课笔记。</p><blockquote><p>数字图像处理的概念？</p></blockquote><ul><li>图像是一个二维亮度函数 <span class="math inline">\(f(x,y)\)</span>，<span class="math inline">\((x, y)\)</span>定义了空间坐标，<span class="math inline">\(f(x, y)\)</span>定义该点的亮度或灰度。<br />按：这里主要是灰度。书上也讲灰度。<br /></li><li>数字图像处理是指图像的元素的空间坐标和亮度的数字化。数字图像是由有限的元素组成的，每一个元素都有一个特定的位置和幅值，这些元素称为图像元素或像素。</li><li>数字图像处理是指借用数字计算机处理数字图像。</li></ul><blockquote><p>视网膜表面分布的分离光接收器提供了图案视觉。</p></blockquote><blockquote><p>两类光接收器，锥状体和杆状体在功能上有什么区别？</p></blockquote><ul><li>锥状体和亮视觉有关，对颜色的感知能力比较强。</li><li>杆状体和暗视觉有关，对颜色感知能力比较弱。</li></ul><blockquote><p>有一张图看不懂？</p></blockquote><p>下图显示了右眼中通过眼睛光神经应急区的横截面的杆状体和锥状体密度。</p><p><img src="https://i.imgur.com/rwAR0Nm.png" /></p><p>疑：这个光神经应急系统是什么？这个图应该怎么理解？</p><blockquote><p>人的视觉系统能适应的光强度级别范围有多宽？</p></blockquote><p>从夜视阈值到强闪光约有 <span class="math inline">\(10^{10}\)</span>量级。</p><blockquote><p>何为亮度适应现象？</p></blockquote><p>人的视觉不能同时在整个范围内工作，确切地说，它是利用改变其整个灵敏度来完成这一大变动的，这就是所谓的亮度适应现象。</p><p>与整个适应范围相比，能同时鉴别的光强度级的总范围很小。</p><blockquote><p>视觉系统对亮度的感知不是简单的强度函数。例如马赫带现象和同时对比现象。</p></blockquote><blockquote><p>何为马赫带现象？</p></blockquote><p>指人们在明暗变化的边界，常常在亮区看到一条更亮的光带，而在暗区看到一条更暗的线条。</p><p>我们可以用侧抑制来解释马赫带现象的产生。</p><p><img src="https://i.imgur.com/idWphY9.png" /></p><blockquote><p>何为侧抑制？</p></blockquote><p>侧抑制是指相邻的感受器之间能够互相抑制的现象。</p><p>按：在马赫带现象中，侧抑制表现为：亮的一侧抑制暗的一侧，暗的一侧抑制亮的一侧。</p><blockquote><p>何为同时对比？</p></blockquote><p>几个刺激物同时作用于同一感受器产生的现象称为同时对比。</p><p><img src="https://i.imgur.com/m4RbhEI.png" /></p><blockquote><p>人眼可以感受到的光的范围？</p></blockquote><p><img src="https://i.imgur.com/rCa0qqC.png" /></p><p>人眼可以感受到的光的波长的范围是 <span class="math inline">\(400 \sim700\)</span> 纳米。</p><blockquote><p>用二维形式 <span class="math inline">\(f(x, y)\)</span>表示图像，在特定坐标 <span class="math inline">\((x, y)\)</span> 处，<span class="math inline">\(f\)</span>的值或幅度是一个正的标量，其物理意义由图像源决定。</p></blockquote><blockquote><p>当一幅图像从物理过程产生时，它的值正比于物理源的辐射能量。因此 <spanclass="math inline">\(f(x, y)\)</span> 一定是非零和有限的，即：</p></blockquote><p><span class="math display">\[0 &lt; f(x, y) &lt; \infty\]</span></p><blockquote><p>数字化坐标值称为取样，数字化幅度值称为量化。</p></blockquote><blockquote><p>有一个取样函数的推演看不懂呀？</p></blockquote><p><img src="https://i.imgur.com/N0vAZ3l.png" /></p><p><img src="https://i.imgur.com/bmn7JVV.png" /></p><blockquote><p>一个比较好理解的关于取样和量化的例子。</p></blockquote><p><img src="https://i.imgur.com/LzCKMRX.png" /></p><p>按：总体来讲，是一行一行取样，然后对每一行进行取样，把它们的亮度给量化出来。</p><blockquote><p>可以用矩阵形式表示一幅数字图像，也可以用变量和幅值都是整数的二维函数表示。</p></blockquote><p><img src="https://i.imgur.com/IpVt2k5.png" /></p><p><img src="https://i.imgur.com/i1TBRta.png" /></p><blockquote><p>对于上图中的 M 和 N 有什么要求？</p></blockquote><p>数字化过程中对 <span class="math inline">\(M\)</span> 和 <spanclass="math inline">\(N\)</span> 除了必须取正整数外没有其他要求。</p><p>然而，出于处理、存储和取样硬件的考虑，灰度级典型的取值是 2的整数次幂。</p><blockquote><p>对于一幅大小为 <span class="math inline">\(M \timesN\)</span>，灰度级 <span class="math inline">\(L = 2^k\)</span>的数字图像，所需的存储空间为 <span class="math inline">\(b = M \times N\times k\)</span>。</p></blockquote><blockquote><p>何为灰度级？</p></blockquote><p>灰度级的典型取值是 2的整数次幂。通常假设离散灰度级是等间隔的并且是区间 <spanclass="math inline">\([0, L - 1]\)</span> 内的整数。（<spanclass="math inline">\(L\)</span> 即 2 的整数次幂）</p><blockquote><p>何为 k 比特图像？</p></blockquote><p>当一幅图像有 <span class="math inline">\(2^k\)</span>灰度级时，通常称该图像是 k 比特图像。</p><blockquote><p>何为动态范围？</p></blockquote><p>有时灰度级的取值范围称为图像的动态范围。把占有灰度级全部有效段的图像叫做高动态范围图像。当相当可观数目的像素呈现这样的特征时，图像就有较高的对比度。相反，低动态范围的图像看上去似乎是冲淡了的灰暗格调。</p><blockquote><p>何为空间分辨率？</p></blockquote><p>取样值是决定一幅图像空间分辨率的主要参数。基本上，空间分辨率是图像中可辨别的最小细节。</p><p>广泛使用的分辨率的意义是在每单位距离可分辨的线对数目。</p><blockquote><p>疑问：PPT 上关于线对的解释似乎很难懂呀？</p></blockquote><p><img src="https://i.imgur.com/6omR2uM.png" /></p><p>后面老师所讲的 1 毫米有 100 个线对，其代表的是这 1 毫米中有 100根黑线，同时有 100 根白线铺满这个 1毫米的宽度。这样似乎就能够理解了。</p><blockquote><p>何为灰度级分辨率？</p></blockquote><p>灰度级分辨率是指在灰度级别中可分辨的最小变化。</p><p>疑：为何是最小变化？</p><blockquote><p>当没有必要对涉及像素的物理分辨率进行实际度量和在原始场景中分析细节等级时，通常就把大小为M x N，灰度为 L 级的数字图像称为空间分辨率为 M x N 像素、灰度级分辨率为L 级的数字图像。</p></blockquote><blockquote><p>疑：怎么复制行和列使得 512 x 512 恢复成 1024 x 1024 的图像的？</p></blockquote><p><img src="https://i.imgur.com/qzvzBkn.png" /></p><blockquote><p>如何计算新的像素的对应位置？</p></blockquote><p><img src="https://i.imgur.com/Y7TDytR.png" /></p><p><img src="https://i.imgur.com/KmOSqsL.png" /></p><blockquote><p>插值有哪些方法？</p></blockquote><p><img src="https://i.imgur.com/kLtgE2A.png" /></p><blockquote><p>如何理解双线性插值？</p></blockquote><p><img src="https://i.imgur.com/ePl27rX.png" /></p><p><img src="https://i.imgur.com/ePl27rX.png" /></p><p>按：两张图结合起来看，很好理解的。</p><blockquote><p>何为 4 邻域、D 邻域、8 邻域？</p></blockquote><p><img src="https://i.imgur.com/HkozlyB.png" /></p><blockquote><p>何为 4 邻接、8 邻接？</p></blockquote><p><img src="https://i.imgur.com/fi4FMkk.png" /></p><blockquote><p>何为 m 邻接？</p></blockquote><p><img src="https://i.imgur.com/fi4FMkk.png" /></p><blockquote><p>混合邻接的意义？</p></blockquote><p><img src="https://i.imgur.com/8i5TKK5.png" /></p><blockquote><p>何为通路？</p></blockquote><p><img src="https://i.imgur.com/4OvKkO9.png" /></p><blockquote><p>何为连通、连通分量、连通集？</p></blockquote><p><img src="https://i.imgur.com/L4m5vud.png" /></p><hr /><p>从这里起，接西安电子科技大学任获荣的网课，更容易懂一些。缺点是内容稍微偏少。</p><blockquote><p>何为灰度级变换？</p></blockquote><p><img src="https://i.imgur.com/SAS0A4H.png" /></p><blockquote><p>何为线性灰度变换？</p></blockquote><p><img src="https://i.imgur.com/hsD8Bdo.png" /></p><p><img src="https://i.imgur.com/3vcggY8.png" /></p><p>按：压缩动态范围，减低对比度。</p><p>反转变换：</p><p><img src="https://i.imgur.com/fldVOqI.png" /></p><p><img src="https://i.imgur.com/0NzyznB.png" /></p><p><img src="https://i.imgur.com/9RcIbOa.png" /></p><p><img src="https://i.imgur.com/0ejcVnH.png" /></p><p><img src="https://i.imgur.com/jBSihwu.png" /></p><blockquote><p>图像的运算？</p></blockquote><p><img src="https://i.imgur.com/5IcvJQ4.png" /></p><p><img src="https://i.imgur.com/qs6Pfx3.png" /></p><p><img src="https://i.imgur.com/d9hujel.png" /></p><p><img src="https://i.imgur.com/PVHM6aF.png" /></p><p><img src="https://i.imgur.com/MkJKgmU.png" /></p><p><img src="https://i.imgur.com/DsglW9Z.png" /></p><blockquote><p>何为几何变换？</p></blockquote><p><img src="https://i.imgur.com/cNqVwKO.png" /></p><p><img src="https://i.imgur.com/TQQwYuY.png" /></p><blockquote><p>何为平移变换？</p></blockquote><p><img src="https://i.imgur.com/es5A6Gs.png" /></p><blockquote><p>0 和 255 的颜色？</p></blockquote><p>0 是黑色，255 是白色。</p><blockquote><p>镜像变换？</p></blockquote><p><img src="https://i.imgur.com/15rMxsG.png" /></p><p>疑：如何理解公式？</p><p><img src="https://i.imgur.com/Apic5Ao.png" /></p><p><img src="https://i.imgur.com/h76anVv.png" /></p><p>按：转置是 x 坐标和 y 坐标进行对换。</p><blockquote><p>何为旋转变换？</p></blockquote><p><img src="https://i.imgur.com/KlTpbNS.png" /></p><p><img src="https://i.imgur.com/KPfWIML.png" /></p><blockquote><p>缩放变换？</p></blockquote><p><img src="https://i.imgur.com/mMfllPq.png" /></p><blockquote><p>拉伸变换？</p></blockquote><p><img src="https://i.imgur.com/ZngrkgW.png" /></p><blockquote><p>插值的方法？</p></blockquote><ul><li>最邻近插值法</li><li>双线性插值法 <img src="https://i.imgur.com/OuVvDOl.png" /></li><li>三次立方插值 疑：这个有点疑惑。主要是当初的插值方法忘记了。</li></ul><blockquote><p>何为线性系统？</p></blockquote><p><img src="https://i.imgur.com/h9oQDdN.png" /></p><blockquote><p>何为线性空间不变系统？</p></blockquote><p><img src="https://i.imgur.com/lDdPoio.png" /></p><blockquote><p>何为卷积？</p></blockquote><p><img src="https://i.imgur.com/im9frG7.png" /></p><blockquote><p>何为非奇异矩阵？</p></blockquote><blockquote><p>何为复共轭？</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕个路解决 Ubuntu terminal 在从全屏或最大化切换到原来窗口时窗口尺寸缩小的问题</title>
    <link href="/2021/11/03/%E7%BB%95%E4%B8%AA%E8%B7%AF%E8%A7%A3%E5%86%B3-Ubuntu-terminal-%E5%9C%A8%E4%BB%8E%E5%85%A8%E5%B1%8F%E6%88%96%E6%9C%80%E5%A4%A7%E5%8C%96%E5%88%87%E6%8D%A2%E5%88%B0%E5%8E%9F%E6%9D%A5%E7%AA%97%E5%8F%A3%E6%97%B6%E7%AA%97%E5%8F%A3%E5%B0%BA%E5%AF%B8%E7%BC%A9%E5%B0%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/11/03/%E7%BB%95%E4%B8%AA%E8%B7%AF%E8%A7%A3%E5%86%B3-Ubuntu-terminal-%E5%9C%A8%E4%BB%8E%E5%85%A8%E5%B1%8F%E6%88%96%E6%9C%80%E5%A4%A7%E5%8C%96%E5%88%87%E6%8D%A2%E5%88%B0%E5%8E%9F%E6%9D%A5%E7%AA%97%E5%8F%A3%E6%97%B6%E7%AA%97%E5%8F%A3%E5%B0%BA%E5%AF%B8%E7%BC%A9%E5%B0%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Ubuntu 的 terminal 有一个严重的问题，那就是在最大化 terminal或者全屏化窗口之后再恢复到原来的窗口时，这个窗口的尺寸会缩小一行和一列。</p><p>这个问题七年前就存在，今天在谷歌找了半天，最终也没有找出一个像样的解决方案，具体的讨论可以看看这些：</p><ul><li><ahref="https://bugs.launchpad.net/ubuntu/+source/gnome-terminal/+bug/1706008">讨论一</a></li><li><ahref="https://bugs.launchpad.net/ubuntu/+source/gnome-terminal/+bug/1288655">讨论二</a></li></ul><p>循着这两个讨论，发现网上的讨论还有很多，但是最终都没有完美的解决方案，gnome官方到现在似乎也没有解决，Ubuntu 官方也不解决，无奈呀。</p><p>大家不响，我也不响。</p><p>不响半天，算了，给自己设置一个快捷命令吧。</p><p>于是，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vi ~/.bashsrc</span><br></code></pre></div></td></tr></table></figure><p>然后，来到文件末尾，加上如下代码</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">resize the window to 80x24 shortcut</span><br>alias rss=&#x27;resize -s 24 80 &gt;/dev/null&#x27;<br></code></pre></div></td></tr></table></figure><p>然后，激活脚本：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> ~/.bashrc</span><br></code></pre></div></td></tr></table></figure><p>然后我们就可以在命令行中使用 <code>rss</code> 命令来快速让窗口恢复到<code>80 x 24</code> 的尺寸了。</p><p>解释一下这行脚本的含义：</p><p><code>resize -s 24 80</code> 是将窗口重新设置成 <code>80 x 24</code>的尺寸。如果是直接执行这个命令，那么终端会输出一些信息，</p><p><img src="https://i.imgur.com/DqqyvcY.png" /></p><p>所以，我们使用 <code>&gt;/dev/null</code>将输出进行重定向，<code>/dev/null</code> 可以理解为 Linux下的回收站。</p><p>如此一来，我们在切换全屏或者最大化与正常窗口之间的状态时，执行一下这个我们自定义的命令就可以得到想要的效果了。</p><p>按：<code>resize</code> 这个快捷键是 xterm 中带有的，所以事前要先安装xterm。</p>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Python 从零开始搭建一个 Telegram 机器人</title>
    <link href="/2021/11/02/%E5%88%A9%E7%94%A8-Python-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA-Telegram-%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <url>/2021/11/02/%E5%88%A9%E7%94%A8-Python-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA-Telegram-%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>本人使用的操作系统是 Ubuntu 20.04，如果是 Windows 或者MacOS，其操作过程应该类似，应该。</p><p>然后编程的语言是 Python，使用的 Web 框架是 Flask。</p><h1 id="创建机器人">创建机器人</h1><p>首先，注册一个 Telegram 账号，然后，执行相关操作，</p><p><img src="https://i.imgur.com/nlClsIW.png" /></p><p>我们的 bot 应该有两个属性：一个 name，另一个是 username。name相当于昵称，而 username 则是在 bot 被提及或者被分享时会用到。</p><p>当选好了我们的 bot name 和 username（username 比如以 bot结尾）之后，我们会收到一条带有 token 的信息，然后我们需要保存这个 token以及前面的 username，我们之后会用到它们。</p><h1 id="编写代码和相关逻辑">编写代码和相关逻辑</h1><p>首先，让我们创建一个 Python虚拟环境，这会帮助我们将项目中所需求的工具包等从全局的 Python环境中隔离开来，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 -m venv botenv/</span><br></code></pre></div></td></tr></table></figure><p>然后我们使用命令来激活虚拟环境，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> botenv/bin/activate</span><br></code></pre></div></td></tr></table></figure><p>我们需要安装的包有：</p><ul><li>Flask：一个使用 Python 构建的微 web 框架</li><li>Python-telegram-bot：一个使用 Python 给 Telegram 整的 API 封装</li><li>Requests：一个流行的 Python http 库</li><li>gunicorn：后面部署到 Heroku 时会用到</li></ul><p>我们可以使用 pip 命令在虚拟环境中安装这些包：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ pip install flask<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ pip install python-telegram-bot<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ pip install requests<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ pip install gunicorn<br></code></pre></div></td></tr></table></figure><p>然后，我们还需要在当前目录下创建几个文件（夹）：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ mkdir telebot<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ touch app.py<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ cd telebot/<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject/telebot$ touch credentials.py<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject/telebot$ touch __init__.py<br></code></pre></div></td></tr></table></figure><p>然后，我们使用 VSCode 打开这个项目进行编辑：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject/telebot$ cd ..<br>(botenv) lufan@lufan-ubuntu:~/Documents/PythonCodes/telebotproject$ code ./<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《一站式学习 C 编程》阅读札记</title>
    <link href="/2021/11/01/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0-C-%E7%BC%96%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/11/01/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0-C-%E7%BC%96%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第-1-章-程序的基本概念">第 1 章 程序的基本概念</h1><blockquote><p>编写程序可以说就是这样一个过程：把复杂的任务分解成子任务，把子任务再分解成更简单的任务，层层分解，直到最后简单得可以用以上指令来完成。</p></blockquote><p>按：这里所谓的指令是指如下的几种指令：</p><ul><li>输入（Input）</li><li>输出（Output）</li><li>基本运算</li><li>测试和分支</li><li>循环</li></ul><blockquote><p>一个语句的三种表示，该如何理解？</p></blockquote><p><img src="https://i.imgur.com/4teiZhM.png" /></p><p>对于汇编指令转换到机器指令，这个过程由来汇编器来完成，例如，在第一条指令中，把mov ?, %eax 这种格式的指令替换成机器码 a1 ?<code>，?</code>表示一个地址，在汇编指令中是 <code>0x804a01c</code>，转换成机器码之后是<code>1c a0 04 08</code>（这是指令中十六进制数的小端表示）。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/sh</span><br>VAR=1<br>VAR=$(($VAR+1))<br>echo $VAR<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">/bin/sh script.sh</span><br>2<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">VAR=1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">VAR=$((<span class="hljs-variable">$VAR</span>+<span class="hljs-number">1</span>))</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$VAR</span></span><br>2<br></code></pre></div></td></tr></table></figure><blockquote><p>还有很多编程语言采用编译和解释相结合的方式执行，这种方式相当流行，Java、Python、Perl等编程语言都采用这种方式。以 Python 为例，程序员写的源代码 .py文件首先被编译成 .pyc 文件，称为字节码（Byte Code），然后字节码被 Python虚拟机解释执行。</p></blockquote><blockquote><p>如何理解某个语言是第某代语言？</p></blockquote><p>以上介绍的机器语言称为第一代语言（1GL，1st Generation ProgrammingLanguage），汇编语言称为第二代语言（2GL，2nd GenerationProgrammingLanguage），C、C++、Java、Python等可以称为第三代语言（3GL，3rd Generation ProgrammingLanguage）。目前已经有了 4GL（4th Generation Programming Language）和5GL（5th Generation Programming Language）的概念。3GL的编程语言虽然是用语句编程而不直接用指令编程，但语句也分为输入、输出、基本运算、测试分支和循环等几种，和指令有直接的对应关系。而4GL以后的编程语言更多是描述要做什么（Declarative）而不描述具体每一步怎么做（Imperative），具体步骤完全由编译器或解释器决定，例如SQL（SQL，Structured QueryLanguage，结构化查询语言）就是这样的例子。</p><blockquote><p>如何理解符号（Token）？</p></blockquote><p>语法规则是由符号（Token）和结构（Structure）的规则所组成的。Token的概念相当于自然语言中的单词和标点、数学式中的数和运算符、化学分子式中的元素名和数字。</p><blockquote><p>如何区分词法规则和语法规则？</p></blockquote><p>关于 Token的规则称为词法（Lexical）规则，而关于结构的规则称为语法（Grammar）规则。</p><p>按：这个在编译原理里面有学习过。</p><blockquote><p>阅读程序的建议？</p></blockquote><p>首先请记住形式语言远比自然语言紧凑，所以要多花点时间来读。其次，结构很重要，从上到下从左到右读往往不是一个好办法，而应该学会在大脑里解析：识别Token，分解结构。</p><blockquote><p>关于 Bug 的典故？</p></blockquote><p>早期的计算机体积都很大，有一次一台计算机不能正常工作，工程师们找了半天原因最后发现是一只虫子（Bug）钻进计算机中造成的。从此以后，程序中的错误被叫做Bug，而找到这些 Bug 并加以纠正的过程就叫做调试（Debug）。</p><blockquote><p>几种常见的错误类型？</p></blockquote><ul><li>编译时错误</li><li>运行时错误</li><li>逻辑错误和语义错误</li></ul><blockquote><p>关于 Linux 的一个有趣的东西？</p></blockquote><p>“Linus 的早期工程之一是编写一个交替打印 AAAA 和 BBBB的程序，这玩意儿后来进化成了 Linux。”</p><blockquote><p>Linux 下编写 C 语言代码需要安装的一些包？</p></blockquote><ul><li>gcc: The GNU C compiler</li><li>libc6-dev: GNU C Library: Development Librariesand Header Files</li><li>manpages-dev: Manual pages about usingGNU/Linux for development</li><li>binutils:The GNU assembler,linker and binaryutilities</li><li>gdb: The GNU Debugger</li><li>make: The GNU version of the "make" utility</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// filename: main.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">/* main: generate some simple ouput */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, world.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc main.c</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main</span><br>Hello, world.<br></code></pre></div></td></tr></table></figure><blockquote><p>如何理解 Linux 下 C 语言程序编译后生成的 a.out 文件？</p></blockquote><p>a.out 是 Assembler Output 的缩写，实际上一个 C程序要先被编译器翻译成汇编程序，再被汇编器翻译成机器指令，最后还要经过链接器的处理才能成为可执行文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc main.c -o main</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main</span><br>Hello, world.<br></code></pre></div></td></tr></table></figure><p>按：这个 <code>-o</code> 参数是用来指定文件名的。</p><blockquote><p>C 程序中的 main 有什么特殊？</p></blockquote><p>C 程序总是从 main 里面的第一条语句开始执行的。</p><blockquote><p>{} 的英文怎么说？</p></blockquote><p>Brace 或 Curly Brace。</p><blockquote><p>一个好的习惯是打开 gcc 的 -Wall 选项，让 gcc提示所有的警告信息，不管是严重的还是不严重的，然后把这些问题从代码中全部消灭。</p></blockquote><p>按：<code>-Wall</code> 大概是 Warning all 的意思。</p><h1 id="第-2-章-常量变量和表达式">第 2 章 常量、变量和表达式</h1><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* comment1</span><br><span class="hljs-comment">* main: generate some simple output</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-comment">/* comment2 */</span><span class="hljs-string">&quot;Hello, world.\n&quot;</span>); <span class="hljs-comment">/* comment3 */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>按：注释可以跨行，也可以穿插在程序之中</p><blockquote><p><code>*</code>，这个星号的英文是啥？</p></blockquote><p>Asterisk.</p><blockquote><p>关于 <code>\* *\</code> 注释和 <code>//</code> 注释的渊源？</p></blockquote><p>似乎，<code>\* *\</code> 是比较正统的注释，而<code>//</code>，这个我们通常称为行注释的注释，是从 C++ 中借鉴的语法，在C99 中被标准化。</p><blockquote><p>像 <code>"Hello, world.\n"</code> 这种由双引号（DoubleQuote）引起来的一串字符称为字符串字面值（StringLiteral），或者简称字符串。</p></blockquote><blockquote><p>C 标准规定的转义字符有哪些？</p></blockquote><p><img src="https://i.imgur.com/KHq6a9j.png" /></p><blockquote><p>转义序列有哪两个作用？</p></blockquote><p>一是把普通字符转义成特殊字符，例如把字母 n转义成换行符；二是把特殊字符转义成普通字符，例如 <code>\</code> 和<code>"</code> 是特殊字符，转义后取它的字面值。</p><blockquote><p>对 Line Feed 和 Carriage Return 的理解？</p></blockquote><p>Line Feed是跳到下一行（进纸，喂纸，有个喂的动作所以是feed），Carriage Return 是回到本行开头（Carriage是卷着纸的轴，随着打字慢慢左移，打完一行就一下子移回最右边，如果你看过欧美的老电影应该能想起来这是什么）。用老式打字机打完一行之后需要这么两个动作，，所以现在Windows 平台的文本文件用 做换行符，许多应用层网络协议（如 HTTP）也用做换行符，而 Linux 和各种 UNIX 平台的文本文件只用 做换行符。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, world.\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>按：空格和 Tab 一般是无关紧要的。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, world.\n&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br></code></pre></div></td></tr></table></figure><p>按：没有换行也可以。</p><blockquote><p>好的代码风格？</p></blockquote><p>好的代码风格要求缩进整齐，每个语句一行，适当留空行。</p><blockquote><p>常量有哪些？</p></blockquote><ul><li>字符（Character）常量</li><li>整数（Integer）常量</li><li>浮点数（Floating Point）常量</li><li>枚举常量</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;character: %c\ninteger: %d\nfloating point: %f\n&quot;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3.14</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>字符常量有什么注意点？</p></blockquote><ul><li>字符常量要用单引号括起来，如<code>'&#125;'</code>，注意单引号只能括一个字符而不能像双引号那样括一串字符；</li><li>字符常量也可以是一个转义序列，如<code>'\n'</code>，这时虽然单引号括了两个字符，但实际上只表示一个字符；</li><li>如果在字符常量中要表示双引号 <code>"</code> 和问号<code>?</code>，既可以使用转义序列 <code>\"</code> 和<code>\?</code>，也可以直接使用字符 <code>"</code> 和<code>?</code>，而表示 <code>'</code> 和 <code>\</code>则必须使用转义序列。</li></ul><blockquote><p>何为格式化字符串（Format String）？</p></blockquote><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;character: %c\ninteger: %d\nfloating point: %f\n&quot;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3.14</span>);<br></code></pre></div></td></tr></table></figure><p>printf 中的第一个字符串称为格式化字符串（FormatString），它规定了后面几个常量以何种格式插入到这个字符串中。</p><blockquote><p>何为占位符（Placeholder）？</p></blockquote><p>在格式化字符串中，<code>%</code> 号（Percent Sign）后面加上字母c、d、f 分别表示字符型、整型和浮点型的转换说明（ConversionSpecification），转换说明只在格式化字符串中占个位置，并不出现在最终的打印结果中，这种用法通常叫做占位符（Placeholder）。</p><blockquote><p>转义序列和转换说明有什么区别？</p></blockquote><p>转义序列是在编译时处理的，而转换说明是在运行时调用 printf函数处理的。</p><blockquote><p>在 printf 格式化字符串中怎么表示一个 <code>%</code> 字符？</p></blockquote><p>只需要输入两个百分号 <code>%</code> 即可，即 <code>%%</code>。</p><blockquote><p>在 C 语言中如何规定变量的名字和类型？</p></blockquote><p>在 C 语言中用声明（Declaration）来规定变量的名字和类型。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> fred;<br><span class="hljs-type">int</span> bob;<br><span class="hljs-type">float</span> jimmy;<br><span class="hljs-type">double</span> tom;<br></code></pre></div></td></tr></table></figure><blockquote><p>C 语言的声明有几种？</p></blockquote><p>三种：</p><ul><li>变量声明</li><li>函数声明</li><li>类型声明</li></ul><blockquote><p>如何理解声明分为“是定义（Definition）的声明”和“不是定义的声明”？</p></blockquote><p>简单地说，分配存储空间的声明同时也是定义，不分配存储空间的声明不是定义。</p><blockquote><p>如何判断变量声明、函数声明、类型声明是否同时是定义？</p></blockquote><ul><li>如果一个变量声明要求编译器为它分配存储空间，那么这个声明同时也是变量的定义。<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 下面这些声明同时也是定义 */</span><br><span class="hljs-type">char</span> fred;<br><span class="hljs-type">int</span> bob;<br><span class="hljs-type">float</span> jimmy;<br><span class="hljs-type">double</span> tom;<br></code></pre></div></td></tr></table></figure></li><li>如果一个函数声明带有函数体，要求编译器为它生成指令（当然也需要分配存储空间来保存这些指令），那么这个声明同时也是函数的定义。不带函数体的申明不是函数定义。</li><li>类型声明总是不分配存储空间，所以严格来说只有类型声明而没有类型定义，我们通常所说的“定义了某种类型”其实是“声明了某种类型”。</li></ul><blockquote><p>声明和语句的区别？</p></blockquote><p>语句只能出现在函数体中，而声明既可以出现在函数体中也可以出现在所有函数中。</p><blockquote><p>浮点型有几种？</p></blockquote><p>三种：</p><ul><li>float 是单精度浮点型；</li><li>double 是双精度浮点型；</li><li>long double 精度更高的浮点型。</li></ul><blockquote><p><code>printf</code> 的 <code>%f</code> 是哪一种浮点？</p></blockquote><p>double。要特别注意，不是 <code>float</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> firstletter;<br><span class="hljs-type">char</span> lastletter;<br><span class="hljs-type">int</span> hour, minute;<br></code></pre></div></td></tr></table></figure><p>按：取名字要注意其意义。</p><blockquote><p>C 语言给变量起名的限制？</p></blockquote><p>C 语言规定，变量名必须以字母或下划线<code>_</code>（Underscore）开头，后面可以跟若干个字母、数字、下划线，但不能有其他字符。</p><p>合法变量名举例：<code>Abc</code>、<code>__abc__</code>、<code>_123</code>。<br />不合法变量名举例：<code>3abc</code>、<code>ab$</code>。</p><blockquote><p>何为标识符？</p></blockquote><p>变量名、函数名、宏定义、结构体成员名等，在 C 语言中统称为标识符。</p><blockquote><p>C99 规定的关键字有哪些？</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">auto  break  case  char  const  continue  default  do  double else  enum  extern  float  for  goto  if  inline  int  long register  restrict  return  short  signed  sizeof  static struct  switch  typedef  union  unsigned  void  volatile while  _Bool  _Complex  _Imaginary</code></pre></div><blockquote><p>为何一般要避免使用以下划线开头的标识符？</p></blockquote><p>因为以下划线开头的标识符一般被编译器用作一些功能扩展，所以有时候可能会和C 标准库中的命名造成冲突。</p><blockquote><p>What is Best Practice?</p></blockquote><p>就是一般推荐的做法啦。有的书中翻译成最佳实践。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> firstletter;<br><span class="hljs-type">int</span> hour, minute;<br>firstletter = <span class="hljs-string">&#x27;a&#x27;</span>   <span class="hljs-comment">/* give firstletter the value &#x27;a&#x27; */</span><br>hour = <span class="hljs-number">11</span>;          <span class="hljs-comment">/* assign the value 11 to hour */</span><br>minute = <span class="hljs-number">59</span>;        <span class="hljs-comment">/* set minute to 59 */</span><br></code></pre></div></td></tr></table></figure><blockquote><p>如何理解定义变量和给变量赋值？</p></blockquote><p>定义一个变量，就是分配一块存储空间并给它命名；给一个变量赋值，就是把一个值保存到这块存储空间中。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> firstletter = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">int</span> hour = <span class="hljs-number">11</span>, minute = <span class="hljs-number">59</span>;<br></code></pre></div></td></tr></table></figure><p>按：变量的定义和赋值可以一步完成，称为变量的初始化（Initialization）。等号右边的值叫做Initializer。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">hour * <span class="hljs-number">60</span> + minute;<br></code></pre></div></td></tr></table></figure><p>按：合法，但是没有意义。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> total_minute;<br>total_minute = hour * <span class="hljs-number">60</span> + minute;<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> total_minute, total;<br>total = total_minute = hour * <span class="hljs-number">60</span> + minute;<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d is %d minutes after 00:00\n&quot;</span>, hour, minute, hour * <span class="hljs-number">60</span> + minute);<br></code></pre></div></td></tr></table></figure><p>按：更复杂的 printf 语句。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d is %d minutes after 00:00\n&quot;</span>, hour, minute, total_minute = hour * <span class="hljs-number">60</span> + minute);<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d hours and %d percent of an hour\n&quot;</span>, hour, minute * <span class="hljs-number">100</span> / <span class="hljs-number">60</span>);<br>prinf(<span class="hljs-string">&quot;%d and %f hours\n&quot;</span>, hour, minute / <span class="hljs-number">60.0</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure><p>按：输出为 <code>b</code>。</p><blockquote><p>char 型本质上就是整数，只不过取值范围比 int 型小。所以我们把 char型和 int 型统称为整数类型（Integer Type）或简称整型。</p></blockquote><blockquote><p>字符如何用 ASCII 码转义序列表示？</p></blockquote><p>由 <code>\</code> 加上 1~3 个八进制数字组成，或者由 <code>\x</code>加上 1~2 个十六进制数字组成，可以用在字符常量或字符串字面值中。</p><blockquote><p>ASCII 的全写是什么？</p></blockquote><p>American Standard Code for Information Interchange.</p><p>例如：<code>'\0'</code> 表示 NUL 符（NullCharacter），<code>'\11'</code> 或 <code>'\x9'</code> 表示 Tab字符。注意 <code>'\0'</code> 和 <code>'0'</code> 的区别。</p><h1 id="第-3-章-简单函数">第 3 章 简单函数</h1><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">double</span> pi = <span class="hljs-number">3.1416</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sin(pi/2)=%f\nln1=%f\n&quot;</span>, <span class="hljs-built_in">sin</span>(pi/<span class="hljs-number">2</span>), <span class="hljs-built_in">log</span>(<span class="hljs-number">1.0</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc main.c -lm</span><br></code></pre></div></td></tr></table></figure><p>按：使用数学库后面要加 <code>-lm</code> 选项。<code>math.h</code>中声明的数学函数位于 <code>libm.so</code> 库文件中。<code>-lm</code>选项告诉编译器，我们程序中用到的数学函数要到这个库文件找。大部分库函数（例如：printf）位于<code>libc.so</code> 库文件中，使用 <code>libc.so</code>中的库函数在编译时不需要加 <code>-lc</code>选项，当然加了也不算错，因为这个选项是 gcc 的默认选项。</p><blockquote><p>printf 的返回值？</p></blockquote><p>返回值为实际打印的字符数。</p><blockquote><p>头文件一般在哪里？</p></blockquote><p>头文件一般在 <code>/usr/include</code> 目录下。</p><blockquote><p>在 Linux 平台上最广泛使用的 C 函数库是 glibc，其中包括 C标准库的实现。</p></blockquote><blockquote><p>C 标准有哪两部分组成？</p></blockquote><ul><li>描述 C 的语法的一部分；</li><li>描述 C 标准库的另一部分。</li></ul><p>按：此书中说 libc 时专指 <code>libc.so</code> 这个库文件，而说 glibc时指的是 glibc 提供的所有库文件。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> hour = <span class="hljs-number">11</span>;<br>    <span class="hljs-type">int</span> minute = <span class="hljs-number">59</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d and %d hours\n&quot;</span>, hour, minute / <span class="hljs-number">60</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>如何理解 main 函数？</p></blockquote><p>main函数的特殊之处在于执行程序时它自动被操作系统调用，操作系统就认准了 main这个名字，除了名字特殊之外，main 函数和别的函数没有区别。</p><blockquote><p>我们将 main 函数中的 return 语句改为 <code>return 4</code>会发生什么？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./a.out</span><br>11 and 0 hours<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> $?</span><br>4<br></code></pre></div></td></tr></table></figure><blockquote><p>如何理解 <code>$?</code>？</p></blockquote><p><code>$?</code> 是 Shell中的一个特殊变量，表示上一条命令的退出状态。</p><blockquote><p>关于 main 函数有哪些需要注意的地方？</p></blockquote><ul><li>将 main 函数写成 <code>main()&#123;...&#125;</code> 的形式，这是 Old Style C的风格，Old Style C 规定不写返回值就表示返回 int型，不写参数列表就表示参数类型和个数没有明确指出。然而现在绝对不推荐这种写法。</li><li>main 函数最标准的写法是<code>int main(int argc, char *argv[])</code>，C 标准也允许<code>int main(void)</code>这种写法，如果不使用系统传进来的两个参数也可以写成这种形式。</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">newline</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;First Line.\n&quot;</span>);<br>    newline();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Second Line.\n&quot;</span>);<br>    newline();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>执行结果：</p><div class="hljs code-wrapper"><pre><code class="hljs">First Line.Second Line.</code></pre></div><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;First Line.\n&quot;</span>);<br>    newline();<br>    newline();<br>    newline();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Second Line.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>按： 插入多个空行。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">newline</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">threeline</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    newline();<br>    newline();<br>    newline();<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Three lines:\n&quot;</span>);<br>    threelines();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Another three lines.\n&quot;</span>);<br>    threelines();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>何为函数原型（Prototype）？</p></blockquote><p>比如 <code>void threeline(void)</code>这一行，声明了一个函数的名字、参数类型和个数、返回值类型，这称为函数原型。</p><blockquote><p>何为函数声明？</p></blockquote><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">threelines</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></div></td></tr></table></figure><p>按：加了分号。</p><blockquote><p>何为函数定义？</p></blockquote><p>有函数体的的函数声明叫做函数定义。</p><blockquote><p>如果使用不带函数体的声明，可以改变函数的定义顺序，例如：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">newline</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">threelines</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Three lines:\n&quot;</span>);<br>    threelines();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Another three lines.\n&quot;</span>);<br>    threelines();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">newline</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">threelines</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    newline();<br>    newline();<br>    newline();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>按：如果不使用不带函数体的声明的话，就只能按先 newline 再 threelines再 main 的顺序定义。</p><blockquote><p>由于有 Old Style C语法的存在，并非所有函数声明都包含完整的函数原型。例如<code>void threelines();</code>这个声明并没有明确指出参数类型和个数，所以不算函数原型。</p></blockquote><blockquote><p>如果在调用函数之前没有声明会怎样？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Three lines:\n&quot;</span>);<br>    threelines();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Another three lines.\n&quot;</span>);<br>    threelines();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">newline</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">threelines</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    newline();<br>    newline();<br>    newline();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/orCvHQF.png" /></p><p>按：这里编译能通过，运行结果也是对的。这里涉及的语法规则称为函数的隐式声明。由于在main 函数中调用 <code>threeline()</code>之前没有声明它，编译器只能根据函数调用来猜测它的原型。但是猜得不对时，遇到下面的定义时，就会报conflict 警告。</p><blockquote><p>两个注意点？</p></blockquote><ul><li>如果调用函数时参数列表为空，并且缺少函数原型，则编译器根据隐式声明规则认为参数类型是void。隐式声明规则会认为默认的返回值为 int。</li><li>如果声明函数时参数列表为空，则这个声明属于 Old Style C语法，不算函数原型，编译器认为参数类型和个数没有明确指出。</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_time</span><span class="hljs-params">(<span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d\n&quot;</span>, hour, minute);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>print_time(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>按：带参数的自定义函数。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">print_time</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br></code></pre></div></td></tr></table></figure><p>按：如果写一个非定义的函数声明，可以只写参数类型而不写参数名。</p><blockquote><p>定义变量和参数的区别？</p></blockquote><p>定义（声明）变量时可以把相同类型的变量列在一起，如</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> hour, minute;<br></code></pre></div></td></tr></table></figure><p>但是，定义参数是不行的。</p><blockquote><p>什么叫最少例外原则？</p></blockquote><p>Rule of Least Surprise.</p><p>容易被用户接受。</p><blockquote><p>Old Style 中如何声明参数？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(x, y, z)</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">char</span> z;<br>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>按：不写类型的参数 y 默认是 int 类型。</p><blockquote><p>形参和实参的英文？</p></blockquote><p>形参：Parameter</p><p>实参：Argument</p><blockquote><p>如何理解形参？</p></blockquote><p>形参相当于函数中定义的变量，调用函数传递参数的过程相当于定义形参变量并且用实参的值来初始化。</p><blockquote><p>Call by Value.</p></blockquote><blockquote><p>有时候我们把函数叫做接口（Interface），调用函数就是使用这个接口，使用接口的前提是必须和接口保持一致。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C 语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C 语言</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我遇到的 Bugs 及其解决方案记录</title>
    <link href="/2021/11/01/%E6%88%91%E9%81%87%E5%88%B0%E7%9A%84-Bugs-%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/01/%E6%88%91%E9%81%87%E5%88%B0%E7%9A%84-Bugs-%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Ubuntu 中使用 <code>hexo g</code> 生成博客时候出现问题。 报错信息是<code>TypeError: line.matchAll is not a function</code></p></blockquote><p>这个问题可以通过升级 node 来解决。</p><p>链接：<ahref="https://stackoverflow.com/questions/67516168/i-just-installed-hexo-static-site-generator-on-debian-and-ran-hexo-server-to-see">StackOverflow</a></p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《flex 与 bison 中文版》阅读札记</title>
    <link href="/2021/11/01/%E3%80%8Aflex-%E4%B8%8E-bison-%E4%B8%AD%E6%96%87%E7%89%88%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/11/01/%E3%80%8Aflex-%E4%B8%8E-bison-%E4%B8%AD%E6%96%87%E7%89%88%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>在阅读本书的过程中，我使用的系统是 Ubuntu 20.04。</p><p>安装 flex 和 bison 在 Linux系统中是一件很简单的事情，直接命令行安装即可。安装完可以检查一下版本来看看是否安装成功。</p><p><img src="https://i.imgur.com/ZQX99q4.png" /></p><h1 id="第-1-章-flex-和-bison-简介">第 1 章 Flex 和 Bison 简介</h1><blockquote><p>flex 程序的组成？</p></blockquote><p>flex程序主要由一系列带有指令的正则表达式组成，这些指令确定了正则表达式匹配后相应的动作（action）。由flex生成的词法分析器可以读取输入，匹配输入与所有正则表达式并且执行每次匹配后适当的关联动作。</p><blockquote><p>第一个程序如何理解？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 正如 Unix 的 wc 程序 */</span><br>%&#123;<br><span class="hljs-type">int</span> chars = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> words = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> lines = <span class="hljs-number">0</span>;<br>%&#125;<br>%%<br>[a-zA-Z]+   &#123; words++; chars += <span class="hljs-built_in">strlen</span>(yytext); &#125;<br>\n          &#123; chars++; lines++; &#125;<br>.           &#123; chars++; &#125;<br>%%<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    yylex();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%8d%8d%8d\n&quot;</span>, lines, words, chars);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>flex 程序包含三个部分，各部分之间通过仅有 <code>%%</code>的行来分割。</p><ul><li>第一个部分包含声明和选项设置；</li><li>第二个部分是一系列的模式（pattern）和动作；</li><li>第三部分是会被拷贝到生成的词法分析器里面的 C代码，它们通常是一些与动作代码相关的例程。</li></ul><p>在声明部分，<code>%&#123;</code> 和 <code>%&#125;</code>之间的代码会被原样照抄到生成的 C文件的开头部分。在这个例子里面，它只是用来设定了行数、单词数和字符数的变量。</p><p>在第二部分，</p><ul><li><code>[a-zA-Z]+</code>，用来匹配一个单词，相关的动作是更新匹配过的单词和字符的个数。需要注意的是，变量<code>yytext</code> 总是被设为指向本次匹配的输入文本。</li><li><code>\n</code>，用来匹配换行符。相关的动作更新行数和字符数。</li><li><code>.</code>，匹配任意一个字符。关联的动作更新字符数。</li></ul><blockquote><p>也许读者会问，如果 <code>.</code>代表匹配所有的字符，难道它不会也匹配第一个模式所应该匹配的字母吗？答案是肯定的，但是flex棋高一着的地方是它总是选择更长的匹配，而且如果两个模式都匹配的，flex会选择在程序里面首先出现的那个模式。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">flex fb1-1.l</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">cc lex.yy.c -lfl</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./a.out</span><br>The boy stood on the burning deck<br>shelling peanuts by the peck<br>^D<br>2 12 63<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/BGAhqpZ.png" /></p><p>注意几点：</p><ul><li>1）<code>cc</code> 这里表示使用系统默认的 C 编译器进行编译，这里是gcc；</li><li>2）<code>-lfl</code> 中两个都是字母 <code>l</code>；</li><li>3）<code>^D</code> 在 Ubuntu 中没有显示。</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">[^ \t\n\r\f\v]+    &#123; words++; chars += <span class="hljs-built_in">strlen</span>(yytext); &#125;<br></code></pre></div></td></tr></table></figure><p>按：匹配没有空白字符的字符串。<code>^</code>指匹配任意一个不在字符类里面的字符。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 英式英语 -&gt; 美式英语 */</span><br>%%<br><span class="hljs-string">&quot;colour&quot;</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;color&quot;</span>); &#125;<br><span class="hljs-string">&quot;flavour&quot;</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;smart&quot;</span>); &#125;<br><span class="hljs-string">&quot;smart&quot;</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;elegant&quot;</span>); &#125;<br><span class="hljs-string">&quot;conservative&quot;</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;liberal&quot;</span>); &#125;<br>··· 其他更多的单词 ···<br>. &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, yytext); &#125;<br>%%<br></code></pre></div></td></tr></table></figure><p>按：这个程序当然是不能直接跑起来的。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 识别出用于计算器的记号并把它输出 */</span><br><br>%%<br><span class="hljs-string">&quot;+&quot;</span>     &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PLUS\n&quot;</span>); &#125;<br><span class="hljs-string">&quot;-&quot;</span>     &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MINUS\n&quot;</span>); &#125;<br><span class="hljs-string">&quot;*&quot;</span>     &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TIMES\n&quot;</span>); &#125;<br><span class="hljs-string">&quot;/&quot;</span>     &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DIVIDE\n&quot;</span>); &#125;<br><span class="hljs-string">&quot;|&quot;</span>     &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ABS\n&quot;</span>); &#125;<br>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]+  &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NUMBER %s\n&quot;</span>, yytext); &#125;<br>\n      &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NEWLINE\n&quot;</span>); &#125;<br>[ \t]   &#123; &#125;<br>.       &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Mystery character %s\n&quot;</span>, yytext); &#125;<br>%%<br>%%<br></code></pre></div></td></tr></table></figure><p>按：前 5 个模式就是操作符本身，用引号引起。引号告诉 flex使用引号内文本的原义，而不是把它们解释成正则表达式。<br />然后，对于这段程序，我们并没有第三段的 C 代码，但是 flex库文件（<code>-lfl</code>）提供了一个极小的主程序来调用词法分析器。</p><p><img src="https://i.imgur.com/9sJL97z.png" /></p><blockquote><p><code>^D</code> 是 Unix/Linux 的文件结束符。在 Windows 中，你可以输入<code>^Z</code>。</p></blockquote><blockquote><p>每当程序需要一个记号时，它调用 <code>yylex()</code>来读取一小部分输入然后返回相应的记号。当程序需要下一个记号时，<code>yylex()</code>会被再次调用。</p></blockquote><blockquote><p>词法分析器以协同程序的方式来运行，也就是说，它会记住当前处理的位置，并从这个位置开始去处理下一次调用。</p></blockquote><p>按：关于协同程序，《一站式学习 C 编程》中应该有讲。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-string">&quot;+&quot;</span>     &#123; <span class="hljs-keyword">return</span> ADD; &#125;<br>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]+  &#123; <span class="hljs-keyword">return</span> NUMBER; &#125;<br>[ \t]   &#123; <span class="hljs-comment">/* 忽略空白字符 */</span> &#125;<br></code></pre></div></td></tr></table></figure><p>按：如果有动作返回，词法分析会在下一次 <code>yylex()</code>调用时继续，如果动作没有返回，词法分析程序将会继续进行。</p><blockquote><p>当 bison 创建一个语法分析器时，bison 自动地从 258起指派每个记号编号，并且创建一个包含这些编号定义的 <code>.h</code>文件。</p></blockquote><p><img src="https://i.imgur.com/kgU2mAr.png" /></p><blockquote><p>bison 起源？</p></blockquote><p>bison 来源于 yacc，yacc 是 "yet another compiler compiler"的缩写。</p><blockquote><p>lex 和 flex 的渊源？</p></blockquote><p>lex 是 "Lexical Analyzer Generator"，flex 是 "Fast Lexical AnalyzerGenerator" 的缩写。</p><p>按：flex 和 bison 配对；lex 和 yacc 配对。</p><blockquote><p>何为 BNF 语法？</p></blockquote><p>BNF，即 BackusNaur Form，中文名 BackusNaur范式，是书写上下文无关文法的标准格式。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">&lt;<span class="hljs-built_in">exp</span>&gt; ::= &lt;factor&gt;<br>    | &lt;<span class="hljs-built_in">exp</span>&gt; + &lt;factor&gt;<br>&lt;factor&gt; ::= NUMBER<br>    &lt;factor&gt; * NUMBER<br></code></pre></div></td></tr></table></figure><p>按：</p><ul><li>每一行就是一条规则，用来说明如何创建语法分析树的分支；</li><li><code>::=</code> 读作“是”或者“变成”；</li><li><code>|</code> 是“或者”，创建同类分支的一种方式；</li><li>规则左边的名称是语法符号（symbol）。</li></ul><blockquote><p>有效的 BNF 总是带有递归性的。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 计算器的最简版本 */</span><br>%&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>&#125;%<br><br><span class="hljs-comment">/* declare tokens */</span><br>%token NUMBER<br>%token ADD SUB MUL DIV ABS<br>%token EOL<br><br>%%<br><br>calclist: <span class="hljs-comment">/* 控规则 */</span><br>    | calclist <span class="hljs-built_in">exp</span> EOL &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;= %d\n&quot;</span>, $<span class="hljs-number">2</span>); &#125;<br>    ;<br><br><span class="hljs-built_in">exp</span>: factor <span class="hljs-keyword">default</span> $$ = $<span class="hljs-number">1</span><br>    | <span class="hljs-built_in">exp</span> ADD factor &#123; $$ = $<span class="hljs-number">1</span> + $<span class="hljs-number">3</span>; &#125;<br>    | <span class="hljs-built_in">exp</span> SUB factor &#123; $$ = $<span class="hljs-number">1</span> - $<span class="hljs-number">3</span>; &#125;<br>    ;<br><br>factor: term <span class="hljs-keyword">default</span> $$ = $<span class="hljs-number">1</span><br>    | factor MUL term &#123; $$ = $<span class="hljs-number">1</span> * $<span class="hljs-number">3</span>; &#125;<br>    | factor DIV term &#123; $$ = $<span class="hljs-number">1</span> / $<span class="hljs-number">3</span>; &#125;<br>    ;<br><br>term: NUMBER <span class="hljs-keyword">default</span> $$ = $<span class="hljs-number">1</span><br>    | ABS term &#123; $$ = $<span class="hljs-number">2</span> &gt;= <span class="hljs-number">0</span>? $<span class="hljs-number">2</span> : - $<span class="hljs-number">2</span>; &#125;<br>    ;<br>%%<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    yyparse();<br>&#125;<br>yyerror(<span class="hljs-type">char</span> *s)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;error: %s\n&quot;</span>, s);<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>bison 程序由哪几部分组成？</p></blockquote><ul><li><p>声明部分</p></li><li><p>规则部分</p></li><li><p>C 代码部分</p></li><li><p>声明部分包含了会被原样拷贝到目标分析程序开头的 C 代码，同样也通过<code>%&#123;</code> 和 <code>&#125;%</code> 来声明。随后是 <code>%token</code>记号声明，以便于告诉 bison在语法分析程序中记号的名称。通常来说，记号总是使用大写字母。任何没有声明为记号的语法符号必须出现在至少一条规则的左边。</p></li><li><p>第二部分包含了通过简单的 BNF 定义的规则。bison使用单一的冒号而不是<code>::=</code>，同时由于行间隔并不是那么明显，分号被用来表示规则的结束。同样，像flex 那样，C 的动作代码在每条规则之后用花括号括起。</p><ul><li>目标符号（冒号左边的语法符号）的值在动作代码中用 <code>$$</code>代替，右边语法符号的语义值依次为<code>$1</code>、<code>$2</code>，直到这条规则的结束。当词法分析器返回记号时，记号值总是储存在<code>yyval</code> 中。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 计算器的最简版本 fb1-5.y */</span><br>%&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>%&#125;<br><br><span class="hljs-comment">/* declare tokens */</span><br>%token NUMBER<br>%token ADD SUB MUL DIV ABS<br>%token EOL<br><br>%%<br><br>calclist: <span class="hljs-comment">/* 空规则 */</span><br> | calclist <span class="hljs-built_in">exp</span> EOL &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;= %d\n&quot;</span>, $<span class="hljs-number">2</span>); &#125;<br> ;<br><br><span class="hljs-built_in">exp</span>: factor<br> | <span class="hljs-built_in">exp</span> ADD factor &#123; $$ = $<span class="hljs-number">1</span> + $<span class="hljs-number">3</span>; &#125;<br> | <span class="hljs-built_in">exp</span> SUB factor &#123; $$ = $<span class="hljs-number">1</span> - $<span class="hljs-number">3</span>; &#125;<br> ;<br><br>factor: term<br> | factor MUL term &#123; $$ = $<span class="hljs-number">1</span> * $<span class="hljs-number">3</span>; &#125;<br> | factor DIV term &#123; $$ = $<span class="hljs-number">1</span> / $<span class="hljs-number">3</span>; &#125;<br> ;<br><br>term: NUMBER<br> | ABS term &#123; $$ = $<span class="hljs-number">2</span> &gt;= <span class="hljs-number">0</span>? $<span class="hljs-number">2</span> : - $<span class="hljs-number">2</span>; &#125;<br> ;<br>%%<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    yyparse();<br>&#125;<br>yyerror(<span class="hljs-type">char</span> *s)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;error: %s\n&quot;</span>, s);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* fb1-5.l */</span><br>%&#123;<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fb1-5.tab.h&quot;</span></span><br><br><span class="hljs-type">int</span> yylval;<br>%&#125;<br>%%<br><span class="hljs-string">&quot;+&quot;</span>     &#123; <span class="hljs-keyword">return</span> ADD; &#125;<br><span class="hljs-string">&quot;-&quot;</span>     &#123; <span class="hljs-keyword">return</span> SUB; &#125;<br><span class="hljs-string">&quot;*&quot;</span>     &#123; <span class="hljs-keyword">return</span> MUL; &#125;<br><span class="hljs-string">&quot;/&quot;</span>     &#123; <span class="hljs-keyword">return</span> DIV; &#125;<br><span class="hljs-string">&quot;|&quot;</span>     &#123; <span class="hljs-keyword">return</span> ABS; &#125;<br>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]+  &#123; yylval = atoi(yytext); <span class="hljs-keyword">return</span> NUMBER; &#125;<br>\n      &#123; <span class="hljs-keyword">return</span> EOL; &#125;<br>[ \t]   &#123; <span class="hljs-comment">/* 忽略空白字符 */</span> &#125;<br>.       &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Mystery character %c\n&quot;</span>, *yytext); &#125;<br>%%<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PotPlayer 截屏相关</title>
    <link href="/2021/11/01/PotPlayer-%E6%88%AA%E5%B1%8F%E7%9B%B8%E5%85%B3/"/>
    <url>/2021/11/01/PotPlayer-%E6%88%AA%E5%B1%8F%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>这里主要有两个要注意的地方，</p><ul><li>1）截屏快捷键，<code>Ctrl + Alt + E</code></li><li>2）截图默认存放的位置<ul><li>要么是 <code>D:Program FIles\DAUM\PotPlayer\Capture</code></li><li>要么是<code>C:\Users\17309\AppData\Roaming\PotPlayerMini64\Capture</code></li></ul></li></ul><p>注意, 里面有一个选项是同时截取字幕(如果有的话), 这个默认是关闭的,如果有需要截字幕的要仔细看一下.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20201206205824.png" /></p><p>附: 截图默认存放位置</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20201206210401.png" /></p><p><img src="https://i.imgur.com/YmBSee0.png" /></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客园让人失望</tag>
      
      <tag>软件使用</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 在有 Windows 双系统的情况下更换微软雅黑字体</title>
    <link href="/2021/10/30/Ubuntu-%E5%9C%A8%E6%9C%89-Windows-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E6%9B%B4%E6%8D%A2%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91%E5%AD%97%E4%BD%93/"/>
    <url>/2021/10/30/Ubuntu-%E5%9C%A8%E6%9C%89-Windows-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E6%9B%B4%E6%8D%A2%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>此次操作的 Ubuntu 版本是 Ubuntu20.04。</p><h1 id="安装">安装</h1><p>首先，找到 Windows 安装的磁盘分区：</p><p><img src="https://i.imgur.com/pZGliv6.png" /></p><p><img src="https://i.imgur.com/j1pUc1X.png" /></p><p>然后，在 <code>C:\Windows</code> 目录下打开 Terminal，然后，将所有的Windows 字体复制到 <code>/usr/share/fonts</code>目录下，并使用命令安装字体：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo mkdir /usr/share/fonts/WindowsFonts<br>sudo cp Fonts/* /usr/share/fonts/WindowsFonts<br>sudo chmod 755 /usr/share/fonts/WindowsFonts/*<br></code></pre></div></td></tr></table></figure><p>最后，使用命令重新生成 fontconfig 缓存：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo fc-cache<br></code></pre></div></td></tr></table></figure><h1 id="使用">使用</h1><p>在命令行打开 gnome-tweaks</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gnome-tweaks<br></code></pre></div></td></tr></table></figure><p>然后，在相关的选项里面进行修改字体即可：</p><p><img src="https://i.imgur.com/VzUW5hh.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Python Cookbook》第二章：字符串和文本学习札记</title>
    <link href="/2021/10/23/%E3%80%8APython-Cookbook%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%96%87%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/23/%E3%80%8APython-Cookbook%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%96%87%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>首先要说一下 Python 的 r 前缀：</p><blockquote><p>Python 的 r 前缀表示原始字符串（rawstring），就是字面意义上的字符串，<code>\</code>这个符号并不表示转义。比如 <code>r'\n'</code>表示的是一个反斜杠和一个字母 n。如果不加 <code>r</code> 即<code>'\n'</code>，那么 <code>\</code> 就表示转义，<code>\n</code>表示一个换行符。可以把 <code>r'\n'</code> 理解为<code>'\\n'</code>。</p></blockquote><p>然后，开始阅读。</p><h1 id="使用多个界定符分割字符串">1、使用多个界定符分割字符串</h1><blockquote><p>将一个字符串分割成多个字段，但是分隔符（还有周围的空格）并不是固定的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; line = <span class="hljs-string">&#x27;asdf fjdk; afed, fjek, asdf, foo&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import re</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; re.split(r<span class="hljs-string">&#x27;[;,\s]\s*&#x27;</span>, line)</span><br>[&#x27;asdf&#x27;, &#x27;fjdk&#x27;, &#x27;afed&#x27;, &#x27;fjek&#x27;, &#x27;asdf&#x27;, &#x27;foo&#x27;]<br></code></pre></div></td></tr></table></figure><p>这段代码中的正则表达的含义是：分隔符可以是逗号、分号或者是空格，并且后面紧跟着任意个空格。</p><p>我们稍微改动一下，再测试一下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; line = <span class="hljs-string">&#x27;asdf fjdk;; afed;, fjek, asdf, foo&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; re.split(r<span class="hljs-string">&#x27;[;,\s]\s*&#x27;</span>, line)</span><br>[&#x27;asdf&#x27;, &#x27;fjdk&#x27;, &#x27;&#x27;, &#x27;afed&#x27;, &#x27;&#x27;, &#x27;fjek&#x27;, &#x27;asdf&#x27;, &#x27;foo&#x27;]<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; line = <span class="hljs-string">&#x27;asdf fjdk;; afed;, fjek, asdf, foo&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; re.split(r<span class="hljs-string">&#x27;[;,\s]+\s*&#x27;</span>, line)</span><br>[&#x27;asdf&#x27;, &#x27;fjdk&#x27;, &#x27;afed&#x27;, &#x27;fjek&#x27;, &#x27;asdf&#x27;, &#x27;foo&#x27;]<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; re.split(r<span class="hljs-string">&#x27;[;,\s]*\s*&#x27;</span>, line)</span><br>[&#x27;&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;, &#x27;f&#x27;, &#x27;&#x27;, &#x27;f&#x27;, &#x27;j&#x27;, &#x27;d&#x27;, &#x27;k&#x27;, &#x27;&#x27;, &#x27;a&#x27;, &#x27;f&#x27;, &#x27;e&#x27;, &#x27;d&#x27;, &#x27;&#x27;, &#x27;f&#x27;, &#x27;j&#x27;, &#x27;e&#x27;, &#x27;k&#x27;, &#x27;&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;, &#x27;f&#x27;, &#x27;&#x27;, &#x27;f&#x27;, &#x27;o&#x27;, &#x27;o&#x27;, &#x27;&#x27;]<br></code></pre></div></td></tr></table></figure><p>按：解释一下 <code>re.split(r'[;,\s]*\s*', line)</code>中正则的含义：</p><p>"asdf fjdk" 从第一个 f开始，先匹配一个空字符，然后匹配后面的空格符，这样就是两个分隔符，这两个分隔符中间会有一个空字符被加入到结果列表中；同理，"fjdk;;afde" 中间被正则匹配到的分隔符是一个空字符 '' 和 ";; "。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; line = <span class="hljs-string">&#x27;asdf fjdk;; afed;, fjek, asdf, foo&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fields = re.split(r<span class="hljs-string">&#x27;(;|,|\s)\s*&#x27;</span>, line)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fields</span><br>[&#x27;asdf&#x27;, &#x27; &#x27;, &#x27;fjdk&#x27;, &#x27;;&#x27;, &#x27;afed&#x27;, &#x27;,&#x27;, &#x27;fjek&#x27;, &#x27;,&#x27;, &#x27;asdf&#x27;, &#x27;,&#x27;, &#x27;foo&#x27;]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些值得整理的链接（url）</title>
    <link href="/2021/10/23/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E6%95%B4%E7%90%86%E7%9A%84%E9%93%BE%E6%8E%A5%EF%BC%88url%EF%BC%89/"/>
    <url>/2021/10/23/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E6%95%B4%E7%90%86%E7%9A%84%E9%93%BE%E6%8E%A5%EF%BC%88url%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>安装 Windows 和 Ubuntu 双系统：<ahref="https://regulus.cc/2019/10/05/Windows10+Ubuntu18.04%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E6%8C%87%E5%8C%97/"class="uri">https://regulus.cc/2019/10/05/Windows10+Ubuntu18.04%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E6%8C%87%E5%8C%97/</a></p><p>安装双系统时，Windows压缩卷操作中，可压缩的空间远远小于实际的空闲的空间的解决办法：<ahref="https://blog.csdn.net/CoutCodes/article/details/104975783"class="uri">https://blog.csdn.net/CoutCodes/article/details/104975783</a></p>]]></content>
    
    
    <categories>
      
      <category>URL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>URL</tag>
      
      <tag>收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 解决浏览器无法播放视频的问题</title>
    <link href="/2021/10/22/Ubuntu%20%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/22/Ubuntu%20%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>今天装这个 Ubuntu20系统，又遇到了一个问题，就是浏览器中无法播放视频。以前遇到过两次，所以我隐隐约约记得是安装什么ffmpg之类的东西，但是因为之前没有记录，所以还是得去谷歌，然后搜到了一堆安装flash 这个不好的东西的，但是凭着印象，还是找到了一篇安装 ffmpg的，这一次，就要把它给记录下来了。</p><p>简单一点，就几个命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt update<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt install ffmpeg<br></code></pre></div></td></tr></table></figure><p>安装好之后可以使用以下命令查看一下是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ffmpeg -version<br></code></pre></div></td></tr></table></figure><hr /><p>参考：</p><p>1、<ahref="https://www.myfreax.com/how-to-install-ffmpeg-on-ubuntu-18-04/"class="uri">https://www.myfreax.com/how-to-install-ffmpeg-on-ubuntu-18-04/</a></p>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的 switch 的用法</title>
    <link href="/2021/10/04/Java-%E4%B8%AD%E7%9A%84-switch-%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2021/10/04/Java-%E4%B8%AD%E7%9A%84-switch-%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>今天适逢学弟问这个问题，这里就记录一下。说实话，关于<code>switch</code>，我之前也是有点犯迷糊的，今天翻阅《On Java8》，发现写得没有 Oracle的官方教程好。所以，就把官方教程中的例子给拿出来咀嚼一下。</p><h1 id="switch-语句">Switch 语句</h1><p>最常用的也是最简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        String monthString;<br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  monthString = <span class="hljs-string">&quot;January&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  monthString = <span class="hljs-string">&quot;February&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  monthString = <span class="hljs-string">&quot;March&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  monthString = <span class="hljs-string">&quot;April&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  monthString = <span class="hljs-string">&quot;May&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  monthString = <span class="hljs-string">&quot;June&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:  monthString = <span class="hljs-string">&quot;July&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:  monthString = <span class="hljs-string">&quot;August&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:  monthString = <span class="hljs-string">&quot;September&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>: monthString = <span class="hljs-string">&quot;October&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>: monthString = <span class="hljs-string">&quot;November&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>: monthString = <span class="hljs-string">&quot;December&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>: monthString = <span class="hljs-string">&quot;Invalid month&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>        &#125;<br>        System.out.println(monthString);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">August</span><br></code></pre></div></td></tr></table></figure><p>下面是关于 <code>break</code> 的用法的解释</p><blockquote><p>Another point of interest is the break statement. Each breakstatement terminates the enclosing switch statement. Control flowcontinues with the first statement following the switch block. The breakstatements are necessary because without them, statements in switchblocks fall through: All statements after the matching case label areexecuted in sequence, regardless of the expression of subsequent caselabels, until a break statement is encountered. The programSwitchDemoFallThrough shows statements in a switch block that fallthrough.</p></blockquote><p>如果没有 <code>break</code> 的话，那么，当程序匹配到一个<code>case</code>时，下面的语句块（statement）将都会得到执行（不管下面的<code>case</code> 是什么情况，其中包含的语句块都会被执行），直至遇到<code>break</code> 为止。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemoFallThrough</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        java.util.ArrayList&lt;String&gt; futureMonths =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.ArrayList&lt;String&gt;();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  futureMonths.add(<span class="hljs-string">&quot;January&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  futureMonths.add(<span class="hljs-string">&quot;February&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  futureMonths.add(<span class="hljs-string">&quot;March&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  futureMonths.add(<span class="hljs-string">&quot;April&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  futureMonths.add(<span class="hljs-string">&quot;May&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  futureMonths.add(<span class="hljs-string">&quot;June&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:  futureMonths.add(<span class="hljs-string">&quot;July&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:  futureMonths.add(<span class="hljs-string">&quot;August&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:  futureMonths.add(<span class="hljs-string">&quot;September&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>: futureMonths.add(<span class="hljs-string">&quot;October&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>: futureMonths.add(<span class="hljs-string">&quot;November&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>: futureMonths.add(<span class="hljs-string">&quot;December&quot;</span>);<br>                     <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (futureMonths.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Invalid month number&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (String monthName : futureMonths) &#123;<br>               System.out.println(monthName);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">August</span><br><span class="hljs-attribute">September</span><br><span class="hljs-attribute">October</span><br><span class="hljs-attribute">November</span><br><span class="hljs-attribute">December</span><br></code></pre></div></td></tr></table></figure><p>一个语句块可以有多个 <code>case</code> 标签，这些个 <code>case</code>之间是“或”的关系。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                numDays = <span class="hljs-number">31</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                numDays = <span class="hljs-number">30</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span> (((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &amp;&amp; <br>                     !(year % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>))<br>                     || (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>))<br>                    numDays = <span class="hljs-number">29</span>;<br>                <span class="hljs-keyword">else</span><br>                    numDays = <span class="hljs-number">28</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;Invalid month.&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Number of Days = &quot;</span><br>                           + numDays);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">Number of Days <span class="hljs-operator">=</span> <span class="hljs-number">29</span><br></code></pre></div></td></tr></table></figure><hr /><p>参考：</p><p>1、<ahref="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html"class="uri">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java 语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机补码一位乘法</title>
    <link href="/2021/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A1%A5%E7%A0%81%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95/"/>
    <url>/2021/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A1%A5%E7%A0%81%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>补码乘法由英国人布斯（Booth）于 1950年发明，又称为布斯（Booth）算法。</p><h1 id="booth-算法的推导">1、Booth 算法的推导</h1><p>设 <span class="math inline">\([x]_{补} =x_0.x_1x_2...x_n\)</span>，<span class="math inline">\([y]_{补} =y_0.y_1y_2...y_n\)</span>。下面分两种情况来推导 Booth 算法。</p><ol type="1"><li>设被乘数 <span class="math inline">\(x\)</span> 符号任意，乘数 <spanclass="math inline">\(y\)</span> 符号为正，则：</li></ol><p><span class="math display">\[[x]_{补} = x_0.x_1x_2...x_n \quad [y]_{补} = 0.y_1y_2...y_n\]</span></p><p>根据补码的定义：</p><p><span class="math display">\[\begin{equation}\begin{split}&amp;[x]_{补} = (2 + x) \; mod \; 2 = (2^{n + 1} + x) \; mod \; 2（注1） \\&amp;[y]_{补} = y\end{split}\end{equation}\]</span></p><p><span class="math display">\[\begin{equation}\begin{split}[x]_{补} \times [y]_{补} &amp;= [(2^{n + 1} + x) \; mod \; 2] \times y\\&amp;= [(2^{n + 1} + x) \times y] \; mod \; 2 \\&amp;= (2^{n + 1} \times y + x \times y) \; mod \; 2 \\&amp;= (2 \times y_1y_2...y_n + x \times y) \; mod \; 2 \\&amp;（这一块的证明见注 2）\end{split}\end{equation}\]</span></p><p>所以，</p><p><span class="math display">\[\begin{matrix}[x]_{补} \times [y]_{补} = (2 + x \times y) \; mod \; 2 = [x \timesy]_{补} \\[x \times y]_{补} = [x]_{补} \times y \qquad \qquad (1)\end{matrix}\]</span></p><ol start="2" type="1"><li>被乘数 <span class="math inline">\(x\)</span> 符号任意，乘数 <spanclass="math inline">\(y\)</span> 符号为负，则根据补码定义：</li></ol><p><span class="math display">\[[x]_{补} = x_0.x_1x_2...x_n \quad [y]_{补} = 1.y_1y_2...y_n = 2 + y\]</span></p><p>所以：</p><p><span class="math display">\[\begin{matrix}y = [y]_{补} - 2 = 1.y_1y_2...y_n - 2 = 0.y_1y_2...y_n - 1 \\x \times y = x \times (0.y_1y_2...y_n - 1) = x \times 0.y_1y_2...y_n - x\qquad \qquad (2)\end{matrix}\]</span></p><p>对式 (2) 两边同时求补，并利用补码减法公式展开等式右边项可得：</p><p><span class="math display">\[[x \times y]_{补} = [x \times 0.y_1y_2...y_n]_{补} - [x]_{补} \qquad\qquad (3)\]</span></p><p>根据式 (1) 可得：</p><p><span class="math display">\[[x \times y]_{补} = [x]_{补} \times 0.y_1y_2...y_n - [x]_{补} \qquad\qquad (4)\]</span></p><p>将式 (1) 和式 (4) 综合起来，引入 <spanclass="math inline">\(y_0\)</span>位，即可得补码一位乘法的统一算式，即：</p><p><span class="math display">\[[x \times y]_{补} = [x]_{补} \times 0.y_1y_2...y_n - [x]_{补} \times y_0\qquad \qquad (5)\]</span></p><p>对于式 (5) 右边第二项 <span class="math inline">\([x]_{补} \timesy_0\)</span>，存在如下结论：</p><p>当 <span class="math inline">\(y\)</span> 为正时，<spanclass="math inline">\(y_0 = 0\)</span>，该项不存在；当 <spanclass="math inline">\(y\)</span> 为负时 <span class="math inline">\(y_0= 1\)</span>，该项为 <span class="math inline">\([x]_{补}\)</span>。</p><p>总结下来，就是以下的式子：</p><p><span class="math display">\[\begin{equation}\begin{split}&amp;[x \times y]_{补} = [x]_{补} \times y &amp; \quad y \; 符号为正 \\&amp;[x \times y]_{补} = [x]_{补} \times 0.y_1y_2...y_n - [x]_{补} &amp;\quad y 符号为负\end{split}\end{equation}\]</span></p><p><span class="math display">\[[x \times y]_{补} = [x]_{补} \times 0.y_1y_2...y_n - [x]_{补} \times y_0\quad 不考虑 \; y \; 的符号\]</span></p><p><strong>接下来是推导从式 (5)演变成适合计算机计算的迭代公式。</strong></p><p>为了方便，我们把上面的式 (5) 放在这里：</p><p><span class="math display">\[[x \times y]_{补} = [x]_{补} \times 0.y_1y_2...y_n - [x]_{补} \times y_0\]</span></p><p>上面的式子可以展开成下面的形式：</p><p><span class="math display">\[[x \times y]_{补} = [x]_{补} \times [(y_1 - y_0) + 2^{-1}(y_2 - y_1) +2^{-2}(y_3 - y_2) + \cdots + 2^{-(n - 1)}(y_n - y_{n - 1}) + 2^{-n}(0 -y_n)]\]</span></p><p>然后，设 <span class="math inline">\([z_0]_{补} =0\)</span>，接着，</p><p><span class="math display">\[\begin{equation}\begin{split}[z_1]_{补} &amp;= 2^{-1} \{ [z_0]_{补} + (y_{n + 1} - y_n)[x]_{补} \} \\[z_2]_{补} &amp;= 2^{-1} \{ [z_1]_{补} + (y_{n} - y_{n - 1})[x]_{补} \}\\\cdots &amp;\cdots \\[z_n]_{补} &amp;= 2^{-1} \{ [z_{n - 1}]_{补} + (y_{2} - y_1)[x]_{补} \}\\[x \times y]_{补} &amp;= [z_{n + 1}]_{补} = 2^{-1} \{ [z_n]_{补} + (y_1- y_0)[x]_{补} \} \\\end{split}\end{equation}\]</span></p><p>上面的推导可以类比于高中时候学过的二项式：</p><p><span class="math display">\[\begin{aligned}f(x) &amp;= a_0 + a_1x + a_2x^2 + a_3x^3 \\&amp;= a_0 + x(a_1 + x(a_2 + x(a_3 + 0)))\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}S_0 &amp;= 0 \\S_1 &amp;= x(S_0 + a_3) \\S_2 &amp;= x(S_1 + a_2) \\S_3 &amp;= x(S_2 + a_1) \\S_4 &amp;= S_3 + a_0\end{aligned}\]</span></p><p>当然，其中有一点差异，就是我们的式子中，比如说</p><p><span class="math display">\[[z_1]_{补} = 2^{-1} \{ [z_0]_{补} + (y_{n + 1} - y_n)[x]_{补} \}\]</span></p><p>有一项 <span class="math inline">\((y_{n + 1} - y_n)\)</span>的后面还乘上了一个 <spanclass="math inline">\([x]_{补}\)</span>，这个我一开始也不理解，后来经同学点拨，我决定将推导过程中的前几个式子给展开看一下，结果发现每一个式子都可以把<span class="math inline">\([x]_{补}\)</span>给提出来，那么，这个问题自然就解决了。</p><p><strong>算法描述</strong></p><ul><li>在 <span class="math inline">\([y]_{补}\)</span> 后添一个 <spanclass="math inline">\(0\)</span> 作为 <span class="math inline">\(y_{n +1}\)</span>，令部分积为 <span class="math inline">\(0\)</span></li><li>如果 <span class="math inline">\(y_{n + 1} = y_n\)</span>，部分积<span class="math inline">\(+ \; 0\)</span>，并将结果右移一位</li><li>如果 <span class="math inline">\(y_{n + 1} &lt; y_n\)</span>，部分积<span class="math inline">\(+ \;[-x]_{补}\)</span>，并将结果右移一位</li><li>如果 <span class="math inline">\(y_{n + 1} &gt; y_n\)</span>，部分积<span class="math inline">\(+ \;[x]_{补}\)</span>，并将结果右移一位</li></ul><h1 id="举例应用">2、举例应用</h1><p>已知 <span class="math inline">\(X = +0..1101\)</span>，<spanclass="math inline">\(Y = +0.1011\)</span>，用补码一位乘法求 <spanclass="math inline">\(X \times Y\)</span>.</p><p><span class="math display">\[解：[X]_{补} = 0.1101 \quad [Y]_{补} = 0.1011 \quad [-X]_{补} = 1.0011\]</span></p><p><span class="math display">\[\begin{equation}\begin{split}&amp;部分积 \qquad &amp; 乘数 \qquad \quad &amp; 说明 \\&amp;00.0000 \qquad &amp; 0.10110 &amp; \\{+} \; &amp;11.0011 \qquad &amp;  &amp; Y_{n + 1} &lt; Y_n, 部分积+[-X]_{补}  \\···&amp; ········&amp; &amp; \\&amp;11.0011 \qquad &amp;  &amp;  \\\rightarrow \; &amp;11.1001 \qquad &amp; 1001011 &amp; 将结果右移一位 \\{+} \; &amp;00.0000 \qquad &amp;  &amp; Y_{n + 1} = Y_n, 部分积 + 0 \\···&amp; ········ &amp; &amp; \\&amp;11.1001 \qquad &amp;  &amp;  \\\rightarrow \; &amp;11.1100 \qquad &amp; 11.0101 &amp; 将结果右移一位 \\{+} \; &amp;00.1101 \qquad &amp;  &amp; Y_{n + 1} &gt; Y_n, 部分积 +[X]_{补} \\···&amp; ········ &amp; &amp; \\&amp;00.1001 \qquad &amp;  &amp;  \\\rightarrow \; &amp;00.0100 \qquad &amp; 111.010 &amp; 将结果右移一位 \\{+} \; &amp;11.0011 \qquad &amp;  &amp; Y_{n + 1} &lt; Y_n, 部分积 +[-X]_{补} \\···&amp; ········ &amp; &amp; \\&amp;11.0111 \qquad &amp;  &amp;  \\\rightarrow \; &amp;11.1011 \qquad &amp; 1111.01 &amp; 将结果右移一位 \\{+} \; &amp;00.1101 \qquad &amp;  &amp; Y_{n + 1} &gt; Y_n, 部分积 +[X]_{补} \\···&amp; ········ &amp; &amp; \\&amp;00.1000 \qquad &amp;  &amp;\end{split}\end{equation}\]</span></p><p>所以</p><p><span class="math display">\[\begin{equation}\begin{split}[XY]_{补} &amp;= 0.10001111 \\XY &amp;= 0.10001111\end{split}\end{equation}\]</span></p><hr /><p>注释：</p><p>1、小数的补码，按照定义应该是：</p><p>设二进制小数 <span class="math inline">\(X = \pm0.x_{-1}x_{-2}...x_{-m}\)</span>，则其补码定义为</p><p><span class="math display">\[[X]_{补} =\left\{\begin{matrix}\begin{aligned}&amp;X &amp; 0 &amp; \leqslant X &lt; 1 \\&amp;2 + X &amp; -1 &amp; \leqslant X &lt; 0 \\\end{aligned}\end{matrix}\right.\]</span></p><p>上面的式子可以归结成一个式子：</p><p><span class="math display">\[[X]_{补} = (2 + X) \; mod \; 2 \qquad -1 \leqslant X &lt; 1\]</span></p><p>2、在上面的推导过程中，隐含地用了下面的关系：</p><p>设 $ -1 &lt; x, y &lt; 1 $，则有</p><p><span class="math display">\[[(2^{n + 1} + x) \; mod \; 2] \times y = [(2^{n + 1} + x) \times y] \;mod \; 2\]</span></p><p>下面我门来证明这个式子。</p><ol type="1"><li><span class="math inline">\(x \in (0, 1)\)</span>，</li></ol><p><span class="math display">\[左式 = x \times y\]</span></p><p>对于模运算，有这样的运算法则：</p><p><span class="math display">\[(a \times b) \; mod \; p = [(a \; mod \; p) \times (b \; mod \; p)] \;mod \; p\]</span></p><p>所以有</p><p><span class="math display">\[[(2^{n + 1} + x) \; mod \; 2 \times y \; mod \; 2] \; mod \; 2 = (x\times y) \; mod \; 2 = x \times y\]</span></p><p>所以有 <span class="math inline">\(左式 = 右式\)</span>。</p><ol start="2" type="1"><li><span class="math inline">\(x \in (-1, 0)\)</span>，</li></ol><p><span class="math display">\[左式 = (2 + x) \times y\]</span></p><p><span class="math display">\[右式 = [(2 + x) \times y] \; mod \; 2 = (2 + x) \times y\]</span></p><p>所以有 <span class="math inline">\(左式 = 右式\)</span>。</p><p>综上，原式的正确性得证。</p><p>对于边界情况，即 <span class="math inline">\(x = 0 \; or \; 1 \; or\; -1\)</span>时候，我想，计算机应该有更好的方法直接就把结果给计算出来了，这里就不再赘述。</p><h1 id="电路图逻辑实现">3、电路图逻辑实现</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210925182650.png"alt="补码一位乘法逻辑结构图" /></p><p>首先说明一下正方形方框充当的是缓冲器的角色。</p><p>然后，解释一下下面的部分：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210925182928.png" /></p><ul><li>左边，当 <span class="math inline">\(y_{n + 1} &gt; y_n\)</span>时，与门输出为 1，这时，X 直接送上去；</li><li>右边，当 <span class="math inline">\(y_{n + 1} &lt; y_n\)</span>时。与门输出为 1，这时，X 按位取反加一，利用的是：<spanclass="math inline">\([-X]_{补} = [X]_{补}\)</span>先按位取反然后在末尾加一。</li></ul><p>然后，图中的 <span class="math inline">\(R_0, \; R_1\)</span>表示的寄存器（Register），在实际运作过程中，P 和 Y 都要移位。</p><p>最后，这个图仅仅是逻辑实现的示意图，其中还是隐藏了一些具体的细节的。</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex 数学公式对齐样例整理</title>
    <link href="/2021/09/15/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%AF%B9%E9%BD%90%E6%A0%B7%E4%BE%8B%E6%95%B4%E7%90%86/"/>
    <url>/2021/09/15/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%AF%B9%E9%BD%90%E6%A0%B7%E4%BE%8B%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="样例一">样例一</h3><p>让花括号中第二列中第一行的小于等于号和下一行的小于号对齐。</p><p>代码：</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br>[X]<span class="hljs-built_in">_</span>&#123;原&#125; = <br><span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br>    <span class="hljs-keyword">\begin</span>&#123;matrix&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;align*&#125;<br><span class="hljs-built_in">&amp;</span>X <span class="hljs-built_in">&amp;</span> 0 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\leqslant</span> X &lt; 2<span class="hljs-built_in">^</span>n <span class="hljs-keyword">\\</span> <br><span class="hljs-built_in">&amp;</span>2<span class="hljs-built_in">^</span>n - X <span class="hljs-built_in">&amp;</span> -2<span class="hljs-built_in">^</span>n <span class="hljs-built_in">&amp;</span> &lt; X <span class="hljs-keyword">\leqslant</span> 0<br>    <span class="hljs-keyword">\end</span>&#123;align*&#125;<br>    <span class="hljs-keyword">\end</span>&#123;matrix&#125;<br><span class="hljs-keyword">\right</span>.<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[[X]_{原} =\left\{    \begin{matrix}    \begin{align*}&amp;X &amp; 0 &amp; \leqslant X &lt; 2^n \\&amp;2^n - X &amp; -2^n &amp; &lt; X \leqslant 0    \end{align*}    \end{matrix}\right.\]</span></p><p>参考：<ahref="https://tex.stackexchange.com/questions/145657/align-equation-left">stackexchange</a>，这里主要是参考了回答中的<code>\begin&#123;align*&#125;</code> 的用法。</p><h3 id="样例二">样例二</h3><p>写两行等式，然后让这两行等式保持左对齐。</p><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;aligned&#125;<br><span class="hljs-built_in">&amp;</span> [X<span class="hljs-built_in">_</span>1]<span class="hljs-built_in">_</span>&#123;原&#125; = 0.1011 <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> [X<span class="hljs-built_in">_</span>2]<span class="hljs-built_in">_</span>&#123;原&#125; = 1 - （-0.1011） = 1.1011<br><span class="hljs-keyword">\end</span>&#123;aligned&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[\begin{aligned}&amp; [X_1]_{原} = 0.1011 \\&amp; [X_2]_{原} = 1 - （-0.1011） = 1.1011\end{aligned}\]</span></p><p>注：如果不加<code>\begin&#123;aligned&#125; \end&#123;aligned&#125;</code>，那么默认的公式是保持居中显示。</p><hr /><p>参考：<ahref="https://stackoverflow.com/questions/11296415/how-to-left-align-mathjax-elements">stackoverflow</a>，这里主要是参考了<code>\begin&#123;aligned&#125;</code> 的用法。</p><h3 id="样例三">样例三</h3><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br><span class="hljs-keyword">\begin</span>&#123;split&#125;<br>[X<span class="hljs-built_in">_</span>1]<span class="hljs-built_in">_</span>&#123;原&#125; <span class="hljs-built_in">&amp;</span>= 01011<span class="hljs-keyword">\\</span><br>[X<span class="hljs-built_in">_</span>2]<span class="hljs-built_in">_</span>&#123;原&#125; <span class="hljs-built_in">&amp;</span>=2<span class="hljs-built_in">^</span>4 - (-1011) <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>=10000 + 1101 <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>=11101<br><span class="hljs-keyword">\end</span>&#123;split&#125;<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1]_{原} &amp;= 01011\\[X_2]_{原} &amp;=2^4 - (-1011) \\&amp;=10000 + 1101 \\&amp;=11101\end{split}\end{equation}\]</span></p><p>完整这个效果需要脑袋转一个弯，在这里只需要将等号全部对齐就行了。</p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex 数学公式左对齐写法</title>
    <link href="/2021/09/15/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%B7%A6%E5%AF%B9%E9%BD%90%E5%86%99%E6%B3%95/"/>
    <url>/2021/09/15/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%B7%A6%E5%AF%B9%E9%BD%90%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="需求描述">需求描述</h2><p>写两行等式，然后让这两行等式保持左对齐。</p><h2 id="实现">实现</h2><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;aligned&#125;<br><span class="hljs-built_in">&amp;</span> [X<span class="hljs-built_in">_</span>1]<span class="hljs-built_in">_</span>&#123;原&#125; = 0.1011 <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> [X<span class="hljs-built_in">_</span>2]<span class="hljs-built_in">_</span>&#123;原&#125; = 1 - （-0.1011） = 1.1011<br><span class="hljs-keyword">\end</span>&#123;aligned&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[\begin{aligned}&amp; [X_1]_{原} = 0.1011 \\&amp; [X_2]_{原} = 1 - （-0.1011） = 1.1011\end{aligned}\]</span></p><p>注：如果不加<code>\begin&#123;aligned&#125; \end&#123;aligned&#125;</code>，那么默认的公式是保持居中显示。</p><hr /><p>参考：</p><p>1、<ahref="https://stackoverflow.com/questions/11296415/how-to-left-align-mathjax-elements"class="uri">https://stackoverflow.com/questions/11296415/how-to-left-align-mathjax-elements</a></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机原码、反码和补码</title>
    <link href="/2021/09/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/"/>
    <url>/2021/09/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>时间长了，在上计算机组成原理时，发现这部分的知识又遗忘了。所以还是整理以下，方便以后可以即时回顾，就不用去翻书了。</p><h1 id="原码">1、原码</h1><p>用原码表示带符号的二进制数时，符号位用 0 表示正，1表示负；数值位保持不变。原码表示法又称为符号-数值表示法。</p><h2 id="小数原码的定义">1.1 小数原码的定义</h2><p>设二进制小数 <span class="math inline">\(X = \pm0.x_{-1}x_{-2}...x_{-m}\)</span>，则其原码定义为</p><p><span class="math display">\[[X]_{原} =\left\{    \begin{matrix}    \begin{align*}&amp;X &amp; 0 \leqslant X &lt; 1 \\&amp;1 - X &amp; -1 &lt; X \leqslant 0    \end{align*}    \end{matrix}\right.\]</span></p><p><strong>例</strong>，<span class="math inline">\(X_1 = +0.1011, X_2 =-0.1011\)</span>，求 <span class="math inline">\(X_1\)</span> 和 <spanclass="math inline">\(X_2\)</span> 的原码。</p><p><span class="math display">\[\begin{aligned}&amp; [X_1]_{原} = 0.1011 \\&amp; [X_2]_{原} = 1 - （-0.1011） = 1.1011\end{aligned}\]</span></p><p>根据定义，小数“0”的原码可以表示成 <spanclass="math inline">\(0.0...0\)</span> 或 <spanclass="math inline">\(1.0...0\)</span>.</p><h2 id="整数原码的定义">1.2 整数原码的定义</h2><p>设二进制整数 <span class="math inline">\(X = \pm x_{n - 1}x_{n -2}...x_0\)</span>，则其原码定义为</p><p><span class="math display">\[[X]_{原} =\left\{    \begin{matrix}    \begin{align*}&amp;X &amp; 0 &amp; \leqslant X &lt; 2^n \\&amp;2^n - X &amp; -2^n &amp; &lt; X \leqslant 0    \end{align*}    \end{matrix}\right.\]</span></p><p><strong>例</strong>，<span class="math inline">\(X_1 = +1011, X_2 =-1011\)</span>，求 <span class="math inline">\(X_1\)</span> 和 <spanclass="math inline">\(X_2\)</span> 的原码。</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1]_{原} &amp;= 01011\\[X_2]_{原} &amp;=2^4 - (-1011) \\&amp;=10000 + 1101 \\&amp;=11101\end{split}\end{equation}\]</span></p><p>同样，整数“0”的原码也有两种形式，即 <spanclass="math inline">\(00...0\)</span> 和 <spanclass="math inline">\(10...0\)</span>.</p><h1 id="反码">2、反码</h1><p>用反码表示带符号的二进制数时，符号位与原码相同，即用 0 表示正，用 1表示负；数值位与符号位相关，正数反码的数值位和真值相同，而负数反码的数值位是真值的数值位按位变反。</p><h2 id="小数反码的定义">2.1 小数反码的定义</h2><p>设二进制小数 <span class="math inline">\(X = \pm 0.x_{-1}x_{-2}...x_{-m}\)</span>，则其反码定义为</p><p><span class="math display">\[[X]_{反} =\left\{    \begin{matrix}    \begin{align*}&amp;X &amp; 0 \leqslant X &lt; 1 \\&amp;(2 - 2^{-m}) + X &amp; -1 &lt; X \leqslant 0    \end{align*}    \end{matrix}\right.\]</span></p><p><strong>例</strong>，若 <span class="math inline">\(X_1 = +0.1011,X_2 = -0.1011\)</span>，求 <span class="math inline">\(X_1\)</span> 和<span class="math inline">\(X_2\)</span> 的反码。</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1]_{反} &amp;= 0.1011\\[X_2]_{反} &amp;= 2 - 2^{-4} + X_2 \\&amp;=10.0000 - 0.0001 - 0.1011 \\&amp;=1.0100\end{split}\end{equation}\]</span></p><p>根据定义，小数“0”的反码有两种表示形式，即 <spanclass="math inline">\(0.0...0\)</span> 和 <spanclass="math inline">\(1.1...1\)</span></p><h2 id="整数反码的定义">2.2 整数反码的定义</h2><p>设二进制整数 <span class="math inline">\(X = \pm x_{n - 1}x_{n -2}...x_{0}\)</span>，则其反码为</p><p><span class="math display">\[[X]_{反} =\left\{\begin{matrix}\begin{aligned}&amp;X &amp; 0 &amp; \leqslant X &lt; 2^n \\&amp;(2^{n + 1} - 1) + X &amp; -2^n &amp; &lt; X \leqslant 0 \\\end{aligned}\end{matrix}\right.\]</span></p><p><strong>例</strong>，若 <span class="math inline">\(X_1 = +1011, X_2= -1011\)</span>，求 <span class="math inline">\(X_1\)</span> 和 <spanclass="math inline">\(X_2\)</span> 的反码。</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1]_{反} &amp;= 01001 \\[X_2]_{反} &amp;= (2^5 - 1) + X \\&amp;= (100000 - 1) + (-1001) \\&amp;= 11111 - 1001 \\&amp;= 10110\end{split}\end{equation}\]</span></p><p>同样，整数“0”的反码也有两种形式，即 <spanclass="math inline">\(00...0\)</span> 和 <spanclass="math inline">\(11...1\)</span>。</p><p>反码的加减运算规则如下：</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1 + X_2]_{反} &amp;= [X_1]_{反} + [X_2]_{反} \\[X_1 - X_2]_{反} &amp;= [X_1]_{反} + [-X_2]_{反}\end{split}\end{equation}\]</span></p><p>运算时，若 <span class="math inline">\(X_1 = +0.1110, X_2 =+0.0101\)</span>，则求 <span class="math inline">\(X_1 - X_2\)</span>可以通过反码相加实现。运算如下：</p><p><span class="math display">\[[X_1 - X_2]_{反} = [X_1]_{反} + [-X_1]_{反} = 0.1110 + 1.1010\]</span></p><p><span class="math display">\[\begin{equation}\begin{split}0&amp;.111&amp;0 \\+\quad1&amp;.101&amp;0 \\\hline10&amp;.100&amp;0 \\+\quad\ \ &amp;&amp;1 \\\hline0&amp;.100&amp;1\end{split}\end {equation}\]</span></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210916104233.png" /></p><p>即 <span class="math inline">\([X_1 - X_2]_{反} = 0.1001\)</span></p><p>由于结果的符号为 0，表示是正数，故</p><p><span class="math display">\[X_1 - X_2 = +0.1001\]</span></p><h1 id="补码">3、补码</h1><p>用补码表示带符号的二进制数时，符号位与原码、反码相同，即用 0表示正，用 1表示负；数值位与符号位相关，正数补码的数值位与真值相同，而负数补码的数值位是真值的数值位按位变反，并在最低位加1。</p><h2 id="小数补码的定义">3.1 小数补码的定义</h2><p>设二进制小数 <span class="math inline">\(X = \pm0.x_{-1}x_{-2}...x_{-m}\)</span>，则其补码定义为</p><p><span class="math display">\[[X]_{补} =\left\{\begin{matrix}\begin{aligned}&amp;X &amp; 0 &amp; \leqslant X &lt; 1 \\&amp;2 + X &amp; -1 &amp; \leqslant X &lt; 0 \\\end{aligned}\end{matrix}\right.\]</span></p><p>上面的式子可以归结成一个式子：</p><p><span class="math display">\[[X]_{补} = (2 + X) \; mod \; 2 \qquad -1 \leqslant X &lt; 1\]</span></p><p><strong>例</strong>，若 <span class="math inline">\(X_1 = +0.1011,X_2 = -0.1011\)</span>，则 <span class="math inline">\(X_1\)</span> 和<span class="math inline">\(X_2\)</span> 的补码为</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1]_{补} &amp;= 0.1011 \\[X_2]_{补} &amp;= 2 + X \\&amp;= 10.0000 - 0.1011 \\&amp;= 1.0101\end{split}\end{equation}\]</span></p><p>小数“0”只有一种表示形式，即 <spanclass="math inline">\(0.0...0\)</span>。</p><h2 id="整数补码的定义">3.2 整数补码的定义</h2><p>设二进制整数 <span class="math inline">\(X = \pm x_{n - 1}x_{n -2}...x_0\)</span>，则其补码定义为</p><p><span class="math display">\[[X]_{补} =\left\{\begin{matrix}\begin{aligned}&amp;X &amp; 0 &amp; \leqslant X &lt; 2^n \\&amp;2^{n + 1} + X &amp; -2^n &amp; \leqslant X &lt; 0 \\\end{aligned}\end{matrix}\right.\]</span></p><p><strong>例</strong>，若 <span class="math inline">\(X_1 = + 1010, X_2= -1010\)</span>，求 <span class="math inline">\(X_1\)</span> 和 <spanclass="math inline">\(X_2\)</span> 的补码。</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1]_{补} &amp;= 01011 \\[X_2]_{补} &amp;= 2^5 + X \\&amp;= 100000 - 1010 \\&amp;= 10110\end{split}\end{equation}\]</span></p><p>同样，整数“0”的补码也只有一种表示形式，即 <spanclass="math inline">\(00...0\)</span>。</p><p>补码的加减运算规则如下：</p><p><span class="math display">\[\begin{equation}\begin{split}[X_1 + X_2]_{补} &amp;= [X_1]_{补} + [X_2]_{补} \\[X_1 - X_2]_{补} &amp;= [X_1]_{补} + [-X_2]_{补}\end{split}\end{equation}\]</span></p><p>运算时，符号位和数值位一样参加运算，若符号位有进位产生。则应将进位丢掉才能得到正确结果。</p><p><strong>例如</strong>，若 <span class="math inline">\(X_1 = -1001,X_2 = +0011\)</span>，则采用补码求 <span class="math inline">\(X_1 -X_2\)</span> 的运算如下：</p><p><span class="math display">\[[X_1 - X_2]_{补} = [X_1]_{补} + [-X_2]_{补} = 10111 + 11101\]</span></p><p><span class="math display">\[\begin{equation}\begin{split}10111 \\+\quad11101 \\\hline110100 \\\end{split}\end {equation}\]</span></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210916111814.png" /></p><p>即 <span class="math inline">\([X_1 - X_2]_{补} = 10100\)</span></p><p>由于结果的符号位为 1，表示是负数，故</p><p><span class="math display">\[X_1 - X_2 = -1100\]</span></p><hr /><p>参考：</p><p>1、《数字逻辑 第四版》（华中科技大学出版社）</p>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字逻辑</tag>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>@Autowired 注解作用于 Constructor</title>
    <link href="/2021/08/09/Autowired-%E6%B3%A8%E8%A7%A3%E4%BD%9C%E7%94%A8%E4%BA%8E-Constructor/"/>
    <url>/2021/08/09/Autowired-%E6%B3%A8%E8%A7%A3%E4%BD%9C%E7%94%A8%E4%BA%8E-Constructor/</url>
    
    <content type="html"><![CDATA[<p>对于 <span class="citation" data-cites="Autowired">@Autowired</span>注解，一般情况下的使用是用其来注解一个变量，比如</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br></code></pre></div></td></tr></table></figure><p>但是，这个用法有时候会导致问题，比如，下面的代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> User user;<br><br><span class="hljs-keyword">private</span> String school;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserAccountServiceImpl</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.school = user.getSchool();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里在执行时，程序的执行顺序是先执行构造方法，然后再对加了 <spanclass="citation" data-cites="Autowired">@Autowired</span> 注解的 user变量进行自动装配（即注入），所以，这段代码在执行时是会报错的。</p><p>所以，官方建议不要使用这种变量注入的方法，在 IDEA 中，给变量加 <spanclass="citation" data-cites="Autowired">@Autowired</span>注解会产生一个警告。官方建议使用的方法是<strong>构造器(Constructor)注入</strong>，代码如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> User user;<br><span class="hljs-keyword">private</span> String school;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserAccountServiceImpl</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-built_in">this</span>.user = user;<br>    <span class="hljs-built_in">this</span>.school = user.getSchool();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样一来，程序在执行构造器方法时，就会自动注入 user。</p><hr /><p>参考：</p><p>1、https://www.cnblogs.com/acm-bingzi/p/springAutowired.html2、https://www.ramostear.com/blog/2020/03/23/9guzql5w.html</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Java</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 新配置一个 Thymeleaf Template 文件</title>
    <link href="/2021/07/14/IDEA-%E6%96%B0%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA-Thymeleaf-Template-%E6%96%87%E4%BB%B6/"/>
    <url>/2021/07/14/IDEA-%E6%96%B0%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA-Thymeleaf-Template-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>找到 Editor-&gt;File and Code Templates，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210714143217.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210714143515.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210714164519.png" /></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>#[[$Title$]]#<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>#[[$END$]]#<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>添加完成后，我们来检查一下，发现添加成功</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210714144043.png" /></p>]]></content>
    
    
    <categories>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 9 and 10</title>
    <link href="/2021/07/13/LeetCode-9-and-10/"/>
    <url>/2021/07/13/LeetCode-9-and-10/</url>
    
    <content type="html"><![CDATA[<h2 id="一leetcode-9-palindrome-number">一、LeetCode 9 PalindromeNumber</h2><h3 id="题目链接">1.1 题目链接</h3><p><a href="https://leetcode.com/problems/palindrome-number/"class="uri">https://leetcode.com/problems/palindrome-number/</a></p><h3 id="解答">1.2 解答</h3><p>此题比较简单，直接放代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        ans = <span class="hljs-built_in">str</span>(x)<br>        ans_reverse = ans[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> ans_reverse == ans:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><h3 id="完整代码">1.3 完整代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : leet_09.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/7/13</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        ans = <span class="hljs-built_in">str</span>(x)<br>        ans_reverse = ans[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> ans_reverse == ans:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solution()<br>    <span class="hljs-built_in">input</span> = <span class="hljs-number">121</span><br>    <span class="hljs-built_in">input</span> = -<span class="hljs-number">121</span><br>    output = solution.isPalindrome(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output)<br><br></code></pre></div></td></tr></table></figure><h2 id="二leetcode-10-regular-expression-matching">二、LeetCode 10Regular Expression Matching</h2><h3 id="题目链接-1">2.1 题目链接</h3><p><a href="https://leetcode.com/problems/regular-expression-matching/"class="uri">https://leetcode.com/problems/regular-expression-matching/</a></p><h3 id="解答-1">2.2 解答</h3><h4 id="解法一">2.2.1 解法一</h4><p>这是一道困难题，怎么说呢，需要悟，这个递归是需要想的。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isMatch</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_match</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            <span class="hljs-keyword">if</span> p == <span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> s == <span class="hljs-string">&#x27;&#x27;</span><br><br>            <span class="hljs-comment"># 判断 s 和 p 的首字母是否匹配，注意要先判断 s 不为空</span><br>            head_matched = <span class="hljs-keyword">not</span> (s == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">and</span> (s[<span class="hljs-number">0</span>] == p[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> p[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(p) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> p[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>                <span class="hljs-keyword">return</span> is_match(s, p[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> (head_matched <span class="hljs-keyword">and</span> is_match(s[<span class="hljs-number">1</span>:], p))<br>            <span class="hljs-keyword">elif</span> head_matched:<br>                <span class="hljs-keyword">return</span> is_match(s[<span class="hljs-number">1</span>:], p[<span class="hljs-number">1</span>:])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> is_match(s, p)<br></code></pre></div></td></tr></table></figure><p>时间复杂度：</p><ul><li>这里只给出关系式，因为计算最后的结果有点复杂，对于目前阶段的我没有什么意义。</li><li>关系式为：<code>$T(M, N) = T(M, N - 2) + T(M - 1, N)$</code>（这个式子有点问题，先按下不表）。</li><li>最坏的情况可能是 p 的形式为 <code>".*.*.*.*..."</code>。</li></ul><p>空间复杂度：有点复杂，按下不表。</p><h4 id="解法二">2.2.2 解法二</h4><p>使用动态规划（待完善）。</p><h3 id="完整代码-1">2.3 完整代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : leet_10.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/7/13</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isMatch</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_match</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            <span class="hljs-keyword">if</span> p == <span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> s == <span class="hljs-string">&#x27;&#x27;</span><br><br>            <span class="hljs-comment"># 判断 s 和 p 的首字母是否匹配，注意要先判断 s 不为空</span><br>            head_matched = <span class="hljs-keyword">not</span> (s == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">and</span> (s[<span class="hljs-number">0</span>] == p[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> p[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(p) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> p[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>                <span class="hljs-keyword">return</span> is_match(s, p[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> (head_matched <span class="hljs-keyword">and</span> is_match(s[<span class="hljs-number">1</span>:], p))<br>            <span class="hljs-keyword">elif</span> head_matched:<br>                <span class="hljs-keyword">return</span> is_match(s[<span class="hljs-number">1</span>:], p[<span class="hljs-number">1</span>:])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> is_match(s, p)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solution()<br>    s = <span class="hljs-string">&#x27;a&#x27;</span><br>    p = <span class="hljs-string">&#x27;.*&#x27;</span><br>    output = solution.isMatch(s, p)<br>    <span class="hljs-built_in">print</span>(output)<br><br></code></pre></div></td></tr></table></figure><h3 id="完整代码-2">2.3 完整代码</h3><p>解法一完整代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : leet_10.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/7/13</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isMatch</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_match</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            <span class="hljs-keyword">if</span> p == <span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> s == <span class="hljs-string">&#x27;&#x27;</span><br><br>            <span class="hljs-comment"># 判断 s 和 p 的首字母是否匹配，注意要先判断 s 不为空</span><br>            head_matched = <span class="hljs-keyword">not</span> (s == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">and</span> (s[<span class="hljs-number">0</span>] == p[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> p[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(p) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> p[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>                <span class="hljs-keyword">return</span> is_match(s, p[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> (head_matched <span class="hljs-keyword">and</span> is_match(s[<span class="hljs-number">1</span>:], p))<br>            <span class="hljs-keyword">elif</span> head_matched:<br>                <span class="hljs-keyword">return</span> is_match(s[<span class="hljs-number">1</span>:], p[<span class="hljs-number">1</span>:])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> is_match(s, p)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solution()<br>    s = <span class="hljs-string">&#x27;a&#x27;</span><br>    p = <span class="hljs-string">&#x27;.*&#x27;</span><br>    output = solution.isMatch(s, p)<br>    <span class="hljs-built_in">print</span>(output)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
      <tag>未竟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware 在 Ubuntu18 环境下升级 VMware Tools</title>
    <link href="/2021/07/13/VMware-%E5%9C%A8-Ubuntu18-%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%8D%87%E7%BA%A7-VMware-Tools/"/>
    <url>/2021/07/13/VMware-%E5%9C%A8-Ubuntu18-%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%8D%87%E7%BA%A7-VMware-Tools/</url>
    
    <content type="html"><![CDATA[<p>好吧，经过几番折腾之后，我决定执行下面的命令直接梭哈</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get autoremove open-vm-tools<br>$ sudo apt-get install open-vm-tools<br>$ sudo apt-get install open-vm-tools-desktop<br></code></pre></div></td></tr></table></figure><p>警告：升级之后 VMware Tools 似乎失效了。阅读此博客时还请慎重。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713155303.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713155344.png" /></p><p>同时，我们发现下面有一个指引，</p><blockquote><p>在客户机中装载虚拟机 CD 驱动器，启动终端，使用 tar解压缩安装程序，然后执行 vmware-install.pl 安装 VMware Tools。</p></blockquote><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713155543.png" /></p><p>在当前目录下打开终端，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713155629.png" /></p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> VMwareTools-10.3.23-17030940.tar.gz ~/Downloads/<br></code></pre></div></td></tr></table></figure><p>然后进入 <code>~/Downloads/</code> 目录下，执行解压命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar -xvf VMwareTools-10.3.23-17030940.tar.gz<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713155905.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713160146.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713160443.png" /></p><p>进入解压后的文件夹目录，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ./vmware-tools-distrib/<br>$ <span class="hljs-built_in">ls</span><br>$ sudo ./vmware-install.pl<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713160904.png" /></p><p>然后在安装的过程中，我们一路 yes、回车即可，安装好的界面如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713161127.png" /></p><p>到此，就安装完成了。</p><p>最后，我们可以点击下面的按钮，把挂载的 VMware Tool 映像给去掉</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713161247.png" /></p>]]></content>
    
    
    <categories>
      
      <category>VMware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware16 安装及破解（学习用）</title>
    <link href="/2021/07/13/VMware16-%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%94%A8%EF%BC%89/"/>
    <url>/2021/07/13/VMware16-%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>从官网下载安装软件，然后一般按照默认情况进行下一步即可，注意一下几点，</p><ul><li>下面两个选项建议勾选，</li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713150907.png" /></p><ul><li>下面两个选项不建议勾选，</li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713150937.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713151125.png" /></p><p>输入许可证，我这里输入的是</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ZF3R0</span>-FHED2-M80TY-<span class="hljs-number">8</span>QYGC-NPKYF<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713151154.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713151221.png" /></p><p>这里我准备打开之前的 Ubuntu OS，但是失败了，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713151657.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713151542.png" /></p><p>解决方案如下，进入 BIOS 设置，打开虚拟化开关</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/bios.jpg" /></p><p>然后重新打开虚拟机，发现运行正常</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713153352.png" /></p><p>到这里，安装就完成了。</p>]]></content>
    
    
    <categories>
      
      <category>VMware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开始一个基本的 SpringBoot 项目</title>
    <link href="/2021/07/13/%E5%BC%80%E5%A7%8B%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%9A%84-SpringBoot-%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/07/13/%E5%BC%80%E5%A7%8B%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%9A%84-SpringBoot-%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713025530.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713025612.png" /></p><p>这里我没有连阿里云的镜像，因为挂了梯子，所以速度虽然比阿里云慢一些，但是速度也还行，而且可以保证纯度。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713025830.png" /></p><p>总共下载了 4 分钟左右，时间可以接受。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713030246.png" /></p><p>添加代码</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713030712.png" /></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fan.springbootdemo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootdemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootdemoApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;Hello %s!&quot;</span>, name);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>然后，运行项目，这清爽的控制台真是赏心悦目</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713031002.png" /></p><p>在浏览器中访问 <code>localhost:8080/hello</code>，效果如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713030614.png" /></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Tomcat 控制台中文乱码问题</title>
    <link href="/2021/07/13/%E8%A7%A3%E5%86%B3-Tomcat-%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2021/07/13/%E8%A7%A3%E5%86%B3-Tomcat-%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一问题描述">一、问题描述</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713012423.png" /></p><h2 id="二问题解决">二、问题解决</h2><p>来到 <code>...\apache-tomcat-10.0.8\conf</code> 目录下，打开logging.properties 文件，修改下面这一行，</p><p>修改前：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713013029.png" /></p><p>修改后：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713013137.png" /></p><p>测试效果，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713013202.png" /></p><p>此时，中文已经显示正常。</p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat10 安装记录</title>
    <link href="/2021/07/13/Tomcat10-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/07/13/Tomcat10-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>首先，到官网(<a href="https://tomcat.apache.org/download-10.cgi"class="uri">https://tomcat.apache.org/download-10.cgi</a>)下载压缩包，我这里选择的是免安装版，一般都是选择这个，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713011606.png" /></p><p>放到一个指定的位置，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713011828.png" /></p><p>然后解压，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713011904.png" /></p><p>然后就是配置环境变量了，</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">CATALINA_HOME</span><br><span class="hljs-attribute">C</span>:\DevEnvironment\JavaEnv\apache-tomcat-<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713012026.png" /></p><p>注意，这里不是 bin 目录，而是解压后的目录。</p><p>然后在 Path 新建如下内容</p><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">CATALINA_HOME</span></span>%\bin<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713012200.png" /></p><p>确定之后，在命令行输入 <code>startup.bat</code> 检验一下，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713012331.png" /></p><p>发现启动了一个新的窗口，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713012423.png" /></p><p>访问一下 <code>localhost:8080</code>，发现如下内容，表明 Tomcat启动成功。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713012459.png" /></p><p>到此，Tomcat 就安装配置完成了。</p><p>最后，关闭 Tomcat 可以在命令行输入 <code>shutdown.bat</code>，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713012656.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Web 开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Navicat 安装以及破解记录（仅供学习使用）</title>
    <link href="/2021/07/13/Navicat-%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%A0%B4%E8%A7%A3%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BB%85%E4%BE%9B%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <url>/2021/07/13/Navicat-%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%A0%B4%E8%A7%A3%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BB%85%E4%BE%9B%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>首先，到官网(<ahref="https://www.navicat.com/en/download/navicat-premium"class="uri">https://www.navicat.com/en/download/navicat-premium</a>)下载，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713002753.png" /></p><p>下载完成后，双击安装软件进行安装，然后我是一直按默认选择进行安装的，注意，这里安装后先不要打开。</p><p>运行破解软件，勾选 Backup 和 Host，然后选择 Navicat v15(因为我这里安装的是 15所以选这个，其他版本则根据情况进行选择)，然后语言我这里是安装的英文版，所以选择English，然后点击 Patch，执行成功会弹出下面的窗口，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713003738.png" /></p><p>然后点击 Generate，生成 Serial Keygen，及序列码密钥，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713003631.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713003824.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713004026.png" /></p><p>现在，打开 Navicat，点击注册，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713003914.png" /></p><p>然后将刚刚生成的 Serial Keygen 粘贴到相应位置，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713004101.png" /></p><p>然后出现一个问题，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713004237.png" /></p><p>我们选择右边的手动激活，将 Request Code 复制，粘贴到破解软件中，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713004311.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713004420.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713010249.png" /></p><p>这个生成码会自动填充到 Navicat 的输入框中，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713010207.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713010228.png" /></p><p>到这里，就完成了。</p><p>按：我第一次安装时，用的是简书上的一个教程提供的破解软件，把我坑了，最后一步出问题了，它不会根据那个请求码生成一个相应的生成码。所以，我又把Navicat卸载然后重装了一遍（所以最后几张图片其实是截的第二次装的版本的图），同时我又把C 盘中搜索出来的和 Navicat相关的文件夹和文件给删除了（后来发现没必要），不过我没有删除注册表，后来也证明不需要删除，因为我就是没有删除直接重装，然后激活成功的。关于<strong>安装包</strong>的话，可以到我贴的参考链接里面下载。也可以给我发邮件，我会私发。</p><hr /><p>参考：</p><p>1、 <a href="https://www.xcnte.com/archives/666/"class="uri">https://www.xcnte.com/archives/666/</a></p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL8 安装记录</title>
    <link href="/2021/07/12/MySQL8-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/07/12/MySQL8-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一下载">一、下载</h2><p>首先，来到下载的网页 <a href="https://dev.mysql.com/downloads/mysql/"class="uri">https://dev.mysql.com/downloads/mysql/</a> 进行下载，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712234334.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712234412.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712234433.png" /></p><p>这里写的 32-bit 不要担心，这个讲的是安装程序是 32 位的。</p><h2 id="二安装">二、安装</h2><p>下载好之后，双击安装，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712234619.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712234822.png" /></p><p>然后，把左边需要安装的内容通过中间的箭头给移动到右边去，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712234959.png" /></p><p>注意到右下角还有一个单选框，如果选中，那么，还可以对右边我们下载下来的组件进行进一步的配置，这里我们保持默认未选中，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712235447.png" /></p><p>执行完毕，发现小圆框中会出现绿色的箭头。注意，此过程中可能会出现需要安装VS 的一个内容，我们安装它即可，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712235522.png" /></p><p>继续 execute，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210712235644.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713000856.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713000913.png" /></p><p>下面这里保持默认即可，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713000936.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001012.png" /></p><p>设置密码(我这里就设置成 123456 啦，因为是学习阶段，好记就行)，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001042.png" /></p><p>保持默认，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001113.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001148.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001209.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001223.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001241.png" /></p><p>安装好之后会弹出两个窗口，一个是 Powershell，另一个是 Workbench，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001312.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001403.png" /></p><p>我们直接关掉这两个窗口，如果没有其它的必要的话。</p><h2 id="三添加到系统环境变量">三、添加到系统环境变量</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001713.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001804.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001823.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001849.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001907.png" /></p><p>然后把 MySQL Server 的 bin 目录路径粘贴上去，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713001956.png" /></p><p>然后确定。</p><h2 id="四测试">四、测试</h2><p>输入 <code>mysql -uroot -p</code>，回车，输入密码，回车</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713002059.png" /></p><p>测试一条语句</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210713002149.png" /></p><p>功能正常，整个安装过程到这里结束。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>MySQL</tag>
      
      <tag>安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 8 String to Integer (atoi)</title>
    <link href="/2021/07/12/LeetCode-8-String-to-Integer-atoi/"/>
    <url>/2021/07/12/LeetCode-8-String-to-Integer-atoi/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><a href="https://leetcode.com/problems/string-to-integer-atoi/"class="uri">https://leetcode.com/problems/string-to-integer-atoi/</a></p><h2 id="二解答">二、解答</h2><p>思路比较清晰，首先找到第一个不是空格的字符，然后判断是否是正负号，然后再判断是否是数字，然后逐个处理即可。这里要注意一下Integer 的范围，超过范围就要按照题目给定的规则截断。</p><p>代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myAtoi</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        i = <span class="hljs-number">0</span> <span class="hljs-comment"># 索引</span><br>        ans = <span class="hljs-number">0</span> <span class="hljs-comment"># 结果</span><br>        pos_or_neg = <span class="hljs-number">1</span> <span class="hljs-comment"># 正还是负</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span>:<br>            i += <span class="hljs-number">1</span> <span class="hljs-comment"># 找到第一个非空格的字符</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(s):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 确定正负</span><br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;+&#x27;</span>:<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> s[i] == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            pos_or_neg = -<span class="hljs-number">1</span><br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 当前 i 索引位置上的字符必须是数字才能触发这个 while 循环</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> s[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>:<br>            ans = ans * <span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(s[i])<br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> pos_or_neg == <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span><br>        <span class="hljs-keyword">return</span> ans * pos_or_neg<br></code></pre></div></td></tr></table></figure><p>时间复杂度：<code>O(N)</code>。 空间复杂度：<code>O(1)</code>。</p><h2 id="三完整代码">三、完整代码</h2><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : leet_08.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/7/12</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myAtoi</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        i = <span class="hljs-number">0</span> <span class="hljs-comment"># 索引</span><br>        ans = <span class="hljs-number">0</span> <span class="hljs-comment"># 结果</span><br>        pos_or_neg = <span class="hljs-number">1</span> <span class="hljs-comment"># 正还是负</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span>:<br>            i += <span class="hljs-number">1</span> <span class="hljs-comment"># 找到第一个非空格的字符</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(s):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 确定正负</span><br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;+&#x27;</span>:<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> s[i] == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            pos_or_neg = -<span class="hljs-number">1</span><br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 当前 i 索引位置上的字符必须是数字才能触发这个 while 循环</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> s[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>:<br>            ans = ans * <span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(s[i])<br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> pos_or_neg == <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span><br>        <span class="hljs-keyword">return</span> ans * pos_or_neg<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solution()<br>    s = <span class="hljs-string">&#x27;   -42&#x27;</span><br>    s = <span class="hljs-string">&#x27;4193 with words&#x27;</span><br>    s = <span class="hljs-string">&#x27;words and 987&#x27;</span><br>    ans = solution.myAtoi(s)<br>    <span class="hljs-built_in">print</span>(ans)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 7 Reverse Integer</title>
    <link href="/2021/07/12/LeetCode-7-Reverse-Integer/"/>
    <url>/2021/07/12/LeetCode-7-Reverse-Integer/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><a href="https://leetcode.com/problems/reverse-integer/"class="uri">https://leetcode.com/problems/reverse-integer/</a></p><h2 id="二解答">二、解答</h2><p>这是一道简单题，思路的确不难想，要注意的就是一点小的细节，题目中给了一个Integer的范围：<code>$[-2^&#123;31&#125;, 2^&#123;31&#125; - 1]$</code>，超过了这个范围，应当返回0。</p><p>还有一个是 Python 的注意点，它的对负数的整除和取模和 C语言中的是不一样的。举个例子，</p><ul><li>C 语言中，<span class="math inline">\(-123 \ \% \ 10 =-3\)</span>；</li><li>Python 中，<span class="math inline">\(-123 \ \% \ 10 =7\)</span>。</li></ul><h3 id="解法一">2.1 解法一</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        flag = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span><br>        x = <span class="hljs-built_in">abs</span>(x)<br>        <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>:<br>            ans = ans * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span><br>            x = x // <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> flag:<br>            ans = -ans<br><br>        <span class="hljs-keyword">if</span> x &lt; -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span> <span class="hljs-keyword">or</span> x &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> ans &lt; -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span> <span class="hljs-keyword">or</span> ans &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><p>时间复杂度：<code>$O(log(x))$</code>。空间复杂度：<code>$O(1)$</code>。</p><h3 id="解法二">2.2 解法二</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 这个方法要快一点，有时候会快很多（看 LeetCode 心情）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x &lt;= -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            strg = <span class="hljs-built_in">str</span>(x)<br>            <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">0</span>:<br>                ans = strg[::-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                temp = strg[<span class="hljs-number">1</span>:]<br>                temp2 = temp[::-<span class="hljs-number">1</span>]<br>                ans = <span class="hljs-string">&quot;-&quot;</span> + temp2<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(ans) &gt;= <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(ans) &lt;= -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ans)<br></code></pre></div></td></tr></table></figure><p>让我没想到的是，这个利用了字符串的方法竟然会比我直接计算来得要快，不过想想，逆转字符串的操作代价是很小的，所以也就在情理之中了。</p><p>时间复杂度：<code>$O(1)$</code>。大概。因为不知道反转字符串所需要的时间。空间复杂度：<code>$O(1)$</code>。</p><h2 id="三完整代码">三、完整代码</h2><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : leet_07.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/7/12</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        flag = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span><br>        x = <span class="hljs-built_in">abs</span>(x)<br>        <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>:<br>            ans = ans * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span><br>            x = x // <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> flag:<br>            ans = -ans<br><br>        <span class="hljs-keyword">if</span> x &lt; -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span> <span class="hljs-keyword">or</span> x &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> ans &lt; -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span> <span class="hljs-keyword">or</span> ans &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-comment"># 这个方法要快一点，有时候会快很多（看 LeetCode 心情）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x &lt;= -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            strg = <span class="hljs-built_in">str</span>(x)<br>            <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">0</span>:<br>                ans = strg[::-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                temp = strg[<span class="hljs-number">1</span>:]<br>                temp2 = temp[::-<span class="hljs-number">1</span>]<br>                ans = <span class="hljs-string">&quot;-&quot;</span> + temp2<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(ans) &gt;= <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(ans) &lt;= -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ans)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solution()<br>    x = <span class="hljs-number">1534236469</span><br>    ans = solution.reverse(x)<br>    <span class="hljs-built_in">print</span>(ans)<br>    <span class="hljs-built_in">print</span>(-<span class="hljs-number">123</span> % <span class="hljs-number">10</span>)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 5 Longest Palindromic Substring</title>
    <link href="/2021/07/11/LeetCode-5-Longest-Palindromic-Substring/"/>
    <url>/2021/07/11/LeetCode-5-Longest-Palindromic-Substring/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><ahref="https://leetcode.com/problems/longest-palindromic-substring/"class="uri">https://leetcode.com/problems/longest-palindromic-substring/</a></p><h2 id="二解答">二、解答</h2><p>这一题的思路很清晰，把回文看成中间部分是一个字符 -如果中间只有一个不重复的字符，显然成立； -如果中间有很多重复的字符，比如 <code>abcccba</code> 中间有三个重复的字符<code>c</code>，那么，把它们看作是一个字符 <code>c</code>。</p><p>然后在满足回文条件的情况下，分别向两边扩展。</p><p>整体的过程就是遍历原数组的每一个索引，并以该索引为pivot，然后扩展，最后取整个流程中最长的回文子串即可。</p><p>代码如下</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_longest</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, low: <span class="hljs-built_in">int</span>, range_list: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>            high = low<br>            <span class="hljs-keyword">while</span> high &lt; <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> s[high + <span class="hljs-number">1</span>] == s[low]:<br>                high += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 定位中间部分的最后一个字符</span><br>            ans = high<br>            <span class="hljs-comment"># 从中间向左右两边扩散</span><br>            <span class="hljs-keyword">while</span> low &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> high &lt; <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> s[low - <span class="hljs-number">1</span>] == s[high + <span class="hljs-number">1</span>]:<br>                low -= <span class="hljs-number">1</span><br>                high += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> high - low &gt; range_list[<span class="hljs-number">1</span>] - range_list[<span class="hljs-number">0</span>]:<br>                range_list[<span class="hljs-number">0</span>] = low<br>                range_list[<span class="hljs-number">1</span>] = high<br>            <span class="hljs-keyword">return</span> ans<br>        <span class="hljs-keyword">if</span> s == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment"># 保存起止位置</span><br>        range_list = [<span class="hljs-number">0</span>] * <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)):<br>            i = find_longest(s, i, range_list)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">return</span> s[range_list[<span class="hljs-number">0</span>]:range_list[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p>时间复杂度：<code>$O(N^2)$</code>。空间复杂度：<code>$O(1)$</code>。</p><h3 id="三完整代码">三、完整代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : leet_05.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/7/11</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_longest</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, low: <span class="hljs-built_in">int</span>, range_list: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>            high = low<br>            <span class="hljs-keyword">while</span> high &lt; <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> s[high + <span class="hljs-number">1</span>] == s[low]:<br>                high += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 定位中间部分的最后一个字符</span><br>            ans = high<br>            <span class="hljs-comment"># 从中间向左右两边扩散</span><br>            <span class="hljs-keyword">while</span> low &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> high &lt; <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> s[low - <span class="hljs-number">1</span>] == s[high + <span class="hljs-number">1</span>]:<br>                low -= <span class="hljs-number">1</span><br>                high += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> high - low &gt; range_list[<span class="hljs-number">1</span>] - range_list[<span class="hljs-number">0</span>]:<br>                range_list[<span class="hljs-number">0</span>] = low<br>                range_list[<span class="hljs-number">1</span>] = high<br>            <span class="hljs-keyword">return</span> ans<br>        <span class="hljs-keyword">if</span> s == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment"># 保存起止位置</span><br>        range_list = [<span class="hljs-number">0</span>] * <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)):<br>            i = find_longest(s, i, range_list)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">return</span> s[range_list[<span class="hljs-number">0</span>]:range_list[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solution()<br>    s = <span class="hljs-string">&#x27;abcdcbaa&#x27;</span><br>    ans = solution.longestPalindrome(s)<br>    <span class="hljs-built_in">print</span>(ans)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 4 Median of Two Sorted Arrays</title>
    <link href="/2021/07/11/LeetCode-4-Median-of-Two-Sorted-Arrays/"/>
    <url>/2021/07/11/LeetCode-4-Median-of-Two-Sorted-Arrays/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/"class="uri">https://leetcode.com/problems/median-of-two-sorted-arrays/</a></p><h2 id="二解答">二、解答</h2><p>由于这题要求时间复杂度为<code>$O(log(m + n))$</code>，所以，根据经验，这题就用对半查找来解决。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedianSortedArrays</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">float</span>:<br>        <span class="hljs-comment"># 寻找两个数组中的第 k 个元素</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_kth</span>(<span class="hljs-params">nums1:<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], i:<span class="hljs-built_in">int</span>, nums2:<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], j:<span class="hljs-built_in">int</span>, k:<span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-built_in">len</span>(nums1): <span class="hljs-comment"># 这里更严格的写法是 i == len(nums1)，因为在此递归的父递归中，有 i - 1 + k // 2 &lt; len(nums1) 的约束，下同</span><br>                <span class="hljs-keyword">return</span> nums2[j + k - <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> j &gt;= <span class="hljs-built_in">len</span>(nums2):<br>                <span class="hljs-keyword">return</span> nums1[i + k - <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> k == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(nums1[i], nums2[j])<br>            mid_val1 = nums1[i - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span>] <span class="hljs-keyword">if</span> i - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span> &lt; <span class="hljs-built_in">len</span>(nums1) <span class="hljs-keyword">else</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-comment"># ①</span><br>            mid_val2 = nums2[j - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span>] <span class="hljs-keyword">if</span> j - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span> &lt; <span class="hljs-built_in">len</span>(nums2) <span class="hljs-keyword">else</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>            <span class="hljs-keyword">if</span> mid_val1 &lt; mid_val2:<br>                <span class="hljs-keyword">return</span> find_kth(nums1, i + k // <span class="hljs-number">2</span>, nums2, j, k - k // <span class="hljs-number">2</span>) <span class="hljs-comment"># ②</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> find_kth(nums1, i, nums2, j + k // <span class="hljs-number">2</span>, k - k // <span class="hljs-number">2</span>)<br><br>        m = <span class="hljs-built_in">len</span>(nums1)<br>        n = <span class="hljs-built_in">len</span>(nums2)<br>        left = (m + n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> <span class="hljs-comment"># ③</span><br>        right = (m + n + <span class="hljs-number">2</span>) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> (find_kth(nums1, <span class="hljs-number">0</span>, nums2, <span class="hljs-number">0</span>, left) + find_kth(nums1, <span class="hljs-number">0</span>, nums2, <span class="hljs-number">0</span>, right)) / <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>① 这里注意 <code>nums1[i - 1 + k // 2]</code> 的写法，我们先将 i退一格，然后再向后加上 <code>k // 2</code> 个位置，这样看比较清晰。 ②这里的 <code>i + k // 2</code> 也很有讲究，这个写法保证了递归的合理性。③ 这里要分两种情况， - 第一种，m + n 为奇数，那么，left 和 right是相等的，都等于正中间那个索引（这里索引从 1 开始）； - 第二种，m + n为偶数，那么，right = left + 1，left 和 right正好是中间的两个数的索引。</p><p>这题的核心思想是利用 find_kth()函数，即寻找出两个有序数组合并之后的正序数组中第 k 个元素（k 从 1开始）。然后，关于 find_kth()函数，其实现利用了递归和折半查找的思想。每一次递归都排除掉<code>k // 2</code> 个元素，然后，递归下去。</p><p>时间复杂度：<code>$O(log(m + n))$</code>。空间复杂度：<code>$O(log(m + n))$</code>，这个结果可由计算递归栈的数量所得。</p><h2 id="三完整代码">三、完整代码</h2><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : leet_04.py</span><br><span class="hljs-comment"># @Author: FanyFull</span><br><span class="hljs-comment"># @Date  : 2021/7/10</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedianSortedArrays</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">float</span>:<br>        <span class="hljs-comment"># 寻找两个数组中的第 k 个元素</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_kth</span>(<span class="hljs-params">nums1:<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], i:<span class="hljs-built_in">int</span>, nums2:<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], j:<span class="hljs-built_in">int</span>, k:<span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-built_in">len</span>(nums1):<br>                <span class="hljs-keyword">return</span> nums2[j + k - <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> j &gt;= <span class="hljs-built_in">len</span>(nums2):<br>                <span class="hljs-keyword">return</span> nums1[i + k - <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> k == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(nums1[i], nums2[j])<br>            mid_val1 = nums1[i - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span>] <span class="hljs-keyword">if</span> i - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span> &lt; <span class="hljs-built_in">len</span>(nums1) <span class="hljs-keyword">else</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>            mid_val2 = nums2[j - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span>] <span class="hljs-keyword">if</span> j - <span class="hljs-number">1</span> + k // <span class="hljs-number">2</span> &lt; <span class="hljs-built_in">len</span>(nums2) <span class="hljs-keyword">else</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>            <span class="hljs-keyword">if</span> mid_val1 &lt; mid_val2:<br>                <span class="hljs-keyword">return</span> find_kth(nums1, i + k // <span class="hljs-number">2</span>, nums2, j, k - k // <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> find_kth(nums1, i, nums2, j + k // <span class="hljs-number">2</span>, k - k // <span class="hljs-number">2</span>)<br><br>        m = <span class="hljs-built_in">len</span>(nums1)<br>        n = <span class="hljs-built_in">len</span>(nums2)<br>        left = (m + n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        right = (m + n + <span class="hljs-number">2</span>) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> (find_kth(nums1, <span class="hljs-number">0</span>, nums2, <span class="hljs-number">0</span>, left) + find_kth(nums1, <span class="hljs-number">0</span>, nums2, <span class="hljs-number">0</span>, right)) / <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solution()<br>    nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-comment"># 注意，这里的输入数组都是正序的</span><br>    nums2 = [<span class="hljs-number">2</span>]<br>    ans = solution.findMedianSortedArrays(nums1, nums2)<br>    <span class="hljs-built_in">print</span>(ans)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Python 提取 epub 中的文本</title>
    <link href="/2021/07/08/%E4%BD%BF%E7%94%A8-Python-%E6%8F%90%E5%8F%96-epub-%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/"/>
    <url>/2021/07/08/%E4%BD%BF%E7%94%A8-Python-%E6%8F%90%E5%8F%96-epub-%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近读了《繁花》这本书，就想着能不能使用 Python 把 epub格式的小说中的文本给提取出来，然后进行文本分析。本来我以为 Python的相关的库是很多的，然而在实际运用过程中却遇到了困难。网上能够找到的库基本上只有一个ebooklib，这是让我很惊讶的。</p><p>无奈之下，只好去研究 epub 格式的文件的构造，经过研究，发现 epub电子书格式其实是很多个 xhtml文件的压缩格式，这一下子就好办了，这样我就可以直接用 BeautifulSoup来解析它们了。（BeautifulSoup，写过爬虫的应该不会陌生）</p><h2 id="正文">正文</h2><p>我把原 epub 文件解压后的文件夹 blossoms 放在项目的根目录下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210708182839.png" /></p><p>然后直接上代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : parse_book.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/7/7</span><br><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># xhtml_file = open(&#x27;blossoms/OEBPS/Text/part0009.xhtml&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;)</span><br><span class="hljs-comment"># xhtml_handle = xhtml_file.read()</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># soup = BeautifulSoup(xhtml_handle, &#x27;lxml&#x27;)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># title = soup.find_all(&quot;title&quot;)</span><br><span class="hljs-comment"># print(title)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># p_list = soup.find_all(&#x27;p&#x27;)</span><br><span class="hljs-comment"># for p in p_list:</span><br><span class="hljs-comment">#     print(p)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exact_p_tag</span>(<span class="hljs-params">path</span>):<br>    xhtml_file = <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    xhtml_handle = xhtml_file.read()<br><br>    soup = BeautifulSoup(xhtml_handle, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br><br>    title = soup.find_all(<span class="hljs-string">&quot;title&quot;</span>)<br>    <span class="hljs-comment"># print(title)</span><br><br>    p_list = soup.find_all(<span class="hljs-string">&#x27;p&#x27;</span>)<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_list:<br>        <span class="hljs-built_in">print</span>(p.text)<br><br><span class="hljs-comment"># 批量处理文件</span><br><span class="hljs-keyword">import</span> os<br><br>rec_res = os.walk(<span class="hljs-string">r&#x27;blossoms/OEBPS/Text&#x27;</span>)<br>filename_list = []<br><span class="hljs-keyword">for</span> path, dir_list, file_list <span class="hljs-keyword">in</span> rec_res:<br>    <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> file_list:<br>        filename_list.append(file_name)<br><span class="hljs-comment"># print(filename_list)</span><br>filename_list = filename_list[<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># print(filename_list)</span><br><br>BASE_PATH = <span class="hljs-string">&#x27;blossoms/OEBPS/Text&#x27;</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filename_list:<br>    path = BASE_PATH + <span class="hljs-string">&#x27;/&#x27;</span> + filename<br>    exact_p_tag(path)<br>    <span class="hljs-comment"># print(path)</span><br></code></pre></div></td></tr></table></figure><p>因为经过我的研究，所有的文本都是放在 p标签内部的，所以，我需要做的就只是遍历所有的 xhtml 文件，然后将其中的 p标签中的文本全部提取出来即可。</p><p>上面的程序输出如下</p><div class="hljs code-wrapper"><pre><code class="hljs">图书在版编目（CIP）数据繁花／金宇澄著．－上海：上海文艺出版社． 2013．3 ISBN 978-7-5321-4800-4 Ⅰ．①繁…　Ⅱ．①金…　Ⅲ．①长篇小说－中国－当代 Ⅳ．①1247.5 中国版本图书馆CIP数据核字（2013）第034242号上海市重大文艺创作项目　由上海文化发展基金会资助 出场人物一、1960年代初二、文革时期至1980年代初三、1990年代初上帝不响，像一切全由我定……  独上阁楼，最好是夜里。《阿飞正传》结尾，梁朝伟骑马觅马，英雄暗老，电灯下面数钞票，数清一沓，拿出一副扑克牌，捻开细看，再摸出一副。接下来梳头，三七分头，对镜子梳齐，全身笔挺，骨子里疏慢，最后，关灯。否极泰来，这半分钟，是上海味道。如果不相信，头伸出老虎窗，啊夜，层层叠叠屋顶，“本滩”的哭腔，霓虹养眼，骨碌碌转光珠，软红十丈，万花如海。六十年代广播，是纶音玉诏，奉命维谨，澹雅胜繁华，之后再现“光市”的上海夜，风里一丝丝苏州河潮气，咸菜大汤黄鱼味道，氤氲四缭，听到音乐里反复一句女声，和你一起去巴黎呀一起去巴黎呀去巴黎呀。对面有了新房客了，窗口挂的小衣裳，眼生的，黑瓦片上面，几支白翅膀飘动。八十年代，上海人聪明，新开小饭店，挖地三尺，店面多一层，阁楼延伸。这个阶段，乍浦路黄河路等等，常见这类两层结构，进贤路也是一样，进店不便抬头，栏杆里几条玉腿，或丰子恺所谓“肉腿”高悬，听得见楼上讲张，加上通风不良的油镬气，男人觉得莺声燕语，吃酒就无心思。古罗马诗人有言，不亵则不能使人欢笑。 引　　子沪生经过静安寺菜场，听见有人招呼，沪生一看，是陶陶，前女朋友梅瑞的邻居。沪生说，陶陶卖大闸蟹了。陶陶说，长远不见，进来吃杯茶。沪生说，我有事体。陶陶说，进来嘛，进来看风景。沪生勉强走进摊位。陶陶的老婆芳妹，低鬟一笑说，沪生坐，我出去一趟。两个人坐进躺椅，看芳妹的背影，婷婷离开。沪生说，身材越来越好了。陶陶不响。沪生说，老婆是人家的好，一点不错。陶陶说，我是烦。沪生说，风凉话少讲。陶陶说，一到夜里，芳妹就烦。沪生说，啥。陶陶说，天天要学习，一天不学问题多，两天不学走下坡，我的身体，一直是走下坡，真吃不消。沪生说，我手里有一桩案子，是老公每夜学习社论，老婆吃不消。陶陶说，女人真不一样，有种女人，冷清到可以看夜报，结绒线，过两分钟就讲，好了吧，快点呀。沪生说，这也太吓人了，少有少见。陶陶说，湖心亭主人的书，看过吧。沪生说，啥。陶陶说，上下本《春兰秋蕊》，清朝人写的。沪生说，不晓得。陶陶说，雨夜夜，云朝朝，小桃红每夜上上下下，我根本不相信，讨了老婆，相信了。沪生看看手表说，我走了。陶陶说，比如昨天夜里，好容易太平了，半夜弄醒，又来了。沪生不响。陶陶说，这种夫妻关系，我哪能办。沪生不响。陶陶说，我一直想离婚，帮我想办法。沪生说，做老公，就要让老婆。陶陶冷笑说，要我像沪生一样，白萍出国几年了，也不离婚。沪生讪讪看一眼手表，准备告辞。陶陶说，此地风景多好，外面亮，棚里暗，躺椅比较低，以逸待劳，我有依靠，笃定。沪生说，几点钟开秤。陶陶说，靠五点钟，我跟老阿姨，小阿姐，谈谈斤头，讲讲笑笑，等于轧朋友。陶陶翻开一本簿子，让沪生看，上面誊有不少女人名字，地址电话。陶陶掸一掸裤子说，香港朋友送的，做生意，行头要挺，要经常送蟹上门，懂我意思吧，送进房间，吃一杯茶，讲讲人生。沪生不响。此刻，斜对面有一个女子，低眉而来，三十多岁，施施然，轻摇莲步。陶陶低声说，看，......</code></pre></div><p>总字数约 35 万字，所以这里只截取小部分。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>bs4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 UltraISO 安装 Windows10 系统</title>
    <link href="/2021/07/04/%E4%BD%BF%E7%94%A8-UltraISO-%E5%AE%89%E8%A3%85-Windows10-%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/07/04/%E4%BD%BF%E7%94%A8-UltraISO-%E5%AE%89%E8%A3%85-Windows10-%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>准备给电脑重装个操作系统，之前主要是把 500 GB的固态硬盘给分区了，现在有些后悔，就趁着有空重装一下，并小小地记录一下，以方便以后重装系统（肯定要重装的）。</p><h2 id="正文">正文</h2><p>首先，到网上下载一个 Windows10镜像，我这里因为学校网站有资源，就直接在学校的网站下载了。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210704161831.png" /></p><p>然后，在到网上下载 UltraISO软件，这个软件我们可以一直试用，挺好的。</p><p>打开我们刚刚下载好的镜像文件</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210704162227.png" /></p><p>然后写入硬盘映像，注意，写入之前要把 U 盘格式化</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210704162326.png" /></p><p>选择写入方式为 USB-HDD+，然后点击写入，之后等待写入完成即可</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210704161608.png" /></p><p>确定写入成功之后，我们关闭窗口即可</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210704162123.png" /></p><p>然后剩下的步骤就是根据各自的电脑，然后设置 U盘启动重装系统即可。这一部分可以网上搜索解决。</p>]]></content>
    
    
    <categories>
      
      <category>电脑</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电脑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 链接括号问题</title>
    <link href="/2021/06/13/Markdown-%E9%93%BE%E6%8E%A5%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/13/Markdown-%E9%93%BE%E6%8E%A5%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>关于 Markdown，它的链接格式是这样的</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">[<span class="hljs-string">title</span>](<span class="hljs-link">link</span>)<br></code></pre></div></td></tr></table></figure><p>其中，方括号中的填写的是链接的名称，而括弧里面的内容是链接的url。</p><p>但是，今天遇到了一个问题，就是如果 url 中含有括号，就像下面这样</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>en.wikipedia.org<span class="hljs-regexp">/wiki/</span>P6_(microarchitecture)<br></code></pre></div></td></tr></table></figure><p>那么，渲染成 html 页面之后可能出现下面的问题，比如书写的 Markdown是这样的</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">[<span class="hljs-string">维基百科</span>](<span class="hljs-link">https://en.wikipedia.org/wiki/P6_(microarchitecture</span>))<br></code></pre></div></td></tr></table></figure><p>那么渲染之后可能是这样的</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210613202844.png"alt="图中多了一个右括弧" /></p><p><strong>解决方法</strong></p><p>使用 <code>%28</code> 代替 url 中的 <code>(</code>，使用<code>%29</code> 代替 <code>)</code>。</p><p>这样做的原理是使用 url 符号码取代替 ascii 的符号。</p><hr /><p>参考：<a href="http://gohom.win/2015/12/24/MD-bracket/"class="uri">http://gohom.win/2015/12/24/MD-bracket/</a></p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bochs 利用 freedos 搭建保护模式的运行环境</title>
    <link href="/2021/06/13/bochs-%E5%88%A9%E7%94%A8-freedos-%E6%90%AD%E5%BB%BA%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/06/13/bochs-%E5%88%A9%E7%94%A8-freedos-%E6%90%AD%E5%BB%BA%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这里是对《一个操作系统的实现》第 3章的“保护模式的运行环境”这一节的实操的记录。因为有一点点小的注意点，所以在这里记录一下。</p><h2 id="操作步骤">操作步骤</h2><p>1、下载</p><p>第一种方法，直接在命令行获取文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget http://bochs.sourceforge.net/guestos/freedos-img.tar.gz</span><br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210613172921.png" /></p><p>也可以到 bochs 官网下载 freedos 软盘映像文件，这里不作赘述。</p><p>2、然后把这个文件移动到别的文件夹里面进行解压，我这里是移动到了<code>~/Downloads/freedos/</code> 下面，然后解压</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xzf freedos-img.tar.gz</span><br></code></pre></div></td></tr></table></figure><p>解压之后是一个文件夹</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210613173424.png" /></p><p>然后我们把 a.img 改成 freedos.img 并复制到我们的工作目录中。</p><p>3、然后使用 bximage 生成一个软盘映像，起名为 pm.img。</p><p>4、修改我们的 bochsrc，确保其中有以下三行：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">floppya:<span class="hljs-attribute">1_44</span>=freedos.img, <span class="hljs-attribute">status</span>=inserted<br>floppyb:<span class="hljs-attribute">1_44</span>=pm.img, <span class="hljs-attribute">status</span>=inserted<br>boot: a<br></code></pre></div></td></tr></table></figure><p>5、启动 Bochs，待 FreeDos 启动完毕后格式化 B: 盘，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210613174335.png" /></p><p>注意，这里用的命令如下</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">format<span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">b</span>:<br></code></pre></div></td></tr></table></figure><p>书上的没有 .exe 后缀，那是不对的。</p><p>6、然后将代码 3.1(见原书) 的第 8 行中的 07c00h 改为0100h，并重新编译：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nasm pmtest1.asm -o pmtest1.com</span><br></code></pre></div></td></tr></table></figure><p>7、将 pmtest1.com 复制到虚拟软盘 pm.img 上：</p><p>如果是首次复制，则先要创建一个目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mkdir</span> /mnt/floppy</span><br></code></pre></div></td></tr></table></figure><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount -o loop pm.img /mnt/floppy</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> pmtest1.com /mnt/floppy/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/floppy</span><br></code></pre></div></td></tr></table></figure><p>书上省略了 <code>mkdir /mnt/floppy</code> 这一步，要注意。</p><p>8、到 FreeDos 中执行如下命令</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">B:</span>\pmtest1.com<br></code></pre></div></td></tr></table></figure><p>这样 pmtest1.com 就运行起来了，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210613175153.png" /></p><hr /><p>参考：《一个操作系统的实现》</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
      <tag>一个操作系统的实现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于对 x86 的理解</title>
    <link href="/2021/06/08/%E5%85%B3%E4%BA%8E%E5%AF%B9-x86-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2021/06/08/%E5%85%B3%E4%BA%8E%E5%AF%B9-x86-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天在阅读《Linux C 一站式编程》中这个 x86汇编程序基础，突然意识到，自己对于 x86这个概念似乎是十分模糊。然后查看了维基百科和知乎，在这里记录一下。</p><h2 id="x86">x86</h2><p><strong>x86</strong> 泛指一系列基于 Intel 8086且向后兼容的中央处理器指令集架构。最早的 8086 处理器于 1978 年由 Intel推出，为 16 位微处理器。</p><p>该系列较早期的处理器名称是以数字来表示80x86。由于以“86”作为结尾，包括 Intel 8086、80186、80286、80386 以及80486，因此其架构被称为“x86”。由于数字并不能作为注册商标，因此 Intel及其竞争者均在新一代处理器使用可注册的名称，如 Pentium，来描述<strong>x86</strong> 架构下的处理器产品。现时英特尔将其称为<strong>IA-32</strong>，全名为“Intel Architecture,32-bit”，一般情形下指代 32 位的架构。</p><h2 id="x86-64">x86-64</h2><p><strong>x86-64</strong>（又称 <strong>x64</strong>，即英文词 64-bitextended，64 位拓展的简写）是一个处理器的指令集架构，基于 x86 架构的 64位拓展，向后兼容于 16 位及 32 位的 x86 架构。x64 于 1999 年由 AMD设计，AMD 首次公开 64 位集以扩展给x86，称为“AMD64”。其后也为英特尔所采用，现时英特尔称之为“Intel64”，在之前曾使用过“Clackamas Technology” (CT)、“IA-32e”及“EM64T”。</p><p>苹果公司和 RPM 包管理员以“x86-64”或“x86_64”称呼此 64位架构。甲骨文公司及 Microsoft 称之为“x64”。BSD 家族及其他 Linux发行版则使用“amd64”，32 位版本则称为“i386”（或 i486/586/686），ArchLinux 用 x86_64 称呼此 64 位架构。</p><h2 id="补充">补充</h2><h3 id="i686">i686</h3><p>在装 MinGW-w64 的过程中，遇到了一个 i686 架构，关于这个 i686架构，简单来讲，就是 32 位的架构。更多相关的可以参见 <ahref="https://en.wikipedia.org/wiki/P6_%28microarchitecture%29">维基百科</a>和 <ahref="https://askubuntu.com/questions/444394/what-is-the-meaning-of-i686-in-ubuntu">askubuntu</a>。</p><hr /><p>参考：</p><p>1、<a href="https://zh.wikipedia.org/wiki/X86"class="uri">https://zh.wikipedia.org/wiki/X86</a> 2、<ahref="https://zh.wikipedia.org/wiki/X86-64"class="uri">https://zh.wikipedia.org/wiki/X86-64</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid 主题文章内容中的图片的圆角有时会出现白色边框问题</title>
    <link href="/2021/06/08/Hexo-Fluid-%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E7%9A%84%E5%9C%86%E8%A7%92%E6%9C%89%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%99%BD%E8%89%B2%E8%BE%B9%E6%A1%86%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/08/Hexo-Fluid-%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E7%9A%84%E5%9C%86%E8%A7%92%E6%9C%89%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%99%BD%E8%89%B2%E8%BE%B9%E6%A1%86%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>Fluid 主题的版本是 <code>hexo-theme-fluid@1.8.10</code>。</p><h3 id="问题描述">问题描述</h3><p>如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608105314.png" /></p><p>左下角这里会出现一点点白色的边框。其实其他三个角也会出现，只是在这张图片上不太明显。</p><p>然后我刷新以下页面，或者点击一下图片然后再还原，这个白色的边框就会消失。如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608105347.png" /></p><p>而且，这个问题随着圆角的值越大会更明显，即白色边框更加明显(虽然还是需要仔细盯着看哈哈)，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608114447.png" /></p><p>然后，正常的情况是下面这样的</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608114512.png" /></p><h3 id="个人的暂时解决方法">个人的暂时解决方法</h3><p>经过分析，我认为可能是图片背景颜色的问题，所以添加了如下的自定义的css 样式</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 解决图片在刚展示时可能会在圆角出出现白色边框的问题 */</span><br><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: transparent; <span class="hljs-comment">/* 原来是 #fff */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>即将图片的背景色由原来的白色改为现在的透明的颜色。</p><p>经过测试，发现这样似乎能够解决问题。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML 中的常见关系(箭头含义整理)</title>
    <link href="/2021/06/07/UML-%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E5%85%B3%E7%B3%BB-%E7%AE%AD%E5%A4%B4%E5%90%AB%E4%B9%89%E6%95%B4%E7%90%86/"/>
    <url>/2021/06/07/UML-%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E5%85%B3%E7%B3%BB-%E7%AE%AD%E5%A4%B4%E5%90%AB%E4%B9%89%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近在读《人人都懂设计模式》（罗伟富）这本书，发现这里面的讲解 UML常见的几种关系非常形象，在这里就做一个笔记，加强印象。</p><h2 id="uml-常见关系">UML 常见关系</h2><h3 id="泛化generalization">1. 泛化（Generalization）</h3><p>泛化（Generalization）是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。</p><p>如：哺乳动物具有恒温、胎生、哺乳等生理特征，猫和牛都是哺乳动物，也都具有这些特征，但除此之外，猫会捉老鼠，牛会耕地，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607124920.png"alt="泛化（Generaliaztion）" /></p><h3 id="实现realization">2. 实现（Realization）</h3><p>实现（Realization）是一种类与接口的关系，表示类是接口所有特征和行为的实现。</p><p>如：蝙蝠也是哺乳动物，它除具有哺乳动物的一般特征之外，还会飞，我们可以定义一个IFlyable 的接口，表示飞行的动作，而蝙蝠需要实现这个接口，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607130417.png"alt="实现（Realization）" /></p><p>注：在 Java 中实现的英文是 Implementation。</p><h3 id="组合">3. 组合</h3><p>组合（Composition）也表示整体与部分的关系，但部分离开整体后无法单独存在，因此，组合与聚合相比是一种更强的关系。</p><p>如：我们的电脑由 CPU、主板、硬盘、内存组成，电脑与CPU、主板、硬盘、内存是整体与部分的关系，但如果让CPU、主板等组件单独存在，就无法工作，因此没有意义，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607131330.png"alt="组合（Composition）" /></p><h3 id="聚合aggregation">4. 聚合（Aggregation）</h3><p>聚合（Aggregation）是整体与部分的关系，部分可以离开整体而单独存在。</p><p>如：一个公司会有多个员工，但员工可以离开公司单独存在，离职了依然可以好好地活着，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607131733.png"alt="聚合（Aggregation）" /></p><h3 id="关联association">5. 关联（Association）</h3><p>关联（Association）是一种拥有关系，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。</p><p>如：一本书会有多个读者，一个读者也可能会有多本书，书和读者是一种双向的关系（也就是多对多的关系）；但一本书通常只会有一个作者，是一种单向的关系（就是一对一的关系，也可能是一对多的关系，因为一个作者可能会写多本书），如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607141029.png"alt="关联（Association）" /></p><h3 id="依赖dependency">6. 依赖（Dependency）</h3><p>依赖（Dependency）是一种使用的关系，即一个类的实现需要另一个类的协助，所以尽量不要使用双向的互相依赖。</p><p>如：所有的动物都要吃东西才能活着，动物与食物就是一种依赖关系，动物依赖食物而生存，如下图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607141757.png"alt="依赖（Dependency）" /></p><h2 id="以前整理的不太好的-uml-常见关系">以前整理的不太好的 UML常见关系</h2><p>下面是我以前整理的 UML关系，不太好理解，一点都不形象，贴在这里，引以为戒。</p><h3id="泛化generalization在java里表现为继承inheritanceis-a">1、泛化（Generalization），在Java里表现为继承（Inheritance）（“is-a”）</h3><p><imgsrc="https://gitee.com/fanlumaster/blog-pics-bed/raw/master/imgs/20200907170311.png" /></p><h3 id="实现interface-implementation">2、实现（Interfaceimplementation）</h3><p><imgsrc="https://gitee.com/fanlumaster/blog-pics-bed/raw/master/imgs/20200907170552.png" /></p><h3 id="依赖dependencyuses-a">3、依赖（Dependency）（“uses-a”）</h3><p>概念：一种使用的关系，即一个类的实现需要另一个类的协助，Java中，如果一个类的方法操纵另一个类的对象，我们就说一个类依赖于另一个类。</p><p><imgsrc="https://gitee.com/fanlumaster/blog-pics-bed/raw/master/imgs/20200907171334.png" /></p><p>这里是类A依赖于类B。</p><h3 id="聚合aggregationhas-a">4、 聚合（Aggregation）（“has-a”）</h3><p>概念：聚合关系意味着类A的对象包含类B的对象。</p><p><imgsrc="https://gitee.com/fanlumaster/blog-pics-bed/raw/master/imgs/20200907172200.png" /></p><p>老师和学生是“has-a”的关系，这里是Teacher指向Student，但是连线的尾部是一个空心的菱形。</p><h3 id="关联association-1">5、关联（Association）</h3><p>概念：表示类与类之间的联接,它使一个类知道另一个类的属性和方法，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的。Java中一个类的全局变量引用了另一个类，就表示关联了这个类。</p><p><imgsrc="https://gitee.com/fanlumaster/blog-pics-bed/raw/master/imgs/20200907172818.png" /></p><p>解释：在Teacher类中引用Course这个类。</p><h3 id="组合combination">6、组合（Combination）</h3><p>概念：组合也是关联关系的一种特例。组合是一种整体与部分的关系，即contains-a的关系，比聚合更强。部分与整体的生命周期一致，整体的生命周期结束也就意味着部分的生命周期结束，组合关系不能共享。程序中组合和关联关系是一致的，只能从语义级别来区分。</p><p>表示方法：尾部为实心菱形的实现箭头（也可以没箭头），类A指向类B。</p><p><imgsrc="https://gitee.com/fanlumaster/blog-pics-bed/raw/master/imgs/20200907173457.png" /></p><hr /><p>好的参考：</p><p>1、《人人都懂设计模式》（罗伟富）</p><p>不好的参考： 1、<ahref="https://www.cnblogs.com/ylq1990/p/8473041.html"class="uri">https://www.cnblogs.com/ylq1990/p/8473041.html</a>2、《Java核心技术》（第10版）</p>]]></content>
    
    
    <categories>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid 主题解决缩进格式的代码块无法正确渲染问题</title>
    <link href="/2021/06/06/Hexo-Fluid-%E4%B8%BB%E9%A2%98%E8%A7%A3%E5%86%B3%E7%BC%A9%E8%BF%9B%E6%A0%BC%E5%BC%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/06/Hexo-Fluid-%E4%B8%BB%E9%A2%98%E8%A7%A3%E5%86%B3%E7%BC%A9%E8%BF%9B%E6%A0%BC%E5%BC%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="bug-描述">Bug 描述</h2><p>我的问题是在代码高亮配置为 highlightjs 的 Atom One Dark的情况下，关于采用 TAB 键缩进的代码无法正常渲染，效果如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210606220528.png" /></p><p>主题配置文件中的相关配置如下</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 代码高亮</span><br><span class="hljs-comment"># Code highlight</span><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 代码块是否显示行号</span><br><span class="hljs-comment"># If true, the code block display line numbers</span><br><span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 实现高亮的库，对应下面的设置</span><br><span class="hljs-comment"># Highlight library</span><br><span class="hljs-comment"># Options: highlightjs | prismjs</span><br><span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br><br><span class="hljs-attr">highlightjs:</span><br>  <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>  <span class="hljs-comment"># Select a style in the link</span><br>  <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;Atom One Dark&quot;</span><br><br>  <span class="hljs-comment"># 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）</span><br>  <span class="hljs-comment"># If true, the code background will change color based on the style (If style has a dark background, don&#x27;t forget to true)</span><br>  <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span><br>  <span class="hljs-comment"># Select the style button on the right side of the link page, you can also set the CSS link</span><br>  <span class="hljs-comment"># See: https://prismjs.com/</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br><br>  <span class="hljs-comment"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span><br>  <span class="hljs-comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h2 id="解决方法">解决方法</h2><h3 id="增加-custom.css-文件">增加 custom.css 文件</h3><p>根据官方文档(<ahref="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E8%87%AA%E5%AE%9A%E4%B9%89-js-css-html"class="uri">https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E8%87%AA%E5%AE%9A%E4%B9%89-js-css-html</a>)给出的自定义css 的方法，在 source 目录下新建一个 css 目录，然后在 css 目录下新建一个<code>custom.css</code> 文件，内容如下</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">pre <span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#abb2bf</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>即通过修改代码颜色来解决问题。</p><h3 id="修改主题配置文件">修改主题配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span> <span class="hljs-string">/css/custom.css</span><br></code></pre></div></td></tr></table></figure><p>验证一下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210606231703.png" /></p><p>发现成功解决。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18 用 NASM 编写 MBR 引导程序，在 BOCHS 虚拟机中测试</title>
    <link href="/2021/06/06/Ubuntu-18-%E7%94%A8-NASM-%E7%BC%96%E5%86%99-MBR-%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%9C%A8-BOCHS-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/06/06/Ubuntu-18-%E7%94%A8-NASM-%E7%BC%96%E5%86%99-MBR-%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%9C%A8-BOCHS-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这是一次 OS 实验的记录。</p><p>实验的要求是，编写 MBR 引导程序，在屏幕显示 "Hello OSworld!"，然后原地停下。</p><p>由于实验的过程稍微有些曲折，这个任务难度不大，就是过程中的坑比较多。遂记录这一次实验过程，供个人以后复习及后来人参考。</p><p>本次实验的环境是</p><ul><li>Ubuntu 18.04</li><li>Bochs-2.6.11</li></ul><h2 id="安装-bochs">安装 Bochs</h2><h3 id="安装依赖">安装依赖</h3><p>为了运行Bochs，首先，我们需要安装一些必要的依赖，所有的安装命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get install build-essential <br>$ sudo apt-get install xorg-dev <br>$ sudo apt-get install bison <br></code></pre></div></td></tr></table></figure><h3 id="下载并解压安装包并安装">下载并解压安装包，并安装</h3><p>这里没有直接使用 <code>sudo apt-get install bochs</code>的原因是我们还需要安装 Bochs 的调试功能。</p><p>1、首先，下载 Bochs-2.6.11.tar.gz(<ahref="https://sourceforge.net/projects/bochs/files/bochs/2.6.11/">下载链接</a>)</p><p>2、然后，我们在压缩包放置的目录中进行解压操作</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar zxvf bochs-2.6.11.tar.gz<br></code></pre></div></td></tr></table></figure><p>3、进入解压后的目录，然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> bochs-2.6.11<br>$ ./configure --enable-debugger --enable-disasm<br>$ make<br>$ sudo make install<br></code></pre></div></td></tr></table></figure><p>注意，"./coufigure" 之后的参数便是打开调试功能的开关。</p><p>直到这里，我是没有遇到问题的。</p><h3 id="错误解决">错误解决</h3><p>然后，我们测试是否安装成功，我们在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ bochs<br></code></pre></div></td></tr></table></figure><p>这里我是遇到了两个错误，如下</p><p>1、<code>cpu directive malformed</code> 问题</p><p>解决办法：</p><div class="hljs code-wrapper"><pre><code class="hljs">1. bochs -help cpu这个命令将显示出所有支持的 CPU 类型2. 修改 .bochsrc 文件中的 cpu:model=core2+penryn+t9600 为 cup:model=上一条查到的所支持的 CPU 类型之一</code></pre></div><p>2、<code>.bochsrc:926: Bochs is not compiled with lowlevel sound support.</code></p><p>解决办法：</p><div class="hljs code-wrapper"><pre><code class="hljs">在 .bochsrc 文件中删除 sound 配置即可</code></pre></div><p>解决了问题之后，再重新输入 <code>bochs</code>命令，发现已经安装成功了</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210419134701.png" /></p><h2 id="配置-bochs">配置 bochs</h2><p>安装好 bochs 后，接下来需要对 bochs进行配置了。如果我们不自己写配置文件的话，执行 bochs 命令时 bochs会自己在当前目录下顺序寻找以下文件作为配置文件</p><div class="hljs code-wrapper"><pre><code class="hljs">.bochssrcbochsrcbochsrc.txtbochsrc.bxrc(仅对 Windows 有效)</code></pre></div><p>我们可以通过 <code>ls -a</code> 命令来看一下 bochs安装目录下的所有文件：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607000942.png" /></p><p>在这里，我们选择在自己的目录下新建一个 bochsrc 配置文件，如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> FirstOS<br>$ <span class="hljs-built_in">touch</span> bochsrc<br>$ gedit bochsrc<br></code></pre></div></td></tr></table></figure><p>bochsrc 中的文件内容如下</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">#################################################################<br># Configuration file for Bochs<br>#################################################################<br><br># how much memory the emulated machine will have<br>megs: <span class="hljs-number">32</span><br><br># filenameof ROM images<br>romimage:file=/usr/local/share/bochs/BIOS-bochs-latest<br>vgaromimage:file=/usr/local/share/bochs/VGABIOS-lgpl-latest<br><br># which disk image will be used 这个是启动软盘，我们虚拟出来的那个a.img<br>floppya:<span class="hljs-number">1</span>_44=a.img, status=inserted<br><br># choose the boot disk 确定启动方式<br>boot: floppy<br><br># <span class="hljs-keyword">where</span> do we send log messages?<br>log: bochsout.txt<br><br># disable the mouse<br>mouse: enabled=<span class="hljs-number">0</span><br><br># enable key mapping ,using US layout <span class="hljs-keyword">as</span> default<br>keyboard:keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607183851.png" /></p><h2 id="编写-mbr-引导程序在-bochs-虚拟机中测试">编写 MBR 引导程序，在bochs 虚拟机中测试</h2><h3 id="编写-mbr-引导程序">编写 MBR 引导程序</h3><p>1、编写汇编代码 boot.asm</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nasm">    org    07c00h                   ; 告诉编译器程序加载到 7c00 处<br>    mov    ax, cs<br>    mov    ds, ax<br>    mov    es, ax<br>    call   DispStr                  ; 调用显示字符串例程<br>    jmp    $                        ; 无限循环<br>DispStr:<br>    mov    ax, BootMessage<br>    mov    bp, ax                   ; ES:BP = 串地址<br>    mov    cx, 16                   ; CX = 串长度<br>    mov    ax, 01301h               ; AH = 13, AL = 01h<br>    mov    bx, 000ch                ; 页号为 0(BH = 0) 黑底红字(BL = 0Ch, 高亮)<br>    mov    dl, 0<br>    int    10h                      ; 10h 号中断<br>    ret<br>BootMessage:    db    &quot;Hello, OS world!&quot;<br>times    510-($-$$)    db    0      ; 填充剩下的空间, 使生成的二进制代码恰好为 512 字节<br>dw       0xaa55                     ; 结束标志<br></code></pre></div></td></tr></table></figure><p>2、使用 nasm 编译这段代码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ nasm boot.asm -o boot.bin<br></code></pre></div></td></tr></table></figure><p>然后在相应的目录下我们可以看到多了一个 512 字节的 boot.bin文件，如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607184811.png" /></p><p>这个文件就要被我们写入到软盘里面。这里当然可以写入到一个真实的空白软盘上，但是我们这里选择使用bochs 来虚拟出我们所需要的软盘。</p><h3 id="代码解释">代码解释</h3><p>我们刚刚完成的代码并不是一个完整的操作系统，而仅仅是一个最简单的引导扇区（BootSector）。但它是直接在裸机上运行的，不依赖于任何其他软件，所以虽然它不是操作系统，但已经具备了操作系统的一个特性。</p><p>我们知道，当计算机电源被打开时，它会先进行加电自检（POST, Power-OnSelf-Test），然后寻找启动盘，如果是选择从软盘（<em>注一</em>）启动，计算机就会检查硬盘的0 面 0 磁道 1 扇区，如果发现它以 0xAA55 结束，则 BIOS认为它是一个引导扇区。当然，一个正确的引导扇区除了以 0xAA55结束之外，还应该包含一段少于 512 字节的执行码。</p><p>一旦 BIOS 发现了引导扇区，就会将这 512 字节的内容装载到内存地址<code>$0000:7c00$</code> 处，然后跳转到 <code>$0000:7c00$</code>处将控制权彻底交给这段引导代码。到此为止，计算机不再由 BIOS中固有的程序来控制，而变成由操作系统的一部分来控制。</p><p>所以，第一行代码 <code>org 07c00</code>就是告诉编译器，将来我们的这段程序要被加载到内存偏移地址<code>$0x7c00$</code> 处。</p><h3 id="使用-bochs-制作软盘">使用 bochs 制作软盘</h3><p>执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ bximage<br></code></pre></div></td></tr></table></figure><p>然后在问到要创建 hd(硬盘) 还是 fd(软盘) 时，输入fd，之后一直默认回车即可</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607185713.png" /></p><h3 id="将引导扇区写入软盘">将引导扇区写入软盘</h3><p>执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=boot.bin of=a.img bs=512 count=1 conv=notrunc<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607190246.png" /></p><p>这里简单介绍一下 dd 命令。</p><p>Linux dd 命令用于读取、转换并输出数据。</p><p>dd可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或者标准输出。这里使用dd 命令来进行绝对扇区读写操作。</p><p>参数说明：</p><ul><li>if=文件名：输入文件名，默认为标准输入。即指定源文件。</li><li>of=文件名：输出文件名，默认为标准输出。即指定目的文件。</li><li>bs=bytes：同时设置读入/输出的块大小为 bytes 个字节。</li><li>count=blocks：仅拷贝 blocks 个块，块大小等于 bs 指定的字节数。</li><li>conv=<关键字>：这里的关键字是 notrunc，表示不截断输出文件。</li></ul><h3 id="启动-bochs">启动 bochs</h3><p>进入 boot.bin 所在目录，然后输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ bochs -f bochsrc<br></code></pre></div></td></tr></table></figure><p>注意，如果这里输入命令后出现的是一个什么都没有的一片黑色的界面的话，那是因为我们这里是带调试模式的bochs，那么，还需要再 bochs 提示符之后输入"c"，然后回车，即可看到我们想要的效果了。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607190703.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607190628.png" /></p><p>注：关于这个 <code>-f</code> 后面的这个 bochsrc配置文件，因为这里我是把它与 boot.bin一起放在同一个目录下，所以这里直接就输入了bochsrc，如果是放在其他目录下，则需要使用 bochsrc的绝对路径。而且，前面也说了，其实我们这里不需要 <code>-f</code>及后面的内容，因为我们在执行 <code>bochs</code>命令时它会自己找到当前目录下的配置文件。</p><h3 id="退出-bochs">退出 bochs</h3><p>在上面的基础上输入 <code>Ctrl + C</code>，然后输入<code>exit</code>，回车，即可退出 bochs 虚拟机。</p><hr /><p>参考：</p><p>1、《一个操作系统的实现》 2、<ahref="https://blog.csdn.net/bychen623/article/details/53619084"class="uri">https://blog.csdn.net/bychen623/article/details/53619084</a></p><p>注释：</p><p>注一：软盘是可移动的一种存储盘，就功能上来讲和现在的 U盘类似，只是外形、存储原理不一样，容量也很小，速度很慢，目前已经被淘汰。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
      <tag>bochs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决全程对最短路径问题的 Floyd-Warshall 算法(未竟)</title>
    <link href="/2021/06/01/%E8%A7%A3%E5%86%B3%E5%85%A8%E7%A8%8B%E5%AF%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E7%9A%84-Floyd-Warshall-%E7%AE%97%E6%B3%95/"/>
    <url>/2021/06/01/%E8%A7%A3%E5%86%B3%E5%85%A8%E7%A8%8B%E5%AF%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E7%9A%84-Floyd-Warshall-%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="算法思路">算法思路</h2><h3 id="递归式">递归式</h3><p><span class="math display">\[d_{ij}^{(k)} =\left\{\begin{matrix}\begin{align}&amp; \omega_{ij} &amp;&amp; {if \quad k = 0} \\&amp; min(d_{ij}^{(k - 1)}, d_{ik}^{(k - 1)} + d_{kj}^{(i - 1)})&amp;&amp; {if \quad k \geqslant 1} \\\end{align}\end{matrix}\right.\]</span></p><h3 id="伪码">伪码</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601164449.png" /></p><h3 id="一个例子">一个例子</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601164657.png"alt="图1" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601164538.png"alt="根据图1计算出的矩阵序列" /></p><h2 id="python-代码实现">Python 代码实现</h2><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : floyd_warshall.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/18</span><br><br><span class="hljs-comment"># 利用 Floyd-Warshall 算法计算全成对最短路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">floydWarshall</span>(<span class="hljs-params">W:<span class="hljs-built_in">list</span></span>):<br>    n = <span class="hljs-built_in">len</span>(W)<br>    D_list = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-comment"># 一共需要 n + 1 个 D</span><br>    D_list[<span class="hljs-number">0</span>] = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    <span class="hljs-comment"># 前驱矩阵 PI</span><br>    PI = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    PI[<span class="hljs-number">0</span>] = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    <span class="hljs-comment"># 初始化 D_list[0]</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            D_list[<span class="hljs-number">0</span>][i][j] = W[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 初始化 PI[0]</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> i == j <span class="hljs-keyword">or</span> W[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] == <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>): <span class="hljs-comment"># 这里的坐标注意取值</span><br>                PI[<span class="hljs-number">0</span>][i][j] = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> i != j <span class="hljs-keyword">and</span> W[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>):<br>                PI[<span class="hljs-number">0</span>][i][j] = i<br>    <span class="hljs-comment"># 开始迭代</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        D_list[k] = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-comment"># 索引为 0 的元素抛弃不用</span><br>        PI[k] = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-comment"># 索引为 0 的元素抛弃不用</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>                <span class="hljs-comment"># 构造 D_list</span><br>                D_list[k][i][j] = <span class="hljs-built_in">min</span>(D_list[k - <span class="hljs-number">1</span>][i][j], D_list[k - <span class="hljs-number">1</span>][i][k] + D_list[k - <span class="hljs-number">1</span>][k][j])<br>                <span class="hljs-comment"># 构造 PI</span><br>                <span class="hljs-keyword">if</span> D_list[k - <span class="hljs-number">1</span>][i][j] &lt;= D_list[k - <span class="hljs-number">1</span>][i][k] + D_list[k - <span class="hljs-number">1</span>][k][j]:<br>                    PI[k][i][j] = PI[k - <span class="hljs-number">1</span>][i][j]<br>                <span class="hljs-keyword">else</span>:<br>                    PI[k][i][j] = PI[k - <span class="hljs-number">1</span>][k][j]<br>    <span class="hljs-comment"># return D_list</span><br>    <span class="hljs-keyword">return</span> [D_list, PI]<br><br><span class="hljs-comment"># print all pairs shortest path</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printAPSP</span>(<span class="hljs-params">PI: <span class="hljs-built_in">list</span>, i: <span class="hljs-built_in">int</span>, j: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-keyword">if</span> i == j:<br>        <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-keyword">elif</span> PI[i][j] == <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no path from &quot;i&quot; to &quot;j&quot; exits&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        printAPSP(PI, i, PI[i][j])<br>        <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_matrix</span>(<span class="hljs-params">matrix:<span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> matrix:<br>        each = each[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> each:<br>            one = one[<span class="hljs-number">1</span>:]<br>            <span class="hljs-built_in">print</span>(one)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    W = [[<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), -<span class="hljs-number">4</span>],<br>         [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-number">0</span>, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-number">1</span>, <span class="hljs-number">7</span>],<br>         [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)],<br>         [<span class="hljs-number">2</span>, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), -<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)],<br>         [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-number">6</span>, <span class="hljs-number">0</span>]]<br>    res = floydWarshall(W)<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> res[<span class="hljs-number">0</span>]:<br>        each = each[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> each:<br>            one = one[<span class="hljs-number">1</span>:]<br>            <span class="hljs-built_in">print</span>(one)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;===================================================&#x27;</span>)<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> res[<span class="hljs-number">1</span>]:<br>        each = each[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> each:<br>            one = one[<span class="hljs-number">1</span>:]<br>            <span class="hljs-built_in">print</span>(one)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------&#x27;</span>)<br><br>    <span class="hljs-comment"># 打印从 i 到 j 的路径</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(W) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(W) + <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;节点&#x27;</span> + i.__str__() + <span class="hljs-string">&#x27;到节点&#x27;</span> + j.__str__() + <span class="hljs-string">&#x27;的最短路径为:  &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            printAPSP(res[<span class="hljs-number">1</span>][<span class="hljs-built_in">len</span>(res[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>], i, j)<br>            <span class="hljs-built_in">print</span>()<br><br></code></pre></div></td></tr></table></figure><p>运行结果</p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">8</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">7</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">6</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">8</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">7</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">6</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">8</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">7</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">11</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">6</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">8</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">7</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">11</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-variable">inf</span><span class="hljs-operator">,</span> <span class="hljs-number">6</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">8</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">6</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">8</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">6</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-operator">===================================================</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-operator">,</span> <span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-built_in">None</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">---------</span><br>节点<span class="hljs-number">1</span>到节点<span class="hljs-number">1</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">1</span> <br>节点<span class="hljs-number">1</span>到节点<span class="hljs-number">2</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <br>节点<span class="hljs-number">1</span>到节点<span class="hljs-number">3</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <br>节点<span class="hljs-number">1</span>到节点<span class="hljs-number">4</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <br>节点<span class="hljs-number">1</span>到节点<span class="hljs-number">5</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">1</span> <span class="hljs-number">5</span> <br>节点<span class="hljs-number">2</span>到节点<span class="hljs-number">1</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br>节点<span class="hljs-number">2</span>到节点<span class="hljs-number">2</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">2</span> <br>节点<span class="hljs-number">2</span>到节点<span class="hljs-number">3</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <br>节点<span class="hljs-number">2</span>到节点<span class="hljs-number">4</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">2</span> <span class="hljs-number">4</span> <br>节点<span class="hljs-number">2</span>到节点<span class="hljs-number">5</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <br>节点<span class="hljs-number">3</span>到节点<span class="hljs-number">1</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br>节点<span class="hljs-number">3</span>到节点<span class="hljs-number">2</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">3</span> <span class="hljs-number">2</span> <br>节点<span class="hljs-number">3</span>到节点<span class="hljs-number">3</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">3</span> <br>节点<span class="hljs-number">3</span>到节点<span class="hljs-number">4</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <br>节点<span class="hljs-number">3</span>到节点<span class="hljs-number">5</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <br>节点<span class="hljs-number">4</span>到节点<span class="hljs-number">1</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br>节点<span class="hljs-number">4</span>到节点<span class="hljs-number">2</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <br>节点<span class="hljs-number">4</span>到节点<span class="hljs-number">3</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">4</span> <span class="hljs-number">3</span> <br>节点<span class="hljs-number">4</span>到节点<span class="hljs-number">4</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">4</span> <br>节点<span class="hljs-number">4</span>到节点<span class="hljs-number">5</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <br>节点<span class="hljs-number">5</span>到节点<span class="hljs-number">1</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br>节点<span class="hljs-number">5</span>到节点<span class="hljs-number">2</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <br>节点<span class="hljs-number">5</span>到节点<span class="hljs-number">3</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <br>节点<span class="hljs-number">5</span>到节点<span class="hljs-number">4</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">5</span> <span class="hljs-number">4</span> <br>节点<span class="hljs-number">5</span>到节点<span class="hljs-number">5</span>的最短路径为<span class="hljs-operator">:</span>  <span class="hljs-number">5</span> <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex 数学公式花括号右侧数学公式每行保持左对齐(及部分内容左对齐)</title>
    <link href="/2021/06/01/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%8A%B1%E6%8B%AC%E5%8F%B7%E5%8F%B3%E4%BE%A7%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%AF%8F%E8%A1%8C%E4%BF%9D%E6%8C%81%E5%B7%A6%E5%AF%B9%E9%BD%90(%E5%8F%8A%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E5%B7%A6%E5%AF%B9%E9%BD%90)/"/>
    <url>/2021/06/01/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%8A%B1%E6%8B%AC%E5%8F%B7%E5%8F%B3%E4%BE%A7%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%AF%8F%E8%A1%8C%E4%BF%9D%E6%8C%81%E5%B7%A6%E5%AF%B9%E9%BD%90(%E5%8F%8A%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E5%B7%A6%E5%AF%B9%E9%BD%90)/</url>
    
    <content type="html"><![CDATA[<h2 id="示例代码">示例代码</h2><h3 id="示例-1">示例 1</h3><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br>m[i, j] = <br><span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br><span class="hljs-keyword">\begin</span>&#123;matrix&#125;<br><span class="hljs-keyword">\begin</span>&#123;align&#125;<br><span class="hljs-built_in">&amp;</span> 0 <span class="hljs-built_in">&amp;</span> if <span class="hljs-keyword">\quad</span> i = j <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> min<span class="hljs-keyword">\&#123;</span>m[i, k] + m[k + 1, j] + p<span class="hljs-built_in">_</span>&#123;i - 1&#125; p<span class="hljs-built_in">_</span>k p<span class="hljs-built_in">_</span>j<span class="hljs-keyword">\&#125;</span> <span class="hljs-built_in">&amp;</span> if <span class="hljs-keyword">\quad</span> i &lt; j <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;align&#125;<br><span class="hljs-keyword">\end</span>&#123;matrix&#125;<br><span class="hljs-keyword">\right</span>.<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[m[i, j] =\left\{\begin{matrix}\begin{align}&amp; 0 &amp; if \quad i = j \\&amp; min\{m[i, k] + m[k + 1, j] + p_{i - 1} p_k p_j\} &amp; if \quad i&lt; j \\\end{align}\end{matrix}\right.\]</span></p><h3 id="示例-2">示例 2</h3><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br><span class="hljs-keyword">\begin</span>&#123;matrix&#125;<br><span class="hljs-keyword">\begin</span>&#123;align&#125;<br><span class="hljs-built_in">&amp;</span> l<span class="hljs-built_in">_</span>0(x<span class="hljs-built_in">_</span>0) = 1, l<span class="hljs-built_in">_</span>0(x<span class="hljs-built_in">_</span>1) = 0, ..., l<span class="hljs-built_in">_</span>0(x<span class="hljs-built_in">_</span>n) = 0, <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> l<span class="hljs-built_in">_</span>1(x<span class="hljs-built_in">_</span>0) = 0, l<span class="hljs-built_in">_</span>1(x<span class="hljs-built_in">_</span>1) = 1, ..., l<span class="hljs-built_in">_</span>1(x<span class="hljs-built_in">_</span>n) = 0, <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> l<span class="hljs-built_in">_</span>n(x<span class="hljs-built_in">_</span>0) = 0, l<span class="hljs-built_in">_</span>n(x<span class="hljs-built_in">_</span>1) = 0, ..., l<span class="hljs-built_in">_</span>n(x<span class="hljs-built_in">_</span>n) = 1. <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;align&#125;<br><span class="hljs-keyword">\end</span>&#123;matrix&#125;<br><span class="hljs-keyword">\right</span>. <span class="hljs-keyword">\qquad</span> (6)<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[\left\{\begin{matrix}\begin{align}&amp; l_0(x_0) = 1, l_0(x_1) = 0, ..., l_0(x_n) = 0, \\&amp; l_1(x_0) = 0, l_1(x_1) = 1, ..., l_1(x_n) = 0, \\&amp; \cdots \cdots \\&amp; l_n(x_0) = 0, l_n(x_1) = 0, ..., l_n(x_n) = 1. \\\end{align}\end{matrix}\right. \qquad (6)\]</span></p><h3 id="示例-3">示例 3</h3><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br>c[i, j] = <br><span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br><span class="hljs-keyword">\begin</span>&#123;matrix&#125;<br><span class="hljs-keyword">\begin</span>&#123;align&#125;<br><span class="hljs-built_in">&amp;</span> &#123;0&#125; <span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span> &#123;if <span class="hljs-keyword">\quad</span> i = 0 <span class="hljs-keyword">\;</span> or <span class="hljs-keyword">\;</span> j = 0,&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> &#123;c[i - 1, j - 1] + 1&#125; <span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span> &#123;if <span class="hljs-keyword">\quad</span> i, j &gt; 0 <span class="hljs-keyword">\;</span> and <span class="hljs-keyword">\;</span> x<span class="hljs-built_in">_</span>i = y<span class="hljs-built_in">_</span>j,&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> &#123;max(c[i, j - 1], c[i - 1, j])&#125; <span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span> &#123;if <span class="hljs-keyword">\quad</span> i, j &gt; 0 <span class="hljs-keyword">\;</span> and <span class="hljs-keyword">\;</span> x<span class="hljs-built_in">_</span>i <span class="hljs-keyword">\neq</span> y<span class="hljs-built_in">_</span>j.&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;align&#125;<br><span class="hljs-keyword">\end</span>&#123;matrix&#125;<br><span class="hljs-keyword">\right</span>.<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[c[i, j] =\left\{\begin{matrix}\begin{align}&amp; {0} &amp;&amp; {if \quad i = 0 \; or \; j = 0,} \\&amp; {c[i - 1, j - 1] + 1} &amp;&amp; {if \quad i, j &gt; 0 \; and \;x_i = y_j,} \\&amp; {max(c[i, j - 1], c[i - 1, j])} &amp;&amp; {if \quad i, j &gt; 0\; and \; x_i \neq y_j.} \\\end{align}\end{matrix}\right.\]</span></p><h2 id="注意点">注意点</h2><p>这里的关键是要把需要对齐的行包裹在 <code>\begin&#123;align&#125;</code> 和<code>\end&#123;align&#125;</code> 内，然后使用对齐符号 <code>&amp;</code>。</p><p>注意上面的示例 3，后面使用了 <code>&amp;&amp;</code>这样一个符号，来对第二部分的内容进行左对齐，这里解释一下这个符号的含义，第一个<code>&amp;</code> 表示分隔，第二个 <code>&amp;</code> 表示对齐。</p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex 数学公式将下标放在正下方（上标放在正上方）</title>
    <link href="/2021/06/01/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%B0%86%E4%B8%8B%E6%A0%87%E6%94%BE%E5%9C%A8%E6%AD%A3%E4%B8%8B%E6%96%B9%EF%BC%88%E4%B8%8A%E6%A0%87%E6%94%BE%E5%9C%A8%E6%AD%A3%E4%B8%8A%E6%96%B9%EF%BC%89/"/>
    <url>/2021/06/01/LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%B0%86%E4%B8%8B%E6%A0%87%E6%94%BE%E5%9C%A8%E6%AD%A3%E4%B8%8B%E6%96%B9%EF%BC%88%E4%B8%8A%E6%A0%87%E6%94%BE%E5%9C%A8%E6%AD%A3%E4%B8%8A%E6%96%B9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>使用 LaTex的语法，关于把数学公式的下表放在正下方的方法，分两种情况。如下。</p><h2 id="本身是数学符号">1、本身是数学符号</h2><p>比如，<code>$\sum$</code>，行内数学公式默认的格式是</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;i = 0&#125;<span class="hljs-built_in">^</span>&#123;n&#125;<span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果是：<span class="math inline">\(\sum_{i = 0}^{n}\)</span></p><p>而如果我们要想将下标放在正下方，则需要使用 <code>\limits</code>语法，书写格式如下</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-keyword">\sum</span><span class="hljs-keyword">\limits</span><span class="hljs-built_in">_</span>&#123;i = 0&#125;<span class="hljs-built_in">^</span>&#123;n&#125;<span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果是：<span class="math inline">\(\sum\limits_{i =0}^{n}\)</span></p><p><strong>注意</strong>，如果使用段数学公式，即用双美元符号包裹的 LaTex代码，那么，下标是默认放置在正下方的。格式如下</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;i = 0&#125;<span class="hljs-built_in">^</span>&#123;n&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果如下</p><p><span class="math display">\[\sum_{i = 0}^{n}\]</span></p><h2 id="本身不是数学符号">2、本身不是数学符号</h2><p>比如，如果我们想将 <code>max</code>的右下角的下标放置在正下方，就像这样<code>$\mathop&#123;max&#125;\limits_&#123;1 \leqslant i \leqslant n&#125;$</code>，那么我们需要先使用<code>\mathop</code> 将 <code>max</code> 转为数学符号，然后再使用<code>\limits</code>，格式如下</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-keyword">\mathop</span>&#123;max&#125;<span class="hljs-keyword">\limits</span><span class="hljs-built_in">_</span>&#123;1 <span class="hljs-keyword">\leqslant</span> i <span class="hljs-keyword">\leqslant</span> n&#125; |x<span class="hljs-built_in">_</span>i|<span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果是：<span class="math inline">\(\mathop{max}\limits_{1 \leqslanti \leqslant n} |x_i|\)</span></p><p><strong>注意</strong>，如果使用段数学公式，那么，相应的代码和效果如下</p><p>代码 2.1</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\mathop</span>&#123;max&#125;<span class="hljs-built_in">_</span>&#123;1 <span class="hljs-keyword">\leqslant</span> i <span class="hljs-keyword">\leqslant</span> n&#125; |x<span class="hljs-built_in">_</span>i|<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果 2.1</p><p><span class="math display">\[{max}_{1 \leqslant i \leqslant n}|x_i|\]</span></p><p>代码 2.2</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\mathop</span>&#123;max&#125;<span class="hljs-built_in">_</span>&#123;1 <span class="hljs-keyword">\leqslant</span> i <span class="hljs-keyword">\leqslant</span> n&#125; |x<span class="hljs-built_in">_</span>i|<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果 2.2</p><p><span class="math display">\[\mathop{max}_{1 \leqslant i \leqslant n}|x_i|\]</span></p><p>代码 2.3</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\mathop</span>&#123;max&#125;<span class="hljs-keyword">\limits</span><span class="hljs-built_in">_</span>&#123;1 <span class="hljs-keyword">\leqslant</span> i <span class="hljs-keyword">\leqslant</span> n&#125; |x<span class="hljs-built_in">_</span>i|<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果 2.3</p><p><span class="math display">\[\mathop{max}\limits_{1 \leqslant i\leqslant n} |x_i|\]</span></p><p>还有一个值得<strong>注意</strong>的点是，只有数学符号可以使用<code>\limits</code> 语法，这一点一定要切记。</p><h2 id="其他方法">3、其他方法</h2><p>代码：</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\stackrel</span>&#123;+&#125;&#123;<span class="hljs-keyword">\Rightarrow</span>&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>显示效果：</p><p><span class="math display">\[\stackrel{+}{\Rightarrow}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统之常用的页面淘汰算法(未竟)</title>
    <link href="/2021/05/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/"/>
    <url>/2021/05/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="最佳算法opt-算法-optimal">最佳算法(OPT 算法, Optimal)</h2><h3 id="思想">思想</h3><ul><li>淘汰不再需要或最远将来才会用到的页面.</li></ul><h3 id="例子">例子</h3><p>分配 3 个页框. 页面序列: A, B, C, D, A, B, E, A, B, C, D, E.分析其按照 OPT 算法淘汰页面的缺页情况.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210531145159.png" /></p><p>缺页次数 = 7　　　缺页率 = 7 / 12 = 58%</p><h3 id="特点">特点</h3><p>理论上最佳, 实践中该算法无法实现.</p><h2 id="先进先出淘汰算法fifo-算法">先进先出淘汰算法(FIFO 算法)</h2><h3 id="思想-1">思想</h3><p>淘汰在内存中停留时间最长的页面</p><h3 id="例子-1">例子</h3><p>分配 3 个页框. 页面序列: A, B, C, D, A, B, E, A, B, C, D, E.分析其按照 FIFO 算法淘汰页面的缺页情况.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210531150119.png" /></p><p>缺页次数 = 9　　　缺页率 = 9 / 12 = 75%</p><h3 id="优点">优点</h3><p>实现简单: 页面按进入内存的时间顺序排序, 淘汰队头页面.</p><h3 id="缺点">缺点</h3><p>进程只有按顺序访问地址空间时页面命中率才最理想.</p><h3 id="异常现象">异常现象</h3><p>对于一些特定的访问序列, 分配页框越多, 缺页率越高!</p><h2id="最久未使用淘汰算法lru-least-recently-used">最久未使用淘汰算法(LRU,Least Recently Used)</h2><h3 id="思想-2">思想</h3><p>淘汰最长时间未被使用的页面.</p><h3 id="例子-2">例子</h3><p>分配 3 个页框. 页面序列: A, B, C, D, A, B, E, A, B, C, D, E.分析其按照 LRU 算法淘汰页面的缺页情况.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210531150753.png" /></p><p>缺页次数 = 10　　　缺页率 = 10 / 12 = 83%</p><h3 id="lru-的实现方法硬件方法">LRU 的实现方法(硬件方法)</h3>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主定理与主方法的使用</title>
    <link href="/2021/05/30/%E4%B8%BB%E5%AE%9A%E7%90%86%E4%B8%8E%E4%B8%BB%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/05/30/%E4%B8%BB%E5%AE%9A%E7%90%86%E4%B8%8E%E4%B8%BB%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="主定理">主定理</h2><p>令 <code>$a \geqslant 1$</code> 和 <code>$b &gt; 1$</code> 是常数,<code>$f(n)$</code> 是一个函数, <code>$T(n)$</code>是定义在非负整数上的递归式:</p><p><span class="math display">\[T(n) = aT(n/b) + f(n)\]</span></p><p>其中我们将 <code>$n/b$</code> 解释为<code>$\left \lfloor n/b \right \rfloor$</code> 或<code>$\left \lceil n/b \right \rceil$</code>. 那么 <code>$T(n)$</code>有如下渐进界:</p><ol type="1"><li>若对某个常数 <code>$\varepsilon &gt; 0$</code> 有<code>$f(n) = O(n^&#123;log_&#123;b&#125;a - \varepsilon&#125;)$</code>, 则<code>$T(n) = \Theta(n^&#123;log_&#123;b&#125;a&#125;)$</code>.</li><li>若 <code>$f(n) = \Theta(n^&#123;log_&#123;b&#125;a&#125;)$</code>, 则<code>$T(n) = O(n^&#123;log_&#123;b&#125;a&#125;lgn)$</code>.</li><li>若对某个常数 <code>$\varepsilon &gt; 0$</code> 有<code>$f(n) = \Omega(n^&#123;log_&#123;b&#125;a + \varepsilon&#125;)$</code>, 且对某个常数<code>$c &lt; 1$</code> 和所有足够大的 <code>$n$</code> 有<code>$af(n/b) \leqslant cf(n)$</code>, 则<code>$T(n) = \Theta(f(n))$</code>.</li></ol><h2 id="使用主方法">使用主方法</h2><p>使用主方法很简单, 我们只需确定主定理的哪种情况成立, 即可得到解.</p><p>我们看下面的例子</p><p><span class="math display">\[T(n) = 9T(n/3) + n\]</span></p><p>对于这个递归式, 我们有 <code>$a = 9$</code>, <code>$b = 3$</code>,<code>$f(n) = n$</code>, 因此<code>$n^&#123;log_&#123;b&#125;a&#125; = n^&#123;log_&#123;3&#125;9&#125; = \Theta(n^2)$</code>. 由于<code>$f(n) = O(n^&#123;log_&#123;3&#125;9 - \varepsilon&#125;)$</code>, 其中<code>$\varepsilon = 1$</code>, 因此可以应用主定理的情况 1, 从而得到解<code>$T(n) = \Theta(n^2)$</code>.</p><h2 id="参考">参考</h2><p>《算法导论》（中文版）</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 中的 if __name == &#39;__main__&#39; 该如何理解</title>
    <link href="/2021/05/28/Python-%E4%B8%AD%E7%9A%84-if-name-main-%E8%AF%A5%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/"/>
    <url>/2021/05/28/Python-%E4%B8%AD%E7%9A%84-if-name-main-%E8%AF%A5%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>本文转载自:https://blog.konghy.cn/2017/04/24/python-entry-program/</p><h2 id="程序入口">程序入口</h2><p>对于很多编程语言来说，程序都必须要有一个入口，比如C，C++，以及完全面向对象的编程语言 Java，C#等。如果你接触过这些语言，对于程序入口这个概念应该很好理解，C 和 C++都需要有一个 main 函数来作为程序的入口，也就是程序的运行会从 main函数开始。同样，Java 和 C# 必须要有一个包含 Main方法的主类来作为程序入口。</p><p>而 Python则有不同，它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。也就是从脚本第一行开始运行，没有统一的入口。</p><p>一个 Python源码文件除了可以被直接运行外，还可以作为模块（也就是库）被导入。不管是导入还是直接运行，最顶层的代码都会被运行（Python用缩进来区分代码层次）。而实际上在导入的时候，有一部分代码我们是不希望被运行的。</p><p>举一个例子来说明一下，假设我们有一个 const.py 文件，内容如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PI = <span class="hljs-number">3.14</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;PI:&quot;</span>, PI<br><br>main()<br></code></pre></div></td></tr></table></figure><p>我们在这个文件里边定义了一些常量，然后又写了一个 main函数来输出定义的常量，最后运行 main函数就相当于对定义做一遍人工检查，看看值设置的都对不对。然后我们直接执行该文件(pythonconst.py),输出：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">PI</span>: <span class="hljs-number">3</span>.<span class="hljs-number">14</span><br></code></pre></div></td></tr></table></figure><p>现在，我们有一个 area.py 文件，用于计算圆的面积，该文件里边需要用到const.py 文件中的 PI 变量，那么我们从 const.py 中把 PI 变量导入到area.py 中：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> const <span class="hljs-keyword">import</span> PI<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_round_area</span>(<span class="hljs-params">radius</span>):<br>    <span class="hljs-keyword">return</span> PI * (radius ** <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;round area: &quot;</span>, calc_round_area(<span class="hljs-number">2</span>)<br><br>main()<br></code></pre></div></td></tr></table></figure><p>运行 area.py，输出结果：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PI: <span class="hljs-number">3.14</span><br><span class="hljs-built_in">round</span> area:  <span class="hljs-number">12.56</span><br></code></pre></div></td></tr></table></figure><p>可以看到，const 中的 main函数也被运行了，实际上我们是不希望它被运行，提供 main也只是为了对常量定义进行下测试。这时，<code>if __name__ == '__main__'</code>就派上了用场。把 const.py 改一下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PI = <span class="hljs-number">3.14</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;PI:&quot;</span>, PI<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><p>然后再运行 area.py，输出如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">round</span> area:  <span class="hljs-number">12</span>.<span class="hljs-number">56</span><br></code></pre></div></td></tr></table></figure><p>再运行下 const.py，输出如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">PI</span>: <span class="hljs-number">3</span>.<span class="hljs-number">14</span><br></code></pre></div></td></tr></table></figure><p>这才是我们想要的效果。</p><p><code>if __name__ == '__main__'</code> 就相当于是 Python模拟的程序入口。Python本身并没有规定这么写，这只是一种编码习惯。由于模块之间相互引用，不同模块可能都有这样的定义，而入口程序只能有一个。到底哪个入口程序被选中，这取决于<code>__name__</code> 的值。</p><h2 id="name"><strong>name</strong></h2><p><code>__name__</code>是内置变量，用于表示当前模块的名字，同时还能反映一个包的结构。来举个例子，假设有如下一个包：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><br>├── <span class="hljs-selector-tag">b</span><br>│   ├── c<span class="hljs-selector-class">.py</span><br>│   └── __init__<span class="hljs-selector-class">.py</span><br>└── __init__.py<br></code></pre></div></td></tr></table></figure><p>目录中所有 py 文件的内容都为：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span> __name__<br></code></pre></div></td></tr></table></figure><p>我们执行 <code>python -c "import a.b.c"</code>，输出结果：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.b</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.b</span>.c<br></code></pre></div></td></tr></table></figure><p>由此可见，<code>__name__</code>可以清晰的反映一个模块在包中的层次。其实，所谓模块名就是 import时需要用到的名字，例如：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> tornado<br><span class="hljs-keyword">import</span> tornado.web<br></code></pre></div></td></tr></table></figure><p>这里的 tornado 和 tornado.web 就被称为模块的模块名。</p><p>如果一个模块被直接运行，则其没有包结构，其 <code>__name__</code> 值为<code>__main__</code>。例如在上例中，我们直接运行 c.py 文件（pythona/b/c.py），输出结果如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__main__</span><br></code></pre></div></td></tr></table></figure><p>所以，<code>if __name__ == '__main__'</code>我们简单的理解就是：<strong>如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行</strong>。</p><p>实际上，这个问题还可以衍生出其他的一些知识点，例如<code>__main__.py</code>文件与 Python 的 <code>-m</code> 参数。</p><h2 id="main.py-文件与-python--m"><strong>main</strong>.py 文件与 python-m</h2><p>Python 的 <code>-m</code>参数用于将一个模块或者包作为一个脚本运行，而 <code>__main__.py</code>文件则相当于是一个包的“入口程序”。</p><p>首先我们需要来看看 <code>python xxx.py</code> 与<code>python -m xxx.py</code> 的区别。两种运行 Python程序的方式的不同点在于，一种是直接运行，一种是当做模块来运行。</p><p>先来看一个简单的例子，假设有一个 Python 文件 run.py，其内容如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span> sys.path<br></code></pre></div></td></tr></table></figure><p>我们用直接运行的方式启动（pythonrun.py），输出结果(为了说明问题，输出结果只截取了重要部分，下同)：</p><figure class="highlight scheme"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;/home/huoty/aboutme/pythonstudy/main</span>&#x27;, ...]<br></code></pre></div></td></tr></table></figure><p>然后以模块的方式运行（python -m run.py）:</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[<span class="hljs-string">&#x27;&#x27;</span>, ...]<br><span class="hljs-regexp">/usr/</span>bin/python: No module named run.py<br></code></pre></div></td></tr></table></figure><p>由于输出结果只列出了关键的部分，应该很容易看出他们之间的差异。直接运行是把run.py 文件所在的目录放到了 sys.path属性中。以模块方式运行是把你输入命令的目录（也就是当前工作路径），放到了sys.path 属性中。以模块方式运行还有一个不同的地方是，多出了一行<code>No module named run.py</code>的错误。实际上以模块方式运行时，Python 先对 run.py 执行一遍 import，所以<code>print sys.path</code> 被成功执行，然后 Python 才尝试运行 run.py模块，但是，在 path 变量中并没有 run.py这个模块，所以报错。而正确的运行方式，应该是<code>python -m run</code>.</p><p>这个例子并不能明显的说明问题。接着我们来看看 <code>__main__.py</code>的作用。</p><p>仍然先看例子，有如下一个包：</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">package</span><br><span class="hljs-title">├── __init__.py</span><br>└── __main__.py<br></code></pre></div></td></tr></table></figure><ul><li><strong>init</strong>.py</li></ul><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;__init__&quot;</span><br><span class="hljs-built_in">print</span> sys.path<br></code></pre></div></td></tr></table></figure><ul><li><strong>main</strong>.py</li></ul><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;__main__&quot;</span><br><span class="hljs-built_in">print</span> sys.path<br></code></pre></div></td></tr></table></figure><p>用 <code>python -m package</code> 运行结果：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">__init__<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;&#x27;</span>, ...]</span><br>__main__<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;&#x27;</span>, ...]</span><br></code></pre></div></td></tr></table></figure><p>用 <code>python package</code> 运行结果：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">__main__<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;package&#x27;</span>, ...]</span><br></code></pre></div></td></tr></table></figure><p>然后我们来总结一下：</p><ul><li>1、 <strong>加上 -m 参数时会把当前工作目录添加到 sys.path中，而不加时则会把脚本所在目录添加到 sys.path 中。</strong></li><li>2、 <strong>加上 -m 参数时 Python会先将模块或者包导入，然后再执行。</strong></li><li>3、 <strong><code>__main__.py</code>文件是一个包或者目录的入口程序。</strong>不管是用<code>python package</code> 还是用 <code>python -m package</code>运行时，<code>__main__.py</code> 文件总是被执行。</li></ul><h2 id="参考资料">参考资料</h2><ul><li><a href="http://www.tuicool.com/articles/jMzqYzF"class="uri">http://www.tuicool.com/articles/jMzqYzF</a></li><li><a href="http://stackoverflow.com/questions/4042905/what-is-main-py"class="uri">http://stackoverflow.com/questions/4042905/what-is-main-py</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python字符串前面的r的含义</title>
    <link href="/2021/05/20/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E9%9D%A2%E7%9A%84r%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2021/05/20/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E9%9D%A2%E7%9A%84r%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>r 代表 raw 的意思. 表示要将字符串中所有字符当成原始字符来看待. 比如<code>\n</code> 在普通字符串里表示换行的意思, 而在带有 r 标识的字符串中,它就是两个字符的组合.</p><p>示例代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">str</span> = <span class="hljs-string">r&#x27;hello \n&#x27;</span><br>str2 = <span class="hljs-string">&#x27;hello \n hello&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(str2)<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">hello <span class="hljs-string">\n</span><br>hello <br> hello<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>‘编写高质量代码：改善Python代码程序的91个建议读书笔记’</title>
    <link href="/2021/05/20/%E2%80%98%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81%EF%BC%9A%E6%94%B9%E5%96%84Python%E4%BB%A3%E7%A0%81%E7%A8%8B%E5%BA%8F%E7%9A%8491%E4%B8%AA%E5%BB%BA%E8%AE%AE%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%99/"/>
    <url>/2021/05/20/%E2%80%98%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81%EF%BC%9A%E6%94%B9%E5%96%84Python%E4%BB%A3%E7%A0%81%E7%A8%8B%E5%BA%8F%E7%9A%8491%E4%B8%AA%E5%BB%BA%E8%AE%AE%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%99/</url>
    
    <content type="html"><![CDATA[<h3 id="建议一">建议一</h3><p>这里主要是对书中一些有意思的代码进行尝试. 比如快速排序, 差不多 10行就可以搞定, 很方便的写法.</p><p>代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : draft02.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/20</span><br><br><span class="hljs-comment"># 快速排序</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">array:<span class="hljs-built_in">list</span></span>):<br>    less = []; greater = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> array<br>    pivot = array.pop() <span class="hljs-comment"># 默认是弹出最后一个元素</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> array:<br>        <span class="hljs-keyword">if</span> x &lt;= pivot:<br>            less.append(x)<br>        <span class="hljs-keyword">else</span>:<br>            greater.append(x)<br>    <span class="hljs-keyword">return</span> quicksort(less) + [pivot] + quicksort(greater)<br><br><span class="hljs-comment"># 交换两个变量的值</span><br>a = <span class="hljs-number">2</span><br>b = <span class="hljs-number">3</span><br>a, b = b, a<br><br><span class="hljs-comment"># 逆转列表</span><br>list_a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    array = [<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">19</span>, <span class="hljs-number">27</span>]<br>    array = quicksort(array)<br>    <span class="hljs-built_in">print</span>(array)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(a, b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">reversed</span>(list_a)))<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-meta">[0, 1, 1, 2, 4, 5, 8, 9, 10, 19, 27, 32, 64]</span><br><span class="hljs-code">--------</span><br><span class="hljs-code">3 2</span><br><span class="hljs-code">------</span><br><span class="hljs-meta">[4, 3, 2, 1]</span><br></code></pre></div></td></tr></table></figure><h3 id="建议三">建议三</h3><p>1、三元操作符 "?:" 在 Python 中的替代品</p><p>code</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">X = <span class="hljs-number">0</span><br>Y = -<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(X <span class="hljs-keyword">if</span> X &lt; Y <span class="hljs-keyword">else</span> Y)<br></code></pre></div></td></tr></table></figure><p>output</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-2</span><br></code></pre></div></td></tr></table></figure><p>2、switch...case 在 Python 中的一种简单替代</p><p>code</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-number">0</span>: <span class="hljs-string">&quot;You typed zero.\n&quot;</span>,<br>        <span class="hljs-number">1</span>: <span class="hljs-string">&quot;You are in top.\n&quot;</span>,<br>        <span class="hljs-number">2</span>: <span class="hljs-string">&quot;n is an even number.\n&quot;</span><br>    &#125;.get(x, <span class="hljs-string">&quot;Only single_digit numbers are allowed\n&quot;</span>)<br><br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">3</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>output</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">n <span class="hljs-keyword">is</span> an even <span class="hljs-built_in">number</span>.<br><br></code></pre></div></td></tr></table></figure><p>注意，这里原书的代码有问题，函数签名里的用的是<code>x</code>，但是原书在函数体中的 <code>get()</code> 中用的却是<code>n</code>。</p><h3 id="建议八-利用-assert-语句来发现问题">建议八 利用 assert语句来发现问题</h3><p>基本语法</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">assert</span> expression1 [, expression2] <span class="hljs-comment"># expression2 是可选的, 用来传递具体的异常信息</span><br></code></pre></div></td></tr></table></figure><p>使用范例</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y = <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> x == y, <span class="hljs-string">&#x27;not euqals&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>AssertionError: <span class="hljs-keyword">not</span> euqals<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> x != y <span class="hljs-comment"># 这个语句敲下回车不会发生任何问题</span><br>&gt;&gt;&gt;<br></code></pre></div></td></tr></table></figure><p>在执行过程中它实际相当于如下代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y = <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-literal">__debug__</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> x == y:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">raise</span> AssertionError(<span class="hljs-string">&quot;not equals&quot;</span>)<br>...<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>AssertionError: <span class="hljs-keyword">not</span> equals<br>&gt;&gt;&gt;<br></code></pre></div></td></tr></table></figure><p>附：<code>__debug__</code> 的值默认设置为 True，而且是只读的。</p><p>我个人感觉一般尽量还是少用这个 <code>assert</code> 为好。在 Python中这个是对性能有影响的。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Python 替换文本中的 NBSP</title>
    <link href="/2021/05/20/%E5%88%A9%E7%94%A8-Python-%E6%9B%BF%E6%8D%A2%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84-NBSP/"/>
    <url>/2021/05/20/%E5%88%A9%E7%94%A8-Python-%E6%9B%BF%E6%8D%A2%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84-NBSP/</url>
    
    <content type="html"><![CDATA[<p>今天在使用 MusicBee 听歌时, 发现它的歌词不能够自动换行,然后将歌词粘贴到 P有Charm 中, 发现有很多这个 <code>NBSP</code>,</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210520224314.png" /></p><p>根据以往的经验, 这和 html 中硬编码的空格 <code>&amp;nbsp</code>有点像, 然后就直接使用 Python 的 <code>replace()</code>函数给替换掉之后, 发现歌词就可以正常换行了.</p><p>完整代码如下:</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : draft01.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/20</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[00:00.000] 作词 : Angergård</span><br><span class="hljs-string">[00:01.000] 作曲 : Club 8</span><br><span class="hljs-string">[00:08.660]it&#x27;s saturday</span><br><span class="hljs-string">[00:10.200]so you&quot;re going out</span><br><span class="hljs-string">[00:12.250]you&quot;re going out without much in sight</span><br><span class="hljs-string">[00:16.100]when all stand still</span><br><span class="hljs-string">[00:18.500]you just can&quot;t go home</span><br><span class="hljs-string">[00:20.600]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[00:26.950]</span><br><span class="hljs-string">[00:32.670]hey you</span><br><span class="hljs-string">[00:34.390]what&quot;s that you&quot;re saying?</span><br><span class="hljs-string">[00:36.210]it&quot;s the club 8</span><br><span class="hljs-string">[00:38.370]who&quot;s gonna be playing here</span><br><span class="hljs-string">[00:45.220]</span><br><span class="hljs-string">[00:56.730]hey you</span><br><span class="hljs-string">[00:58.370]stop that singing</span><br><span class="hljs-string">[01:00.180]cause the club 8</span><br><span class="hljs-string">[01:02.410]is all there needs to be</span><br><span class="hljs-string">[01:14.110]</span><br><span class="hljs-string">[01:16.780]it&quot;s saturday</span><br><span class="hljs-string">[01:18.500]so you&quot;re going out</span><br><span class="hljs-string">[01:20.460]you&quot;re going out without much in sight</span><br><span class="hljs-string">[01:24.0]when all stand still</span><br><span class="hljs-string">[01:26.400]you just can&quot;t go home</span><br><span class="hljs-string">[01:28.400]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[01:34.340]</span><br><span class="hljs-string">[01:44.910]hey you</span><br><span class="hljs-string">[01:46.520]what&quot;s that you&quot;re saying?</span><br><span class="hljs-string">[01:48.470]it&quot;s the club 8</span><br><span class="hljs-string">[01:50.509]who&quot;s gonna be playing here</span><br><span class="hljs-string">[02:00.810]</span><br><span class="hljs-string">[02:08.880]hey you</span><br><span class="hljs-string">[02:10.509]your sound&quot;s a disaster</span><br><span class="hljs-string">[02:12.240]won&quot;t you please step</span><br><span class="hljs-string">[02:14.460]out of the way for me</span><br><span class="hljs-string">[02:21.900]</span><br><span class="hljs-string">[02:28.650]it&quot;s saturday</span><br><span class="hljs-string">[02:30.150]so you&quot;re going out</span><br><span class="hljs-string">[02:32.610]you&quot;re going out without much in sight</span><br><span class="hljs-string">[02:36.140]when all stand still</span><br><span class="hljs-string">[02:38.710]you just can&quot;t go home</span><br><span class="hljs-string">[02:40.570]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[02:47.500]</span><br><span class="hljs-string">[02:52.950]take your time</span><br><span class="hljs-string">[02:54.850]drink your wine</span><br><span class="hljs-string">[02:56.850]i don&quot;t care where you&quot;re going</span><br><span class="hljs-string">[03:00.890]if music&quot;s fine</span><br><span class="hljs-string">[03:03.200]i don&quot;t mind</span><br><span class="hljs-string">[03:05.110]if all those people are showing off</span><br><span class="hljs-string">[03:12.940]it&quot;s saturday</span><br><span class="hljs-string">[03:14.390]so you&quot;re going out</span><br><span class="hljs-string">[03:16.590]you&quot;re going out without much in sight</span><br><span class="hljs-string">[03:20.220]when all stand still</span><br><span class="hljs-string">[03:22.400]you just can&quot;t go home</span><br><span class="hljs-string">[03:28.670]it&quot;s saturday</span><br><span class="hljs-string">[03:30.400]so you&quot;re going out</span><br><span class="hljs-string">[03:32.670]you&quot;re going out without much in sight</span><br><span class="hljs-string">[03:36.350]when all stand still</span><br><span class="hljs-string">[03:38.390]you just can&quot;t go home</span><br><span class="hljs-string">[03:40.700]you&quot;re staying out til the morning comes</span><br><span class="hljs-string">[03:50.700]</span><br><span class="hljs-string">[04:00.240]</span><br><span class="hljs-string">[04:05.240]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>res = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>res = <span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>小玩意</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对博客本身的内省</title>
    <link href="/2021/05/20/%E5%AF%B9%E5%8D%9A%E5%AE%A2%E6%9C%AC%E8%BA%AB%E7%9A%84%E5%86%85%E7%9C%81/"/>
    <url>/2021/05/20/%E5%AF%B9%E5%8D%9A%E5%AE%A2%E6%9C%AC%E8%BA%AB%E7%9A%84%E5%86%85%E7%9C%81/</url>
    
    <content type="html"><![CDATA[<p>2021.0520</p><p>目前博客只能够维护宽屏的电脑端了. 其他的暂时都不考虑. 在使用 Hexo渲染的过程中出现的一些代码警告暂时也顾不上了.写博客是为了巩固和掌握知识, 现阶段是没有办法兼顾很多内容的.只要暂时电脑端浏览博客不出现问题就可以了.</p><p>重要的是写! 写! 写!</p><p><strong>一个星期可以对博客进行一次审视与整理.</strong></p>]]></content>
    
    
    <categories>
      
      <category>杂感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉格朗日（Lagrange）插值多项式的基函数构造法(详细推导)</title>
    <link href="/2021/05/20/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%EF%BC%88Lagrange%EF%BC%89%E6%8F%92%E5%80%BC%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E5%9F%BA%E5%87%BD%E6%95%B0%E6%9E%84%E9%80%A0%E6%B3%95/"/>
    <url>/2021/05/20/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%EF%BC%88Lagrange%EF%BC%89%E6%8F%92%E5%80%BC%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E5%9F%BA%E5%87%BD%E6%95%B0%E6%9E%84%E9%80%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>先从最简单的一次插值(n = 1) 开始, 求作一次式 <spanclass="math inline">\(L_{1}(x)\)</span>, 使之满足条件</p><p><span class="math display">\[L_{1}(x_{0}) = y_0, \quad L_1(x_1) =y_1.\]</span></p><p>从几何上看, <span class="math inline">\(y = L_1(x)\)</span> 即是过点<span class="math inline">\((x_0, y_0)\)</span> 和 <spanclass="math inline">\((x_1, y_1)\)</span> 的直线, 由解析几何知道,这条直线可用点斜式表示为</p><p><span class="math display">\[L_1(x) = y_0 + \frac{y_1 - y_0}{x_1 -x_0}(x - x_0). \qquad (1)\]</span></p><p>线性插值公式 <span class="math inline">\((1)\)</span>亦可表为下列两点式</p><p><span class="math display">\[L_1(x) = \frac{x - x_1}{x_0 - x_0}y_0 +\frac{x - x_0}{x_1 - x_0}y_1. \qquad (2)\]</span></p><p>若记</p><p><span class="math display">\[l_0(x) = \frac{x - x_1}{x_0 - x_1},\quad l_1(x) = \frac{x - x_0}{x_1 - x_0},\]</span></p><p>则式 <span class="math inline">\((2)\)</span> 还可写为</p><p><span class="math display">\[L_1(x) = y_0l_0(x) + y_1l_1(x) = \sum_{i= 0}^{1}y_il_i(x),\]</span></p><p>其中, <span class="math inline">\(l_i(x)\)</span> 称为插值基函数,它们的图形见下图,</p><p><img src="https://i.imgur.com/zEdjQYn.png" /></p><p>且有如下特点:</p><p><span class="math display">\[\left\{\begin{matrix}\begin{align}&amp; l_0(x) + l_1(x) = 1, \\&amp; l_0(x_0) = 1, \: l_0(x_1) = 0, \\&amp; l_1(x_0) = 0, \: l_1(x_1) = 1, \\\end{align}\end{matrix}\right. \qquad (3)\]</span></p><p>即</p><p><span class="math display">\[l_i(x_j) = \delta_{ij} =\left\{\begin{matrix}1, \quad i = j, \\0, \quad i \neq j, \\\end{matrix}\right.\quad i, j = 0, 1.\]</span></p><p>由上可见, <span class="math inline">\(\displaystyle l_0(x) = \frac{x- x_1}{x_0 - x_1}\)</span> 与 <span class="math inline">\(\displaystylel_1(x) = \frac{x - x_0}{x_1 - x_0}\)</span> 满足条件 <spanclass="math inline">\((3)\)</span> 且都是线性函数,反过来,如果一次函数<span class="math inline">\(l_0(x)\)</span> 与 <spanclass="math inline">\(l_1(x)\)</span> 满足条件 <spanclass="math inline">\((3)\)</span>, 那么可以证明, 它们只能是 <spanclass="math inline">\(\displaystyle \frac{x - x_1}{x_0 - x_1}\)</span>与 <span class="math inline">\(\displaystyle \frac{x - x_0}{x_1 -x_0}\)</span>.</p><p>事实上, 由代数多项式的性质值, 如果 <spanclass="math inline">\(x_0\)</span> 是一个 <spanclass="math inline">\(n\)</span> 次多项式 <spanclass="math inline">\(L_n(x)\)</span> 的零点, 则多项式 <spanclass="math inline">\(L_n{x}\)</span> 就一定含有一因子 <spanclass="math inline">\((x - x_0)\)</span>, 这时</p><p><span class="math display">\[L_n(x) = (x - x_0) L_{n - 1}(x),\]</span></p><p>其中, <span class="math inline">\(L_{n - 1}(x)\)</span> 为 <spanclass="math inline">\(n - 1\)</span> 次多项式.</p><p>因此, 对于一次函数 <span class="math inline">\(l_0(x)\)</span>, 性质<span class="math inline">\(l_1(x_1) = 0\)</span> 说明 <spanclass="math inline">\(x_1\)</span> 是 <spanclass="math inline">\(l_0(x)\)</span> 的零点, 这时 <spanclass="math inline">\(l_0(x)\)</span> 含有因子 <spanclass="math inline">\((x - x_1)\)</span>; 由于 <spanclass="math inline">\(l_0(x)\)</span> 是一次多项式, 所以</p><p><span class="math display">\[l_0(x)= c(x - x_1), \qquad(4)\]</span></p><p>其中, c 是常数. 又由 <span class="math inline">\(l_0(x_0) =1\)</span>, 将其代入式 <span class="math inline">\((4)\)</span>, 得<span class="math inline">\(\displaystyle \frac{1}{x_0 - x_1}\)</span>,于是得</p><p><span class="math display">\[l_0(x)= \frac{x - x_0}{x_0 -x_1}.\]</span></p><p>同理可得</p><p><span class="math display">\[l_1(x) = \frac{x - x_0}{x_1 -x_0}.\]</span></p><p>函数 <span class="math inline">\(l_0(x), l_1(x)\)</span> 也常称一次<span class="math inline">\(Lagrange\)</span> 基函数.</p><p><strong>一般情形:</strong></p><p>求作 <span class="math inline">\(n\)</span> 次式 <spanclass="math inline">\(L_n(x)\)</span>, 使之满足</p><p><span class="math display">\[L_n(x_i) = y_i = f(x_i), \quad i = 0, 1,..., n. \qquad (5)\]</span></p><p>从几何上看, 就是求作 <span class="math inline">\(n\)</span> 次曲线<span class="math inline">\(y = L_n(x)\)</span>, 使之通过 <spanclass="math inline">\((n + 1)\)</span> 个点 <spanclass="math inline">\((x_0, y_0), (x_1, y_1), ..., (x_n, y_n)\)</span>.设</p><p><span class="math display">\[L_n(x) = \sum_{i = 0}^{n} y_il_i(x),\]</span></p><p>也就是仍从构造所谓插值基函数 <spanclass="math inline">\(l_i(x)\)</span> 入手, 由插值条件 <spanclass="math inline">\((5)\)</span> 知 <spanclass="math inline">\(l_i(x)\)</span> 应满足条件 <spanclass="math inline">\(l_i(x) = \delta_{ij}, \: i, j = 0, 1, ...,n\)</span>, 即 <span class="math inline">\(n\)</span> 次多项式 <spanclass="math inline">\(l_i(x), \: i = 0, 1, ..., n\)</span> 满足条件</p><p><span class="math display">\[\left\{\begin{matrix}\begin{align}&amp; l_0(x_0) = 1, l_0(x_1) = 0, ..., l_0(x_n) = 0, \\&amp; l_1(x_0) = 0, l_1(x_1) = 1, ..., l_1(x_n) = 0, \\&amp; \cdots \cdots \\&amp; l_n(x_0) = 0, l_n(x_1) = 0, ..., l_n(x_n) = 1. \\\end{align}\end{matrix}\right. \qquad (6)\]</span></p><p>由条件 <span class="math inline">\((6)\)</span> 知, <spanclass="math inline">\(n\)</span> 次多项式 <spanclass="math inline">\(l_0(x)\)</span> 有 <spanclass="math inline">\(n\)</span> 个零点, 它们为 <spanclass="math inline">\(x_1, x_2, ..., x_n\)</span>, 所以</p><p><span class="math display">\[l_0(x)= c_0(x - x_1)(x - x_2) \cdots (x- x_n), \qquad (7)\]</span></p><p>其中, <span class="math inline">\(c_0\)</span> 为待定常数; 把 <spanclass="math inline">\(x = x_0\)</span> 代入式 <spanclass="math inline">\((7)\)</span>, 并注意到 <spanclass="math inline">\(l_0(x_0) = 1\)</span>, 可推得</p><p><span class="math display">\[l_i(x) = \frac{(x - x_0) \cdots (x -x_{i - 1}) (x - x_{i + 1}) \cdots (x - x_n)}{(x_i - x_0) \cdots (x_i -x_{i - 1})(x_i - x_{i + 1}) \cdots (x_i - x_n)} = \prod_{j = 0 \\ i \neqj}^{n} \frac{x - x_j}{x_i - x_j}. \qquad (8)\]</span></p><p>于是 <span class="math inline">\(y = f(x)\)</span> 的 <spanclass="math inline">\(n\)</span> 次插值多项式可写为</p><p><span class="math display">\[L_n(x) = \sum_{i = 0}^{n} y_il_i(x) =\sum_{i = 0}^{n} (\prod_{j = 0 \\ j \neq i}^{n} \frac{x - x_j}{x_i -x_j})y_i. \qquad (9)\]</span></p><p>易验证有 <span class="math inline">\(\displaystyle L_n(x_i) =\sum\limits_{i = 0}^{n} y_i l_i(x_i) = y_i\)</span>, 即 <spanclass="math inline">\(L_n(x)\)</span> 满足插值条件 <spanclass="math inline">\((5)\)</span>. 形如式 <spanclass="math inline">\((9)\)</span> 的插值多项式称为 <spanclass="math inline">\(Lagrange\)</span> 插值多项式, 由式 <spanclass="math inline">\((8)\)</span> 所表示的 <spanclass="math inline">\(n\)</span> 次代数多项式 <spanclass="math inline">\(l_i(x)(i = 0, 1, ..., n)\)</span> 称为以 <spanclass="math inline">\(x_i(i = 0, 1, ..., n)\)</span> 为节点的 <spanclass="math inline">\(Lagrange\)</span> 插值基函数.上述构造插值多项式的方法叫做基函数法.</p><p>特别地, 一点零次插值多项式为</p><p><span class="math display">\[L_0(x) = y_0,\]</span></p><p>两点一次插值(线性插值)多项式为</p><p><span class="math display">\[L_1(x) = \frac{x - x_1}{x_0 - x_1}y_0 +\frac{x - x_0}{x_1 - x_0}y_1,\]</span></p><p>三点二次插值(抛物插值)多项式为</p><p><span class="math display">\[\begin{equation}{L_2(x) = \frac{(x - x_1)(x - x_2)}{(x_0 - x_1)(x_0 - x_2)} y_0 +\frac{(x - x_0)(x - x_2)}{(x_1 - x_0)(x_1 - x_2)} y_1 + \frac{(x -x_0)(x - _1)}{(x_2 - x_0)(x_2 - x_1)} y_2. \qquad (10) }\end{equation}\]</span></p><p>按: 本博客内容摘自《数值分析》(李红).</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算方法</tag>
      
      <tag>插值法</tag>
      
      <tag>数值积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 的 PicGo 插件配置</title>
    <link href="/2021/05/17/VSCode-%E7%9A%84-PicGo-%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/05/17/VSCode-%E7%9A%84-PicGo-%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="上传配置">上传配置</h2><p>因为要在另一台设备上继续使用我原来在 Github上面搭建的图床，遂在这里记录一下安装 PicGo插件之后需要做的配置，由于我之前配置过，所以我只需要将之前的配置参数给直接copy 过去即可。结果发现果然如此哈哈。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210517225511.png" /></p><p>然后就可以在另一台设备上面继续愉快地使用原来的图床了。</p><h2 id="文件名设置">文件名设置</h2><p>这是原来的设置，它会在 <code>[]</code> 内默认填充文件名，即 PicGo自动给文件赋予的名称。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210602164427.png" /></p><p>下面是修改后的，这里是直接将 <code>[]</code>中填充的内容给删去，那么，之后 <code>[]</code>中的内容就会默认为空。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210602164457.png" /></p><p>其实，这里修改的原因是我目前这个 Hexo 主题(Fluid) 对图片的渲染会将<code>![]()</code> 中 <code>[]</code> 中的内容给渲染到图片的下方(如果<code>[]</code> 中内容不为空的话，如果为空，则只渲染图片本身)。</p>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPad X13 AMD Gen1 安装 Ubuntu20.04 之后 F4 键的 LED 灯一直常亮的问题</title>
    <link href="/2021/05/07/ThinkPad-X13-AMD-Gen1-%E5%AE%89%E8%A3%85-Ubuntu20-04-%E4%B9%8B%E5%90%8E-F4-%E9%94%AE%E7%9A%84-LED-%E7%81%AF%E4%B8%80%E7%9B%B4%E5%B8%B8%E4%BA%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/05/07/ThinkPad-X13-AMD-Gen1-%E5%AE%89%E8%A3%85-Ubuntu20-04-%E4%B9%8B%E5%90%8E-F4-%E9%94%AE%E7%9A%84-LED-%E7%81%AF%E4%B8%80%E7%9B%B4%E5%B8%B8%E4%BA%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>这个问题无法通过设置 BIOS 来解决，目测是 ThinkPad的适配工作没有做好，目前可以做的是，手动关闭这个灯</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> 0 | sudo <span class="hljs-built_in">tee</span> /sys/class/leds/platform\:\:micmute/brightness<br></code></pre></div></td></tr></table></figure><p>开启的命令则是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> 1 | sudo <span class="hljs-built_in">tee</span> /sys/class/leds/platform\:\:micmute/brightness<br></code></pre></div></td></tr></table></figure><p>参考：<ahref="https://askubuntu.com/questions/1291918/ubuntu-20-10-on-thinkpad-t14-amd-microphone-mute-led-always-stays-on-how-can#new-answer?newreg=fcf137424b8b41a495efbe900da6c722">askubuntu</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu20</tag>
      
      <tag>ThinkPad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 下的 pthread_t</title>
    <link href="/2021/05/05/Linux-%E4%B8%8B%E7%9A%84-pthread-t/"/>
    <url>/2021/05/05/Linux-%E4%B8%8B%E7%9A%84-pthread-t/</url>
    
    <content type="html"><![CDATA[<p>先由 pthread.h 文件推断一下 pthread_t 的位置，</p><p>然后 locate 一下位置</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210505172222.png" /></p><p>最后使用 VSCode 查看一下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210505172415.png" /></p><p>发现，Linux 下的 pthread_t 其实是一个 unsigned long int 类型。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文档（手册）在描述函数时，括号中的数字的含义</title>
    <link href="/2021/05/05/Linux-%E6%96%87%E6%A1%A3%EF%BC%88%E6%89%8B%E5%86%8C%EF%BC%89%E5%9C%A8%E6%8F%8F%E8%BF%B0%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8B%AC%E5%8F%B7%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2021/05/05/Linux-%E6%96%87%E6%A1%A3%EF%BC%88%E6%89%8B%E5%86%8C%EF%BC%89%E5%9C%A8%E6%8F%8F%E8%BF%B0%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8B%AC%E5%8F%B7%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在阅读《Linux C一站式编程》时，发现书中提到函数时，会在括号中加上数字。第一次遇到，不解。遂谷歌之，记录一下。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210505170358.png" /></p><h2 id="具体解释">具体解释</h2><p>Linux 下的一些说明</p><p>1 用户命令，可由任何人启动的</p><p>2 系统调用，即由内核提供的函数</p><p>3 例程，即库函数</p><p>4 设备，即 /dev 目录下的特殊文件</p><p>5 文件格式描述，例如 /etc/passws</p><p>6 游戏，啊这</p><p>7 杂项，例如宏命令包、惯例等</p><p>8 系统管理员工具，只能由 root 启动</p><p>9 其他（Linux 特定的），用来存放内核例行程序的文档</p><p>n 新文档，可能要移到更合适的领域</p><p>o 老文档，可能会一段期限内保留</p><p>l 本地文档，与本特定系统有关的</p><p>参考：<ahref="https://blog.csdn.net/wingSys/article/details/8592614?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control">别人的博文</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C pthread_create() 函数的理解与使用</title>
    <link href="/2021/05/05/Linux-C-pthread-create-%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/05/05/Linux-C-pthread-create-%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>主要是记录一下 Linux 下创建线程的相关知识。</p><h2 id="函数原型">函数原型</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_create</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> *<span class="hljs-keyword">restrict</span> thread, <span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *<span class="hljs-keyword">restrict</span> attr, <span class="hljs-type">void</span> *(*start_routine)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> arg)</span>;<br></code></pre></div></td></tr></table></figure><h2 id="返回值">返回值</h2><ul><li>成功返回 0</li><li>失败返回错误号</li></ul><p>以前学过的系统函数都是成功返回 0， 失败返回-1，而错误号保存在全局变量 errno 中，而 pthread库的函数都是通过返回值返回错误号，虽然每个线程也都有一个errno，但这是为了兼容其他函数接口而提供的，pthread库本身并不使用它，通过返回值返回错误码更加清晰。</p><h2 id="参数解释">参数解释</h2><p>首先说明一下，<code>restrict</code>是一个关键字，这个关键字主要作用在于告诉编译器可以放心对这个函数做优化，程序员自己会保证这些指针所指的内存区间互不重叠。具体参见：<ahref="https://fanlumaster.github.io/2021/05/05/C99-%E7%9A%84-restrict-%E5%85%B3%E9%94%AE%E5%AD%97/">C99的 restrict 关键字</a></p><h3 id="thread">thread</h3><p>pthread_create 成功返回后，新创建的线程的 id 被填写到 thread参数所指向的内存单元。</p><p>我们知道 <strong>进程 id</strong> 的类型是 pid_t，每个进程的 id在整个系统中是唯一的，调用 <code>getpid(2)</code> （2表示是系统调用，即由内核提供的函数）可以获得当前进程的id，是一个正整数值。</p><p><strong>线程 id</strong> 的类型是thread_t，它只在当前进程中保证是唯一的，在不同的系统中 thread_t有不同的实现（在 Linux 下，经查看源码文件，发现其是一个 unsigned longint类型），它可能是一个整数值，也可能是一个结构体，也可能是一个地址，所以不能简单地当成整数用printf 打印。调用 <code>pthread_self(3)</code> （3表示是例程，即库函数）可以获得当前线程的 id。</p><h3 id="attr">attr</h3><p>attr 参数表示线程属性，这里不深入讨论线程属性，我们在代码中一律传NULL 给 attr 参数，表示线程属性取缺省值。</p><h3 id="start_routine">start_routine</h3><p>start_routine实际是一个函数指针，在实际使用过程中，我们需要传递一个函数给这个参数。在这里，新的线程所执行的代码就是由我们传递给<code>pthread_create()</code> 的函数指针 start_routine决定。start_routine 函数接收一个参数，是通过<code>pthread_create()</code> 的 arg 参数传递给它的。，该参数的类型是void <em>，这个指针按什么类型解释由调用者自己定义。start_routine的返回值也是 void </em>，这个指针的含义同样由调用者自己定义。</p><p>start_routine 返回时，这个线程就退出了。其它线程可以调用<code>pthread_join()</code> 得到 start_routine的返回值。相当于父进程调用 <code>wait()</code>得到子进程的退出状态。</p><h3 id="arg">arg</h3><p>这个参数的作用是将自身传递给上面的 start_routine 函数。</p><h2 id="一个实例">一个实例</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// threadfirst.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span> <span class="hljs-comment">// strerror()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span> <span class="hljs-comment">// exit()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">pthread_t</span> ntid;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printids</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">pthread_t</span> tid;<br><br>    pid = getpid(); <span class="hljs-comment">// get process id</span><br>    tid = pthread_self(); <span class="hljs-comment">// get self&#x27;s thread id</span><br>    <span class="hljs-comment">// printf(&quot;ceshi: %u\n&quot;, (unsigned)ntid); // 这行代码也是可以正常打印线程号的</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s pid %u tid %u (0x%x)\n&quot;</span>, s, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pid, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)tid, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)tid);<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thr_fn</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span> <span class="hljs-comment">// thread function</span><br>&#123;<br>    printids(arg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><br>    err = pthread_create(&amp;ntid, <span class="hljs-literal">NULL</span>, thr_fn, <span class="hljs-string">&quot;new thread: &quot;</span>);<br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t create thread: %s\n&quot;</span>, strerror(err)); <span class="hljs-comment">// strerror() 函数的作用是把错误码转换成错误信息再打印</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// exit() 函数会终止整个进程，也就意味着会终止所有的线程</span><br>    &#125;<br>    printids(<span class="hljs-string">&quot;main thread:&quot;</span>);<br>    sleep(<span class="hljs-number">1</span>); <span class="hljs-comment">// 这里延时 1 秒是为了防止新创建的线程还没有得到执行就终止（这只是权宜之计）</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>命令行执行结果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ gcc threadfirst.c -lpthread<br>$ ./a.out<br>main thread: pid 4394 tid 1650427712 (0x625f8740)<br>new thread:  pid 4394 tid 1641907968 (0x61dd8700)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>《Linux C 一站式编程》</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言使用 typedef 声明函数指针</title>
    <link href="/2021/05/05/C-%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8-typedef-%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <url>/2021/05/05/C-%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8-typedef-%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="用-typedef-声明函数的格式">用 typedef 声明函数的格式</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 方式一 --&gt; 表示一个返回值为 int 类型, 参数为两个 int 的函数</span><br><span class="hljs-comment">// 赋值时可以这样写: Func = 函数名</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span><span class="hljs-params">(Func)</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-comment">// 方式二 --&gt; 表示一个返回值为 int 类型, 参数为两个 int 的函数</span><br><span class="hljs-comment">// 赋值时可以这样写: Func_P = 函数名</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span><span class="hljs-params">(*Func_P)</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br></code></pre></div></td></tr></table></figure><p>关于上面的函数, 调用时的语法如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">Func *func = 函数名<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res = func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 这里 1 和 2 可以换成其它 int 类型参数</span><br><span class="hljs-type">int</span> res2 = (*func)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 效果和上面相同</span><br><br>Func_P = 函数名<span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> res = func_p(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 这里 1 和 2 可以换成其它 int 类型参数</span><br><span class="hljs-type">int</span> res2 = (*func_p)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 效果和上面相同</span><br></code></pre></div></td></tr></table></figure><h2 id="另外一种方式">另外一种方式</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 直接通过指针类型创建, 不需要使用 typedef 预定义, 使用时方法和上面相同</span><br><span class="hljs-type">int</span>(*Func)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>博客园让人失望</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言函数指针</title>
    <link href="/2021/05/05/C-%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <url>/2021/05/05/C-%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天在整理《数据结构》(陈越) 中的图时, 读到一段用到了函数指针的写法,初时很懵, 遂谷歌之, 找到了菜鸟教程的写得很好的一篇解释,现转载整理如下.</p></blockquote><p>书中使用到了函数指针的代码:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Visit</span><span class="hljs-params">(Vertex V)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;正在访问顶点%d\n&quot;</span>, V);<br>&#125;<br><br><br><span class="hljs-comment">// Visited[] 为全局变量， 已经初始化为 false</span><br><span class="hljs-comment">// 以 V 为出发点对邻接表存储的图 Graph 进行 DFS 搜索</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(LGraph Graph, Vertex V, <span class="hljs-type">void</span>(*Visit)(Vertex))</span><br>&#123;<br>    PtrToAdjVNode W;<br><br>    Visit(V); <span class="hljs-comment">// 访问第 V 个顶点</span><br>    Visited[V] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 标记 V 已访问</span><br><br>    <span class="hljs-keyword">for</span> (W = Graph-&gt;G[V].FirstEdge; W; W = W-&gt;Next) <span class="hljs-comment">// 对 V 的每个邻接点 W-&gt;AdjV</span><br>        <span class="hljs-keyword">if</span> (!Visited[W-&gt;AdjV]) <span class="hljs-comment">// 若 W-&gt;AdjV 为被访问</span><br>            DFS(Graph, W-&gt;AdjV, Visit); <span class="hljs-comment">// 则递归访问之</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="函数指针">函数指针</h2><p>函数指针是指向函数的指针变量。通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。函数指针可以像一般函数一样，用于调用函数、传递参数。函数指针变量的声明：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*fun_ptr)</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span>; <span class="hljs-comment">// 声明一个指向同样参数、返回值的函数指针类型</span><br></code></pre></div></td></tr></table></figure><h3 id="实例">实例</h3><p>以下实例声明了函数指针变量 p，指向函数 max：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x &gt; y ? x : y;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* p 是函数指针 */</span><br>    <span class="hljs-type">int</span> (* p)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) = &amp; max; <span class="hljs-comment">// &amp;可以省略</span><br>    <span class="hljs-type">int</span> a, b, c, d;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入三个数字:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp; a, &amp; b, &amp; c);<br> <br>    <span class="hljs-comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span><br>    d = p(p(a, b), c); <br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大的数字是: %d\n&quot;</span>, d);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">请输入三个数字:1 2 3</span><br><span class="hljs-section">最大的数字是: 3</span><br></code></pre></div></td></tr></table></figure><h2 id="回调函数">回调函数</h2><h3 id="函数指针作为某个函数的参数">函数指针作为某个函数的参数</h3><p>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。简单讲：回调函数是由别人的函数执行时调用你实现的函数。</p><blockquote><p>以下是来自知乎作者常溪玲的解说：你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</p></blockquote><h3 id="实例-1">实例</h3><p>实例中 populate_array函数定义了三个参数，其中第三个参数是函数的指针，通过该函数来设置数组的值。实例中我们定义了回调函数getNextRandomValue，它返回一个随机值，它作为一个函数指针传递给populate_array 函数。 populate_array 将调用 10次回调函数，并将回调函数的返回值赋值给数组。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">// 回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">populate_array</span><span class="hljs-params">(<span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>, <span class="hljs-type">size_t</span> arraySize, <span class="hljs-type">int</span> (*getNextValue)(<span class="hljs-type">void</span>))</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i=<span class="hljs-number">0</span>; i&lt;arraySize; i++)<br>        <span class="hljs-built_in">array</span>[i] = getNextValue();<br>&#125;<br> <br><span class="hljs-comment">// 获取随机值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getNextRandomValue</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> rand();<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> myarray[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">/* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int , 而不是函数指针*/</span><br>    populate_array(myarray, <span class="hljs-number">10</span>, getNextRandomValue);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, myarray[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>编译执行，输出结果如下：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">16807 </span><span class="hljs-number">282475249</span> <span class="hljs-number">1622650073</span> <span class="hljs-number">984943658</span> <span class="hljs-number">1144108930</span> <span class="hljs-number">470211272</span> <span class="hljs-number">101027544</span> <span class="hljs-number">1457850878</span> <span class="hljs-number">1458777923</span> <span class="hljs-number">2007237709</span> <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>博客园让人失望</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C99 的 restrict 关键字</title>
    <link href="/2021/05/05/C99-%E7%9A%84-restrict-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2021/05/05/C99-%E7%9A%84-restrict-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>我们来看一个跟 <code>memcpy/memmove</code>类似的问题。下面的函数将两个数组中对应的元素相加，结果保存在第三个数组中。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">vector_add</span><span class="hljs-params">(<span class="hljs-type">float</span> *x, <span class="hljs-type">float</span> *y, <span class="hljs-type">float</span> *result)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; ++i)<br>        result[i] = x[i] + y[i];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果这个函数要在多处理器的计算机上执行，编译器可以做这样的优化：把这一个循环拆成两个循环，一个处理器计算i 值从 0 到 31 的循环，另一个处理器计算 i 值从 32 到 63的循环，这样两个处理器可以同时工作，使计算时间缩短一半。但是这样的编译优化能保证得出正确结果吗？假如result 和 x 所指的内存区间是重叠的，result[0] 其实是 x[1]，result[i]其实是x[i+1]，这两个处理器就不能各干各的事情了，因为第二个处理器的工作依赖于第一个处理器的最终计算结果，这种情况下编译优化的结果是错的。这样看来编译器是不敢随便做优化了，那么多处理器提供的并行性就无法利用，岂不可惜？为此，C99引入 restrict 关键字，如果程序员把上面的函数声明为<code>void vector_add(const double *restrict x, const double *restrict y, double *restrict result)</code>，就是告诉编译器可以放心地对这个函数做优化，程序员自己会保证这些指针所指的内存区间互不重叠。</p><p>由于 restrict 是 C99 引入的新关键字，目前 Linux 的 Man Page还没有更新，所以都没有 restrict 关键字，本书的函数原型都取自 ManPage，所以也都没有 restrict 关键字。但在 C99标准中库函数的原型都在必要的地方加了 restrict 关键字，在 C99 中 memcpy的原型是<code>void *memcpy(void * restrict s1, const void * restrict s2, size_t n);</code>，就是告诉调用者，这个函数的实现可能会做些优化，编译器也可能会做些优化，传进来的指针不允许指向重叠的内存区间，否则结果可能是错的，而memmove 的原型是<code>void *memmove(void *s1, const void *s2, size_t n);</code>，没有restrict 关键字，说明传给这个函数的指针允许指向重叠的内存区间。在restrict关键字出现之前都是用自然语言描述哪些函数的参数不允许指向重叠的内存区间，例如在C89标准的库函数一章开头提到，本章描述的所有函数，除非特别说明，都不应该接收两个指针参数指向重叠的内存区间，例如调用sprintf时传进来的格式化字符串和结果字符串的首地址相同，诸如此类的调用都是非法的。本书也遵循这一惯例，除非像memmove 这样特别说明之外，都表示“不允许”。</p><p>关于 restrict 关键字更详细的可以查看一些英文文档。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Linux C 一站式编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C sys/types.h 源码文件</title>
    <link href="/2021/05/05/Linux-C-sys-types-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/05/Linux-C-sys-types-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核版本是 5.4，文件位置<code>/usr/include/x86_64-linux-gnu/sys/types.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *POSIX Standard: 2.6 Primitive System Data Types&lt;sys/types.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>_SYS_TYPES_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_SYS_TYPES_H1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;features.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __u_char_defined</span><br><span class="hljs-keyword">typedef</span> __u_char u_char;<br><span class="hljs-keyword">typedef</span> __u_short u_short;<br><span class="hljs-keyword">typedef</span> __u_int u_int;<br><span class="hljs-keyword">typedef</span> __u_long u_long;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__quad_t</span> <span class="hljs-type">quad_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__u_quad_t</span> <span class="hljs-type">u_quad_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fsid_t</span> <span class="hljs-type">fsid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __u_char_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__loff_t</span> <span class="hljs-type">loff_t</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __ino_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ino_t</span> <span class="hljs-type">ino_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ino64_t</span> <span class="hljs-type">ino_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __ino_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __ino64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ino64_t</span> <span class="hljs-type">ino64_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __ino64_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __dev_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__dev_t</span> <span class="hljs-type">dev_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __dev_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __gid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__gid_t</span> <span class="hljs-type">gid_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __gid_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __mode_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__mode_t</span> <span class="hljs-type">mode_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __mode_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __nlink_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__nlink_t</span> <span class="hljs-type">nlink_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __nlink_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __uid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uid_t</span> <span class="hljs-type">uid_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __uid_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off_t</span> <span class="hljs-type">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off64_t</span> <span class="hljs-type">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __off_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off64_t</span> <span class="hljs-type">off64_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __off64_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __pid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__pid_t</span> <span class="hljs-type">pid_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __pid_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN || defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    &amp;&amp; !defined __id_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__id_t</span> <span class="hljs-type">id_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __id_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __ssize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-type">ssize_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __ssize_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __daddr_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__daddr_t</span> <span class="hljs-type">daddr_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__caddr_t</span> <span class="hljs-type">caddr_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __daddr_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_MISC || defined __USE_XOPEN) &amp;&amp; !defined __key_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__key_t</span> <span class="hljs-type">key_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __key_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN || defined __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/clock_t.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/clockid_t.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/time_t.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/timer_t.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __useconds_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__useconds_t</span> <span class="hljs-type">useconds_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __useconds_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __suseconds_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__suseconds_t</span> <span class="hljs-type">suseconds_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __suseconds_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>__need_size_t</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Old compatibility names for C types.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> ulong;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> ushort;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> uint;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* These size-specific names are used by some of the inet code.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdint-intn.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !__GNUC_PREREQ (2, 7)</span><br><br><span class="hljs-comment">/* These were defined by ISO C without the first `_&#x27;.  */</span><br><span class="hljs-keyword">typedef</span><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">u_int8_t</span>;<br><span class="hljs-keyword">typedef</span><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">u_int16_t</span>;<br><span class="hljs-keyword">typedef</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">u_int32_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __WORDSIZE == 64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">u_int64_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>__extension__ <span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">u_int64_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-type">register_t</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br><span class="hljs-comment">/* For GCC 2.7 and later, we can use specific type-size attributes.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __u_intN_t(N, MODE) \</span><br><span class="hljs-meta">  typedef unsigned int u_int##N##_t __attribute__ ((__mode__ (MODE)))</span><br><br>__u_intN_t (<span class="hljs-number">8</span>, __QI__);<br>__u_intN_t (<span class="hljs-number">16</span>, __HI__);<br>__u_intN_t (<span class="hljs-number">32</span>, __SI__);<br>__u_intN_t (<span class="hljs-number">64</span>, __DI__);<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-type">register_t</span> __attribute__ ((__mode__ (__word__)));<br><br><br><span class="hljs-comment">/* Some code from BIND tests this macro to see if the types above are</span><br><span class="hljs-comment">   defined.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __BIT_TYPES_DEFINED__1</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* In BSD &lt;sys/types.h&gt; is expected to define BYTE_ORDER.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;endian.h&gt;</span></span><br><br><span class="hljs-comment">/* It also defines `fd_set&#x27; and the FD_* macros for `select&#x27;.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/select.h&gt;</span></span><br><br><span class="hljs-comment">/* BSD defines `major&#x27;, `minor&#x27;, and `makedev&#x27; in this header.</span><br><span class="hljs-comment">   However, these symbols are likely to collide with user code, so we are</span><br><span class="hljs-comment">   going to stop defining them here in an upcoming release.  Code that needs</span><br><span class="hljs-comment">   these macros should include &lt;sys/sysmacros.h&gt; directly.  Code that does</span><br><span class="hljs-comment">   not need these macros should #undef them after including this header.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __SYSMACROS_DEPRECATED_INCLUSION</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sysmacros.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">undef</span> __SYSMACROS_DEPRECATED_INCLUSION</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_UNIX98 || defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    &amp;&amp; !defined __blksize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__blksize_t</span> <span class="hljs-type">blksize_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __blksize_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Types from the Large File Support interface.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __blkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__blkcnt_t</span> <span class="hljs-type">blkcnt_t</span>; <span class="hljs-comment">/* Type to count number of disk blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __blkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __fsblkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fsblkcnt_t</span> <span class="hljs-type">fsblkcnt_t</span>; <span class="hljs-comment">/* Type to count file system blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __fsblkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __fsfilcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fsfilcnt_t</span> <span class="hljs-type">fsfilcnt_t</span>; <span class="hljs-comment">/* Type to count file system inodes.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __fsfilcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __blkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__blkcnt64_t</span> <span class="hljs-type">blkcnt_t</span>;   <span class="hljs-comment">/* Type to count number of disk blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __blkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __fsblkcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fsblkcnt64_t</span> <span class="hljs-type">fsblkcnt_t</span>; <span class="hljs-comment">/* Type to count file system blocks.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __fsblkcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __fsfilcnt_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fsfilcnt64_t</span> <span class="hljs-type">fsfilcnt_t</span>; <span class="hljs-comment">/* Type to count file system inodes.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __fsfilcnt_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__blkcnt64_t</span> <span class="hljs-type">blkcnt64_t</span>;     <span class="hljs-comment">/* Type to count number of disk blocks. */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fsblkcnt64_t</span> <span class="hljs-type">fsblkcnt64_t</span>; <span class="hljs-comment">/* Type to count file system blocks.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fsfilcnt64_t</span> <span class="hljs-type">fsfilcnt64_t</span>; <span class="hljs-comment">/* Type to count file system inodes.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Now add the thread types.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_POSIX199506 || defined __USE_UNIX98</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/pthreadtypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* sys/types.h */</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C stdlib.h 源码文件</title>
    <link href="/2021/05/05/Linux-C-stdlib-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/05/Linux-C-stdlib-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核版本是 5.4，文件位置<code>/usr/include/stdlib.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *ISO C99 Standard: 7.20 General utilities&lt;stdlib.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>_STDLIB_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/libc-header-start.h&gt;</span></span><br><br><span class="hljs-comment">/* Get size_t, wchar_t and NULL from &lt;stddef.h&gt;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __need_size_t</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __need_wchar_t</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __need_NULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_STDLIB_H1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN || defined __USE_XOPEN2K8) &amp;&amp; !defined _SYS_WAIT_H</span><br><span class="hljs-comment">/* XPG requires a few symbols from &lt;sys/wait.h&gt; being defined.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/waitflags.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/waitstatus.h&gt;</span></span><br><br><span class="hljs-comment">/* Define the macros &lt;sys/wait.h&gt; also would define this way.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> WEXITSTATUS(status)__WEXITSTATUS (status)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> WTERMSIG(status)__WTERMSIG (status)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> WSTOPSIG(status)__WSTOPSIG (status)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> WIFEXITED(status)__WIFEXITED (status)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> WIFSIGNALED(status)__WIFSIGNALED (status)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> WIFSTOPPED(status)__WIFSTOPPED (status)</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __WIFCONTINUED</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> WIFCONTINUED(status)__WIFCONTINUED (status)</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* X/Open or XPG7 and &lt;sys/wait.h&gt; not included.  */</span></span><br><br><span class="hljs-comment">/* _FloatN API tests for enablement.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/floatn.h&gt;</span></span><br><br><span class="hljs-comment">/* Returned by `div&#x27;.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">int</span> quot;<span class="hljs-comment">/* Quotient.  */</span><br>    <span class="hljs-type">int</span> rem;<span class="hljs-comment">/* Remainder.  */</span><br>  &#125; <span class="hljs-type">div_t</span>;<br><br><span class="hljs-comment">/* Returned by `ldiv&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __ldiv_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> quot;<span class="hljs-comment">/* Quotient.  */</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> rem;<span class="hljs-comment">/* Remainder.  */</span><br>  &#125; <span class="hljs-type">ldiv_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __ldiv_t_defined1</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_ISOC99 &amp;&amp; !defined __lldiv_t_defined</span><br><span class="hljs-comment">/* Returned by `lldiv&#x27;.  */</span><br>__extension__ <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> quot;<span class="hljs-comment">/* Quotient.  */</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> rem;<span class="hljs-comment">/* Remainder.  */</span><br>  &#125; <span class="hljs-type">lldiv_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __lldiv_t_defined1</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* The largest number rand will return (same as INT_MAX).  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>RAND_MAX2147483647</span><br><br><br><span class="hljs-comment">/* We define these the same for all machines.</span><br><span class="hljs-comment">   Changes from this to the outside world should be done in `_exit&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>EXIT_FAILURE1<span class="hljs-comment">/* Failing exit status.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>EXIT_SUCCESS0<span class="hljs-comment">/* Successful exit status.  */</span></span><br><br><br><span class="hljs-comment">/* Maximum length of a multibyte character in the current locale.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>MB_CUR_MAX(__ctype_get_mb_cur_max ())</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> __ctype_get_mb_cur_max (<span class="hljs-type">void</span>) __THROW __wur;<br><br><br><span class="hljs-comment">/* Convert a string to a floating-point number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">double</span> <span class="hljs-title function_">atof</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__nptr)</span><br>     __THROW __attribute_pure__ __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-comment">/* Convert a string to an integer.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">atoi</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__nptr)</span><br>     __THROW __attribute_pure__ __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-comment">/* Convert a string to a long integer.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">atol</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__nptr)</span><br>     __THROW __attribute_pure__ __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-comment">/* Convert a string to a long long integer.  */</span><br>__extension__ <span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">atoll</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__nptr)</span><br>     __THROW __attribute_pure__ __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Convert a string to a floating-point number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">double</span> <span class="hljs-title function_">strtod</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_ISOC99</span><br><span class="hljs-comment">/* Likewise for `float&#x27; and `long double&#x27; sizes of floating-point numbers.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">float</span> <span class="hljs-title function_">strtof</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">     <span class="hljs-type">char</span> **__restrict __endptr)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> <span class="hljs-title function_">strtold</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Likewise for &#x27;_FloatN&#x27; and &#x27;_FloatNx&#x27;.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT16 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> _Float16 <span class="hljs-title function_">strtof16</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">  <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT32 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> _Float32 <span class="hljs-title function_">strtof32</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">  <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT64 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> _Float64 <span class="hljs-title function_">strtof64</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">  <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT128 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> _Float128 <span class="hljs-title function_">strtof128</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT32X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> _Float32x <span class="hljs-title function_">strtof32x</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT64X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> _Float64x <span class="hljs-title function_">strtof64x</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT128X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> _Float128x <span class="hljs-title function_">strtof128x</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __endptr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Convert a string to a long integer.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtol</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params"><span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-comment">/* Convert a string to an unsigned long integer.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtoul</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">  <span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Convert a string to a quadword integer.  */</span><br>__extension__<br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtoq</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">     <span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-comment">/* Convert a string to an unsigned quadword integer.  */</span><br>__extension__<br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtouq</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">       <span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-comment">/* Convert a string to a quadword integer.  */</span><br>__extension__<br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtoll</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-comment">/* Convert a string to an unsigned quadword integer.  */</span><br>__extension__<br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtoull</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params"><span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ISO C99 or use MISC.  */</span></span><br><br><span class="hljs-comment">/* Convert a floating-point number to a string.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __GLIBC_USE (IEC_60559_BFP_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromd</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__format,</span><br><span class="hljs-params">     <span class="hljs-type">double</span> __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__format,</span><br><span class="hljs-params">     <span class="hljs-type">float</span> __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfroml</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__format,</span><br><span class="hljs-params">     <span class="hljs-type">long</span> <span class="hljs-type">double</span> __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT16 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf16</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * __format,</span><br><span class="hljs-params">       _Float16 __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT32 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf32</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * __format,</span><br><span class="hljs-params">       _Float32 __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT64 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf64</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * __format,</span><br><span class="hljs-params">       _Float64 __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT128 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf128</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * __format,</span><br><span class="hljs-params">_Float128 __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT32X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf32x</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * __format,</span><br><span class="hljs-params">_Float32x __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT64X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf64x</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * __format,</span><br><span class="hljs-params">_Float64x __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __HAVE_FLOAT128X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strfromf128x</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__dest, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * __format,</span><br><span class="hljs-params"> _Float128x __f)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Parallel versions of the functions above which take the locale to</span><br><span class="hljs-comment">   use as an additional parameter.  These are GNU extensions inspired</span><br><span class="hljs-comment">   by the POSIX.1-2008 extended locale API.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/locale_t.h&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtol_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">  <span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base,</span><br><span class="hljs-params">  <span class="hljs-type">locale_t</span> __loc)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtoul_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> __base, <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span>;<br><br>__extension__<br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtoll_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params"><span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">int</span> __base,</span><br><span class="hljs-params"><span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span>;<br><br>__extension__<br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtoull_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">  <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> __base, <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">double</span> <span class="hljs-title function_">strtod_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params"><span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">float</span> <span class="hljs-title function_">strtof_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">       <span class="hljs-type">char</span> **__restrict __endptr, <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> <span class="hljs-title function_">strtold_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">      <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __HAVE_FLOAT16</span><br><span class="hljs-keyword">extern</span> _Float16 <span class="hljs-title function_">strtof16_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">    <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __HAVE_FLOAT32</span><br><span class="hljs-keyword">extern</span> _Float32 <span class="hljs-title function_">strtof32_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">    <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __HAVE_FLOAT64</span><br><span class="hljs-keyword">extern</span> _Float64 <span class="hljs-title function_">strtof64_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">    <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __HAVE_FLOAT128</span><br><span class="hljs-keyword">extern</span> _Float128 <span class="hljs-title function_">strtof128_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">      <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __HAVE_FLOAT32X</span><br><span class="hljs-keyword">extern</span> _Float32x <span class="hljs-title function_">strtof32x_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">      <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __HAVE_FLOAT64X</span><br><span class="hljs-keyword">extern</span> _Float64x <span class="hljs-title function_">strtof64x_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params">      <span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __HAVE_FLOAT128X</span><br><span class="hljs-keyword">extern</span> _Float128x <span class="hljs-title function_">strtof128x_l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __nptr,</span><br><span class="hljs-params"><span class="hljs-type">char</span> **__restrict __endptr,</span><br><span class="hljs-params"><span class="hljs-type">locale_t</span> __loc)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* GNU */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br>__extern_inline <span class="hljs-type">int</span><br>__NTH (atoi (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__nptr))<br>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) strtol (__nptr, (<span class="hljs-type">char</span> **) <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>&#125;<br>__extern_inline <span class="hljs-type">long</span> <span class="hljs-type">int</span><br>__NTH (atol (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__nptr))<br>&#123;<br>  <span class="hljs-keyword">return</span> strtol (__nptr, (<span class="hljs-type">char</span> **) <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_ISOC99</span><br>__extension__ __extern_inline <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span><br>__NTH (atoll (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__nptr))<br>&#123;<br>  <span class="hljs-keyword">return</span> strtoll (__nptr, (<span class="hljs-type">char</span> **) <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Optimizing and Inlining.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Convert N to base 64 using the digits &quot;./0-9A-Za-z&quot;, least-significant</span><br><span class="hljs-comment">   digit first.  Returns a pointer to static storage overwritten by the</span><br><span class="hljs-comment">   next call.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">l64a</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">int</span> __n)</span> __THROW __wur;<br><br><span class="hljs-comment">/* Read a number from a string S in base 64 as above.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a64l</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s)</span><br>     __THROW __attribute_pure__ __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* Use misc || extended X/Open.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span><span class="hljs-comment">/* we need int32_t... */</span></span><br><br><span class="hljs-comment">/* These are the functions that actually do things.  The `random&#x27;, `srandom&#x27;,</span><br><span class="hljs-comment">   `initstate&#x27; and `setstate&#x27; functions are those from BSD Unices.</span><br><span class="hljs-comment">   The `rand&#x27; and `srand&#x27; functions are required by the ANSI standard.</span><br><span class="hljs-comment">   We provide both interfaces to the same random number generator.  */</span><br><span class="hljs-comment">/* Return a random long integer between 0 and RAND_MAX inclusive.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">random</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Seed the random number generator with the given number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">srandom</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __seed)</span> __THROW;<br><br><span class="hljs-comment">/* Initialize the random number generator to use state buffer STATEBUF,</span><br><span class="hljs-comment">   of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,</span><br><span class="hljs-comment">   32, 64, 128 and 256, the bigger the better; values less than 8 will</span><br><span class="hljs-comment">   cause an error and values greater than 256 will be rounded down.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">initstate</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __seed, <span class="hljs-type">char</span> *__statebuf,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> __statelen)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Switch the random number generator to state buffer STATEBUF,</span><br><span class="hljs-comment">   which should have been previously initialized by `initstate&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">setstate</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__statebuf)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Reentrant versions of the `random&#x27; family of functions.</span><br><span class="hljs-comment">   These functions all use the following data structure to contain</span><br><span class="hljs-comment">   state, rather than global state variables.  */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">random_data</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">int32_t</span> *fptr;<span class="hljs-comment">/* Front pointer.  */</span><br>    <span class="hljs-type">int32_t</span> *rptr;<span class="hljs-comment">/* Rear pointer.  */</span><br>    <span class="hljs-type">int32_t</span> *state;<span class="hljs-comment">/* Array of state values.  */</span><br>    <span class="hljs-type">int</span> rand_type;<span class="hljs-comment">/* Type of random number generator.  */</span><br>    <span class="hljs-type">int</span> rand_deg;<span class="hljs-comment">/* Degree of random number generator.  */</span><br>    <span class="hljs-type">int</span> rand_sep;<span class="hljs-comment">/* Distance between front and rear.  */</span><br>    <span class="hljs-type">int32_t</span> *end_ptr;<span class="hljs-comment">/* Pointer behind state table.  */</span><br>  &#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">random_r</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> random_data *__restrict __buf,</span><br><span class="hljs-params">     <span class="hljs-type">int32_t</span> *__restrict __result)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">srandom_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __seed, <span class="hljs-keyword">struct</span> random_data *__buf)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">initstate_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __seed, <span class="hljs-type">char</span> *__restrict __statebuf,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> __statelen,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> random_data *__restrict __buf)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setstate_r</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __statebuf,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> random_data *__restrict __buf)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span><span class="hljs-comment">/* Use misc.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* Use extended X/Open || misc. */</span></span><br><br><br><span class="hljs-comment">/* Return a random integer between 0 and RAND_MAX inclusive.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rand</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-comment">/* Seed the random number generator with the given number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">srand</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __seed)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* Reentrant interface according to POSIX.1.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rand_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *__seed)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* System V style 48-bit random number generator functions.  */</span><br><br><span class="hljs-comment">/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">double</span> <span class="hljs-title function_">drand48</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">double</span> <span class="hljs-title function_">erand48</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __xsubi[<span class="hljs-number">3</span>])</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Return non-negative, long integer in [0,2^31).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lrand48</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nrand48</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __xsubi[<span class="hljs-number">3</span>])</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Return signed, long integers in [-2^31,2^31).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mrand48</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jrand48</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __xsubi[<span class="hljs-number">3</span>])</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Seed random number generator.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">srand48</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">int</span> __seedval)</span> __THROW;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> *<span class="hljs-title function_">seed48</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __seed16v[<span class="hljs-number">3</span>])</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcong48</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __param[<span class="hljs-number">7</span>])</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Data structure for communication with thread safe versions.  This</span><br><span class="hljs-comment">   type is to be regarded as opaque.  It&#x27;s only exported because users</span><br><span class="hljs-comment">   have to allocate objects of this type.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drand48_data</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __x[<span class="hljs-number">3</span>];<span class="hljs-comment">/* Current state.  */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __old_x[<span class="hljs-number">3</span>]; <span class="hljs-comment">/* Old state.  */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __c;<span class="hljs-comment">/* Additive const. in congruential formula.  */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __init;<span class="hljs-comment">/* Flag for initializing.  */</span><br>    __extension__ <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __a;<span class="hljs-comment">/* Factor in congruential</span><br><span class="hljs-comment">   formula.  */</span><br>  &#125;;<br><br><span class="hljs-comment">/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drand48_r</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> drand48_data *__restrict __buffer,</span><br><span class="hljs-params">      <span class="hljs-type">double</span> *__restrict __result)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">erand48_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __xsubi[<span class="hljs-number">3</span>],</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> drand48_data *__restrict __buffer,</span><br><span class="hljs-params">      <span class="hljs-type">double</span> *__restrict __result)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Return non-negative, long integer in [0,2^31).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lrand48_r</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> drand48_data *__restrict __buffer,</span><br><span class="hljs-params">      <span class="hljs-type">long</span> <span class="hljs-type">int</span> *__restrict __result)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nrand48_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __xsubi[<span class="hljs-number">3</span>],</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> drand48_data *__restrict __buffer,</span><br><span class="hljs-params">      <span class="hljs-type">long</span> <span class="hljs-type">int</span> *__restrict __result)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Return signed, long integers in [-2^31,2^31).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mrand48_r</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> drand48_data *__restrict __buffer,</span><br><span class="hljs-params">      <span class="hljs-type">long</span> <span class="hljs-type">int</span> *__restrict __result)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jrand48_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __xsubi[<span class="hljs-number">3</span>],</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> drand48_data *__restrict __buffer,</span><br><span class="hljs-params">      <span class="hljs-type">long</span> <span class="hljs-type">int</span> *__restrict __result)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Seed random number generator.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">srand48_r</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">int</span> __seedval, <span class="hljs-keyword">struct</span> drand48_data *__buffer)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">seed48_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __seed16v[<span class="hljs-number">3</span>],</span><br><span class="hljs-params">     <span class="hljs-keyword">struct</span> drand48_data *__buffer)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lcong48_r</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __param[<span class="hljs-number">7</span>],</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> drand48_data *__buffer)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span><span class="hljs-comment">/* Use misc.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* Use misc or X/Open.  */</span></span><br><br><span class="hljs-comment">/* Allocate SIZE bytes of memory.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> __size)</span> __THROW __attribute_malloc__ __wur;<br><span class="hljs-comment">/* Allocate NMEMB elements of SIZE bytes each, all initialized to 0.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">calloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> __nmemb, <span class="hljs-type">size_t</span> __size)</span><br>     __THROW __attribute_malloc__ __wur;<br><br><span class="hljs-comment">/* Re-allocate the previously allocated block</span><br><span class="hljs-comment">   in PTR, making the new block SIZE bytes long.  */</span><br><span class="hljs-comment">/* __attribute_malloc__ is not used, because if realloc returns</span><br><span class="hljs-comment">   the same pointer that was passed to it, aliasing needs to be allowed</span><br><span class="hljs-comment">   between objects pointed by the old and new pointers.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">realloc</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__ptr, <span class="hljs-type">size_t</span> __size)</span><br>     __THROW __attribute_warn_unused_result__;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Re-allocate the previously allocated block in PTR, making the new</span><br><span class="hljs-comment">   block large enough for NMEMB elements of SIZE bytes each.  */</span><br><span class="hljs-comment">/* __attribute_malloc__ is not used, because if reallocarray returns</span><br><span class="hljs-comment">   the same pointer that was passed to it, aliasing needs to be allowed</span><br><span class="hljs-comment">   between objects pointed by the old and new pointers.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">reallocarray</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__ptr, <span class="hljs-type">size_t</span> __nmemb, <span class="hljs-type">size_t</span> __size)</span><br>     __THROW __attribute_warn_unused_result__;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Free a block allocated by `malloc&#x27;, `realloc&#x27; or `calloc&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">free</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__ptr)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;alloca.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Allocate SIZE bytes on a page boundary.  The storage cannot be freed.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">valloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> __size)</span> __THROW __attribute_malloc__ __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Allocate memory of SIZE bytes with an alignment of ALIGNMENT.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">posix_memalign</span> <span class="hljs-params">(<span class="hljs-type">void</span> **__memptr, <span class="hljs-type">size_t</span> __alignment, <span class="hljs-type">size_t</span> __size)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ISOC11</span><br><span class="hljs-comment">/* ISO C variant of aligned allocation.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">aligned_alloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> __alignment, <span class="hljs-type">size_t</span> __size)</span><br>     __THROW __attribute_malloc__ __<span class="hljs-title function_">attribute_alloc_size__</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Abort execution and generate a core-dump.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">abort</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__noreturn__))</span>;<br><br><br><span class="hljs-comment">/* Register a function to be called when `exit&#x27; is called.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">atexit</span> <span class="hljs-params">(<span class="hljs-type">void</span> (*__func) (<span class="hljs-type">void</span>))</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_ISOC11 || defined __USE_ISOCXX11</span><br><span class="hljs-comment">/* Register a function to be called when `quick_exit&#x27; is called.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C++&quot;</span> <span class="hljs-type">int</span> <span class="hljs-title function_">at_quick_exit</span> <span class="hljs-params">(<span class="hljs-type">void</span> (*__func) (<span class="hljs-type">void</span>))</span><br>     __THROW __<span class="hljs-title function_">asm</span> <span class="hljs-params">(<span class="hljs-string">&quot;at_quick_exit&quot;</span>)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">at_quick_exit</span> <span class="hljs-params">(<span class="hljs-type">void</span> (*__func) (<span class="hljs-type">void</span>))</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* Register a function to be called with the status</span><br><span class="hljs-comment">   given to `exit&#x27; and the given argument.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">on_exit</span> <span class="hljs-params">(<span class="hljs-type">void</span> (*__func) (<span class="hljs-type">int</span> __status, <span class="hljs-type">void</span> *__arg), <span class="hljs-type">void</span> *__arg)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Call all functions registered with `atexit&#x27; and `on_exit&#x27;,</span><br><span class="hljs-comment">   in the reverse of the order in which they were registered,</span><br><span class="hljs-comment">   perform stdio cleanup, and terminate program execution with STATUS.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">exit</span> <span class="hljs-params">(<span class="hljs-type">int</span> __status)</span> __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__noreturn__))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_ISOC11 || defined __USE_ISOCXX11</span><br><span class="hljs-comment">/* Call all functions registered with `at_quick_exit&#x27; in the reverse</span><br><span class="hljs-comment">   of the order in which they were registered and terminate program</span><br><span class="hljs-comment">   execution with STATUS.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">quick_exit</span> <span class="hljs-params">(<span class="hljs-type">int</span> __status)</span> __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__noreturn__))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ISOC99</span><br><span class="hljs-comment">/* Terminate the program with STATUS without calling any of the</span><br><span class="hljs-comment">   functions registered with `atexit&#x27; or `on_exit&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> _Exit (<span class="hljs-type">int</span> __status) __THROW __attribute__ ((__noreturn__));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Return the value of envariable NAME, or NULL if it doesn&#x27;t exist.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">getenv</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* This function is similar to the above but returns NULL if the</span><br><span class="hljs-comment">   programs is running with SUID or SGID enabled.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">secure_getenv</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* The SVID says this is in &lt;stdio.h&gt;, but this seems a better place.*/</span><br><span class="hljs-comment">/* Put STRING, which is of the form &quot;NAME=VALUE&quot;, in the environment.</span><br><span class="hljs-comment">   If there is no `=&#x27;, remove NAME from the environment.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putenv</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__string)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Set NAME to VALUE in the environment.</span><br><span class="hljs-comment">   If REPLACE is nonzero, overwrite an existing value.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setenv</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__value, <span class="hljs-type">int</span> __replace)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Remove the variable NAME from the environment.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">unsetenv</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* The `clearenv&#x27; was planned to be added to POSIX.1 but probably</span><br><span class="hljs-comment">   never made it.  Nevertheless the POSIX.9 standard (POSIX bindings</span><br><span class="hljs-comment">   for Fortran 77) requires this function.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">clearenv</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC \</span><br><span class="hljs-meta">    || (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8)</span><br><span class="hljs-comment">/* Generate a unique temporary file name from TEMPLATE.</span><br><span class="hljs-comment">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</span><br><span class="hljs-comment">   they are replaced with a string that makes the file name unique.</span><br><span class="hljs-comment">   Always returns TEMPLATE, it&#x27;s either a temporary file name or a null</span><br><span class="hljs-comment">   string if it cannot get a unique file name.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">mktemp</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Generate a unique temporary file name from TEMPLATE.</span><br><span class="hljs-comment">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</span><br><span class="hljs-comment">   they are replaced with a string that makes the filename unique.</span><br><span class="hljs-comment">   Returns a file descriptor open on the file for reading and writing,</span><br><span class="hljs-comment">   or -1 if it cannot create a uniquely-named file.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkstemp</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (mkstemp, (<span class="hljs-type">char</span> *__template), mkstemp64)<br>     __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> mkstemp mkstemp64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkstemp64</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Similar to mkstemp, but the template can have a suffix after the</span><br><span class="hljs-comment">   XXXXXX.  The length of the suffix is specified in the second</span><br><span class="hljs-comment">   parameter.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkstemps</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __suffixlen)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (mkstemps, (<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __suffixlen),<br>       mkstemps64) __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> mkstemps mkstemps64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkstemps64</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __suffixlen)</span><br>     __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Create a unique temporary directory from TEMPLATE.</span><br><span class="hljs-comment">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</span><br><span class="hljs-comment">   they are replaced with a string that makes the directory name unique.</span><br><span class="hljs-comment">   Returns TEMPLATE, or a null pointer if it cannot get a unique name.</span><br><span class="hljs-comment">   The directory is created mode 700.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">mkdtemp</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Generate a unique temporary file name from TEMPLATE similar to</span><br><span class="hljs-comment">   mkstemp.  But allow the caller to pass additional flags which are</span><br><span class="hljs-comment">   used in the open call to create the file..</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkostemp</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __flags)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (mkostemp, (<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __flags), mkostemp64)<br>     __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> mkostemp mkostemp64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkostemp64</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __flags)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Similar to mkostemp, but the template can have a suffix after the</span><br><span class="hljs-comment">   XXXXXX.  The length of the suffix is specified in the second</span><br><span class="hljs-comment">   parameter.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkostemps</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __suffixlen, <span class="hljs-type">int</span> __flags)</span><br>     __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (mkostemps, (<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __suffixlen,<br>   <span class="hljs-type">int</span> __flags), mkostemps64)<br>     __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> mkostemps mkostemps64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mkostemps64</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__template, <span class="hljs-type">int</span> __suffixlen, <span class="hljs-type">int</span> __flags)</span><br>     __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Execute the given line as a shell command.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">system</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__command)</span> __wur;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Return a malloc&#x27;d string containing the canonical absolute name of the</span><br><span class="hljs-comment">   existing named file.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">canonicalize_file_name</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Return the canonical absolute name of file NAME.  If RESOLVED is</span><br><span class="hljs-comment">   null, the result is malloc&#x27;d; otherwise, if the canonical name is</span><br><span class="hljs-comment">   PATH_MAX chars or more, returns null with `errno&#x27; set to</span><br><span class="hljs-comment">   ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,</span><br><span class="hljs-comment">   returns the name in RESOLVED.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">realpath</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __name,</span><br><span class="hljs-params">       <span class="hljs-type">char</span> *__restrict __resolved)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Shorthand for type of comparison functions.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __COMPAR_FN_T</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __COMPAR_FN_T</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*<span class="hljs-type">__compar_fn_t</span>)</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *)</span>;<br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__compar_fn_t</span> <span class="hljs-type">comparison_fn_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*<span class="hljs-type">__compar_d_fn_t</span>)</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">void</span> *)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Do a binary search for KEY in BASE, which consists of NMEMB elements</span><br><span class="hljs-comment">   of SIZE bytes each, using COMPAR to perform the comparisons.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">bsearch</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *__key, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *__base,</span><br><span class="hljs-params">      <span class="hljs-type">size_t</span> __nmemb, <span class="hljs-type">size_t</span> __size, <span class="hljs-type">__compar_fn_t</span> __compar)</span><br>     __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdlib-bsearch.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Sort NMEMB elements of BASE, of SIZE bytes each,</span><br><span class="hljs-comment">   using COMPAR to perform the comparisons.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">qsort</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__base, <span class="hljs-type">size_t</span> __nmemb, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">   <span class="hljs-type">__compar_fn_t</span> __compar)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">qsort_r</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__base, <span class="hljs-type">size_t</span> __nmemb, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">     <span class="hljs-type">__compar_d_fn_t</span> __compar, <span class="hljs-type">void</span> *__arg)</span><br>  __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Return the absolute value of X.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abs</span> <span class="hljs-params">(<span class="hljs-type">int</span> __x)</span> __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">labs</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">int</span> __x)</span> __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ISOC99</span><br>__extension__ <span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">llabs</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __x)</span><br>     __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Return the `div_t&#x27;, `ldiv_t&#x27; or `lldiv_t&#x27; representation</span><br><span class="hljs-comment">   of the value of NUMER over DENOM. */</span><br><span class="hljs-comment">/* GCC may have built-ins for these someday.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">div_t</span> <span class="hljs-title function_">div</span> <span class="hljs-params">(<span class="hljs-type">int</span> __numer, <span class="hljs-type">int</span> __denom)</span><br>     __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">ldiv_t</span> <span class="hljs-title function_">ldiv</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">int</span> __numer, <span class="hljs-type">long</span> <span class="hljs-type">int</span> __denom)</span><br>     __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ISOC99</span><br>__extension__ <span class="hljs-keyword">extern</span> <span class="hljs-type">lldiv_t</span> <span class="hljs-title function_">lldiv</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __numer,</span><br><span class="hljs-params">    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __denom)</span><br>     __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Convert floating point numbers to strings.  The returned values are</span><br><span class="hljs-comment">   valid only until another call to the same function.  */</span><br><br><span class="hljs-comment">/* Convert VALUE to a string with NDIGIT digits and return a pointer to</span><br><span class="hljs-comment">   this.  Set *DECPT with the position of the decimal character and *SIGN</span><br><span class="hljs-comment">   with the sign of the number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">ecvt</span> <span class="hljs-params">(<span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit, <span class="hljs-type">int</span> *__restrict __decpt,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> *__restrict __sign)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur;<br><br><span class="hljs-comment">/* Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT</span><br><span class="hljs-comment">   with the position of the decimal character and *SIGN with the sign of</span><br><span class="hljs-comment">   the number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">fcvt</span> <span class="hljs-params">(<span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit, <span class="hljs-type">int</span> *__restrict __decpt,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> *__restrict __sign)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur;<br><br><span class="hljs-comment">/* If possible convert VALUE to a string with NDIGIT significant digits.</span><br><span class="hljs-comment">   Otherwise use exponential representation.  The resulting string will</span><br><span class="hljs-comment">   be written to BUF.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">gcvt</span> <span class="hljs-params">(<span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit, <span class="hljs-type">char</span> *__buf)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Long double versions of above functions.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">qecvt</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> *__restrict __decpt, <span class="hljs-type">int</span> *__restrict __sign)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">qfcvt</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> *__restrict __decpt, <span class="hljs-type">int</span> *__restrict __sign)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">qgcvt</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit, <span class="hljs-type">char</span> *__buf)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span> __wur;<br><br><br><span class="hljs-comment">/* Reentrant version of the functions above which provide their own</span><br><span class="hljs-comment">   buffers.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ecvt_r</span> <span class="hljs-params">(<span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit, <span class="hljs-type">int</span> *__restrict __decpt,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> *__restrict __sign, <span class="hljs-type">char</span> *__restrict __buf,</span><br><span class="hljs-params">   <span class="hljs-type">size_t</span> __len)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fcvt_r</span> <span class="hljs-params">(<span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit, <span class="hljs-type">int</span> *__restrict __decpt,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> *__restrict __sign, <span class="hljs-type">char</span> *__restrict __buf,</span><br><span class="hljs-params">   <span class="hljs-type">size_t</span> __len)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">qecvt_r</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> *__restrict __decpt, <span class="hljs-type">int</span> *__restrict __sign,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> *__restrict __buf, <span class="hljs-type">size_t</span> __len)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">qfcvt_r</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> __value, <span class="hljs-type">int</span> __ndigit,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> *__restrict __decpt, <span class="hljs-type">int</span> *__restrict __sign,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> *__restrict __buf, <span class="hljs-type">size_t</span> __len)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* misc */</span></span><br><br><br><span class="hljs-comment">/* Return the length of the multibyte character</span><br><span class="hljs-comment">   in S, which is no longer than N.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mblen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s, <span class="hljs-type">size_t</span> __n)</span> __THROW;<br><span class="hljs-comment">/* Return the length of the given multibyte character,</span><br><span class="hljs-comment">   putting its `wchar_t&#x27; representation in *PWC.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mbtowc</span> <span class="hljs-params">(<span class="hljs-type">wchar_t</span> *__restrict __pwc,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">size_t</span> __n)</span> __THROW;<br><span class="hljs-comment">/* Put the multibyte character represented</span><br><span class="hljs-comment">   by WCHAR in S, returning its length.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wctomb</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s, <span class="hljs-type">wchar_t</span> __wchar)</span> __THROW;<br><br><br><span class="hljs-comment">/* Convert a multibyte string to a wide char string.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">mbstowcs</span> <span class="hljs-params">(<span class="hljs-type">wchar_t</span> *__restrict  __pwcs,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">size_t</span> __n)</span> __THROW;<br><span class="hljs-comment">/* Convert a wide char string to multibyte string.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">wcstombs</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span> *__restrict __pwcs, <span class="hljs-type">size_t</span> __n)</span><br>     __THROW;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Determine whether the string value of RESPONSE matches the affirmation</span><br><span class="hljs-comment">   or negative response expression as specified by the LC_MESSAGES category</span><br><span class="hljs-comment">   in the program&#x27;s current locale.  Returns 1 if affirmative, 0 if</span><br><span class="hljs-comment">   negative, and -1 if not matching.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rpmatch</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__response)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Parse comma separated suboption from *OPTIONP and match against</span><br><span class="hljs-comment">   strings in TOKENS.  If found return index and set *VALUEP to</span><br><span class="hljs-comment">   optional value introduced by an equal sign.  If the suboption is</span><br><span class="hljs-comment">   not part of TOKENS return in *VALUEP beginning of unknown</span><br><span class="hljs-comment">   suboption.  On exit *OPTIONP is set to the beginning of the next</span><br><span class="hljs-comment">   token or at the terminating NUL character.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getsubopt</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __optionp,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> *<span class="hljs-type">const</span> *__restrict __tokens,</span><br><span class="hljs-params">      <span class="hljs-type">char</span> **__restrict __valuep)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN</span><br><span class="hljs-comment">/* Setup DES tables according KEY.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setkey</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__key)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* X/Open pseudo terminal handling.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2KXSI</span><br><span class="hljs-comment">/* Return a master pseudo-terminal handle.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">posix_openpt</span> <span class="hljs-params">(<span class="hljs-type">int</span> __oflag)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* The next four functions all take a master pseudo-tty fd and</span><br><span class="hljs-comment">   perform an operation on the associated slave:  */</span><br><br><span class="hljs-comment">/* Chown the slave to the calling user.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">grantpt</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW;<br><br><span class="hljs-comment">/* Release an internal lock so the slave can be opened.</span><br><span class="hljs-comment">   Call after grantpt().  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">unlockpt</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW;<br><br><span class="hljs-comment">/* Return the pathname of the pseudo terminal slave associated with</span><br><span class="hljs-comment">   the master FD is open on, or NULL on errors.</span><br><span class="hljs-comment">   The returned storage is good until the next call to this function.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">ptsname</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Store at most BUFLEN characters of the pathname of the slave pseudo</span><br><span class="hljs-comment">   terminal associated with the master FD is open on in BUF.</span><br><span class="hljs-comment">   Return 0 on success, otherwise an error number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ptsname_r</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">char</span> *__buf, <span class="hljs-type">size_t</span> __buflen)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Open a master pseudo terminal and return its file descriptor.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getpt</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Put the 1 minute, 5 minute and 15 minute load averages into the first</span><br><span class="hljs-comment">   NELEM elements of LOADAVG.  Return the number written (never more than</span><br><span class="hljs-comment">   three, but may be less than NELEM), or -1 if an error occurred.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getloadavg</span> <span class="hljs-params">(<span class="hljs-type">double</span> __loadavg[], <span class="hljs-type">int</span> __nelem)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the index into the active-logins file (utmp) for</span><br><span class="hljs-comment">   the controlling terminal.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ttyslot</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdlib-float.h&gt;</span></span><br><br><span class="hljs-comment">/* Define some macros helping to catch buffer overflows.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __LDBL_COMPAT</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdlib-ldbl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* stdlib.h  */</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux C stdio.h 源码文件</title>
    <link href="/2021/05/05/Linux-C-stdio-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/05/Linux-C-stdio-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核版本是 5.4，文件位置<code>/usr/include/stdio.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Define ISO C stdio on top of C++ iostreams.</span><br><span class="hljs-comment">   Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *ISO C99 Standard: 7.19 Input/output&lt;stdio.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _STDIO_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _STDIO_H1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/libc-header-start.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __need_size_t</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __need_NULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/__FILE.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/FILE.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _STDIO_USES_IOSTREAM</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/libio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN || defined __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __GNUC__</span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifndef</span> _VA_LIST_DEFINED</span><br><span class="hljs-keyword">typedef</span> _G_va_list va_list;<br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> _VA_LIST_DEFINED</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdarg.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off_t</span> <span class="hljs-type">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off64_t</span> <span class="hljs-type">off_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off64_t</span> <span class="hljs-type">off64_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __off64_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __ssize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-type">ssize_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __ssize_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* The type of the second argument to `fgetpos&#x27; and `fsetpos&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> _G_fpos_t <span class="hljs-type">fpos_t</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> _G_fpos64_t <span class="hljs-type">fpos_t</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">typedef</span> _G_fpos64_t <span class="hljs-type">fpos64_t</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* The possibilities for the third argument to `setvbuf&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IOFBF 0<span class="hljs-comment">/* Fully buffered.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IOLBF 1<span class="hljs-comment">/* Line buffered.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IONBF 2<span class="hljs-comment">/* No buffering.  */</span></span><br><br><br><span class="hljs-comment">/* Default buffer size.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> BUFSIZ</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> BUFSIZ _IO_BUFSIZ</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* End of file character.</span><br><span class="hljs-comment">   Some things throughout the library rely on this being -1.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> EOF</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> EOF (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* The possibilities for the third argument to `fseek&#x27;.</span><br><span class="hljs-comment">   These values should not be changed.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEEK_SET0<span class="hljs-comment">/* Seek from beginning of file.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEEK_CUR1<span class="hljs-comment">/* Seek from current position.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEEK_END2<span class="hljs-comment">/* Seek from end of file.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> SEEK_DATA3<span class="hljs-comment">/* Seek to next data.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> SEEK_HOLE4<span class="hljs-comment">/* Seek to next hole.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* Default path prefix for `tempnam&#x27; and `tmpnam&#x27;.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> P_tmpdir<span class="hljs-string">&quot;/tmp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Get the values:</span><br><span class="hljs-comment">   L_tmpnamHow long an array of chars must be to be passed to `tmpnam&#x27;.</span><br><span class="hljs-comment">   TMP_MAXThe minimum number of unique filenames generated by tmpnam</span><br><span class="hljs-comment">(and tempnam when it uses tmpnam&#x27;s name space),</span><br><span class="hljs-comment">or tempnam (the two are separate).</span><br><span class="hljs-comment">   L_ctermidHow long an array to pass to `ctermid&#x27;.</span><br><span class="hljs-comment">   L_cuseridHow long an array to pass to `cuserid&#x27;.</span><br><span class="hljs-comment">   FOPEN_MAXMinimum number of files that can be open at once.</span><br><span class="hljs-comment">   FILENAME_MAXMaximum length of a filename.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdio_lim.h&gt;</span></span><br><br><br><span class="hljs-comment">/* Standard streams.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">stdin</span>;</span><span class="hljs-comment">/* Standard input stream.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">stdout</span>;</span><span class="hljs-comment">/* Standard output stream.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">stderr</span>;</span><span class="hljs-comment">/* Standard error output stream.  */</span><br><span class="hljs-comment">/* C89/C99 say they&#x27;re macros.  Make them happy.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> stdin stdin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> stdout stdout</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> stderr stderr</span><br><br><span class="hljs-comment">/* Remove file FILENAME.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">remove</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__filename)</span> __THROW;<br><span class="hljs-comment">/* Rename file OLD to NEW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rename</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__old, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__new)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">renameat</span> <span class="hljs-params">(<span class="hljs-type">int</span> __oldfd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__old, <span class="hljs-type">int</span> __newfd,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__new)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Create a temporary file and open it read/write.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">tmpfile</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> FILE *__REDIRECT (tmpfile, (<span class="hljs-type">void</span>), tmpfile64) __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> tmpfile tmpfile64</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">tmpfile64</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Generate a temporary filename.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">tmpnam</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span> __THROW __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* This is the reentrant variant of `tmpnam&#x27;.  The only difference is</span><br><span class="hljs-comment">   that it does not allow S to be NULL.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">tmpnam_r</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* Generate a unique temporary filename using up to five characters of PFX</span><br><span class="hljs-comment">   if it is not NULL.  The directory to put this file in is searched for</span><br><span class="hljs-comment">   as follows: First the environment variable &quot;TMPDIR&quot; is checked.</span><br><span class="hljs-comment">   If it contains the name of a writable directory, that directory is used.</span><br><span class="hljs-comment">   If not and if DIR is not NULL, that value is checked.  If that fails,</span><br><span class="hljs-comment">   P_tmpdir is tried and finally &quot;/tmp&quot;.  The storage for the filename</span><br><span class="hljs-comment">   is allocated by `malloc&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">tempnam</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__pfx)</span><br>     __THROW __attribute_malloc__ __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Close STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span> <span class="hljs-params">(FILE *__stream)</span>;<br><span class="hljs-comment">/* Flush STREAM, or all streams if STREAM is NULL.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fflush</span> <span class="hljs-params">(FILE *__stream)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster versions when locking is not required.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fflush_unlocked</span> <span class="hljs-params">(FILE *__stream)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Close all streams.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fcloseall</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Open a file and create a new stream for it.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fopen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes)</span> __wur;<br><span class="hljs-comment">/* Open a file, replacing an existing stream with it.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">freopen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes,</span><br><span class="hljs-params">      FILE *__restrict __stream)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> FILE *__REDIRECT (fopen, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,<br> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes), fopen64)<br>  __wur;<br><span class="hljs-keyword">extern</span> FILE *__REDIRECT (freopen, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes,<br>   FILE *__restrict __stream), freopen64)<br>  __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> fopen fopen64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> freopen freopen64</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fopen64</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes)</span> __wur;<br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">freopen64</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes,</span><br><span class="hljs-params">FILE *__restrict __stream)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_POSIX</span><br><span class="hljs-comment">/* Create a new stream that refers to an existing system file descriptor.  */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fdopen</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__modes)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Create a new stream that refers to the given magic cookie,</span><br><span class="hljs-comment">   and uses the given functions for input and output.  */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fopencookie</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__restrict __magic_cookie,</span><br><span class="hljs-params">  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes,</span><br><span class="hljs-params">  _IO_cookie_io_functions_t __io_funcs)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)</span><br><span class="hljs-comment">/* Create a new stream that refers to a memory buffer.  */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fmemopen</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__s, <span class="hljs-type">size_t</span> __len, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__modes)</span><br>  __THROW __wur;<br><br><span class="hljs-comment">/* Open a stream that writes into a malloc&#x27;d buffer that is expanded as</span><br><span class="hljs-comment">   necessary.  *BUFLOC and *SIZELOC are updated with the buffer&#x27;s location</span><br><span class="hljs-comment">   and the number of characters written on fflush or fclose.  */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">open_memstream</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__bufloc, <span class="hljs-type">size_t</span> *__sizeloc)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* If BUF is NULL, make STREAM unbuffered.</span><br><span class="hljs-comment">   Else make it use buffer BUF, of size BUFSIZ.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setbuf</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">char</span> *__restrict __buf)</span> __THROW;<br><span class="hljs-comment">/* Make STREAM use buffering mode MODE.</span><br><span class="hljs-comment">   If BUF is not NULL, use N bytes of it for buffering;</span><br><span class="hljs-comment">   else allocate an internal buffer N bytes long.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setvbuf</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">char</span> *__restrict __buf,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> __modes, <span class="hljs-type">size_t</span> __n)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* If BUF is NULL, make STREAM unbuffered.</span><br><span class="hljs-comment">   Else make it use SIZE bytes of BUF for buffering.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setbuffer</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">char</span> *__restrict __buf,</span><br><span class="hljs-params">       <span class="hljs-type">size_t</span> __size)</span> __THROW;<br><br><span class="hljs-comment">/* Make STREAM line-buffered.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setlinebuf</span> <span class="hljs-params">(FILE *__stream)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Write formatted output to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fprintf</span> <span class="hljs-params">(FILE *__restrict __stream,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span>;<br><span class="hljs-comment">/* Write formatted output to stdout.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">printf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span>;<br><span class="hljs-comment">/* Write formatted output to S.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __THROWNL;<br><br><span class="hljs-comment">/* Write formatted output to S from argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vfprintf</span> <span class="hljs-params">(FILE *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,</span><br><span class="hljs-params">     _G_va_list __arg)</span>;<br><span class="hljs-comment">/* Write formatted output to stdout from argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vprintf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, _G_va_list __arg)</span>;<br><span class="hljs-comment">/* Write formatted output to S from argument list ARG.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vsprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,</span><br><span class="hljs-params">     _G_va_list __arg)</span> __THROWNL;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_ISOC99 || defined __USE_UNIX98</span><br><span class="hljs-comment">/* Maximum chars of output to write in MAXLEN.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">snprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">size_t</span> __maxlen,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span><br>     __THROWNL __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vsnprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">size_t</span> __maxlen,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, _G_va_list __arg)</span><br>     __THROWNL __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>)))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __GLIBC_USE (LIB_EXT2)</span><br><span class="hljs-comment">/* Write formatted output to a string dynamically allocated with `malloc&#x27;.</span><br><span class="hljs-comment">   Store the address of the string in *PTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vasprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __ptr, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __f,</span><br><span class="hljs-params">      _G_va_list __arg)</span><br>     __THROWNL __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __asprintf (<span class="hljs-type">char</span> **__restrict __ptr,<br>       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt, ...)<br>     __THROWNL __attribute__ ((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">asprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __ptr,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt, ...)</span><br>     __THROWNL __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Write formatted output to a file descriptor.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vdprintf</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt,</span><br><span class="hljs-params">     _G_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dprintf</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt, ...)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Read formatted input from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fscanf</span> <span class="hljs-params">(FILE *__restrict __stream,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __wur;<br><span class="hljs-comment">/* Read formatted input from stdin.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">scanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __wur;<br><span class="hljs-comment">/* Read formatted input from S.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_ISOC99 &amp;&amp; !defined __USE_GNU \</span><br><span class="hljs-meta">    &amp;&amp; (!defined __LDBL_COMPAT || !defined __REDIRECT) \</span><br><span class="hljs-meta">    &amp;&amp; (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-comment">/* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[</span><br><span class="hljs-comment">   GNU extension which conflicts with valid %a followed by letter</span><br><span class="hljs-comment">   s, S or [.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (<span class="hljs-built_in">fscanf</span>, (FILE *__restrict __stream,<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...),<br>       __isoc99_fscanf) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (<span class="hljs-built_in">scanf</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...),<br>       __isoc99_scanf) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT_NTH (<span class="hljs-built_in">sscanf</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...),<br>   __isoc99_sscanf);<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __isoc99_fscanf (FILE *__restrict __stream,<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __isoc99_scanf (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __isoc99_sscanf (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...) __THROW;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> fscanf __isoc99_fscanf</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> scanf __isoc99_scanf</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> sscanf __isoc99_sscanf</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_ISOC99</span><br><span class="hljs-comment">/* Read formatted input from S into argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vfscanf</span> <span class="hljs-params">(FILE *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,</span><br><span class="hljs-params">    _G_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span> __wur;<br><br><span class="hljs-comment">/* Read formatted input from stdin into argument list ARG.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, _G_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)))</span> __wur;<br><br><span class="hljs-comment">/* Read formatted input from S into argument list ARG.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vsscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, _G_va_list __arg)</span><br>     __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span>;<br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> !defined __USE_GNU \</span><br><span class="hljs-meta">     &amp;&amp; (!defined __LDBL_COMPAT || !defined __REDIRECT) \</span><br><span class="hljs-meta">     &amp;&amp; (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)</span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-comment">/* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[</span><br><span class="hljs-comment">   GNU extension which conflicts with valid %a followed by letter</span><br><span class="hljs-comment">   s, S or [.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (vfscanf,<br>       (FILE *__restrict __s,<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, _G_va_list __arg),<br>       __isoc99_vfscanf)<br>     __attribute__ ((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (vscanf, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,<br>_G_va_list __arg), __isoc99_vscanf)<br>     __attribute__ ((__format__ (__scanf__, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>))) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT_NTH (vsscanf,<br>   (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,<br>    _G_va_list __arg), __isoc99_vsscanf)<br>     __attribute__ ((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)));<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __isoc99_vfscanf (FILE *__restrict __s,<br>     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,<br>     _G_va_list __arg) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __isoc99_vscanf (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,<br>    _G_va_list __arg) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __isoc99_vsscanf (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,<br>     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,<br>     _G_va_list __arg) __THROW;<br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> vfscanf __isoc99_vfscanf</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> vscanf __isoc99_vscanf</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> vsscanf __isoc99_vsscanf</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use ISO C9x.  */</span></span><br><br><br><span class="hljs-comment">/* Read a character from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span> <span class="hljs-params">(FILE *__stream)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getc</span> <span class="hljs-params">(FILE *__stream)</span>;<br><br><span class="hljs-comment">/* Read a character from stdin.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getchar</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">/* The C standard explicitly says this is a macro, so we always do the</span><br><span class="hljs-comment">   optimization for it.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> getc(_fp) _IO_getc (_fp)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* These are defined in POSIX.1:1996.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getc_unlocked</span> <span class="hljs-params">(FILE *__stream)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getchar_unlocked</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster version when locking is not necessary.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fgetc_unlocked</span> <span class="hljs-params">(FILE *__stream)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use MISC.  */</span></span><br><br><br><span class="hljs-comment">/* Write a character to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putc</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span>;<br><br><span class="hljs-comment">/* Write a character to stdout.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putchar</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c)</span>;<br><br><span class="hljs-comment">/* The C standard explicitly says this can be a macro,</span><br><span class="hljs-comment">   so we always do the optimization for it.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> putc(_ch, _fp) _IO_putc (_ch, _fp)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster version when locking is not necessary.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fputc_unlocked</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use MISC.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* These are defined in POSIX.1:1996.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are possible cancellation points and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putc_unlocked</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putchar_unlocked</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC \</span><br><span class="hljs-meta">    || (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K)</span><br><span class="hljs-comment">/* Get a word (int) from STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getw</span> <span class="hljs-params">(FILE *__stream)</span>;<br><br><span class="hljs-comment">/* Write a word (int) to STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putw</span> <span class="hljs-params">(<span class="hljs-type">int</span> __w, FILE *__stream)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Get a newline-terminated string of finite length from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">int</span> __n, FILE *__restrict __stream)</span><br>     __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __GLIBC_USE (DEPRECATED_GETS)</span><br><span class="hljs-comment">/* Get a newline-terminated string from stdin, removing the newline.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is impossible to use safely.  It has been officially</span><br><span class="hljs-comment">   removed from ISO C11 and ISO C++14, and we have also removed it</span><br><span class="hljs-comment">   from the _GNU_SOURCE feature list.  It remains available when</span><br><span class="hljs-comment">   explicitly using an old ISO C, Unix, or POSIX standard.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">gets</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span> __wur __attribute_deprecated__;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* This function does the same as `fgets&#x27; but does not lock the stream.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">fgets_unlocked</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">int</span> __n,</span><br><span class="hljs-params">     FILE *__restrict __stream)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)</span><br><span class="hljs-comment">/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR</span><br><span class="hljs-comment">   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or</span><br><span class="hljs-comment">   NULL), pointing to *N characters of space.  It is realloc&#x27;d as</span><br><span class="hljs-comment">   necessary.  Returns the number of characters read (not including the</span><br><span class="hljs-comment">   null terminator), or -1 on error or EOF.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation they are cancellation points and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> _IO_ssize_t __getdelim (<span class="hljs-type">char</span> **__restrict __lineptr,<br>       <span class="hljs-type">size_t</span> *__restrict __n, <span class="hljs-type">int</span> __delimiter,<br>       FILE *__restrict __stream) __wur;<br><span class="hljs-keyword">extern</span> _IO_ssize_t <span class="hljs-title function_">getdelim</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __lineptr,</span><br><span class="hljs-params">     <span class="hljs-type">size_t</span> *__restrict __n, <span class="hljs-type">int</span> __delimiter,</span><br><span class="hljs-params">     FILE *__restrict __stream)</span> __wur;<br><br><span class="hljs-comment">/* Like `getdelim&#x27;, but reads up to a newline.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> _IO_ssize_t <span class="hljs-title function_">getline</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __lineptr,</span><br><span class="hljs-params">    <span class="hljs-type">size_t</span> *__restrict __n,</span><br><span class="hljs-params">    FILE *__restrict __stream)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Write a string to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s, FILE *__restrict __stream)</span>;<br><br><span class="hljs-comment">/* Write a string, followed by a newline, to stdout.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">puts</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s)</span>;<br><br><br><span class="hljs-comment">/* Push a character back onto the input buffer of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ungetc</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span>;<br><br><br><span class="hljs-comment">/* Read chunks of generic data from STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">     <span class="hljs-type">size_t</span> __n, FILE *__restrict __stream)</span> __wur;<br><span class="hljs-comment">/* Write chunks of generic data to STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">      <span class="hljs-type">size_t</span> __n, FILE *__restrict __s)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* This function does the same as `fputs&#x27; but does not lock the stream.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation it is a cancellation point and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fputs_unlocked</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params">   FILE *__restrict __stream)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster versions when locking is not necessary.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   These functions are not part of POSIX and therefore no official</span><br><span class="hljs-comment">   cancellation point.  But due to similarity with an POSIX interface</span><br><span class="hljs-comment">   or due to the implementation they are cancellation points and</span><br><span class="hljs-comment">   therefore not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fread_unlocked</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">      <span class="hljs-type">size_t</span> __n, FILE *__restrict __stream)</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite_unlocked</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">       <span class="hljs-type">size_t</span> __n, FILE *__restrict __stream)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Seek to a certain position on STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">long</span> <span class="hljs-type">int</span> __off, <span class="hljs-type">int</span> __whence)</span>;<br><span class="hljs-comment">/* Return the current position of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ftell</span> <span class="hljs-params">(FILE *__stream)</span> __wur;<br><span class="hljs-comment">/* Rewind to the beginning of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rewind</span> <span class="hljs-params">(FILE *__stream)</span>;<br><br><span class="hljs-comment">/* The Single Unix Specification, Version 2, specifies an alternative,</span><br><span class="hljs-comment">   more adequate interface for the two functions above which deal with</span><br><span class="hljs-comment">   file offset.  `long int&#x27; is not the right type.  These definitions</span><br><span class="hljs-comment">   are originally defined in the Large File Support API.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_LARGEFILE || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Seek to a certain position on STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fseeko</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">__off_t</span> __off, <span class="hljs-type">int</span> __whence)</span>;<br><span class="hljs-comment">/* Return the current position of STREAM.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__off_t</span> <span class="hljs-title function_">ftello</span> <span class="hljs-params">(FILE *__stream)</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (fseeko,<br>       (FILE *__stream, <span class="hljs-type">__off64_t</span> __off, <span class="hljs-type">int</span> __whence),<br>       fseeko64);<br><span class="hljs-keyword">extern</span> <span class="hljs-type">__off64_t</span> __REDIRECT (ftello, (FILE *__stream), ftello64);<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> fseeko fseeko64</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> ftello ftello64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Get STREAM&#x27;s position.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fgetpos</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">fpos_t</span> *__restrict __pos)</span>;<br><span class="hljs-comment">/* Set STREAM&#x27;s position.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fsetpos</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">const</span> <span class="hljs-type">fpos_t</span> *__pos)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (fgetpos, (FILE *__restrict __stream,<br> <span class="hljs-type">fpos_t</span> *__restrict __pos), fgetpos64);<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (fsetpos,<br>       (FILE *__stream, <span class="hljs-type">const</span> <span class="hljs-type">fpos_t</span> *__pos), fsetpos64);<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> fgetpos fgetpos64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> fsetpos fsetpos64</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fseeko64</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">__off64_t</span> __off, <span class="hljs-type">int</span> __whence)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">__off64_t</span> <span class="hljs-title function_">ftello64</span> <span class="hljs-params">(FILE *__stream)</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fgetpos64</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">fpos64_t</span> *__restrict __pos)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fsetpos64</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">const</span> <span class="hljs-type">fpos64_t</span> *__pos)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Clear the error and EOF indicators for STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">clearerr</span> <span class="hljs-params">(FILE *__stream)</span> __THROW;<br><span class="hljs-comment">/* Return the EOF indicator for STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">feof</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur;<br><span class="hljs-comment">/* Return the error indicator for STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ferror</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster versions when locking is not required.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">clearerr_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">feof_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ferror_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Print a message describing the meaning of the value of errno.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">perror</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s)</span>;<br><br><span class="hljs-comment">/* Provide the declarations for `sys_errlist&#x27; and `sys_nerr&#x27; if they</span><br><span class="hljs-comment">   are available on this system.  Even if available, these variables</span><br><span class="hljs-comment">   should not be used directly.  The `strerror&#x27; function provides</span><br><span class="hljs-comment">   all the necessary functionality.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/sys_errlist.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_POSIX</span><br><span class="hljs-comment">/* Return the system file descriptor for STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fileno</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Faster version when locking is not required.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fileno_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_POSIX2</span><br><span class="hljs-comment">/* Create a new stream connected to a pipe running the given command.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">popen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__command, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__modes)</span> __wur;<br><br><span class="hljs-comment">/* Close a stream opened by popen and return the status of its child.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pclose</span> <span class="hljs-params">(FILE *__stream)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_POSIX</span><br><span class="hljs-comment">/* Return the name of the controlling terminal.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">ctermid</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K) || defined __USE_GNU</span><br><span class="hljs-comment">/* Return the name of the current user.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">cuserid</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use X/Open, but not issue 6.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">obstack</span>;</span><span class="hljs-comment">/* See &lt;obstack.h&gt;.  */</span><br><br><span class="hljs-comment">/* Write formatted output to an obstack.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">obstack_printf</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> obstack *__restrict __obstack,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span><br>     __THROWNL __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">obstack_vprintf</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> obstack *__restrict __obstack,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,</span><br><span class="hljs-params">    _G_va_list __args)</span><br>     __THROWNL __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use GNU.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* These are defined in POSIX.1:1996.  */</span><br><br><span class="hljs-comment">/* Acquire ownership of STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">flockfile</span> <span class="hljs-params">(FILE *__stream)</span> __THROW;<br><br><span class="hljs-comment">/* Try to acquire ownership of STREAM but do not block if it is not</span><br><span class="hljs-comment">   possible.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ftrylockfile</span> <span class="hljs-params">(FILE *__stream)</span> __THROW __wur;<br><br><span class="hljs-comment">/* Relinquish the ownership granted for STREAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">funlockfile</span> <span class="hljs-params">(FILE *__stream)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* POSIX */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K &amp;&amp; !defined __USE_GNU</span><br><span class="hljs-comment">/*  X/Open Issues 1-5 required getopt to be declared in this</span><br><span class="hljs-comment">   header.  It was removed in Issue 6.  GNU follows Issue 6.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/getopt_posix.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* If we are compiling with optimizing read this file.  It contains</span><br><span class="hljs-comment">   several optimizing inline functions and macros.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdio2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __LDBL_COMPAT</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdio-ldbl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* &lt;stdio.h&gt; included.  */</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 0.11 unistd.h 源码文件</title>
    <link href="/2021/05/04/Linux-0-11-unistd-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/04/Linux-0-11-unistd-h-%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>这学期在学操作系统，一些实验内容主要是使用 LinuxC，很多头文件不知所然，总觉得盲目去看别人的代码，连哪个函数需要使用哪个头文件都不知道，还写个锤儿的代码！首当其冲的就是这个<code>unistd.h</code>，一怒之下，找到 Linux 0.11版本的源码来看，这样至少知道我使用的库中的函数有哪些是<code>unistd.h</code> 中声明的。</p><h3 id="功能描述">功能描述</h3><p>标准符号常数和类型头文件。该文件定义了很多各种各样的常数和类型，以及一些函数声明。（如果在程序中定义了符号<code>__LIBRARY__</code>，则还包括内核系统调用号和内嵌汇编_syscall0()）（括号中的内容暂时不理解，暂时按下不表）</p><h3 id="源代码">源代码</h3><p>源码位置：<code>linux/include/unistd.h</code></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _UNISTD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _UNISTD_H</span><br><br><span class="hljs-comment">/* ok, this may be a joke, but I&#x27;m working on it */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POSIX_VERSION 198808L</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POSIX_CHOWN_RESTRICTED<span class="hljs-comment">/* only root can do a chown (I think..) */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POSIX_NO_TRUNC<span class="hljs-comment">/* no pathname truncation (but see in kernel) */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POSIX_VDISABLE <span class="hljs-string">&#x27;\0&#x27;</span><span class="hljs-comment">/* character to disable things like ^C */</span></span><br><span class="hljs-comment">/*#define _POSIX_SAVED_IDS */</span><span class="hljs-comment">/* we&#x27;ll get to this yet */</span><br><span class="hljs-comment">/*#define _POSIX_JOB_CONTROL */</span><span class="hljs-comment">/* we aren&#x27;t there quite yet. Soon hopefully */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDIN_FILENO0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDOUT_FILENO1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDERR_FILENO2</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL    ((void *)0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* access */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> F_OK0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X_OK1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> W_OK2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R_OK4</span><br><br><span class="hljs-comment">/* lseek */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEEK_SET0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEEK_CUR1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEEK_END2</span><br><br><span class="hljs-comment">/* _SC stands for System Configuration. We don&#x27;t use them much */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_ARG_MAX1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_CHILD_MAX2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_CLOCKS_PER_SEC3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_NGROUPS_MAX4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_OPEN_MAX5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_JOB_CONTROL6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_SAVED_IDS7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SC_VERSION8</span><br><br><span class="hljs-comment">/* more (possibly) configurable things - now pathnames */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_LINK_MAX1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_MAX_CANON2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_MAX_INPUT3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_NAME_MAX4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_PATH_MAX5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_PIPE_BUF6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_NO_TRUNC7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_VDISABLE8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PC_CHOWN_RESTRICTED9</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/times.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utime.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __LIBRARY__</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_setup0<span class="hljs-comment">/* used only by init, to get system going */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_exit1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_fork2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_read3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_write4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_open5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_close6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_waitpid7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_creat8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_link9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_unlink10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_execve11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_chdir12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_time13</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_mknod14</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_chmod15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_chown16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_break17</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_stat18</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_lseek19</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_getpid20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_mount21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_umount22</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_setuid23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_getuid24</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_stime25</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ptrace26</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_alarm27</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_fstat28</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_pause29</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_utime30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_stty31</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_gtty32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_access33</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_nice34</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ftime35</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_sync36</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_kill37</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_rename38</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_mkdir39</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_rmdir40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_dup41</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_pipe42</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_times43</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_prof44</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_brk45</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_setgid46</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_getgid47</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_signal48</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_geteuid49</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_getegid50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_acct51</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_phys52</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_lock53</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ioctl54</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_fcntl55</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_mpx56</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_setpgid57</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ulimit58</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_uname59</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_umask60</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_chroot61</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ustat62</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_dup263</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_getppid64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_getpgrp65</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_setsid66</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_sigaction67</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_sgetmask68</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ssetmask69</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_setreuid70</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_setregid71</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall0(type,name) \</span><br><span class="hljs-meta">type name(void) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;0&quot;</span> (__NR_##name)); \</span><br><span class="hljs-meta"><span class="hljs-keyword">if</span> (__res &gt;= 0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno = -__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall1(type,name,atype,a) \</span><br><span class="hljs-meta">type name(atype a) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;0&quot;</span> (__NR_##name),<span class="hljs-string">&quot;b&quot;</span> ((long)(a))); \</span><br><span class="hljs-meta"><span class="hljs-keyword">if</span> (__res &gt;= 0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno = -__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall2(type,name,atype,a,btype,b) \</span><br><span class="hljs-meta">type name(atype a,btype b) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;0&quot;</span> (__NR_##name),<span class="hljs-string">&quot;b&quot;</span> ((long)(a)),<span class="hljs-string">&quot;c&quot;</span> ((long)(b))); \</span><br><span class="hljs-meta"><span class="hljs-keyword">if</span> (__res &gt;= 0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno = -__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall3(type,name,atype,a,btype,b,ctype,c) \</span><br><span class="hljs-meta">type name(atype a,btype b,ctype c) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">long __res; \</span><br><span class="hljs-meta">__asm__ volatile (<span class="hljs-string">&quot;int $0x80&quot;</span> \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;=a&quot;</span> (__res) \</span><br><span class="hljs-meta">: <span class="hljs-string">&quot;0&quot;</span> (__NR_##name),<span class="hljs-string">&quot;b&quot;</span> ((long)(a)),<span class="hljs-string">&quot;c&quot;</span> ((long)(b)),<span class="hljs-string">&quot;d&quot;</span> ((long)(c))); \</span><br><span class="hljs-meta"><span class="hljs-keyword">if</span> (__res&gt;=0) \</span><br><span class="hljs-meta">return (type) __res; \</span><br><span class="hljs-meta">errno=-__res; \</span><br><span class="hljs-meta">return -1; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __LIBRARY__ */</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> errno;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">access</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">acct</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span><span class="hljs-params">(<span class="hljs-type">int</span> sec)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">brk</span><span class="hljs-params">(<span class="hljs-type">void</span> * end_data_segment)</span>;<br><span class="hljs-type">void</span> * <span class="hljs-title function_">sbrk</span><span class="hljs-params">(<span class="hljs-type">ptrdiff_t</span> increment)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">chdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">chmod</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">chown</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">uid_t</span> owner, <span class="hljs-type">gid_t</span> group)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">chroot</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">creat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">dup</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">char</span> ** argv, <span class="hljs-type">char</span> ** envp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * pathname, <span class="hljs-type">char</span> ** argv)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execvp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * file, <span class="hljs-type">char</span> ** argv)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execl</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * pathname, <span class="hljs-type">char</span> * arg0, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execlp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * file, <span class="hljs-type">char</span> * arg0, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * pathname, <span class="hljs-type">char</span> * arg0, ...)</span>;<br><span class="hljs-keyword">volatile</span> <span class="hljs-type">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span>;<br><span class="hljs-keyword">volatile</span> <span class="hljs-type">void</span> _exit(<span class="hljs-type">int</span> status);<br><span class="hljs-type">int</span> <span class="hljs-title function_">fcntl</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-type">int</span> cmd, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getuid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">geteuid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getgid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getegid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ioctl</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-type">int</span> cmd, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> signal)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">link</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename2)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">lseek</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> origin)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">mknod</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">mode_t</span> mode, <span class="hljs-type">dev_t</span> dev)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">mount</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * specialfile, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * dir, <span class="hljs-type">int</span> rwflag)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">nice</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">int</span> flag, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pause</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> * fildes)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-type">char</span> * buf, <span class="hljs-type">off_t</span> count)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">setpgrp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">setpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">pid_t</span> pgid)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">setuid</span><span class="hljs-params">(<span class="hljs-type">uid_t</span> uid)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">setgid</span><span class="hljs-params">(<span class="hljs-type">gid_t</span> gid)</span>;<br><span class="hljs-type">void</span> (*signal(<span class="hljs-type">int</span> sig, <span class="hljs-type">void</span> (*fn)(<span class="hljs-type">int</span>)))(<span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> <span class="hljs-title function_">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-keyword">struct</span> stat * stat_buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fstat</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-keyword">struct</span> stat * stat_buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">stime</span><span class="hljs-params">(<span class="hljs-type">time_t</span> * tptr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sync</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">time_t</span> <span class="hljs-title function_">time</span><span class="hljs-params">(<span class="hljs-type">time_t</span> * tloc)</span>;<br><span class="hljs-type">time_t</span> <span class="hljs-title function_">times</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tms * tbuf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ulimit</span><span class="hljs-params">(<span class="hljs-type">int</span> cmd, <span class="hljs-type">long</span> limit)</span>;<br><span class="hljs-type">mode_t</span> <span class="hljs-title function_">umask</span><span class="hljs-params">(<span class="hljs-type">mode_t</span> mask)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">umount</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * specialfile)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">uname</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> utsname * name)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ustat</span><span class="hljs-params">(<span class="hljs-type">dev_t</span> dev, <span class="hljs-keyword">struct</span> ustat * ubuf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">utime</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-keyword">struct</span> utimbuf * times)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">int</span> * wait_stat,<span class="hljs-type">int</span> options)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">int</span> * wait_stat)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * buf, <span class="hljs-type">off_t</span> count)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">dup2</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd, <span class="hljs-type">int</span> newfd)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getppid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgrp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">setsid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><p>上面的是 0.11 内核的代码，下面贴一个 5.7 版本的代码。代码位置<code>/usr/include/unistd.h</code></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 1991-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *POSIX Standard: 2.10 Symbolic Constants&lt;unistd.h&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>_UNISTD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_UNISTD_H1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;features.h&gt;</span></span><br><br>__BEGIN_DECLS<br><br><span class="hljs-comment">/* These may be used to determine what facilities are present at compile time.</span><br><span class="hljs-comment">   Their values can be obtained at run time from `sysconf&#x27;.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of September 2008.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _POSIX_VERSION200809L</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of December 2001.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _POSIX_VERSION200112L</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined __USE_POSIX199506</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of June 1995.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _POSIX_VERSION199506L</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined __USE_POSIX199309</span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of September 1993.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _POSIX_VERSION199309L</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/* POSIX Standard approved as ISO/IEC 9945-1 as of September 1990.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _POSIX_VERSION199009L</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* These are not #ifdef __USE_POSIX2 because they are</span><br><span class="hljs-comment">   in the theoretically application-owned namespace.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __POSIX2_THIS_VERSION200809L</span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __POSIX2_THIS_VERSION200112L</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined __USE_POSIX199506</span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __POSIX2_THIS_VERSION199506L</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __POSIX2_THIS_VERSION199209L</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* The utilities on GNU systems also correspond to this version.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POSIX2_VERSION__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* This symbol was required until the 2001 edition of POSIX.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_POSIX2_C_VERSION__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   C Language Bindings Option.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_POSIX2_C_BIND__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   C Language Development Utilities Option.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_POSIX2_C_DEV__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   Software Development Utilities Option.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_POSIX2_SW_DEV__POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* If defined, the implementation supports the</span><br><span class="hljs-comment">   creation of locales with the localedef utility.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POSIX2_LOCALEDEF       __POSIX2_THIS_VERSION</span><br><br><span class="hljs-comment">/* X/Open version number to which the library conforms.  It is selectable.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _XOPEN_VERSION700</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _XOPEN_VERSION600</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined __USE_UNIX98</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _XOPEN_VERSION500</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _XOPEN_VERSION4</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Commands and utilities from XPG4 are available.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _XOPEN_XCU_VERSION4</span><br><br><span class="hljs-comment">/* We are compatible with the old published standards as well.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _XOPEN_XPG21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _XOPEN_XPG31</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _XOPEN_XPG41</span><br><br><span class="hljs-comment">/* The X/Open Unix extensions are available.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _XOPEN_UNIX1</span><br><br><span class="hljs-comment">/* Encryption is present.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_XOPEN_CRYPT1</span><br><br><span class="hljs-comment">/* The enhanced internationalization capabilities according to XPG4.2</span><br><span class="hljs-comment">   are present.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>_XOPEN_ENH_I18N1</span><br><br><span class="hljs-comment">/* The legacy interfaces are also available.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _XOPEN_LEGACY1</span><br><br><br><span class="hljs-comment">/* Get values of POSIX options:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   If these symbols are defined, the corresponding features are</span><br><span class="hljs-comment">   always available.  If not, they may be available sometimes.</span><br><span class="hljs-comment">   The current values can be obtained with `sysconf&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _POSIX_JOB_CONTROLJob control is supported.</span><br><span class="hljs-comment">   _POSIX_SAVED_IDSProcesses have a saved set-user-ID</span><br><span class="hljs-comment">and a saved set-group-ID.</span><br><span class="hljs-comment">   _POSIX_REALTIME_SIGNALSReal-time, queued signals are supported.</span><br><span class="hljs-comment">   _POSIX_PRIORITY_SCHEDULINGPriority scheduling is supported.</span><br><span class="hljs-comment">   _POSIX_TIMERSPOSIX.4 clocks and timers are supported.</span><br><span class="hljs-comment">   _POSIX_ASYNCHRONOUS_IOAsynchronous I/O is supported.</span><br><span class="hljs-comment">   _POSIX_PRIORITIZED_IOPrioritized asynchronous I/O is supported.</span><br><span class="hljs-comment">   _POSIX_SYNCHRONIZED_IOSynchronizing file data is supported.</span><br><span class="hljs-comment">   _POSIX_FSYNCThe fsync function is present.</span><br><span class="hljs-comment">   _POSIX_MAPPED_FILESMapping of files to memory is supported.</span><br><span class="hljs-comment">   _POSIX_MEMLOCKLocking of all memory is supported.</span><br><span class="hljs-comment">   _POSIX_MEMLOCK_RANGELocking of ranges of memory is supported.</span><br><span class="hljs-comment">   _POSIX_MEMORY_PROTECTIONSetting of memory protections is supported.</span><br><span class="hljs-comment">   _POSIX_MESSAGE_PASSINGPOSIX.4 message queues are supported.</span><br><span class="hljs-comment">   _POSIX_SEMAPHORESPOSIX.4 counting semaphores are supported.</span><br><span class="hljs-comment">   _POSIX_SHARED_MEMORY_OBJECTSPOSIX.4 shared memory objects are supported.</span><br><span class="hljs-comment">   _POSIX_THREADSPOSIX.1c pthreads are supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_ATTR_STACKADDRThread stack address attribute option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_ATTR_STACKSIZEThread stack size attribute option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_SAFE_FUNCTIONSThread-safe functions are supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PRIORITY_SCHEDULING</span><br><span class="hljs-comment">POSIX.1c thread execution scheduling supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PRIO_INHERITThread priority inheritance option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PRIO_PROTECTThread priority protection option supported.</span><br><span class="hljs-comment">   _POSIX_THREAD_PROCESS_SHAREDProcess-shared synchronization supported.</span><br><span class="hljs-comment">   _POSIX_PIIProtocol-independent interfaces are supported.</span><br><span class="hljs-comment">   _POSIX_PII_XTIXTI protocol-indep. interfaces are supported.</span><br><span class="hljs-comment">   _POSIX_PII_SOCKETSocket protocol-indep. interfaces are supported.</span><br><span class="hljs-comment">   _POSIX_PII_INTERNETInternet family of protocols supported.</span><br><span class="hljs-comment">   _POSIX_PII_INTERNET_STREAMConnection-mode Internet protocol supported.</span><br><span class="hljs-comment">   _POSIX_PII_INTERNET_DGRAMConnectionless Internet protocol supported.</span><br><span class="hljs-comment">   _POSIX_PII_OSIISO/OSI family of protocols supported.</span><br><span class="hljs-comment">   _POSIX_PII_OSI_COTSConnection-mode ISO/OSI service supported.</span><br><span class="hljs-comment">   _POSIX_PII_OSI_CLTSConnectionless ISO/OSI service supported.</span><br><span class="hljs-comment">   _POSIX_POLLImplementation supports `poll&#x27; function.</span><br><span class="hljs-comment">   _POSIX_SELECTImplementation supports `select&#x27; and `pselect&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _XOPEN_REALTIMEX/Open realtime support is available.</span><br><span class="hljs-comment">   _XOPEN_REALTIME_THREADSX/Open realtime thread support is available.</span><br><span class="hljs-comment">   _XOPEN_SHMShared memory interface according to XPG4.2.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _XBS5_ILP32_OFF32Implementation provides environment with 32-bit</span><br><span class="hljs-comment">int, long, pointer, and off_t types.</span><br><span class="hljs-comment">   _XBS5_ILP32_OFFBIGImplementation provides environment with 32-bit</span><br><span class="hljs-comment">int, long, and pointer and off_t with at least</span><br><span class="hljs-comment">64 bits.</span><br><span class="hljs-comment">   _XBS5_LP64_OFF64Implementation provides environment with 32-bit</span><br><span class="hljs-comment">int, and 64-bit long, pointer, and off_t types.</span><br><span class="hljs-comment">   _XBS5_LPBIG_OFFBIGImplementation provides environment with at</span><br><span class="hljs-comment">least 32 bits int and long, pointer, and off_t</span><br><span class="hljs-comment">with at least 64 bits.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   If any of these symbols is defined as -1, the corresponding option is not</span><br><span class="hljs-comment">   true for any file.  If any is defined as other than -1, the corresponding</span><br><span class="hljs-comment">   option is true for all files.  If a symbol is not defined at all, the value</span><br><span class="hljs-comment">   for a specific file can be obtained from `pathconf&#x27; and `fpathconf&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   _POSIX_CHOWN_RESTRICTEDOnly the super user can use `chown&#x27; to change</span><br><span class="hljs-comment">the owner of a file.  `chown&#x27; can only be used</span><br><span class="hljs-comment">to change the group ID of a file to a group of</span><br><span class="hljs-comment">which the calling process is a member.</span><br><span class="hljs-comment">   _POSIX_NO_TRUNCPathname components longer than</span><br><span class="hljs-comment">NAME_MAX generate an error.</span><br><span class="hljs-comment">   _POSIX_VDISABLEIf defined, if the value of an element of the</span><br><span class="hljs-comment">`c_cc&#x27; member of `struct termios&#x27; is</span><br><span class="hljs-comment">_POSIX_VDISABLE, no character will have the</span><br><span class="hljs-comment">effect associated with that element.</span><br><span class="hljs-comment">   _POSIX_SYNC_IOSynchronous I/O may be performed.</span><br><span class="hljs-comment">   _POSIX_ASYNC_IOAsynchronous I/O may be performed.</span><br><span class="hljs-comment">   _POSIX_PRIO_IOPrioritized Asynchronous I/O may be performed.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Support for the Large File Support interface is not generally available.</span><br><span class="hljs-comment">   If it is available the following constants are defined to one.</span><br><span class="hljs-comment">   _LFS64_LARGEFILELow-level I/O supports large files.</span><br><span class="hljs-comment">   _LFS64_STDIOStandard I/O supports large files.</span><br><span class="hljs-comment">   */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/posix_opt.h&gt;</span></span><br><br><span class="hljs-comment">/* Get the environment definitions from Unix98.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/environments.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Standard file descriptors.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>STDIN_FILENO0<span class="hljs-comment">/* Standard input.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>STDOUT_FILENO1<span class="hljs-comment">/* Standard output.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>STDERR_FILENO2<span class="hljs-comment">/* Standard error output.  */</span></span><br><br><br><span class="hljs-comment">/* All functions that are not declared anywhere else.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>__ssize_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-type">ssize_t</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __ssize_t_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>__need_size_t</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __need_NULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* The Single Unix specification says that some more types are</span><br><span class="hljs-comment">   available here.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __gid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__gid_t</span> <span class="hljs-type">gid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __gid_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __uid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uid_t</span> <span class="hljs-type">uid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __uid_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __off_t_defined</span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off_t</span> <span class="hljs-type">off_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off64_t</span> <span class="hljs-type">off_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __off_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off64_t</span> <span class="hljs-type">off64_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __off64_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __useconds_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__useconds_t</span> <span class="hljs-type">useconds_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __useconds_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __pid_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__pid_t</span> <span class="hljs-type">pid_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __pid_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* X/Open */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __intptr_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__intptr_t</span> <span class="hljs-type">intptr_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __intptr_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __socklen_t_defined</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__socklen_t</span> <span class="hljs-type">socklen_t</span>;<br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __socklen_t_defined</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Values for the second argument to access.</span><br><span class="hljs-comment">   These may be OR&#x27;d together.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>R_OK4<span class="hljs-comment">/* Test for read permission.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>W_OK2<span class="hljs-comment">/* Test for write permission.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>X_OK1<span class="hljs-comment">/* Test for execute permission.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>F_OK0<span class="hljs-comment">/* Test for existence.  */</span></span><br><br><span class="hljs-comment">/* Test for access to NAME using the real UID and real GID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">access</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name, <span class="hljs-type">int</span> __type)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Test for access to NAME using the effective UID and GID</span><br><span class="hljs-comment">   (as normal file operations use).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">euidaccess</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name, <span class="hljs-type">int</span> __type)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* An alias for `euidaccess&#x27;, used by some other systems.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">eaccess</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name, <span class="hljs-type">int</span> __type)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Test for access to FILE relative to the directory FD is open on.</span><br><span class="hljs-comment">   If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess&#x27;,</span><br><span class="hljs-comment">   otherwise use real IDs like `access&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">faccessat</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">int</span> __type, <span class="hljs-type">int</span> __flag)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use GNU.  */</span></span><br><br><br><span class="hljs-comment">/* Values for the WHENCE argument to lseek.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>_STDIO_H<span class="hljs-comment">/* &lt;stdio.h&gt; has the same definitions.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> SEEK_SET0<span class="hljs-comment">/* Seek from beginning of file.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> SEEK_CUR1<span class="hljs-comment">/* Seek from current position.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> SEEK_END2<span class="hljs-comment">/* Seek from end of file.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> SEEK_DATA3<span class="hljs-comment">/* Seek to next data.  */</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> SEEK_HOLE4<span class="hljs-comment">/* Seek to next hole.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC &amp;&amp; !defined L_SET</span><br><span class="hljs-comment">/* Old BSD names for the same constants; just for compatibility.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> L_SETSEEK_SET</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> L_INCRSEEK_CUR</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> L_XTNDSEEK_END</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Move FD&#x27;s file position to OFFSET bytes from the</span><br><span class="hljs-comment">   beginning of the file (if WHENCE is SEEK_SET),</span><br><span class="hljs-comment">   the current position (if WHENCE is SEEK_CUR),</span><br><span class="hljs-comment">   or the end of the file (if WHENCE is SEEK_END).</span><br><span class="hljs-comment">   Return the new file position.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__off_t</span> <span class="hljs-title function_">lseek</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">__off_t</span> __offset, <span class="hljs-type">int</span> __whence)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __REDIRECT_NTH</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__off64_t</span> __REDIRECT_NTH (lseek,<br> (<span class="hljs-type">int</span> __fd, <span class="hljs-type">__off64_t</span> __offset, <span class="hljs-type">int</span> __whence),<br> lseek64);<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> lseek lseek64</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__off64_t</span> <span class="hljs-title function_">lseek64</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">__off64_t</span> __offset, <span class="hljs-type">int</span> __whence)</span><br>     __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Close the file descriptor FD.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">close</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span>;<br><br><span class="hljs-comment">/* Read NBYTES into BUF from FD.  Return the</span><br><span class="hljs-comment">   number read, -1 for errors or 0 for EOF.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">void</span> *__buf, <span class="hljs-type">size_t</span> __nbytes)</span> __wur;<br><br><span class="hljs-comment">/* Write N bytes of BUF to FD.  Return the number written, or -1.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *__buf, <span class="hljs-type">size_t</span> __n)</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K8</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-comment">/* Read NBYTES into BUF from FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number read, -1 for errors</span><br><span class="hljs-comment">   or 0 for EOF.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">pread</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">void</span> *__buf, <span class="hljs-type">size_t</span> __nbytes,</span><br><span class="hljs-params">      <span class="hljs-type">__off_t</span> __offset)</span> __wur;<br><br><span class="hljs-comment">/* Write N bytes of BUF to FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number written, or -1.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">pwrite</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *__buf, <span class="hljs-type">size_t</span> __n,</span><br><span class="hljs-params">       <span class="hljs-type">__off_t</span> __offset)</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> __REDIRECT (pread, (<span class="hljs-type">int</span> __fd, <span class="hljs-type">void</span> *__buf, <span class="hljs-type">size_t</span> __nbytes,<br>   <span class="hljs-type">__off64_t</span> __offset),<br>   pread64) __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> __REDIRECT (pwrite, (<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *__buf,<br>    <span class="hljs-type">size_t</span> __nbytes, <span class="hljs-type">__off64_t</span> __offset),<br>   pwrite64) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> pread pread64</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> pwrite pwrite64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-comment">/* Read NBYTES into BUF from FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number read, -1 for errors</span><br><span class="hljs-comment">   or 0 for EOF.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">pread64</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">void</span> *__buf, <span class="hljs-type">size_t</span> __nbytes,</span><br><span class="hljs-params"><span class="hljs-type">__off64_t</span> __offset)</span> __wur;<br><span class="hljs-comment">/* Write N bytes of BUF to FD at the given position OFFSET without</span><br><span class="hljs-comment">   changing the file pointer.  Return the number written, or -1.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">pwrite64</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *__buf, <span class="hljs-type">size_t</span> __n,</span><br><span class="hljs-params"> <span class="hljs-type">__off64_t</span> __offset)</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Create a one-way communication channel (pipe).</span><br><span class="hljs-comment">   If successful, two file descriptors are stored in PIPEDES;</span><br><span class="hljs-comment">   bytes written on PIPEDES[1] can be read from PIPEDES[0].</span><br><span class="hljs-comment">   Returns 0 if successful, -1 if not.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pipe</span> <span class="hljs-params">(<span class="hljs-type">int</span> __pipedes[<span class="hljs-number">2</span>])</span> __THROW __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Same as pipe but apply flags passed in FLAGS to the new file</span><br><span class="hljs-comment">   descriptors.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pipe2</span> <span class="hljs-params">(<span class="hljs-type">int</span> __pipedes[<span class="hljs-number">2</span>], <span class="hljs-type">int</span> __flags)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.</span><br><span class="hljs-comment">   If SECONDS is zero, any currently scheduled alarm will be cancelled.</span><br><span class="hljs-comment">   The function returns the number of seconds remaining until the last</span><br><span class="hljs-comment">   alarm scheduled would have signaled, or zero if there wasn&#x27;t one.</span><br><span class="hljs-comment">   There is no return value to indicate an error, but you can set `errno&#x27;</span><br><span class="hljs-comment">   to 0 and check its value after calling `alarm&#x27;, and this might tell you.</span><br><span class="hljs-comment">   The signal may come late due to processor scheduling.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __seconds)</span> __THROW;<br><br><span class="hljs-comment">/* Make the process sleep for SECONDS seconds, or until a signal arrives</span><br><span class="hljs-comment">   and is not ignored.  The function returns the number of seconds less</span><br><span class="hljs-comment">   than SECONDS which it actually slept (thus zero if it slept the full time).</span><br><span class="hljs-comment">   If a signal handler does a `longjmp&#x27; or modifies the handling of the</span><br><span class="hljs-comment">   SIGALRM signal while inside `sleep&#x27; call, the handling of the SIGALRM</span><br><span class="hljs-comment">   signal afterwards is undefined.  There is no return value to indicate</span><br><span class="hljs-comment">   error, but if `sleep&#x27; returns SECONDS, it probably didn&#x27;t work.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sleep</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __seconds)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Set an alarm to go off (generating a SIGALRM signal) in VALUE</span><br><span class="hljs-comment">   microseconds.  If INTERVAL is nonzero, when the alarm goes off, the</span><br><span class="hljs-comment">   timer is reset to go off every INTERVAL microseconds thereafter.</span><br><span class="hljs-comment">   Returns the number of microseconds remaining before the alarm.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__useconds_t</span> <span class="hljs-title function_">ualarm</span> <span class="hljs-params">(<span class="hljs-type">__useconds_t</span> __value, <span class="hljs-type">__useconds_t</span> __interval)</span><br>     __THROW;<br><br><span class="hljs-comment">/* Sleep USECONDS microseconds, or until a signal arrives that is not blocked</span><br><span class="hljs-comment">   or ignored.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">usleep</span> <span class="hljs-params">(<span class="hljs-type">__useconds_t</span> __useconds)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Suspend the process until a signal arrives.</span><br><span class="hljs-comment">   This always returns -1 and sets `errno&#x27; to EINTR.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pause</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">/* Change the owner and group of FILE.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">chown</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">__uid_t</span> __owner, <span class="hljs-type">__gid_t</span> __group)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Change the owner and group of the file that FD is open on.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fchown</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">__uid_t</span> __owner, <span class="hljs-type">__gid_t</span> __group)</span> __THROW __wur;<br><br><br><span class="hljs-comment">/* Change owner and group of FILE, if it is a symbolic</span><br><span class="hljs-comment">   link the ownership of the symbolic link is changed.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lchown</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">__uid_t</span> __owner, <span class="hljs-type">__gid_t</span> __group)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use X/Open Unix.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Change the owner and group of FILE relative to the directory FD is open</span><br><span class="hljs-comment">   on.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fchownat</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">__uid_t</span> __owner,</span><br><span class="hljs-params">     <span class="hljs-type">__gid_t</span> __group, <span class="hljs-type">int</span> __flag)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use GNU.  */</span></span><br><br><span class="hljs-comment">/* Change the process&#x27;s working directory to PATH.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">chdir</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Change the process&#x27;s working directory to the one FD is open on.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fchdir</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Get the pathname of the current working directory,</span><br><span class="hljs-comment">   and put it in SIZE bytes of BUF.  Returns NULL if the</span><br><span class="hljs-comment">   directory couldn&#x27;t be determined or SIZE was too small.</span><br><span class="hljs-comment">   If successful, returns BUF.  In GNU, if BUF is NULL,</span><br><span class="hljs-comment">   an array is allocated with `malloc&#x27;; the array is SIZE</span><br><span class="hljs-comment">   bytes long, unless SIZE == 0, in which case it is as</span><br><span class="hljs-comment">   big as necessary.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">getcwd</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__buf, <span class="hljs-type">size_t</span> __size)</span> __THROW __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Return a malloc&#x27;d string containing the current directory name.</span><br><span class="hljs-comment">   If the environment variable `PWD&#x27; is set, and its value is correct,</span><br><span class="hljs-comment">   that value is used.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">get_current_dir_name</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Put the absolute pathname of the current working directory in BUF.</span><br><span class="hljs-comment">   If successful, return BUF.  If not, put an error message in</span><br><span class="hljs-comment">   BUF and return NULL.  BUF should be at least PATH_MAX bytes long.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">getwd</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__buf)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __attribute_deprecated__ __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Duplicate FD, returning a new file descriptor on the same file.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dup</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW __wur;<br><br><span class="hljs-comment">/* Duplicate FD to FD2, closing FD2 and making it open on the same file.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dup2</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">int</span> __fd2)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Duplicate FD to FD2, closing FD2 and making it open on the same</span><br><span class="hljs-comment">   file while setting flags according to FLAGS.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dup3</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">int</span> __fd2, <span class="hljs-type">int</span> __flags)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* NULL-terminated array of &quot;NAME=VALUE&quot; environment variables.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__environ;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **environ;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Replace the current process, executing PATH with arguments ARGV and</span><br><span class="hljs-comment">   environment ENVP.  ARGV and ENVP are terminated by NULL pointers.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">execve</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __argv[],</span><br><span class="hljs-params">   <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __envp[])</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Execute the file FD refers to, overlaying the running program image.</span><br><span class="hljs-comment">   ARGV and ENVP are passed to the new program, as for `execve&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fexecve</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __argv[], <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __envp[])</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Execute PATH with arguments ARGV and environment from `environ&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">execv</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __argv[])</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Execute PATH with all arguments after PATH until a NULL pointer,</span><br><span class="hljs-comment">   and the argument after that for environment.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">execle</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__arg, ...)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Execute PATH with all arguments after PATH until</span><br><span class="hljs-comment">   a NULL pointer and environment from `environ&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">execl</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__arg, ...)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Execute FILE, searching in the `PATH&#x27; environment variable if it contains</span><br><span class="hljs-comment">   no slashes, with arguments ARGV and environment from `environ&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">execvp</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __argv[])</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Execute FILE, searching in the `PATH&#x27; environment variable if</span><br><span class="hljs-comment">   it contains no slashes, with all arguments after FILE until a</span><br><span class="hljs-comment">   NULL pointer and environment from `environ&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">execlp</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__arg, ...)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Execute FILE, searching in the `PATH&#x27; environment variable if it contains</span><br><span class="hljs-comment">   no slashes, with arguments ARGV and environment from `environ&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">execvpe</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __argv[],</span><br><span class="hljs-params">    <span class="hljs-type">char</span> *<span class="hljs-type">const</span> __envp[])</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN</span><br><span class="hljs-comment">/* Add INC to priority of the current process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nice</span> <span class="hljs-params">(<span class="hljs-type">int</span> __inc)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Terminate program execution with the low-order 8 bits of STATUS.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> _exit (<span class="hljs-type">int</span> __status) __attribute__ ((__noreturn__));<br><br><br><span class="hljs-comment">/* Get the `_PC_*&#x27; symbols for the NAME argument to `pathconf&#x27; and `fpathconf&#x27;;</span><br><span class="hljs-comment">   the `_SC_*&#x27; symbols for the NAME argument to `sysconf&#x27;;</span><br><span class="hljs-comment">   and the `_CS_*&#x27; symbols for the NAME argument to `confstr&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/confname.h&gt;</span></span><br><br><span class="hljs-comment">/* Get file-specific configuration information about PATH.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pathconf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path, <span class="hljs-type">int</span> __name)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Get file-specific configuration about descriptor FD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fpathconf</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">int</span> __name)</span> __THROW;<br><br><span class="hljs-comment">/* Get the value of the system variable NAME.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sysconf</span> <span class="hljs-params">(<span class="hljs-type">int</span> __name)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_POSIX2</span><br><span class="hljs-comment">/* Get the value of the string-valued system variable NAME.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">confstr</span> <span class="hljs-params">(<span class="hljs-type">int</span> __name, <span class="hljs-type">char</span> *__buf, <span class="hljs-type">size_t</span> __len)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Get the process ID of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">getpid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Get the process ID of the calling process&#x27;s parent.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">getppid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Get the process group ID of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">getpgrp</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Get the process group ID of process PID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> __getpgid (<span class="hljs-type">__pid_t</span> __pid) __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">getpgid</span> <span class="hljs-params">(<span class="hljs-type">__pid_t</span> __pid)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Set the process group ID of the process matching PID to PGID.</span><br><span class="hljs-comment">   If PID is zero, the current process&#x27;s process group ID is set.</span><br><span class="hljs-comment">   If PGID is zero, the process ID of the process is used.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setpgid</span> <span class="hljs-params">(<span class="hljs-type">__pid_t</span> __pid, <span class="hljs-type">__pid_t</span> __pgid)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Both System V and BSD have `setpgrp&#x27; functions, but with different</span><br><span class="hljs-comment">   calling conventions.  The BSD function is the same as POSIX.1 `setpgid&#x27;</span><br><span class="hljs-comment">   (above).  The System V function takes no arguments and puts the calling</span><br><span class="hljs-comment">   process in its on group like `setpgid (0, 0)&#x27;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   New programs should always use `setpgid&#x27; instead.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   GNU provides the POSIX.1 function.  */</span><br><br><span class="hljs-comment">/* Set the process group ID of the calling process to its own PID.</span><br><span class="hljs-comment">   This is exactly the same as `setpgid (0, 0)&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setpgrp</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* Use misc or X/Open.  */</span></span><br><br><span class="hljs-comment">/* Create a new session with the calling process as its leader.</span><br><span class="hljs-comment">   The process group IDs of the session and the calling process</span><br><span class="hljs-comment">   are set to the process ID of the calling process, which is returned.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">setsid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Return the session ID of the given process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">getsid</span> <span class="hljs-params">(<span class="hljs-type">__pid_t</span> __pid)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Get the real user ID of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__uid_t</span> <span class="hljs-title function_">getuid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Get the effective user ID of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__uid_t</span> <span class="hljs-title function_">geteuid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Get the real group ID of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__gid_t</span> <span class="hljs-title function_">getgid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Get the effective group ID of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__gid_t</span> <span class="hljs-title function_">getegid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* If SIZE is zero, return the number of supplementary groups</span><br><span class="hljs-comment">   the calling process is in.  Otherwise, fill in the group IDs</span><br><span class="hljs-comment">   of its supplementary groups in LIST and return the number written.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getgroups</span> <span class="hljs-params">(<span class="hljs-type">int</span> __size, <span class="hljs-type">__gid_t</span> __list[])</span> __THROW __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_GNU</span><br><span class="hljs-comment">/* Return nonzero iff the calling process is in group GID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">group_member</span> <span class="hljs-params">(<span class="hljs-type">__gid_t</span> __gid)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Set the user ID of the calling process to UID.</span><br><span class="hljs-comment">   If the calling process is the super-user, set the real</span><br><span class="hljs-comment">   and effective user IDs, and the saved set-user-ID to UID;</span><br><span class="hljs-comment">   if not, the effective user ID is set to UID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setuid</span> <span class="hljs-params">(<span class="hljs-type">__uid_t</span> __uid)</span> __THROW __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Set the real user ID of the calling process to RUID,</span><br><span class="hljs-comment">   and the effective user ID of the calling process to EUID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setreuid</span> <span class="hljs-params">(<span class="hljs-type">__uid_t</span> __ruid, <span class="hljs-type">__uid_t</span> __euid)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Set the effective user ID of the calling process to UID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">seteuid</span> <span class="hljs-params">(<span class="hljs-type">__uid_t</span> __uid)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1-2001.  */</span></span><br><br><span class="hljs-comment">/* Set the group ID of the calling process to GID.</span><br><span class="hljs-comment">   If the calling process is the super-user, set the real</span><br><span class="hljs-comment">   and effective group IDs, and the saved set-group-ID to GID;</span><br><span class="hljs-comment">   if not, the effective group ID is set to GID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setgid</span> <span class="hljs-params">(<span class="hljs-type">__gid_t</span> __gid)</span> __THROW __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><span class="hljs-comment">/* Set the real group ID of the calling process to RGID,</span><br><span class="hljs-comment">   and the effective group ID of the calling process to EGID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setregid</span> <span class="hljs-params">(<span class="hljs-type">__gid_t</span> __rgid, <span class="hljs-type">__gid_t</span> __egid)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Set the effective group ID of the calling process to GID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setegid</span> <span class="hljs-params">(<span class="hljs-type">__gid_t</span> __gid)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1-2001.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Fetch the real user ID, effective user ID, and saved-set user ID,</span><br><span class="hljs-comment">   of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getresuid</span> <span class="hljs-params">(<span class="hljs-type">__uid_t</span> *__ruid, <span class="hljs-type">__uid_t</span> *__euid, <span class="hljs-type">__uid_t</span> *__suid)</span><br>     __THROW;<br><br><span class="hljs-comment">/* Fetch the real group ID, effective group ID, and saved-set group ID,</span><br><span class="hljs-comment">   of the calling process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getresgid</span> <span class="hljs-params">(<span class="hljs-type">__gid_t</span> *__rgid, <span class="hljs-type">__gid_t</span> *__egid, <span class="hljs-type">__gid_t</span> *__sgid)</span><br>     __THROW;<br><br><span class="hljs-comment">/* Set the real user ID, effective user ID, and saved-set user ID,</span><br><span class="hljs-comment">   of the calling process to RUID, EUID, and SUID, respectively.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setresuid</span> <span class="hljs-params">(<span class="hljs-type">__uid_t</span> __ruid, <span class="hljs-type">__uid_t</span> __euid, <span class="hljs-type">__uid_t</span> __suid)</span><br>     __THROW __wur;<br><br><span class="hljs-comment">/* Set the real group ID, effective group ID, and saved-set group ID,</span><br><span class="hljs-comment">   of the calling process to RGID, EGID, and SGID, respectively.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setresgid</span> <span class="hljs-params">(<span class="hljs-type">__gid_t</span> __rgid, <span class="hljs-type">__gid_t</span> __egid, <span class="hljs-type">__gid_t</span> __sgid)</span><br>     __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Clone the calling process, creating an exact copy.</span><br><span class="hljs-comment">   Return -1 for errors, 0 to the new process,</span><br><span class="hljs-comment">   and the process ID of the new process to the old process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">fork</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROWNL;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><span class="hljs-comment">/* Clone the calling process, but without copying the whole address space.</span><br><span class="hljs-comment">   The calling process is suspended until the new process exits or is</span><br><span class="hljs-comment">   replaced by a call to `execve&#x27;.  Return -1 for errors, 0 to the new process,</span><br><span class="hljs-comment">   and the process ID of the new process to the old process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">vfork</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc or XPG &lt; 7. */</span></span><br><br><br><span class="hljs-comment">/* Return the pathname of the terminal FD is open on, or NULL on errors.</span><br><span class="hljs-comment">   The returned storage is good only until the next call to this function.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">ttyname</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW;<br><br><span class="hljs-comment">/* Store at most BUFLEN characters of the pathname of the terminal FD is</span><br><span class="hljs-comment">   open on in BUF.  Return 0 on success, otherwise an error number.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ttyname_r</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">char</span> *__buf, <span class="hljs-type">size_t</span> __buflen)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span> __wur;<br><br><span class="hljs-comment">/* Return 1 if FD is a valid descriptor associated</span><br><span class="hljs-comment">   with a terminal, zero if not.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">isatty</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Return the index into the active-logins file (utmp) for</span><br><span class="hljs-comment">   the controlling terminal.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ttyslot</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Make a link to FROM named TO.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">link</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__from, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__to)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __wur;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Like link but relative paths in TO and FROM are interpreted relative</span><br><span class="hljs-comment">   to FROMFD and TOFD respectively.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">linkat</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fromfd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__from, <span class="hljs-type">int</span> __tofd,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__to, <span class="hljs-type">int</span> __flags)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Make a symbolic link to FROM named TO.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">symlink</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__from, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__to)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __wur;<br><br><span class="hljs-comment">/* Read the contents of the symbolic link PATH into no more than</span><br><span class="hljs-comment">   LEN bytes of BUF.  The contents are not null-terminated.</span><br><span class="hljs-comment">   Returns the number of characters read, or -1 for errors.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">readlink</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __path,</span><br><span class="hljs-params"> <span class="hljs-type">char</span> *__restrict __buf, <span class="hljs-type">size_t</span> __len)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1-2001.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Like symlink but a relative path in TO is interpreted relative to TOFD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">symlinkat</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__from, <span class="hljs-type">int</span> __tofd,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__to)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span> __wur;<br><br><span class="hljs-comment">/* Like readlink but a relative PATH is interpreted relative to FD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">readlinkat</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __path,</span><br><span class="hljs-params">   <span class="hljs-type">char</span> *__restrict __buf, <span class="hljs-type">size_t</span> __len)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Remove the link NAME.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">unlink</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_ATFILE</span><br><span class="hljs-comment">/* Remove the link NAME relative to FD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">unlinkat</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name, <span class="hljs-type">int</span> __flag)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Remove the directory PATH.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rmdir</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Return the foreground process group ID of FD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__pid_t</span> <span class="hljs-title function_">tcgetpgrp</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW;<br><br><span class="hljs-comment">/* Set the foreground process group ID of FD set PGRP_ID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcsetpgrp</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">__pid_t</span> __pgrp_id)</span> __THROW;<br><br><br><span class="hljs-comment">/* Return the login name of the user.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">getlogin</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_POSIX199506</span><br><span class="hljs-comment">/* Return at most NAME_LEN characters of the login name of the user in NAME.</span><br><span class="hljs-comment">   If it cannot be determined or some other error occurred, return the error</span><br><span class="hljs-comment">   code.  Otherwise return 0.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getlogin_r</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__name, <span class="hljs-type">size_t</span> __name_len)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_MISC</span><br><span class="hljs-comment">/* Set the login name returned by `getlogin&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setlogin</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_POSIX2</span><br><span class="hljs-comment">/* Get definitions and prototypes for functions to process the</span><br><span class="hljs-comment">   arguments in ARGV (ARGC of them, minus the program name) for</span><br><span class="hljs-comment">   options given in OPTS.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/getopt_posix.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Put the name of the current host in no more than LEN bytes of NAME.</span><br><span class="hljs-comment">   The result is null-terminated if LEN is large enough for the full</span><br><span class="hljs-comment">   name and the terminator.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">gethostname</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__name, <span class="hljs-type">size_t</span> __len)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC</span><br><span class="hljs-comment">/* Set the name of the current host to NAME, which is LEN bytes long.</span><br><span class="hljs-comment">   This call is restricted to the super-user.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sethostname</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name, <span class="hljs-type">size_t</span> __len)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-comment">/* Set the current machine&#x27;s Internet number to ID.</span><br><span class="hljs-comment">   This call is restricted to the super-user.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sethostid</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">int</span> __id)</span> __THROW __wur;<br><br><br><span class="hljs-comment">/* Get and set the NIS (aka YP) domain name, if any.</span><br><span class="hljs-comment">   Called just like `gethostname&#x27; and `sethostname&#x27;.</span><br><span class="hljs-comment">   The NIS domain name is usually the empty string when not using NIS.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getdomainname</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__name, <span class="hljs-type">size_t</span> __len)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setdomainname</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name, <span class="hljs-type">size_t</span> __len)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><br><span class="hljs-comment">/* Revoke access permissions to all processes currently communicating</span><br><span class="hljs-comment">   with the control terminal, and then send a SIGHUP signal to the process</span><br><span class="hljs-comment">   group of the control terminal.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vhangup</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Revoke the access of all descriptors currently open on FILE.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">revoke</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><br><span class="hljs-comment">/* Enable statistical profiling, writing samples of the PC into at most</span><br><span class="hljs-comment">   SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling</span><br><span class="hljs-comment">   is enabled, the system examines the user PC and increments</span><br><span class="hljs-comment">   SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,</span><br><span class="hljs-comment">   disable profiling.  Returns zero on success, -1 on error.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">profil</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> *__sample_buffer, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">   <span class="hljs-type">size_t</span> __offset, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __scale)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Turn accounting on if NAME is an existing file.  The system will then write</span><br><span class="hljs-comment">   a record for each process as it terminates, to this file.  If NAME is NULL,</span><br><span class="hljs-comment">   turn accounting off.  This call is restricted to the super-user.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">acct</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span> __THROW;<br><br><br><span class="hljs-comment">/* Successive calls return the shells listed in `/etc/shells&#x27;.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">getusershell</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">endusershell</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW; <span class="hljs-comment">/* Discard cached info.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setusershell</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW; <span class="hljs-comment">/* Rewind and re-read the file.  */</span><br><br><br><span class="hljs-comment">/* Put the program in the background, and dissociate from the controlling</span><br><span class="hljs-comment">   terminal.  If NOCHDIR is zero, do `chdir (&quot;/&quot;)&#x27;.  If NOCLOSE is zero,</span><br><span class="hljs-comment">   redirects stdin, stdout, and stderr to /dev/null.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">daemon</span> <span class="hljs-params">(<span class="hljs-type">int</span> __nochdir, <span class="hljs-type">int</span> __noclose)</span> __THROW __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K)</span><br><span class="hljs-comment">/* Make PATH be the root directory (the starting point for absolute paths).</span><br><span class="hljs-comment">   This call is restricted to the super-user.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">chroot</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__path)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><br><span class="hljs-comment">/* Prompt with PROMPT and read a string from the terminal without echoing.</span><br><span class="hljs-comment">   Uses /dev/tty if possible; otherwise stderr and stdin.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">getpass</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__prompt)</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc || X/Open.  */</span></span><br><br><br><span class="hljs-comment">/* Make all changes done to FD actually appear on disk.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fsync</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Make all changes done to all files on the file system associated</span><br><span class="hljs-comment">   with FD actually appear on disk.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">syncfs</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_MISC || defined __USE_XOPEN_EXTENDED</span><br><br><span class="hljs-comment">/* Return identifier for the current host.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">gethostid</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">/* Make all changes done to all files actually appear on disk.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sync</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> defined __USE_MISC || !defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the number of bytes in a page.  This is the system&#x27;s page size,</span><br><span class="hljs-comment">   which is not necessarily the same as the hardware page size.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getpagesize</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>  __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span>;<br><br><br><span class="hljs-comment">/* Return the maximum number of file descriptors</span><br><span class="hljs-comment">   the current process could possibly have.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getdtablesize</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc || X/Open Unix.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span><br><br><span class="hljs-comment">/* Truncate FILE to LENGTH bytes.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">truncate</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">__off_t</span> __length)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT_NTH</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT_NTH (truncate,<br>   (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">__off64_t</span> __length),<br>   truncate64) __nonnull ((<span class="hljs-number">1</span>)) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> truncate truncate64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">truncate64</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__file, <span class="hljs-type">__off64_t</span> __length)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use X/Open Unix || POSIX 2008.  */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_POSIX199309 \</span><br><span class="hljs-meta">    || defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</span><br><br><span class="hljs-comment">/* Truncate the file FD is open on to LENGTH bytes.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ftruncate</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">__off_t</span> __length)</span> __THROW __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT_NTH</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT_NTH (ftruncate, (<span class="hljs-type">int</span> __fd, <span class="hljs-type">__off64_t</span> __length),<br>   ftruncate64) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> ftruncate ftruncate64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ftruncate64</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">__off64_t</span> __length)</span> __THROW __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX.1b || X/Open Unix || XPG6.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K) \</span><br><span class="hljs-meta">    || defined __USE_MISC</span><br><br><span class="hljs-comment">/* Set the end of accessible data space (aka &quot;the break&quot;) to ADDR.</span><br><span class="hljs-comment">   Returns zero on success and -1 for errors (with errno set).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">brk</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__addr)</span> __THROW __wur;<br><br><span class="hljs-comment">/* Increase or decrease the end of accessible data space by DELTA bytes.</span><br><span class="hljs-comment">   If successful, returns the address the previous end of data space</span><br><span class="hljs-comment">   (i.e. the beginning of the new space, if DELTA &gt; 0);</span><br><span class="hljs-comment">   returns (void *) -1 for errors (with errno set).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">sbrk</span> <span class="hljs-params">(<span class="hljs-type">intptr_t</span> __delta)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Invoke `system call&#x27; number SYSNO, passing it the remaining arguments.</span><br><span class="hljs-comment">   This is completely system-dependent, and not often useful.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   In Unix, `syscall&#x27; sets `errno&#x27; for all errors and most calls return -1</span><br><span class="hljs-comment">   for errors; in many systems you cannot pass arguments or get return</span><br><span class="hljs-comment">   values for all system calls (`pipe&#x27;, `fork&#x27;, and `getppid&#x27; typically</span><br><span class="hljs-comment">   among them).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   In Mach, all system calls take normal arguments and always return an</span><br><span class="hljs-comment">   error code (zero for success).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">syscall</span> <span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">int</span> __sysno, ...)</span> __THROW;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* Use misc.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) &amp;&amp; !defined F_LOCK</span><br><span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> These declarations also appear in &lt;fcntl.h&gt;; be sure to keep both</span><br><span class="hljs-comment">   files consistent.  Some systems have them there and some here, and some</span><br><span class="hljs-comment">   software depends on the macros being defined without including both.  */</span><br><br><span class="hljs-comment">/* `lockf&#x27; is a simpler interface to the locking facilities of `fcntl&#x27;.</span><br><span class="hljs-comment">   LEN is always relative to the current file position.</span><br><span class="hljs-comment">   The CMD argument is one of the following.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> F_ULOCK 0<span class="hljs-comment">/* Unlock a previously locked region.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> F_LOCK  1<span class="hljs-comment">/* Lock a region for exclusive use.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> F_TLOCK 2<span class="hljs-comment">/* Test and lock a region for exclusive use.  */</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> F_TEST  3<span class="hljs-comment">/* Test a region for other processes locks.  */</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> __USE_FILE_OFFSET64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lockf</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">int</span> __cmd, <span class="hljs-type">__off_t</span> __len)</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __REDIRECT</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __REDIRECT (lockf, (<span class="hljs-type">int</span> __fd, <span class="hljs-type">int</span> __cmd, <span class="hljs-type">__off64_t</span> __len),<br>       lockf64) __wur;<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> lockf lockf64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_LARGEFILE64</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lockf64</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">int</span> __cmd, <span class="hljs-type">__off64_t</span> __len)</span> __wur;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use misc and F_LOCK not already defined.  */</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><br><span class="hljs-comment">/* Evaluate EXPRESSION, and repeat as long as it returns -1 with `errno&#x27;</span><br><span class="hljs-comment">   set to EINTR.  */</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TEMP_FAILURE_RETRY(expression) \</span><br><span class="hljs-meta">  (__extension__      \</span><br><span class="hljs-meta">    (&#123; long int __result;      \</span><br><span class="hljs-meta">       do __result = (long int) (expression);      \</span><br><span class="hljs-meta">       while (__result == -1L &amp;&amp; errno == EINTR);      \</span><br><span class="hljs-meta">       __result; &#125;))</span><br><br><span class="hljs-comment">/* Copy LENGTH bytes from INFD to OUTFD.  */</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">copy_file_range</span> <span class="hljs-params">(<span class="hljs-type">int</span> __infd, <span class="hljs-type">__off64_t</span> *__pinoff,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> __outfd, <span class="hljs-type">__off64_t</span> *__poutoff,</span><br><span class="hljs-params"> <span class="hljs-type">size_t</span> __length, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __flags)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __USE_GNU */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_POSIX199309 || defined __USE_UNIX98</span><br><span class="hljs-comment">/* Synchronize at least the data part of a file with the underlying</span><br><span class="hljs-comment">   media.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fdatasync</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fildes)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* Use POSIX199309 */</span></span><br><br><br><span class="hljs-comment">/* XPG4.2 specifies that prototypes for the encryption functions must</span><br><span class="hljs-comment">   be defined here.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>__USE_XOPEN</span><br><span class="hljs-comment">/* Encrypt at most 8 characters from KEY using salt to perturb DES.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">crypt</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__key, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__salt)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Encrypt data in BLOCK in place if EDFLAG is zero; otherwise decrypt</span><br><span class="hljs-comment">   block in place.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__glibc_block, <span class="hljs-type">int</span> __edflag)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Swab pairs bytes in the first N bytes of the area pointed to by</span><br><span class="hljs-comment">   FROM and copy the result to TO.  The value of TO must not be in the</span><br><span class="hljs-comment">   range [FROM - N + 1, FROM - 1].  If N is odd the first byte in FROM</span><br><span class="hljs-comment">   is without partner.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">swab</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *__restrict __from, <span class="hljs-type">void</span> *__restrict __to,</span><br><span class="hljs-params">  <span class="hljs-type">ssize_t</span> __n)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Prior to Issue 6, the Single Unix Specification required these</span><br><span class="hljs-comment">   prototypes to appear in this header.  They are also found in</span><br><span class="hljs-comment">   &lt;stdio.h&gt;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the name of the controlling terminal.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">ctermid</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span> __THROW;<br><br><span class="hljs-comment">/* Return the name of the current user.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">cuserid</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Unix98 requires this function to be declared here.  In other</span><br><span class="hljs-comment">   standards it is in &lt;pthread.h&gt;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 &amp;&amp; !defined __USE_XOPEN2K</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_atfork</span> <span class="hljs-params">(<span class="hljs-type">void</span> (*__prepare) (<span class="hljs-type">void</span>),</span><br><span class="hljs-params">   <span class="hljs-type">void</span> (*__parent) (<span class="hljs-type">void</span>),</span><br><span class="hljs-params">   <span class="hljs-type">void</span> (*__child) (<span class="hljs-type">void</span>))</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_MISC</span><br><span class="hljs-comment">/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on</span><br><span class="hljs-comment">   success or -1 on error.  */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getentropy</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__buffer, <span class="hljs-type">size_t</span> __length)</span> __wur;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Define some macros helping to catch buffer overflows.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* unistd.h  */</span></span><br></code></pre></div></td></tr></table></figure><p>参考：《Linux 内核完全剖析（0.11）》<ahref="https://github.com/karottc/linux-0.11">github 仓库（源码）</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 整数常用进制转换</title>
    <link href="/2021/05/04/Python-%E5%B8%B8%E7%94%A8%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <url>/2021/05/04/Python-%E5%B8%B8%E7%94%A8%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="其他进制转十进制">其他进制转十进制</h3><p>这里使用 Python 内置的 <code>int()</code> 函数。</p><p><strong>语法</strong></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">int</span>(x, base=<span class="hljs-number">10</span>)<br></code></pre></div></td></tr></table></figure><p><strong>参数</strong></p><ul><li>x -- 字符串或数字</li><li>base -- 进制数，十进制</li></ul><p><strong>返回值</strong></p><p>返回 base 进制的的 x 值转换成十进制之后的值。</p><p><strong>使用实例</strong></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">12</span>))<br><span class="hljs-comment"># 二进制转十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b11&#x27;</span>, <span class="hljs-number">2</span>))<br><span class="hljs-comment"># 8 进制转十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;012&#x27;</span>, <span class="hljs-number">8</span>))<br><span class="hljs-comment"># 16 进制转十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-number">16</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0x12&#x27;</span>, <span class="hljs-number">16</span>))<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code class="hljs">123310101818</code></pre></div><h3 id="十进制转其他进制">十进制转其他进制</h3><h4 id="十进制转二进制">十进制转二进制</h4><p>使用 <code>bin()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt;bin(12)<br><span class="hljs-string">&#x27;0b1100&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="十进制转八进制">十进制转八进制</h4><p>使用 <code>oct()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt;oct(12)<br><span class="hljs-string">&#x27;0o14&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="十进制转十六进制">十进制转十六进制</h4><p>使用 <code>hex()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt; hex(12)<br><span class="hljs-string">&#x27;0xc&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="其他非十进制之间的互转">其他非十进制之间的互转</h3><p>一个简单的方法是，可以利用十进制作中转。</p><p>另一个方法是，我们给相应进制的数加上代表它们的前缀，然后使用诸如<code>hex()</code> 函数即可。</p><p>例如，我们将十六进制 <code>0x12</code> 数转成八进制数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;&gt;&gt;oct(int(<span class="hljs-string">&#x27;0x12&#x27;</span>, 16))<br><span class="hljs-string">&#x27;0o22&#x27;</span><br>&gt;&gt;&gt;oct(0x12)<br><span class="hljs-string">&#x27;0o22&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="补充">补充</h3><p>这里补充各个常用的进制的前缀和后缀。</p><ul><li>二进制：前缀 <code>0b/0B</code>，后缀 <code>b/B</code></li><li>八进制：前缀 <code>0o/0O</code>，后缀<code>o/O</code>，有的资料说，八进制的前缀也可以使用单独一个数字<code>0</code>，但是，这在 Python 中是行不通的</li><li>十进制：前缀 <code>无</code>，后缀 <code>d/D</code></li><li>十六进制：前缀 <code>0x/0X</code>，后缀 <code>h/H</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵链乘法问题的 Python 实现（《算法导论》）</title>
    <link href="/2021/05/03/%E7%9F%A9%E9%98%B5%E9%93%BE%E4%B9%98%E6%B3%95%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/"/>
    <url>/2021/05/03/%E7%9F%A9%E9%98%B5%E9%93%BE%E4%B9%98%E6%B3%95%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="思路">思路</h3><h4 id="递归公式">递归公式</h4><p><span class="math display">\[m[i, j] =\left\{\begin{matrix}\begin{align}&amp; 0 &amp; if \quad i = j \\&amp; min\{m[i, k] + m[k + 1, j] + p_{i - 1} p_k p_j\} &amp; if \quad i&lt; j \\\end{align}\end{matrix}\right.\]</span></p><h4 id="伪码">伪码</h4><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601000955.png" /></p><p>关于伪码的说明。</p><p>m[i, j] 表示计算矩阵 <code>$A_&#123;i..j&#125;$</code>的所需标量乘法次数的最小值。而 <code>$A_&#123;i..j&#125;(i \leqslant) j$</code>表示的是 <code>$A_iA_&#123;i + 1&#125; \cdots A_j$</code> 乘积的结果矩阵。s[i, j]表示记录最优值 m[i, j] 对应的分割点 k，我们可以依赖最终的 s表来构造最优解。</p><p>还有一个注意点，即 <code>$A_i = p_&#123;i - 1&#125; \times p_i$</code>。</p><h3 id="python-代码">Python 代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : matrix_chain_order.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/3</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_chain_order</span>(<span class="hljs-params">p:<span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计算矩阵链乘法最优代价</span><br><span class="hljs-string">    :param p: 由矩阵乘法式转化成的序列，注意，这里的 p 序列的长度比矩阵链乘数的长度要多一</span><br><span class="hljs-string">    :return: m 和 s 表</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n = <span class="hljs-built_in">len</span>(p) - <span class="hljs-number">1</span> <span class="hljs-comment"># 获取乘数的个数 n</span><br>    m = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    s = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> cl <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>): <span class="hljs-comment"># cl is the chain length</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n - cl + <span class="hljs-number">1</span>): <span class="hljs-comment"># i 是每个 cl 片段的起点位置，n - cl + 1 是最后一个 cl 片段的终点位置</span><br>            j = i + cl - <span class="hljs-number">1</span> <span class="hljs-comment"># j 是每一个 cl 片段的终点索引</span><br>            m[i][j] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, j): <span class="hljs-comment"># 尝试每一个切割位置，循环找出最优解</span><br>                q = m[i][k] + m[k + <span class="hljs-number">1</span>][j] + p[i] * p[k + <span class="hljs-number">1</span>] * p[j + <span class="hljs-number">1</span>] <span class="hljs-comment"># p[i] 和书中的 p[i - 1] 对应</span><br>                <span class="hljs-keyword">if</span> q &lt; m[i][j]:<br>                    m[i][j] = q<br>                    s[i][j - <span class="hljs-number">1</span>] = k <span class="hljs-comment"># 注意这里的二维索引</span><br>    <span class="hljs-keyword">return</span> [m, s]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_optimal_parents</span>(<span class="hljs-params">s:<span class="hljs-built_in">list</span>, i:<span class="hljs-built_in">int</span>, j:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    打印最优化括号方案</span><br><span class="hljs-string">    :param s: 记录最有分割点的列表</span><br><span class="hljs-string">    :param i: 矩阵链的起点位置</span><br><span class="hljs-string">    :param j: 矩阵链的终点位置</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> i == j:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A_&#x27;</span> + <span class="hljs-built_in">str</span>(i), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        print_optimal_parents(s, i, s[i][j - <span class="hljs-number">1</span>])<br>        print_optimal_parents(s, s[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, j)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;)&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = [<span class="hljs-number">30</span>, <span class="hljs-number">35</span>, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>]<br>    res = matrix_chain_order(p)<br>    <span class="hljs-built_in">print</span>(res)<br>    m = res[<span class="hljs-number">0</span>]<br>    s = res[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> res:<br>        <span class="hljs-keyword">for</span> ea <span class="hljs-keyword">in</span> each:<br>            <span class="hljs-built_in">print</span>(ea)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(m[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>])<br>    print_optimal_parents(s, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><p>测试的输出：</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[0, 15750, 7875, 9375, 11875, 15125]</span>, <span class="hljs-comment">[0, 0, 2625, 4375, 7125, 10500]</span>, <span class="hljs-comment">[0, 0, 0, 750, 2500, 5375]</span>, <span class="hljs-comment">[0, 0, 0, 0, 1000, 3500]</span>, <span class="hljs-comment">[0, 0, 0, 0, 0, 5000]</span>, <span class="hljs-comment">[0, 0, 0, 0, 0, 0]</span>]</span>, <span class="hljs-comment">[<span class="hljs-comment">[0, 0, 2, 2, 2]</span>, <span class="hljs-comment">[0, 1, 2, 2, 2]</span>, <span class="hljs-comment">[0, 0, 2, 2, 2]</span>, <span class="hljs-comment">[0, 0, 0, 3, 4]</span>, <span class="hljs-comment">[0, 0, 0, 0, 4]</span>]</span>]</span><br><span class="hljs-comment">[0, 15750, 7875, 9375, 11875, 15125]</span><br><span class="hljs-comment">[0, 0, 2625, 4375, 7125, 10500]</span><br><span class="hljs-comment">[0, 0, 0, 750, 2500, 5375]</span><br><span class="hljs-comment">[0, 0, 0, 0, 1000, 3500]</span><br><span class="hljs-comment">[0, 0, 0, 0, 0, 5000]</span><br><span class="hljs-comment">[0, 0, 0, 0, 0, 0]</span><br>--------<br><span class="hljs-comment">[0, 0, 2, 2, 2]</span><br><span class="hljs-comment">[0, 1, 2, 2, 2]</span><br><span class="hljs-comment">[0, 0, 2, 2, 2]</span><br><span class="hljs-comment">[0, 0, 0, 3, 4]</span><br><span class="hljs-comment">[0, 0, 0, 0, 4]</span><br>--------<br>7125<br>((A_0(A_1A_2))((A_3A_4)A_5))<br></code></pre></div></td></tr></table></figure><h3 id="说明">说明</h3><p>这个算法初看时不容易理解，但是跟着书上的思路，仔细地走上一遍，最终理解这个算法的思想是不困难的。</p><p>但是，在实现代码的过程中，也没有想象中那样顺利。主要原因是数组索引的问题。书中的数组索引有的是以1 作为起始索引，有的是以 0 作为起始索引，而我在使用 Python实现的过程中，全部是以 0作为起始索引（这样主要是为了不浪费空间）。这样一来，就很可能产生一些索引的对应问题。遂，将索引对应的关系记录如下</p><ol type="1"><li><code>m[i][j]</code>：对应书中的<code>m[i + 1, j + 1]</code>，表示计算矩阵<code>$A_&#123;i + 1..j + 1&#125;$</code>所需标量乘法次数的最小值。关于定义，书中是<code>m[1..n, 1..n]</code>，而代码中是<code>m[0..n - 1][0..n - 1]</code>。</li><li><code>s[i][j]</code>：对应书中的<code>s[i + 1, j + 2]</code>，表示最优值 <code>m[i + 1][j + 2]</code>对应的分割点 k。关于定义，书中是<code>s[1..n - 1, 2..n]</code>，而代码中是<code>s[0..n - 1][0..n - 1]</code>，<strong>因此</strong>，这也导致了在代码中，与<code>m[i][j]</code> 对应的最优分割点是 <code>s[i][j - 1]</code>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>《算法导论》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法导论》寻找最近点对问题的 Python 实现</title>
    <link href="/2021/05/03/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E5%AF%BB%E6%89%BE%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/05/03/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E5%AF%BB%E6%89%BE%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%E9%97%AE%E9%A2%98%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="代码">代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : nearest_dot_pair_final.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/5/3</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">寻找最近点对问题</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dist</span>(<span class="hljs-params">a:<span class="hljs-built_in">tuple</span>, b:<span class="hljs-built_in">tuple</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    获取两点之间的欧几里得距离</span><br><span class="hljs-string">    :param a: 点 a</span><br><span class="hljs-string">    :param b: 点 b</span><br><span class="hljs-string">    :return: 两点间的欧几里得距离</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    dist = math.sqrt((a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>]) ** <span class="hljs-number">2</span> + (a[<span class="hljs-number">1</span>] - b[<span class="hljs-number">1</span>]) ** <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> dist<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_get_min</span>(<span class="hljs-params">Q:<span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    暴力求解最小点对问题</span><br><span class="hljs-string">    :param Q: 点的全集</span><br><span class="hljs-string">    :return: 最近点对，最近点对的距离</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    point_pair = [(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>))] <span class="hljs-comment"># 初始最近点对为原点和无穷点</span><br>    dist_min = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-comment"># 初始最近点对的距离是无穷大</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Q)):<br>        a = Q[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(Q)):<br>            b = Q[j]<br>            dist = get_dist(a, b)<br>            <span class="hljs-keyword">if</span> dist &lt; dist_min:<br>                dist_min = dist<br>                point_pair[<span class="hljs-number">0</span>] = a<br>                point_pair[<span class="hljs-number">1</span>] = b<br>    <span class="hljs-keyword">return</span> [point_pair, dist_min]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_dotpair</span>(<span class="hljs-params">P:<span class="hljs-built_in">list</span>, X:<span class="hljs-built_in">list</span>, Y:<span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    找出最近点对</span><br><span class="hljs-string">    :param P: 点的全集 Q 的子集</span><br><span class="hljs-string">    :param X: P 中的所有点按照 x 坐标排序的结果</span><br><span class="hljs-string">    :param Y: P 中的所有点按照 y 坐标排序的结果</span><br><span class="hljs-string">    :return: 点对，最短距离</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n = <span class="hljs-built_in">len</span>(P) <span class="hljs-comment"># 获取点的总数，这同时是 P.len，X.len 和 Y.len</span><br>    <span class="hljs-comment"># n &lt;= 3 时，直接暴力求解</span><br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">3</span>:<br>        point_pair = [(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>), <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>))]<br>        dist_min = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>                <span class="hljs-keyword">if</span> get_dist(P[i], P[j]) &lt; dist_min:<br>                    point_pair[<span class="hljs-number">0</span>] = P[i]<br>                    point_pair[<span class="hljs-number">1</span>] = P[j]<br>                    dist_min = get_dist(P[i], P[j])<br>        <span class="hljs-keyword">return</span> [point_pair, dist_min]<br><br>    <span class="hljs-comment"># 求出递归所需的参数</span><br>    half = math.ceil(n / <span class="hljs-number">2</span>)<br>    XL = X[:half]<br>    XR = X[half:]<br>    PL = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XL]<br>    PR = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XR]<br>    <span class="hljs-comment"># 对中间的边界的可能重复的元素进行处理</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PL) != <span class="hljs-built_in">len</span>(XL):<br>        PL.remove(XL[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PR) != <span class="hljs-built_in">len</span>(XR):<br>        PR.remove(XR[<span class="hljs-number">0</span>])<br>    YL = []<br>    YR = []<br>    L_len = R_len = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>        <span class="hljs-keyword">if</span> Y[i] <span class="hljs-keyword">in</span> PL:<br>            YL.append(Y[i])<br>            L_len += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> Y[i] <span class="hljs-keyword">in</span> PR:<br>            YR.append(Y[i])<br>            R_len += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 对中间的边界的可能重复的元素进行处理</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(YL) != <span class="hljs-built_in">len</span>(XL):<br>        YL.remove(XL[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(YR) != <span class="hljs-built_in">len</span>(XR):<br>        YR.remove(XR[<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># 递归处理</span><br>    PL_res = find_dotpair(PL, XL, YL) <span class="hljs-comment"># 左半部分递归处理结果</span><br>    PR_res = find_dotpair(PR, XR, YR) <span class="hljs-comment"># 右半部分递归处理结果</span><br>    point_pair = PL_res[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> PL_res[<span class="hljs-number">1</span>] &lt; PR_res[<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> PR_res[<span class="hljs-number">0</span>]<br>    dist_min = <span class="hljs-built_in">min</span>(PL_res[<span class="hljs-number">1</span>], PR_res[<span class="hljs-number">1</span>]) <span class="hljs-comment"># 取左右两个部分中的最小的那一个距离</span><br>    <span class="hljs-comment"># 对中间区域进行处理</span><br>    x_mid = (X[half - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + X[half][<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span> <span class="hljs-comment"># 中间分割线的 x 坐标</span><br>    Y_midarea = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Y <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] &gt;= x_mid - dist_min <span class="hljs-keyword">and</span> i[<span class="hljs-number">0</span>] &lt;= x_mid + dist_min] <span class="hljs-comment"># 中间区域的所有点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Y_midarea)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">7</span>):<br>            <span class="hljs-keyword">if</span> j &gt;= <span class="hljs-built_in">len</span>(Y_midarea):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> get_dist(Y_midarea[i], Y_midarea[j]) &lt; dist_min:<br>                point_pair[<span class="hljs-number">0</span>] = Y_midarea[i]<br>                point_pair[<span class="hljs-number">1</span>] = Y_midarea[j]<br>                dist_min = get_dist(Y_midarea[i], Y_midarea[j])<br>    <span class="hljs-keyword">return</span> [point_pair, dist_min]<br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    Q = [(random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>), random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>)] <span class="hljs-comment"># 生成 128 个点</span><br>    <span class="hljs-built_in">print</span>(Q)<br>    <span class="hljs-comment"># 测试暴力求解法</span><br>    brute_res = brute_get_min(Q)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;暴力法&#x27;</span>, brute_res)<br>    <span class="hljs-comment"># 测试分治法</span><br>    P = Q<br>    X = <span class="hljs-built_in">sorted</span>(P) <span class="hljs-comment"># 默认按照 x 坐标排序</span><br>    Y = <span class="hljs-built_in">sorted</span>(P, key=<span class="hljs-keyword">lambda</span> p : p[<span class="hljs-number">1</span>]) <span class="hljs-comment"># 按照 Y 坐标排序</span><br>    divide_res = find_dotpair(P, X, Y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;分治法&#x27;</span>, divide_res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        main()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>这里测试了 10 组数据，输出结果如下</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">[<span class="hljs-comment">(84, 15)</span>, <span class="hljs-comment">(221, 232)</span>, <span class="hljs-comment">(186, 143)</span>, <span class="hljs-comment">(221, 1)</span>, <span class="hljs-comment">(52, 100)</span>, <span class="hljs-comment">(129, 188)</span>, <span class="hljs-comment">(50, 213)</span>, <span class="hljs-comment">(12, 29)</span>, <span class="hljs-comment">(30, 201)</span>, <span class="hljs-comment">(208, 160)</span>, <span class="hljs-comment">(15, 248)</span>, <span class="hljs-comment">(185, 115)</span>, <span class="hljs-comment">(254, 239)</span>, <span class="hljs-comment">(210, 102)</span>, <span class="hljs-comment">(139, 79)</span>, <span class="hljs-comment">(204, 135)</span>, <span class="hljs-comment">(140, 0)</span>, <span class="hljs-comment">(235, 163)</span>, <span class="hljs-comment">(197, 176)</span>, <span class="hljs-comment">(137, 104)</span>, <span class="hljs-comment">(144, 159)</span>, <span class="hljs-comment">(220, 180)</span>, <span class="hljs-comment">(51, 227)</span>, <span class="hljs-comment">(211, 139)</span>, <span class="hljs-comment">(134, 59)</span>, <span class="hljs-comment">(225, 219)</span>, <span class="hljs-comment">(100, 198)</span>, <span class="hljs-comment">(81, 91)</span>, <span class="hljs-comment">(134, 177)</span>, <span class="hljs-comment">(139, 12)</span>, <span class="hljs-comment">(142, 17)</span>, <span class="hljs-comment">(88, 1)</span>, <span class="hljs-comment">(251, 165)</span>, <span class="hljs-comment">(12, 210)</span>, <span class="hljs-comment">(166, 241)</span>, <span class="hljs-comment">(28, 142)</span>, <span class="hljs-comment">(224, 139)</span>, <span class="hljs-comment">(109, 113)</span>, <span class="hljs-comment">(109, 166)</span>, <span class="hljs-comment">(193, 68)</span>, <span class="hljs-comment">(230, 17)</span>, <span class="hljs-comment">(210, 88)</span>, <span class="hljs-comment">(119, 168)</span>, <span class="hljs-comment">(206, 248)</span>, <span class="hljs-comment">(78, 241)</span>, <span class="hljs-comment">(66, 40)</span>, <span class="hljs-comment">(66, 55)</span>, <span class="hljs-comment">(178, 83)</span>, <span class="hljs-comment">(199, 179)</span>, <span class="hljs-comment">(238, 226)</span>, <span class="hljs-comment">(170, 211)</span>, <span class="hljs-comment">(237, 135)</span>, <span class="hljs-comment">(18, 231)</span>, <span class="hljs-comment">(169, 90)</span>, <span class="hljs-comment">(159, 196)</span>, <span class="hljs-comment">(103, 115)</span>, <span class="hljs-comment">(230, 141)</span>, <span class="hljs-comment">(94, 89)</span>, <span class="hljs-comment">(136, 174)</span>, <span class="hljs-comment">(29, 231)</span>, <span class="hljs-comment">(148, 34)</span>, <span class="hljs-comment">(1, 0)</span>, <span class="hljs-comment">(209, 40)</span>, <span class="hljs-comment">(220, 229)</span>, <span class="hljs-comment">(173, 246)</span>, <span class="hljs-comment">(212, 150)</span>, <span class="hljs-comment">(191, 60)</span>, <span class="hljs-comment">(221, 96)</span>, <span class="hljs-comment">(79, 188)</span>, <span class="hljs-comment">(41, 246)</span>, <span class="hljs-comment">(123, 116)</span>, <span class="hljs-comment">(210, 139)</span>, <span class="hljs-comment">(146, 211)</span>, <span class="hljs-comment">(97, 48)</span>, <span class="hljs-comment">(186, 116)</span>, <span class="hljs-comment">(245, 21)</span>, <span class="hljs-comment">(244, 223)</span>, <span class="hljs-comment">(205, 102)</span>, <span class="hljs-comment">(85, 28)</span>, <span class="hljs-comment">(66, 24)</span>, <span class="hljs-comment">(249, 210)</span>, <span class="hljs-comment">(49, 78)</span>, <span class="hljs-comment">(224, 253)</span>, <span class="hljs-comment">(115, 20)</span>, <span class="hljs-comment">(104, 60)</span>, <span class="hljs-comment">(250, 131)</span>, <span class="hljs-comment">(203, 41)</span>, <span class="hljs-comment">(130, 129)</span>, <span class="hljs-comment">(44, 215)</span>, <span class="hljs-comment">(137, 123)</span>, <span class="hljs-comment">(72, 205)</span>, <span class="hljs-comment">(198, 166)</span>, <span class="hljs-comment">(63, 248)</span>, <span class="hljs-comment">(236, 237)</span>, <span class="hljs-comment">(93, 247)</span>, <span class="hljs-comment">(98, 241)</span>, <span class="hljs-comment">(143, 165)</span>, <span class="hljs-comment">(176, 246)</span>, <span class="hljs-comment">(15, 167)</span>, <span class="hljs-comment">(231, 194)</span>, <span class="hljs-comment">(197, 248)</span>, <span class="hljs-comment">(39, 77)</span>, <span class="hljs-comment">(107, 239)</span>, <span class="hljs-comment">(107, 149)</span>, <span class="hljs-comment">(53, 188)</span>, <span class="hljs-comment">(188, 9)</span>, <span class="hljs-comment">(112, 29)</span>, <span class="hljs-comment">(243, 152)</span>, <span class="hljs-comment">(94, 209)</span>, <span class="hljs-comment">(232, 251)</span>, <span class="hljs-comment">(193, 30)</span>, <span class="hljs-comment">(127, 15)</span>, <span class="hljs-comment">(235, 55)</span>, <span class="hljs-comment">(180, 93)</span>, <span class="hljs-comment">(128, 104)</span>, <span class="hljs-comment">(167, 194)</span>, <span class="hljs-comment">(202, 113)</span>, <span class="hljs-comment">(3, 170)</span>, <span class="hljs-comment">(209, 22)</span>, <span class="hljs-comment">(159, 80)</span>, <span class="hljs-comment">(26, 196)</span>, <span class="hljs-comment">(21, 62)</span>, <span class="hljs-comment">(191, 236)</span>, <span class="hljs-comment">(227, 121)</span>, <span class="hljs-comment">(136, 223)</span>, <span class="hljs-comment">(21, 111)</span>, <span class="hljs-comment">(108, 192)</span>, <span class="hljs-comment">(148, 207)</span>]<br>暴力法 [[<span class="hljs-comment">(211, 139)</span>, <span class="hljs-comment">(210, 139)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(211, 139)</span>, <span class="hljs-comment">(210, 139)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(116, 20)</span>, <span class="hljs-comment">(172, 213)</span>, <span class="hljs-comment">(181, 186)</span>, <span class="hljs-comment">(181, 145)</span>, <span class="hljs-comment">(106, 120)</span>, <span class="hljs-comment">(249, 125)</span>, <span class="hljs-comment">(98, 143)</span>, <span class="hljs-comment">(114, 201)</span>, <span class="hljs-comment">(50, 47)</span>, <span class="hljs-comment">(183, 122)</span>, <span class="hljs-comment">(160, 253)</span>, <span class="hljs-comment">(236, 87)</span>, <span class="hljs-comment">(40, 125)</span>, <span class="hljs-comment">(180, 111)</span>, <span class="hljs-comment">(202, 183)</span>, <span class="hljs-comment">(210, 57)</span>, <span class="hljs-comment">(118, 103)</span>, <span class="hljs-comment">(162, 177)</span>, <span class="hljs-comment">(78, 57)</span>, <span class="hljs-comment">(248, 77)</span>, <span class="hljs-comment">(184, 43)</span>, <span class="hljs-comment">(165, 193)</span>, <span class="hljs-comment">(39, 135)</span>, <span class="hljs-comment">(21, 237)</span>, <span class="hljs-comment">(99, 36)</span>, <span class="hljs-comment">(232, 54)</span>, <span class="hljs-comment">(220, 219)</span>, <span class="hljs-comment">(175, 17)</span>, <span class="hljs-comment">(151, 92)</span>, <span class="hljs-comment">(189, 195)</span>, <span class="hljs-comment">(249, 7)</span>, <span class="hljs-comment">(126, 129)</span>, <span class="hljs-comment">(153, 216)</span>, <span class="hljs-comment">(19, 198)</span>, <span class="hljs-comment">(48, 205)</span>, <span class="hljs-comment">(228, 181)</span>, <span class="hljs-comment">(190, 200)</span>, <span class="hljs-comment">(39, 121)</span>, <span class="hljs-comment">(54, 167)</span>, <span class="hljs-comment">(130, 200)</span>, <span class="hljs-comment">(24, 121)</span>, <span class="hljs-comment">(4, 106)</span>, <span class="hljs-comment">(118, 42)</span>, <span class="hljs-comment">(104, 16)</span>, <span class="hljs-comment">(43, 3)</span>, <span class="hljs-comment">(242, 251)</span>, <span class="hljs-comment">(91, 47)</span>, <span class="hljs-comment">(142, 103)</span>, <span class="hljs-comment">(62, 224)</span>, <span class="hljs-comment">(123, 195)</span>, <span class="hljs-comment">(225, 177)</span>, <span class="hljs-comment">(166, 238)</span>, <span class="hljs-comment">(105, 176)</span>, <span class="hljs-comment">(144, 174)</span>, <span class="hljs-comment">(163, 199)</span>, <span class="hljs-comment">(43, 219)</span>, <span class="hljs-comment">(229, 96)</span>, <span class="hljs-comment">(131, 239)</span>, <span class="hljs-comment">(113, 129)</span>, <span class="hljs-comment">(32, 103)</span>, <span class="hljs-comment">(163, 42)</span>, <span class="hljs-comment">(87, 0)</span>, <span class="hljs-comment">(184, 130)</span>, <span class="hljs-comment">(79, 87)</span>, <span class="hljs-comment">(134, 208)</span>, <span class="hljs-comment">(75, 187)</span>, <span class="hljs-comment">(3, 53)</span>, <span class="hljs-comment">(140, 25)</span>, <span class="hljs-comment">(139, 77)</span>, <span class="hljs-comment">(8, 2)</span>, <span class="hljs-comment">(198, 148)</span>, <span class="hljs-comment">(71, 225)</span>, <span class="hljs-comment">(235, 48)</span>, <span class="hljs-comment">(27, 112)</span>, <span class="hljs-comment">(217, 74)</span>, <span class="hljs-comment">(46, 45)</span>, <span class="hljs-comment">(117, 20)</span>, <span class="hljs-comment">(199, 125)</span>, <span class="hljs-comment">(14, 253)</span>, <span class="hljs-comment">(169, 208)</span>, <span class="hljs-comment">(91, 62)</span>, <span class="hljs-comment">(138, 115)</span>, <span class="hljs-comment">(36, 89)</span>, <span class="hljs-comment">(13, 61)</span>, <span class="hljs-comment">(23, 84)</span>, <span class="hljs-comment">(141, 82)</span>, <span class="hljs-comment">(101, 188)</span>, <span class="hljs-comment">(189, 12)</span>, <span class="hljs-comment">(10, 17)</span>, <span class="hljs-comment">(185, 89)</span>, <span class="hljs-comment">(142, 181)</span>, <span class="hljs-comment">(92, 255)</span>, <span class="hljs-comment">(139, 60)</span>, <span class="hljs-comment">(230, 167)</span>, <span class="hljs-comment">(72, 239)</span>, <span class="hljs-comment">(117, 49)</span>, <span class="hljs-comment">(233, 45)</span>, <span class="hljs-comment">(210, 212)</span>, <span class="hljs-comment">(111, 9)</span>, <span class="hljs-comment">(188, 159)</span>, <span class="hljs-comment">(214, 22)</span>, <span class="hljs-comment">(111, 202)</span>, <span class="hljs-comment">(95, 254)</span>, <span class="hljs-comment">(99, 148)</span>, <span class="hljs-comment">(36, 238)</span>, <span class="hljs-comment">(240, 13)</span>, <span class="hljs-comment">(138, 164)</span>, <span class="hljs-comment">(98, 229)</span>, <span class="hljs-comment">(55, 101)</span>, <span class="hljs-comment">(254, 128)</span>, <span class="hljs-comment">(15, 64)</span>, <span class="hljs-comment">(189, 205)</span>, <span class="hljs-comment">(142, 15)</span>, <span class="hljs-comment">(62, 24)</span>, <span class="hljs-comment">(135, 65)</span>, <span class="hljs-comment">(117, 64)</span>, <span class="hljs-comment">(112, 120)</span>, <span class="hljs-comment">(72, 197)</span>, <span class="hljs-comment">(252, 129)</span>, <span class="hljs-comment">(210, 5)</span>, <span class="hljs-comment">(105, 11)</span>, <span class="hljs-comment">(210, 64)</span>, <span class="hljs-comment">(71, 39)</span>, <span class="hljs-comment">(14, 16)</span>, <span class="hljs-comment">(157, 150)</span>, <span class="hljs-comment">(229, 132)</span>, <span class="hljs-comment">(41, 180)</span>, <span class="hljs-comment">(193, 121)</span>]<br>暴力法 [[<span class="hljs-comment">(116, 20)</span>, <span class="hljs-comment">(117, 20)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(116, 20)</span>, <span class="hljs-comment">(117, 20)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(148, 202)</span>, <span class="hljs-comment">(195, 27)</span>, <span class="hljs-comment">(64, 65)</span>, <span class="hljs-comment">(137, 57)</span>, <span class="hljs-comment">(76, 27)</span>, <span class="hljs-comment">(255, 26)</span>, <span class="hljs-comment">(67, 255)</span>, <span class="hljs-comment">(4, 39)</span>, <span class="hljs-comment">(213, 212)</span>, <span class="hljs-comment">(109, 51)</span>, <span class="hljs-comment">(125, 149)</span>, <span class="hljs-comment">(96, 102)</span>, <span class="hljs-comment">(188, 191)</span>, <span class="hljs-comment">(28, 104)</span>, <span class="hljs-comment">(36, 202)</span>, <span class="hljs-comment">(193, 210)</span>, <span class="hljs-comment">(35, 160)</span>, <span class="hljs-comment">(160, 200)</span>, <span class="hljs-comment">(26, 2)</span>, <span class="hljs-comment">(17, 127)</span>, <span class="hljs-comment">(67, 105)</span>, <span class="hljs-comment">(137, 74)</span>, <span class="hljs-comment">(244, 176)</span>, <span class="hljs-comment">(87, 106)</span>, <span class="hljs-comment">(195, 141)</span>, <span class="hljs-comment">(253, 233)</span>, <span class="hljs-comment">(247, 9)</span>, <span class="hljs-comment">(252, 239)</span>, <span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(145, 82)</span>, <span class="hljs-comment">(197, 229)</span>, <span class="hljs-comment">(78, 199)</span>, <span class="hljs-comment">(90, 122)</span>, <span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(93, 80)</span>, <span class="hljs-comment">(111, 1)</span>, <span class="hljs-comment">(154, 251)</span>, <span class="hljs-comment">(199, 233)</span>, <span class="hljs-comment">(188, 34)</span>, <span class="hljs-comment">(108, 144)</span>, <span class="hljs-comment">(75, 70)</span>, <span class="hljs-comment">(233, 98)</span>, <span class="hljs-comment">(203, 6)</span>, <span class="hljs-comment">(256, 56)</span>, <span class="hljs-comment">(84, 90)</span>, <span class="hljs-comment">(243, 224)</span>, <span class="hljs-comment">(224, 249)</span>, <span class="hljs-comment">(129, 98)</span>, <span class="hljs-comment">(110, 102)</span>, <span class="hljs-comment">(93, 144)</span>, <span class="hljs-comment">(159, 247)</span>, <span class="hljs-comment">(5, 60)</span>, <span class="hljs-comment">(221, 175)</span>, <span class="hljs-comment">(256, 58)</span>, <span class="hljs-comment">(93, 56)</span>, <span class="hljs-comment">(230, 100)</span>, <span class="hljs-comment">(145, 97)</span>, <span class="hljs-comment">(110, 114)</span>, <span class="hljs-comment">(21, 84)</span>, <span class="hljs-comment">(143, 33)</span>, <span class="hljs-comment">(124, 41)</span>, <span class="hljs-comment">(88, 68)</span>, <span class="hljs-comment">(208, 117)</span>, <span class="hljs-comment">(54, 78)</span>, <span class="hljs-comment">(241, 129)</span>, <span class="hljs-comment">(247, 92)</span>, <span class="hljs-comment">(75, 159)</span>, <span class="hljs-comment">(135, 219)</span>, <span class="hljs-comment">(11, 159)</span>, <span class="hljs-comment">(196, 171)</span>, <span class="hljs-comment">(90, 197)</span>, <span class="hljs-comment">(180, 256)</span>, <span class="hljs-comment">(184, 207)</span>, <span class="hljs-comment">(118, 158)</span>, <span class="hljs-comment">(232, 184)</span>, <span class="hljs-comment">(244, 105)</span>, <span class="hljs-comment">(95, 169)</span>, <span class="hljs-comment">(121, 236)</span>, <span class="hljs-comment">(215, 109)</span>, <span class="hljs-comment">(112, 89)</span>, <span class="hljs-comment">(172, 126)</span>, <span class="hljs-comment">(72, 153)</span>, <span class="hljs-comment">(84, 112)</span>, <span class="hljs-comment">(204, 121)</span>, <span class="hljs-comment">(17, 23)</span>, <span class="hljs-comment">(118, 152)</span>, <span class="hljs-comment">(206, 84)</span>, <span class="hljs-comment">(95, 145)</span>, <span class="hljs-comment">(161, 98)</span>, <span class="hljs-comment">(123, 210)</span>, <span class="hljs-comment">(136, 11)</span>, <span class="hljs-comment">(232, 77)</span>, <span class="hljs-comment">(35, 34)</span>, <span class="hljs-comment">(209, 203)</span>, <span class="hljs-comment">(111, 225)</span>, <span class="hljs-comment">(207, 33)</span>, <span class="hljs-comment">(214, 174)</span>, <span class="hljs-comment">(170, 71)</span>, <span class="hljs-comment">(213, 139)</span>, <span class="hljs-comment">(198, 118)</span>, <span class="hljs-comment">(16, 181)</span>, <span class="hljs-comment">(181, 157)</span>, <span class="hljs-comment">(44, 239)</span>, <span class="hljs-comment">(184, 61)</span>, <span class="hljs-comment">(85, 150)</span>, <span class="hljs-comment">(252, 16)</span>, <span class="hljs-comment">(202, 43)</span>, <span class="hljs-comment">(5, 250)</span>, <span class="hljs-comment">(79, 170)</span>, <span class="hljs-comment">(57, 126)</span>, <span class="hljs-comment">(235, 174)</span>, <span class="hljs-comment">(57, 40)</span>, <span class="hljs-comment">(175, 123)</span>, <span class="hljs-comment">(231, 130)</span>, <span class="hljs-comment">(57, 106)</span>, <span class="hljs-comment">(136, 187)</span>, <span class="hljs-comment">(148, 89)</span>, <span class="hljs-comment">(68, 57)</span>, <span class="hljs-comment">(48, 200)</span>, <span class="hljs-comment">(95, 122)</span>, <span class="hljs-comment">(248, 18)</span>, <span class="hljs-comment">(127, 171)</span>, <span class="hljs-comment">(14, 120)</span>, <span class="hljs-comment">(93, 205)</span>, <span class="hljs-comment">(133, 35)</span>, <span class="hljs-comment">(8, 254)</span>, <span class="hljs-comment">(183, 209)</span>, <span class="hljs-comment">(95, 153)</span>]<br>暴力法 [[<span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(160, 194)</span>], <span class="hljs-number">0.0</span>]<br>分治法 [[<span class="hljs-comment">(160, 194)</span>, <span class="hljs-comment">(160, 194)</span>], <span class="hljs-number">0.0</span>]<br>----------<br>[<span class="hljs-comment">(182, 36)</span>, <span class="hljs-comment">(205, 46)</span>, <span class="hljs-comment">(56, 106)</span>, <span class="hljs-comment">(246, 173)</span>, <span class="hljs-comment">(255, 177)</span>, <span class="hljs-comment">(174, 103)</span>, <span class="hljs-comment">(231, 97)</span>, <span class="hljs-comment">(143, 30)</span>, <span class="hljs-comment">(166, 90)</span>, <span class="hljs-comment">(145, 212)</span>, <span class="hljs-comment">(15, 196)</span>, <span class="hljs-comment">(249, 224)</span>, <span class="hljs-comment">(192, 5)</span>, <span class="hljs-comment">(73, 252)</span>, <span class="hljs-comment">(23, 151)</span>, <span class="hljs-comment">(123, 182)</span>, <span class="hljs-comment">(110, 87)</span>, <span class="hljs-comment">(179, 211)</span>, <span class="hljs-comment">(143, 61)</span>, <span class="hljs-comment">(168, 30)</span>, <span class="hljs-comment">(228, 213)</span>, <span class="hljs-comment">(89, 17)</span>, <span class="hljs-comment">(241, 87)</span>, <span class="hljs-comment">(163, 254)</span>, <span class="hljs-comment">(242, 44)</span>, <span class="hljs-comment">(204, 110)</span>, <span class="hljs-comment">(185, 5)</span>, <span class="hljs-comment">(152, 65)</span>, <span class="hljs-comment">(41, 244)</span>, <span class="hljs-comment">(126, 254)</span>, <span class="hljs-comment">(104, 114)</span>, <span class="hljs-comment">(128, 65)</span>, <span class="hljs-comment">(46, 102)</span>, <span class="hljs-comment">(154, 188)</span>, <span class="hljs-comment">(111, 72)</span>, <span class="hljs-comment">(94, 29)</span>, <span class="hljs-comment">(117, 6)</span>, <span class="hljs-comment">(234, 200)</span>, <span class="hljs-comment">(105, 243)</span>, <span class="hljs-comment">(96, 190)</span>, <span class="hljs-comment">(15, 85)</span>, <span class="hljs-comment">(74, 27)</span>, <span class="hljs-comment">(80, 106)</span>, <span class="hljs-comment">(34, 197)</span>, <span class="hljs-comment">(217, 44)</span>, <span class="hljs-comment">(144, 180)</span>, <span class="hljs-comment">(114, 155)</span>, <span class="hljs-comment">(67, 122)</span>, <span class="hljs-comment">(31, 146)</span>, <span class="hljs-comment">(171, 87)</span>, <span class="hljs-comment">(78, 147)</span>, <span class="hljs-comment">(242, 231)</span>, <span class="hljs-comment">(103, 130)</span>, <span class="hljs-comment">(212, 59)</span>, <span class="hljs-comment">(23, 183)</span>, <span class="hljs-comment">(134, 157)</span>, <span class="hljs-comment">(110, 113)</span>, <span class="hljs-comment">(192, 120)</span>, <span class="hljs-comment">(11, 131)</span>, <span class="hljs-comment">(186, 64)</span>, <span class="hljs-comment">(210, 243)</span>, <span class="hljs-comment">(119, 125)</span>, <span class="hljs-comment">(165, 56)</span>, <span class="hljs-comment">(158, 145)</span>, <span class="hljs-comment">(154, 216)</span>, <span class="hljs-comment">(47, 2)</span>, <span class="hljs-comment">(95, 207)</span>, <span class="hljs-comment">(246, 202)</span>, <span class="hljs-comment">(181, 58)</span>, <span class="hljs-comment">(214, 56)</span>, <span class="hljs-comment">(22, 5)</span>, <span class="hljs-comment">(19, 65)</span>, <span class="hljs-comment">(173, 85)</span>, <span class="hljs-comment">(215, 16)</span>, <span class="hljs-comment">(47, 129)</span>, <span class="hljs-comment">(32, 217)</span>, <span class="hljs-comment">(0, 119)</span>, <span class="hljs-comment">(118, 48)</span>, <span class="hljs-comment">(180, 208)</span>, <span class="hljs-comment">(55, 122)</span>, <span class="hljs-comment">(62, 185)</span>, <span class="hljs-comment">(26, 232)</span>, <span class="hljs-comment">(99, 223)</span>, <span class="hljs-comment">(73, 170)</span>, <span class="hljs-comment">(141, 41)</span>, <span class="hljs-comment">(222, 153)</span>, <span class="hljs-comment">(180, 91)</span>, <span class="hljs-comment">(42, 251)</span>, <span class="hljs-comment">(45, 156)</span>, <span class="hljs-comment">(20, 117)</span>, <span class="hljs-comment">(73, 233)</span>, <span class="hljs-comment">(65, 148)</span>, <span class="hljs-comment">(34, 43)</span>, <span class="hljs-comment">(197, 69)</span>, <span class="hljs-comment">(192, 69)</span>, <span class="hljs-comment">(82, 245)</span>, <span class="hljs-comment">(98, 66)</span>, <span class="hljs-comment">(4, 136)</span>, <span class="hljs-comment">(247, 191)</span>, <span class="hljs-comment">(143, 197)</span>, <span class="hljs-comment">(178, 67)</span>, <span class="hljs-comment">(3, 91)</span>, <span class="hljs-comment">(251, 217)</span>, <span class="hljs-comment">(217, 45)</span>, <span class="hljs-comment">(175, 105)</span>, <span class="hljs-comment">(187, 47)</span>, <span class="hljs-comment">(12, 142)</span>, <span class="hljs-comment">(64, 74)</span>, <span class="hljs-comment">(150, 248)</span>, <span class="hljs-comment">(228, 112)</span>, <span class="hljs-comment">(225, 145)</span>, <span class="hljs-comment">(166, 191)</span>, <span class="hljs-comment">(161, 129)</span>, <span class="hljs-comment">(190, 41)</span>, <span class="hljs-comment">(124, 1)</span>, <span class="hljs-comment">(207, 16)</span>, <span class="hljs-comment">(9, 253)</span>, <span class="hljs-comment">(147, 88)</span>, <span class="hljs-comment">(75, 191)</span>, <span class="hljs-comment">(76, 54)</span>, <span class="hljs-comment">(128, 0)</span>, <span class="hljs-comment">(237, 30)</span>, <span class="hljs-comment">(71, 46)</span>, <span class="hljs-comment">(150, 17)</span>, <span class="hljs-comment">(147, 219)</span>, <span class="hljs-comment">(68, 194)</span>, <span class="hljs-comment">(21, 165)</span>, <span class="hljs-comment">(149, 29)</span>]<br>暴力法 [[<span class="hljs-comment">(217, 44)</span>, <span class="hljs-comment">(217, 45)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(217, 44)</span>, <span class="hljs-comment">(217, 45)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(85, 218)</span>, <span class="hljs-comment">(31, 202)</span>, <span class="hljs-comment">(218, 246)</span>, <span class="hljs-comment">(175, 131)</span>, <span class="hljs-comment">(170, 125)</span>, <span class="hljs-comment">(155, 8)</span>, <span class="hljs-comment">(137, 165)</span>, <span class="hljs-comment">(193, 179)</span>, <span class="hljs-comment">(232, 251)</span>, <span class="hljs-comment">(17, 111)</span>, <span class="hljs-comment">(227, 28)</span>, <span class="hljs-comment">(235, 34)</span>, <span class="hljs-comment">(150, 8)</span>, <span class="hljs-comment">(49, 176)</span>, <span class="hljs-comment">(40, 88)</span>, <span class="hljs-comment">(129, 34)</span>, <span class="hljs-comment">(20, 167)</span>, <span class="hljs-comment">(1, 100)</span>, <span class="hljs-comment">(17, 86)</span>, <span class="hljs-comment">(112, 176)</span>, <span class="hljs-comment">(235, 116)</span>, <span class="hljs-comment">(82, 91)</span>, <span class="hljs-comment">(248, 230)</span>, <span class="hljs-comment">(86, 48)</span>, <span class="hljs-comment">(53, 194)</span>, <span class="hljs-comment">(133, 165)</span>, <span class="hljs-comment">(13, 39)</span>, <span class="hljs-comment">(7, 60)</span>, <span class="hljs-comment">(61, 62)</span>, <span class="hljs-comment">(190, 112)</span>, <span class="hljs-comment">(194, 117)</span>, <span class="hljs-comment">(34, 118)</span>, <span class="hljs-comment">(219, 193)</span>, <span class="hljs-comment">(125, 247)</span>, <span class="hljs-comment">(146, 72)</span>, <span class="hljs-comment">(107, 23)</span>, <span class="hljs-comment">(127, 168)</span>, <span class="hljs-comment">(53, 59)</span>, <span class="hljs-comment">(218, 18)</span>, <span class="hljs-comment">(94, 28)</span>, <span class="hljs-comment">(135, 120)</span>, <span class="hljs-comment">(119, 251)</span>, <span class="hljs-comment">(119, 142)</span>, <span class="hljs-comment">(116, 152)</span>, <span class="hljs-comment">(10, 31)</span>, <span class="hljs-comment">(169, 27)</span>, <span class="hljs-comment">(23, 124)</span>, <span class="hljs-comment">(222, 92)</span>, <span class="hljs-comment">(252, 97)</span>, <span class="hljs-comment">(60, 80)</span>, <span class="hljs-comment">(10, 80)</span>, <span class="hljs-comment">(107, 197)</span>, <span class="hljs-comment">(198, 151)</span>, <span class="hljs-comment">(49, 48)</span>, <span class="hljs-comment">(17, 211)</span>, <span class="hljs-comment">(248, 52)</span>, <span class="hljs-comment">(248, 11)</span>, <span class="hljs-comment">(140, 167)</span>, <span class="hljs-comment">(26, 223)</span>, <span class="hljs-comment">(171, 153)</span>, <span class="hljs-comment">(153, 197)</span>, <span class="hljs-comment">(50, 241)</span>, <span class="hljs-comment">(158, 47)</span>, <span class="hljs-comment">(13, 163)</span>, <span class="hljs-comment">(225, 135)</span>, <span class="hljs-comment">(209, 136)</span>, <span class="hljs-comment">(102, 241)</span>, <span class="hljs-comment">(214, 63)</span>, <span class="hljs-comment">(233, 130)</span>, <span class="hljs-comment">(24, 157)</span>, <span class="hljs-comment">(12, 195)</span>, <span class="hljs-comment">(13, 222)</span>, <span class="hljs-comment">(233, 5)</span>, <span class="hljs-comment">(17, 118)</span>, <span class="hljs-comment">(48, 206)</span>, <span class="hljs-comment">(22, 140)</span>, <span class="hljs-comment">(72, 71)</span>, <span class="hljs-comment">(169, 131)</span>, <span class="hljs-comment">(18, 250)</span>, <span class="hljs-comment">(181, 227)</span>, <span class="hljs-comment">(73, 193)</span>, <span class="hljs-comment">(162, 16)</span>, <span class="hljs-comment">(135, 235)</span>, <span class="hljs-comment">(139, 72)</span>, <span class="hljs-comment">(44, 130)</span>, <span class="hljs-comment">(18, 212)</span>, <span class="hljs-comment">(130, 97)</span>, <span class="hljs-comment">(211, 40)</span>, <span class="hljs-comment">(222, 171)</span>, <span class="hljs-comment">(75, 50)</span>, <span class="hljs-comment">(62, 70)</span>, <span class="hljs-comment">(122, 119)</span>, <span class="hljs-comment">(7, 22)</span>, <span class="hljs-comment">(81, 161)</span>, <span class="hljs-comment">(96, 206)</span>, <span class="hljs-comment">(223, 100)</span>, <span class="hljs-comment">(1, 128)</span>, <span class="hljs-comment">(202, 109)</span>, <span class="hljs-comment">(215, 232)</span>, <span class="hljs-comment">(190, 0)</span>, <span class="hljs-comment">(37, 181)</span>, <span class="hljs-comment">(127, 185)</span>, <span class="hljs-comment">(32, 161)</span>, <span class="hljs-comment">(70, 239)</span>, <span class="hljs-comment">(239, 125)</span>, <span class="hljs-comment">(35, 30)</span>, <span class="hljs-comment">(155, 115)</span>, <span class="hljs-comment">(163, 245)</span>, <span class="hljs-comment">(1, 154)</span>, <span class="hljs-comment">(3, 63)</span>, <span class="hljs-comment">(48, 89)</span>, <span class="hljs-comment">(10, 18)</span>, <span class="hljs-comment">(149, 151)</span>, <span class="hljs-comment">(196, 182)</span>, <span class="hljs-comment">(76, 222)</span>, <span class="hljs-comment">(162, 115)</span>, <span class="hljs-comment">(147, 1)</span>, <span class="hljs-comment">(98, 132)</span>, <span class="hljs-comment">(88, 129)</span>, <span class="hljs-comment">(134, 215)</span>, <span class="hljs-comment">(207, 90)</span>, <span class="hljs-comment">(222, 57)</span>, <span class="hljs-comment">(121, 145)</span>, <span class="hljs-comment">(255, 33)</span>, <span class="hljs-comment">(117, 234)</span>, <span class="hljs-comment">(153, 213)</span>, <span class="hljs-comment">(8, 173)</span>, <span class="hljs-comment">(50, 29)</span>]<br>暴力法 [[<span class="hljs-comment">(17, 211)</span>, <span class="hljs-comment">(18, 212)</span>], <span class="hljs-number">1.4142135623730951</span>]<br>分治法 [[<span class="hljs-comment">(17, 211)</span>, <span class="hljs-comment">(18, 212)</span>], <span class="hljs-number">1.4142135623730951</span>]<br>----------<br>[<span class="hljs-comment">(115, 114)</span>, <span class="hljs-comment">(216, 172)</span>, <span class="hljs-comment">(144, 254)</span>, <span class="hljs-comment">(138, 198)</span>, <span class="hljs-comment">(76, 60)</span>, <span class="hljs-comment">(142, 57)</span>, <span class="hljs-comment">(129, 140)</span>, <span class="hljs-comment">(151, 12)</span>, <span class="hljs-comment">(140, 166)</span>, <span class="hljs-comment">(91, 28)</span>, <span class="hljs-comment">(252, 189)</span>, <span class="hljs-comment">(159, 84)</span>, <span class="hljs-comment">(122, 29)</span>, <span class="hljs-comment">(243, 163)</span>, <span class="hljs-comment">(200, 47)</span>, <span class="hljs-comment">(76, 142)</span>, <span class="hljs-comment">(221, 233)</span>, <span class="hljs-comment">(219, 200)</span>, <span class="hljs-comment">(199, 81)</span>, <span class="hljs-comment">(142, 49)</span>, <span class="hljs-comment">(2, 6)</span>, <span class="hljs-comment">(71, 164)</span>, <span class="hljs-comment">(17, 227)</span>, <span class="hljs-comment">(224, 181)</span>, <span class="hljs-comment">(158, 119)</span>, <span class="hljs-comment">(183, 36)</span>, <span class="hljs-comment">(113, 103)</span>, <span class="hljs-comment">(220, 107)</span>, <span class="hljs-comment">(26, 47)</span>, <span class="hljs-comment">(221, 106)</span>, <span class="hljs-comment">(167, 247)</span>, <span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(245, 70)</span>, <span class="hljs-comment">(70, 252)</span>, <span class="hljs-comment">(44, 173)</span>, <span class="hljs-comment">(251, 191)</span>, <span class="hljs-comment">(169, 147)</span>, <span class="hljs-comment">(231, 5)</span>, <span class="hljs-comment">(95, 8)</span>, <span class="hljs-comment">(185, 224)</span>, <span class="hljs-comment">(209, 26)</span>, <span class="hljs-comment">(189, 124)</span>, <span class="hljs-comment">(154, 180)</span>, <span class="hljs-comment">(126, 83)</span>, <span class="hljs-comment">(86, 236)</span>, <span class="hljs-comment">(218, 13)</span>, <span class="hljs-comment">(153, 183)</span>, <span class="hljs-comment">(134, 129)</span>, <span class="hljs-comment">(122, 127)</span>, <span class="hljs-comment">(254, 106)</span>, <span class="hljs-comment">(156, 209)</span>, <span class="hljs-comment">(78, 57)</span>, <span class="hljs-comment">(167, 70)</span>, <span class="hljs-comment">(99, 222)</span>, <span class="hljs-comment">(201, 178)</span>, <span class="hljs-comment">(5, 182)</span>, <span class="hljs-comment">(98, 198)</span>, <span class="hljs-comment">(211, 65)</span>, <span class="hljs-comment">(143, 139)</span>, <span class="hljs-comment">(213, 209)</span>, <span class="hljs-comment">(63, 221)</span>, <span class="hljs-comment">(201, 164)</span>, <span class="hljs-comment">(210, 17)</span>, <span class="hljs-comment">(203, 43)</span>, <span class="hljs-comment">(124, 199)</span>, <span class="hljs-comment">(248, 202)</span>, <span class="hljs-comment">(34, 37)</span>, <span class="hljs-comment">(11, 66)</span>, <span class="hljs-comment">(28, 49)</span>, <span class="hljs-comment">(81, 25)</span>, <span class="hljs-comment">(256, 204)</span>, <span class="hljs-comment">(128, 29)</span>, <span class="hljs-comment">(171, 227)</span>, <span class="hljs-comment">(38, 88)</span>, <span class="hljs-comment">(223, 240)</span>, <span class="hljs-comment">(38, 13)</span>, <span class="hljs-comment">(17, 253)</span>, <span class="hljs-comment">(45, 110)</span>, <span class="hljs-comment">(72, 96)</span>, <span class="hljs-comment">(93, 38)</span>, <span class="hljs-comment">(195, 137)</span>, <span class="hljs-comment">(245, 108)</span>, <span class="hljs-comment">(59, 163)</span>, <span class="hljs-comment">(65, 150)</span>, <span class="hljs-comment">(103, 16)</span>, <span class="hljs-comment">(35, 181)</span>, <span class="hljs-comment">(14, 101)</span>, <span class="hljs-comment">(216, 13)</span>, <span class="hljs-comment">(224, 144)</span>, <span class="hljs-comment">(177, 140)</span>, <span class="hljs-comment">(242, 158)</span>, <span class="hljs-comment">(16, 23)</span>, <span class="hljs-comment">(46, 192)</span>, <span class="hljs-comment">(149, 120)</span>, <span class="hljs-comment">(203, 220)</span>, <span class="hljs-comment">(191, 183)</span>, <span class="hljs-comment">(131, 28)</span>, <span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(114, 81)</span>, <span class="hljs-comment">(180, 94)</span>, <span class="hljs-comment">(113, 234)</span>, <span class="hljs-comment">(4, 47)</span>, <span class="hljs-comment">(107, 220)</span>, <span class="hljs-comment">(67, 100)</span>, <span class="hljs-comment">(226, 114)</span>, <span class="hljs-comment">(0, 39)</span>, <span class="hljs-comment">(44, 88)</span>, <span class="hljs-comment">(157, 144)</span>, <span class="hljs-comment">(12, 173)</span>, <span class="hljs-comment">(48, 40)</span>, <span class="hljs-comment">(254, 199)</span>, <span class="hljs-comment">(110, 180)</span>, <span class="hljs-comment">(200, 27)</span>, <span class="hljs-comment">(70, 202)</span>, <span class="hljs-comment">(43, 24)</span>, <span class="hljs-comment">(248, 166)</span>, <span class="hljs-comment">(25, 26)</span>, <span class="hljs-comment">(34, 72)</span>, <span class="hljs-comment">(249, 1)</span>, <span class="hljs-comment">(150, 22)</span>, <span class="hljs-comment">(210, 240)</span>, <span class="hljs-comment">(40, 206)</span>, <span class="hljs-comment">(49, 232)</span>, <span class="hljs-comment">(47, 171)</span>, <span class="hljs-comment">(191, 140)</span>, <span class="hljs-comment">(237, 118)</span>, <span class="hljs-comment">(20, 227)</span>, <span class="hljs-comment">(198, 140)</span>]<br>暴力法 [[<span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(251, 173)</span>], <span class="hljs-number">0.0</span>]<br>分治法 [[<span class="hljs-comment">(251, 173)</span>, <span class="hljs-comment">(251, 173)</span>], <span class="hljs-number">0.0</span>]<br>----------<br>[<span class="hljs-comment">(15, 124)</span>, <span class="hljs-comment">(69, 248)</span>, <span class="hljs-comment">(93, 25)</span>, <span class="hljs-comment">(188, 178)</span>, <span class="hljs-comment">(142, 34)</span>, <span class="hljs-comment">(217, 240)</span>, <span class="hljs-comment">(90, 133)</span>, <span class="hljs-comment">(35, 120)</span>, <span class="hljs-comment">(189, 57)</span>, <span class="hljs-comment">(186, 11)</span>, <span class="hljs-comment">(138, 66)</span>, <span class="hljs-comment">(170, 252)</span>, <span class="hljs-comment">(43, 115)</span>, <span class="hljs-comment">(186, 106)</span>, <span class="hljs-comment">(44, 123)</span>, <span class="hljs-comment">(150, 212)</span>, <span class="hljs-comment">(78, 1)</span>, <span class="hljs-comment">(215, 126)</span>, <span class="hljs-comment">(112, 40)</span>, <span class="hljs-comment">(235, 210)</span>, <span class="hljs-comment">(74, 151)</span>, <span class="hljs-comment">(169, 179)</span>, <span class="hljs-comment">(192, 71)</span>, <span class="hljs-comment">(147, 69)</span>, <span class="hljs-comment">(220, 137)</span>, <span class="hljs-comment">(43, 62)</span>, <span class="hljs-comment">(42, 22)</span>, <span class="hljs-comment">(222, 0)</span>, <span class="hljs-comment">(183, 132)</span>, <span class="hljs-comment">(82, 83)</span>, <span class="hljs-comment">(87, 7)</span>, <span class="hljs-comment">(141, 140)</span>, <span class="hljs-comment">(212, 104)</span>, <span class="hljs-comment">(28, 55)</span>, <span class="hljs-comment">(108, 11)</span>, <span class="hljs-comment">(31, 138)</span>, <span class="hljs-comment">(225, 167)</span>, <span class="hljs-comment">(169, 249)</span>, <span class="hljs-comment">(134, 19)</span>, <span class="hljs-comment">(235, 238)</span>, <span class="hljs-comment">(228, 51)</span>, <span class="hljs-comment">(101, 53)</span>, <span class="hljs-comment">(4, 226)</span>, <span class="hljs-comment">(195, 87)</span>, <span class="hljs-comment">(57, 142)</span>, <span class="hljs-comment">(11, 34)</span>, <span class="hljs-comment">(50, 250)</span>, <span class="hljs-comment">(172, 58)</span>, <span class="hljs-comment">(101, 118)</span>, <span class="hljs-comment">(198, 165)</span>, <span class="hljs-comment">(214, 95)</span>, <span class="hljs-comment">(60, 99)</span>, <span class="hljs-comment">(90, 55)</span>, <span class="hljs-comment">(115, 63)</span>, <span class="hljs-comment">(75, 155)</span>, <span class="hljs-comment">(49, 24)</span>, <span class="hljs-comment">(38, 248)</span>, <span class="hljs-comment">(223, 49)</span>, <span class="hljs-comment">(70, 92)</span>, <span class="hljs-comment">(118, 65)</span>, <span class="hljs-comment">(103, 67)</span>, <span class="hljs-comment">(107, 22)</span>, <span class="hljs-comment">(114, 129)</span>, <span class="hljs-comment">(254, 29)</span>, <span class="hljs-comment">(17, 174)</span>, <span class="hljs-comment">(72, 123)</span>, <span class="hljs-comment">(59, 16)</span>, <span class="hljs-comment">(76, 41)</span>, <span class="hljs-comment">(157, 76)</span>, <span class="hljs-comment">(25, 74)</span>, <span class="hljs-comment">(40, 188)</span>, <span class="hljs-comment">(244, 70)</span>, <span class="hljs-comment">(160, 184)</span>, <span class="hljs-comment">(234, 15)</span>, <span class="hljs-comment">(80, 202)</span>, <span class="hljs-comment">(15, 117)</span>, <span class="hljs-comment">(0, 47)</span>, <span class="hljs-comment">(158, 140)</span>, <span class="hljs-comment">(77, 187)</span>, <span class="hljs-comment">(61, 47)</span>, <span class="hljs-comment">(149, 35)</span>, <span class="hljs-comment">(154, 184)</span>, <span class="hljs-comment">(64, 142)</span>, <span class="hljs-comment">(213, 116)</span>, <span class="hljs-comment">(74, 213)</span>, <span class="hljs-comment">(238, 34)</span>, <span class="hljs-comment">(87, 117)</span>, <span class="hljs-comment">(110, 87)</span>, <span class="hljs-comment">(218, 54)</span>, <span class="hljs-comment">(18, 77)</span>, <span class="hljs-comment">(196, 145)</span>, <span class="hljs-comment">(187, 249)</span>, <span class="hljs-comment">(246, 235)</span>, <span class="hljs-comment">(89, 218)</span>, <span class="hljs-comment">(98, 229)</span>, <span class="hljs-comment">(149, 198)</span>, <span class="hljs-comment">(26, 105)</span>, <span class="hljs-comment">(106, 102)</span>, <span class="hljs-comment">(33, 142)</span>, <span class="hljs-comment">(240, 204)</span>, <span class="hljs-comment">(177, 154)</span>, <span class="hljs-comment">(201, 163)</span>, <span class="hljs-comment">(188, 126)</span>, <span class="hljs-comment">(173, 67)</span>, <span class="hljs-comment">(255, 34)</span>, <span class="hljs-comment">(83, 58)</span>, <span class="hljs-comment">(53, 236)</span>, <span class="hljs-comment">(253, 133)</span>, <span class="hljs-comment">(48, 8)</span>, <span class="hljs-comment">(87, 157)</span>, <span class="hljs-comment">(151, 98)</span>, <span class="hljs-comment">(80, 120)</span>, <span class="hljs-comment">(91, 175)</span>, <span class="hljs-comment">(33, 8)</span>, <span class="hljs-comment">(100, 233)</span>, <span class="hljs-comment">(193, 148)</span>, <span class="hljs-comment">(16, 159)</span>, <span class="hljs-comment">(114, 33)</span>, <span class="hljs-comment">(27, 240)</span>, <span class="hljs-comment">(250, 46)</span>, <span class="hljs-comment">(22, 251)</span>, <span class="hljs-comment">(235, 81)</span>, <span class="hljs-comment">(52, 4)</span>, <span class="hljs-comment">(15, 60)</span>, <span class="hljs-comment">(99, 69)</span>, <span class="hljs-comment">(30, 216)</span>, <span class="hljs-comment">(101, 131)</span>, <span class="hljs-comment">(246, 144)</span>]<br>暴力法 [[<span class="hljs-comment">(170, 252)</span>, <span class="hljs-comment">(169, 249)</span>], <span class="hljs-number">3.1622776601683795</span>]<br>分治法 [[<span class="hljs-comment">(170, 252)</span>, <span class="hljs-comment">(169, 249)</span>], <span class="hljs-number">3.1622776601683795</span>]<br>----------<br>[<span class="hljs-comment">(75, 244)</span>, <span class="hljs-comment">(134, 234)</span>, <span class="hljs-comment">(160, 37)</span>, <span class="hljs-comment">(110, 192)</span>, <span class="hljs-comment">(150, 247)</span>, <span class="hljs-comment">(39, 1)</span>, <span class="hljs-comment">(100, 162)</span>, <span class="hljs-comment">(87, 102)</span>, <span class="hljs-comment">(180, 24)</span>, <span class="hljs-comment">(235, 93)</span>, <span class="hljs-comment">(57, 198)</span>, <span class="hljs-comment">(56, 0)</span>, <span class="hljs-comment">(229, 85)</span>, <span class="hljs-comment">(142, 23)</span>, <span class="hljs-comment">(14, 115)</span>, <span class="hljs-comment">(201, 163)</span>, <span class="hljs-comment">(231, 237)</span>, <span class="hljs-comment">(168, 102)</span>, <span class="hljs-comment">(21, 225)</span>, <span class="hljs-comment">(162, 195)</span>, <span class="hljs-comment">(255, 168)</span>, <span class="hljs-comment">(193, 57)</span>, <span class="hljs-comment">(180, 94)</span>, <span class="hljs-comment">(32, 123)</span>, <span class="hljs-comment">(112, 116)</span>, <span class="hljs-comment">(248, 130)</span>, <span class="hljs-comment">(245, 75)</span>, <span class="hljs-comment">(78, 20)</span>, <span class="hljs-comment">(151, 240)</span>, <span class="hljs-comment">(82, 219)</span>, <span class="hljs-comment">(52, 218)</span>, <span class="hljs-comment">(77, 127)</span>, <span class="hljs-comment">(201, 11)</span>, <span class="hljs-comment">(25, 81)</span>, <span class="hljs-comment">(236, 251)</span>, <span class="hljs-comment">(25, 11)</span>, <span class="hljs-comment">(129, 68)</span>, <span class="hljs-comment">(64, 203)</span>, <span class="hljs-comment">(205, 113)</span>, <span class="hljs-comment">(254, 71)</span>, <span class="hljs-comment">(171, 182)</span>, <span class="hljs-comment">(208, 4)</span>, <span class="hljs-comment">(225, 120)</span>, <span class="hljs-comment">(95, 4)</span>, <span class="hljs-comment">(218, 224)</span>, <span class="hljs-comment">(172, 203)</span>, <span class="hljs-comment">(84, 33)</span>, <span class="hljs-comment">(62, 51)</span>, <span class="hljs-comment">(232, 183)</span>, <span class="hljs-comment">(42, 189)</span>, <span class="hljs-comment">(54, 184)</span>, <span class="hljs-comment">(183, 236)</span>, <span class="hljs-comment">(213, 96)</span>, <span class="hljs-comment">(241, 224)</span>, <span class="hljs-comment">(60, 107)</span>, <span class="hljs-comment">(233, 173)</span>, <span class="hljs-comment">(164, 30)</span>, <span class="hljs-comment">(106, 15)</span>, <span class="hljs-comment">(140, 110)</span>, <span class="hljs-comment">(171, 79)</span>, <span class="hljs-comment">(19, 171)</span>, <span class="hljs-comment">(60, 12)</span>, <span class="hljs-comment">(108, 239)</span>, <span class="hljs-comment">(181, 29)</span>, <span class="hljs-comment">(28, 236)</span>, <span class="hljs-comment">(70, 150)</span>, <span class="hljs-comment">(242, 95)</span>, <span class="hljs-comment">(209, 242)</span>, <span class="hljs-comment">(27, 28)</span>, <span class="hljs-comment">(88, 250)</span>, <span class="hljs-comment">(129, 162)</span>, <span class="hljs-comment">(191, 80)</span>, <span class="hljs-comment">(140, 77)</span>, <span class="hljs-comment">(50, 116)</span>, <span class="hljs-comment">(28, 130)</span>, <span class="hljs-comment">(86, 60)</span>, <span class="hljs-comment">(12, 84)</span>, <span class="hljs-comment">(51, 197)</span>, <span class="hljs-comment">(68, 200)</span>, <span class="hljs-comment">(239, 211)</span>, <span class="hljs-comment">(143, 22)</span>, <span class="hljs-comment">(97, 224)</span>, <span class="hljs-comment">(221, 46)</span>, <span class="hljs-comment">(89, 117)</span>, <span class="hljs-comment">(201, 117)</span>, <span class="hljs-comment">(28, 85)</span>, <span class="hljs-comment">(205, 135)</span>, <span class="hljs-comment">(156, 247)</span>, <span class="hljs-comment">(11, 46)</span>, <span class="hljs-comment">(185, 86)</span>, <span class="hljs-comment">(135, 200)</span>, <span class="hljs-comment">(231, 249)</span>, <span class="hljs-comment">(14, 168)</span>, <span class="hljs-comment">(1, 236)</span>, <span class="hljs-comment">(16, 242)</span>, <span class="hljs-comment">(168, 34)</span>, <span class="hljs-comment">(105, 179)</span>, <span class="hljs-comment">(173, 137)</span>, <span class="hljs-comment">(222, 163)</span>, <span class="hljs-comment">(252, 188)</span>, <span class="hljs-comment">(228, 166)</span>, <span class="hljs-comment">(170, 40)</span>, <span class="hljs-comment">(240, 197)</span>, <span class="hljs-comment">(237, 20)</span>, <span class="hljs-comment">(116, 212)</span>, <span class="hljs-comment">(160, 137)</span>, <span class="hljs-comment">(172, 40)</span>, <span class="hljs-comment">(220, 202)</span>, <span class="hljs-comment">(125, 113)</span>, <span class="hljs-comment">(236, 224)</span>, <span class="hljs-comment">(85, 178)</span>, <span class="hljs-comment">(220, 16)</span>, <span class="hljs-comment">(103, 147)</span>, <span class="hljs-comment">(195, 51)</span>, <span class="hljs-comment">(235, 125)</span>, <span class="hljs-comment">(241, 237)</span>, <span class="hljs-comment">(5, 49)</span>, <span class="hljs-comment">(153, 42)</span>, <span class="hljs-comment">(56, 217)</span>, <span class="hljs-comment">(152, 74)</span>, <span class="hljs-comment">(179, 63)</span>, <span class="hljs-comment">(91, 175)</span>, <span class="hljs-comment">(107, 205)</span>, <span class="hljs-comment">(244, 139)</span>, <span class="hljs-comment">(78, 235)</span>, <span class="hljs-comment">(208, 5)</span>, <span class="hljs-comment">(134, 243)</span>, <span class="hljs-comment">(141, 124)</span>]<br>暴力法 [[<span class="hljs-comment">(208, 4)</span>, <span class="hljs-comment">(208, 5)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(208, 4)</span>, <span class="hljs-comment">(208, 5)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(151, 44)</span>, <span class="hljs-comment">(2, 146)</span>, <span class="hljs-comment">(199, 205)</span>, <span class="hljs-comment">(122, 167)</span>, <span class="hljs-comment">(133, 110)</span>, <span class="hljs-comment">(160, 225)</span>, <span class="hljs-comment">(100, 199)</span>, <span class="hljs-comment">(242, 251)</span>, <span class="hljs-comment">(58, 62)</span>, <span class="hljs-comment">(211, 61)</span>, <span class="hljs-comment">(100, 94)</span>, <span class="hljs-comment">(140, 240)</span>, <span class="hljs-comment">(197, 196)</span>, <span class="hljs-comment">(237, 15)</span>, <span class="hljs-comment">(167, 222)</span>, <span class="hljs-comment">(194, 6)</span>, <span class="hljs-comment">(237, 14)</span>, <span class="hljs-comment">(3, 138)</span>, <span class="hljs-comment">(223, 7)</span>, <span class="hljs-comment">(245, 222)</span>, <span class="hljs-comment">(201, 112)</span>, <span class="hljs-comment">(252, 103)</span>, <span class="hljs-comment">(238, 81)</span>, <span class="hljs-comment">(63, 147)</span>, <span class="hljs-comment">(148, 123)</span>, <span class="hljs-comment">(172, 121)</span>, <span class="hljs-comment">(156, 51)</span>, <span class="hljs-comment">(249, 251)</span>, <span class="hljs-comment">(80, 23)</span>, <span class="hljs-comment">(227, 115)</span>, <span class="hljs-comment">(228, 209)</span>, <span class="hljs-comment">(198, 118)</span>, <span class="hljs-comment">(187, 25)</span>, <span class="hljs-comment">(38, 167)</span>, <span class="hljs-comment">(205, 21)</span>, <span class="hljs-comment">(238, 145)</span>, <span class="hljs-comment">(50, 35)</span>, <span class="hljs-comment">(53, 123)</span>, <span class="hljs-comment">(230, 146)</span>, <span class="hljs-comment">(199, 145)</span>, <span class="hljs-comment">(195, 80)</span>, <span class="hljs-comment">(12, 173)</span>, <span class="hljs-comment">(8, 77)</span>, <span class="hljs-comment">(40, 89)</span>, <span class="hljs-comment">(2, 116)</span>, <span class="hljs-comment">(206, 174)</span>, <span class="hljs-comment">(177, 48)</span>, <span class="hljs-comment">(134, 36)</span>, <span class="hljs-comment">(254, 88)</span>, <span class="hljs-comment">(176, 183)</span>, <span class="hljs-comment">(97, 171)</span>, <span class="hljs-comment">(85, 172)</span>, <span class="hljs-comment">(229, 139)</span>, <span class="hljs-comment">(256, 214)</span>, <span class="hljs-comment">(132, 91)</span>, <span class="hljs-comment">(15, 66)</span>, <span class="hljs-comment">(81, 246)</span>, <span class="hljs-comment">(203, 224)</span>, <span class="hljs-comment">(133, 72)</span>, <span class="hljs-comment">(9, 83)</span>, <span class="hljs-comment">(178, 229)</span>, <span class="hljs-comment">(238, 248)</span>, <span class="hljs-comment">(29, 217)</span>, <span class="hljs-comment">(104, 155)</span>, <span class="hljs-comment">(41, 213)</span>, <span class="hljs-comment">(73, 64)</span>, <span class="hljs-comment">(42, 43)</span>, <span class="hljs-comment">(220, 255)</span>, <span class="hljs-comment">(103, 138)</span>, <span class="hljs-comment">(83, 105)</span>, <span class="hljs-comment">(82, 58)</span>, <span class="hljs-comment">(221, 41)</span>, <span class="hljs-comment">(130, 228)</span>, <span class="hljs-comment">(77, 50)</span>, <span class="hljs-comment">(169, 100)</span>, <span class="hljs-comment">(18, 97)</span>, <span class="hljs-comment">(68, 162)</span>, <span class="hljs-comment">(239, 194)</span>, <span class="hljs-comment">(112, 16)</span>, <span class="hljs-comment">(216, 236)</span>, <span class="hljs-comment">(210, 0)</span>, <span class="hljs-comment">(107, 159)</span>, <span class="hljs-comment">(148, 179)</span>, <span class="hljs-comment">(59, 125)</span>, <span class="hljs-comment">(42, 246)</span>, <span class="hljs-comment">(233, 202)</span>, <span class="hljs-comment">(78, 50)</span>, <span class="hljs-comment">(18, 31)</span>, <span class="hljs-comment">(21, 207)</span>, <span class="hljs-comment">(166, 29)</span>, <span class="hljs-comment">(253, 103)</span>, <span class="hljs-comment">(10, 249)</span>, <span class="hljs-comment">(41, 173)</span>, <span class="hljs-comment">(4, 67)</span>, <span class="hljs-comment">(173, 27)</span>, <span class="hljs-comment">(250, 33)</span>, <span class="hljs-comment">(212, 37)</span>, <span class="hljs-comment">(242, 123)</span>, <span class="hljs-comment">(194, 124)</span>, <span class="hljs-comment">(122, 85)</span>, <span class="hljs-comment">(117, 77)</span>, <span class="hljs-comment">(229, 125)</span>, <span class="hljs-comment">(217, 228)</span>, <span class="hljs-comment">(228, 17)</span>, <span class="hljs-comment">(110, 195)</span>, <span class="hljs-comment">(171, 150)</span>, <span class="hljs-comment">(166, 188)</span>, <span class="hljs-comment">(75, 21)</span>, <span class="hljs-comment">(47, 43)</span>, <span class="hljs-comment">(254, 184)</span>, <span class="hljs-comment">(248, 107)</span>, <span class="hljs-comment">(36, 83)</span>, <span class="hljs-comment">(35, 183)</span>, <span class="hljs-comment">(77, 114)</span>, <span class="hljs-comment">(183, 26)</span>, <span class="hljs-comment">(47, 92)</span>, <span class="hljs-comment">(242, 131)</span>, <span class="hljs-comment">(112, 119)</span>, <span class="hljs-comment">(69, 68)</span>, <span class="hljs-comment">(29, 71)</span>, <span class="hljs-comment">(134, 14)</span>, <span class="hljs-comment">(34, 166)</span>, <span class="hljs-comment">(241, 6)</span>, <span class="hljs-comment">(77, 93)</span>, <span class="hljs-comment">(212, 234)</span>, <span class="hljs-comment">(198, 95)</span>, <span class="hljs-comment">(81, 101)</span>, <span class="hljs-comment">(37, 104)</span>]<br>暴力法 [[<span class="hljs-comment">(237, 15)</span>, <span class="hljs-comment">(237, 14)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(252, 103)</span>, <span class="hljs-comment">(253, 103)</span>], <span class="hljs-number">1.0</span>]<br>----------<br>[<span class="hljs-comment">(53, 10)</span>, <span class="hljs-comment">(250, 83)</span>, <span class="hljs-comment">(213, 218)</span>, <span class="hljs-comment">(55, 207)</span>, <span class="hljs-comment">(97, 129)</span>, <span class="hljs-comment">(164, 249)</span>, <span class="hljs-comment">(164, 104)</span>, <span class="hljs-comment">(206, 136)</span>, <span class="hljs-comment">(197, 40)</span>, <span class="hljs-comment">(11, 156)</span>, <span class="hljs-comment">(105, 163)</span>, <span class="hljs-comment">(34, 229)</span>, <span class="hljs-comment">(107, 240)</span>, <span class="hljs-comment">(118, 168)</span>, <span class="hljs-comment">(163, 171)</span>, <span class="hljs-comment">(36, 209)</span>, <span class="hljs-comment">(205, 154)</span>, <span class="hljs-comment">(235, 172)</span>, <span class="hljs-comment">(73, 219)</span>, <span class="hljs-comment">(18, 142)</span>, <span class="hljs-comment">(66, 154)</span>, <span class="hljs-comment">(73, 241)</span>, <span class="hljs-comment">(109, 56)</span>, <span class="hljs-comment">(236, 8)</span>, <span class="hljs-comment">(27, 68)</span>, <span class="hljs-comment">(149, 65)</span>, <span class="hljs-comment">(249, 110)</span>, <span class="hljs-comment">(69, 243)</span>, <span class="hljs-comment">(158, 164)</span>, <span class="hljs-comment">(192, 217)</span>, <span class="hljs-comment">(147, 196)</span>, <span class="hljs-comment">(167, 84)</span>, <span class="hljs-comment">(165, 2)</span>, <span class="hljs-comment">(141, 243)</span>, <span class="hljs-comment">(164, 110)</span>, <span class="hljs-comment">(102, 195)</span>, <span class="hljs-comment">(87, 64)</span>, <span class="hljs-comment">(0, 102)</span>, <span class="hljs-comment">(224, 135)</span>, <span class="hljs-comment">(217, 32)</span>, <span class="hljs-comment">(234, 227)</span>, <span class="hljs-comment">(29, 149)</span>, <span class="hljs-comment">(48, 67)</span>, <span class="hljs-comment">(140, 236)</span>, <span class="hljs-comment">(174, 174)</span>, <span class="hljs-comment">(256, 52)</span>, <span class="hljs-comment">(63, 112)</span>, <span class="hljs-comment">(15, 159)</span>, <span class="hljs-comment">(178, 33)</span>, <span class="hljs-comment">(198, 119)</span>, <span class="hljs-comment">(130, 70)</span>, <span class="hljs-comment">(24, 91)</span>, <span class="hljs-comment">(26, 74)</span>, <span class="hljs-comment">(21, 46)</span>, <span class="hljs-comment">(116, 202)</span>, <span class="hljs-comment">(199, 14)</span>, <span class="hljs-comment">(10, 180)</span>, <span class="hljs-comment">(59, 73)</span>, <span class="hljs-comment">(236, 63)</span>, <span class="hljs-comment">(195, 82)</span>, <span class="hljs-comment">(180, 216)</span>, <span class="hljs-comment">(46, 229)</span>, <span class="hljs-comment">(4, 201)</span>, <span class="hljs-comment">(44, 151)</span>, <span class="hljs-comment">(135, 96)</span>, <span class="hljs-comment">(118, 17)</span>, <span class="hljs-comment">(201, 53)</span>, <span class="hljs-comment">(161, 190)</span>, <span class="hljs-comment">(156, 173)</span>, <span class="hljs-comment">(153, 194)</span>, <span class="hljs-comment">(30, 227)</span>, <span class="hljs-comment">(203, 14)</span>, <span class="hljs-comment">(100, 157)</span>, <span class="hljs-comment">(46, 93)</span>, <span class="hljs-comment">(193, 247)</span>, <span class="hljs-comment">(91, 139)</span>, <span class="hljs-comment">(9, 203)</span>, <span class="hljs-comment">(32, 92)</span>, <span class="hljs-comment">(200, 183)</span>, <span class="hljs-comment">(98, 130)</span>, <span class="hljs-comment">(71, 102)</span>, <span class="hljs-comment">(66, 56)</span>, <span class="hljs-comment">(173, 202)</span>, <span class="hljs-comment">(192, 158)</span>, <span class="hljs-comment">(198, 105)</span>, <span class="hljs-comment">(191, 96)</span>, <span class="hljs-comment">(161, 65)</span>, <span class="hljs-comment">(41, 52)</span>, <span class="hljs-comment">(5, 116)</span>, <span class="hljs-comment">(129, 222)</span>, <span class="hljs-comment">(167, 163)</span>, <span class="hljs-comment">(256, 65)</span>, <span class="hljs-comment">(40, 234)</span>, <span class="hljs-comment">(180, 130)</span>, <span class="hljs-comment">(162, 250)</span>, <span class="hljs-comment">(250, 148)</span>, <span class="hljs-comment">(219, 245)</span>, <span class="hljs-comment">(146, 133)</span>, <span class="hljs-comment">(111, 65)</span>, <span class="hljs-comment">(256, 149)</span>, <span class="hljs-comment">(91, 100)</span>, <span class="hljs-comment">(206, 170)</span>, <span class="hljs-comment">(100, 226)</span>, <span class="hljs-comment">(208, 96)</span>, <span class="hljs-comment">(236, 222)</span>, <span class="hljs-comment">(211, 214)</span>, <span class="hljs-comment">(239, 23)</span>, <span class="hljs-comment">(158, 194)</span>, <span class="hljs-comment">(236, 70)</span>, <span class="hljs-comment">(116, 174)</span>, <span class="hljs-comment">(210, 59)</span>, <span class="hljs-comment">(208, 197)</span>, <span class="hljs-comment">(15, 182)</span>, <span class="hljs-comment">(2, 119)</span>, <span class="hljs-comment">(227, 125)</span>, <span class="hljs-comment">(36, 202)</span>, <span class="hljs-comment">(8, 252)</span>, <span class="hljs-comment">(82, 226)</span>, <span class="hljs-comment">(93, 107)</span>, <span class="hljs-comment">(194, 247)</span>, <span class="hljs-comment">(64, 200)</span>, <span class="hljs-comment">(141, 197)</span>, <span class="hljs-comment">(213, 47)</span>, <span class="hljs-comment">(82, 166)</span>, <span class="hljs-comment">(125, 146)</span>, <span class="hljs-comment">(35, 120)</span>, <span class="hljs-comment">(57, 174)</span>, <span class="hljs-comment">(8, 197)</span>]<br>暴力法 [[<span class="hljs-comment">(193, 247)</span>, <span class="hljs-comment">(194, 247)</span>], <span class="hljs-number">1.0</span>]<br>分治法 [[<span class="hljs-comment">(193, 247)</span>, <span class="hljs-comment">(194, 247)</span>], <span class="hljs-number">1.0</span>]<br>----------<br></code></pre></div></td></tr></table></figure><h3 id="说明">说明</h3><p>关于这个算法，《算法导论》原书中并没有伪码来参考。但是根据书中的详细的描述，写出算法其实是可以的。只是，这其中有一些坑，或者说需要注意的点，需要详细记述一下。如下。</p><h4 id="注意点一">注意点一</h4><blockquote><p>寻找一条垂直线 <code>$l$</code>，它把点集 <code>$P$</code>对分为满足下列条件的两个集合 <code>$P_L$</code> 和<code>$P_R$</code>：使得<code>$|P_L| = \left \lceil |P| / 2 \right \rceil, \; |P_R| = \left \lfloor |P| / 2 \right \rfloor$</code>，<code>$P_L$</code>中的点都在直线 <code>$l$</code> 上或 <code>$l$</code>的左侧，<code>$P_R$</code> 中的所有点都在直线 <code>$l$</code> 上或<code>$l$</code> 的右侧。</p></blockquote><p>这里划分时，要注意向上和向下取整的问题。另外，在划分时，我使用了这样的代码</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">PL = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XL]<br>PR = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> P <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> XR]<br></code></pre></div></td></tr></table></figure><p>其实这两行代码执行后产生的 <code>$P_L$</code> 和 <code>$P_R$</code>是有问题的。问题就出在如果 <code>$X_L$</code> 和 <code>$X_R$</code>中有重复的元素，那么，<code>$|P_L|$</code> 或者 <code>$P_R$</code>的值可能会大于 <code>$X_L$</code> 或者 <code>$X_R$</code>的值。显然，这样是有问题的。所以我们需要对 <code>$P_L$</code> 和<code>$P_R$</code> 进行一些处理</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 对中间的边界的可能重复的元素进行处理</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PL) != <span class="hljs-built_in">len</span>(XL):<br>    PL.remove(XL[-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(PR) != <span class="hljs-built_in">len</span>(XR):<br>    PR.remove(XR[<span class="hljs-number">0</span>])<br></code></pre></div></td></tr></table></figure><p>这里的 <code>XL[-1]</code> 和 <code>XR[0]</code>的值其实是相等的，而且，如果 <code>PL</code> 或者 <code>PR</code>中出现了多余的元素，那么，多余的元素也一定是这个中间边界的值。</p><h4 id="注意点二">注意点二</h4><p>对于 <code>$Y^&#123;'&#125;$</code> 的处理。具体就是，对于 <code>$Y^&#123;'&#125;$</code>中的每一个点 <code>$p$</code>，我们只需要考虑紧随 <code>$p$</code> 后的7 个点。</p><p>我之前还因为中间的分割线 <code>$l$</code>上的重复点问题而异或，重复点的话，两个不是应该算成一个吗？所以为什么不是检查5个点呢？后来在解决注意点一的时候想明白了，重复的点是要慎重考虑的，是不能够把两个点算作一个的。</p><h3 id="后记">后记</h3><p>本算法是严格参照《算法导论》原书的描述来实现的。具体过程和算法的正确性的证明请阅读《算法导论》相关章节。</p><p>另外，关于分治法的函数的参数问题，我认为，如果要像我一样，在代码中有去重的这一步操作的话，那么，参数<code>P</code> 是可以省去的。我认为这个参数 <code>P</code>是多余的。但是为了和书上的描述保持一致，这里就没有去掉这个参数。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>《算法导论》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求矩阵乘法的 Strassen 算法之 Python 实现（《算法导论》）</title>
    <link href="/2021/04/27/%E6%B1%82%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E7%9A%84-Strassen-%E7%AE%97%E6%B3%95/"/>
    <url>/2021/04/27/%E6%B1%82%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E7%9A%84-Strassen-%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="代码实现">代码实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : strassen.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/27</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">矩阵乘法的 Strassen 算法</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_add</span>(<span class="hljs-params">matrix_a:<span class="hljs-built_in">list</span>, matrix_b:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    矩阵加法</span><br><span class="hljs-string">    :param matrix_a: 加数</span><br><span class="hljs-string">    :param matrix_b: 加数</span><br><span class="hljs-string">    :return: 相加后的结果矩阵 matrix_c</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_a) <span class="hljs-comment"># 矩阵行数</span><br>    columns = <span class="hljs-built_in">len</span>(matrix_a[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 矩阵列数</span><br>    matrix_c = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows)] <span class="hljs-comment"># 结果矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(columns):<br>            tmp = matrix_a[i][j] + matrix_b[i][j]<br>            matrix_c[i].append(tmp)<br>    <span class="hljs-keyword">return</span> matrix_c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_minus</span>(<span class="hljs-params">matrix_a:<span class="hljs-built_in">list</span>, matrix_b:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    矩阵减法</span><br><span class="hljs-string">    :param matrix_a: 被减数</span><br><span class="hljs-string">    :param matrix_b: 减数</span><br><span class="hljs-string">    :return: 相减后的结果矩阵 matrix_c</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_a) <span class="hljs-comment"># 矩阵行数</span><br>    columns = <span class="hljs-built_in">len</span>(matrix_a[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 矩阵列数</span><br>    matrix_c = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows)] <span class="hljs-comment"># 结果矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(columns):<br>            tmp = matrix_a[i][j] - matrix_b[i][j]<br>            matrix_c[i].append(tmp)<br>    <span class="hljs-keyword">return</span> matrix_c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_divide</span>(<span class="hljs-params">matrix:<span class="hljs-built_in">list</span>, row:<span class="hljs-built_in">int</span>, column:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    分离一个子矩阵（四分之一）出来，注意，切割出来的子矩阵的边长是父矩阵的边长的一半</span><br><span class="hljs-string">    :param matrix: 父矩阵</span><br><span class="hljs-string">    :param row: 行的开始索引，row 的可能取值为 &#123;1, 2&#125;</span><br><span class="hljs-string">    :param column: 列的开始索引，column 的可能取值为 &#123;1, 2&#125;</span><br><span class="hljs-string">    :return: 切割好的矩阵</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix) <span class="hljs-comment"># 矩阵的边长</span><br>    matrix_sub = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows // <span class="hljs-number">2</span>)]<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((row - <span class="hljs-number">1</span>) * rows // <span class="hljs-number">2</span>, row * rows // <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((column - <span class="hljs-number">1</span>) * rows // <span class="hljs-number">2</span>, column * rows // <span class="hljs-number">2</span>):<br>            tmp = matrix[i][j]<br>            matrix_sub[k].append(tmp)<br>        k += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> matrix_sub<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_merge</span>(<span class="hljs-params">matrix_11:<span class="hljs-built_in">list</span>, matrix_12:<span class="hljs-built_in">list</span>, matrix_21:<span class="hljs-built_in">list</span>, matrix_22:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    合并四个子矩阵</span><br><span class="hljs-string">    :param matrix_11: 左上角的子矩阵</span><br><span class="hljs-string">    :param matrix_12: 右上角的子矩阵</span><br><span class="hljs-string">    :param matrix_21: 左下角的子矩阵</span><br><span class="hljs-string">    :param matrix_22: 右下角的子矩阵</span><br><span class="hljs-string">    :return: 合并之后的矩阵</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_11) <span class="hljs-comment"># 矩阵的边长</span><br>    matrix_all = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows * <span class="hljs-number">2</span>)] <span class="hljs-comment"># 合并之后的矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        matrix_all[i] = matrix_11[i] + matrix_12[i] <span class="hljs-comment"># 直接利用 Python 列表的加法</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):<br>        matrix_all[rows + j] = matrix_21[j] + matrix_22[j]<br>    <span class="hljs-keyword">return</span> matrix_all<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strassen</span>(<span class="hljs-params">matrix_a:<span class="hljs-built_in">list</span>, matrix_b:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Strassen 算法计算矩阵的乘法</span><br><span class="hljs-string">    :param matrix_a: 待乘矩阵</span><br><span class="hljs-string">    :param matrix_b: 待乘矩阵</span><br><span class="hljs-string">    :return: 结果矩阵</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    rows = <span class="hljs-built_in">len</span>(matrix_a) <span class="hljs-comment"># 矩阵的边长</span><br>    <span class="hljs-keyword">if</span> rows == <span class="hljs-number">1</span>:<br>        matrix_all = [<span class="hljs-built_in">list</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows)]<br>        matrix_all[<span class="hljs-number">0</span>].append(matrix_a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * matrix_b[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 创建 10 个矩阵</span><br>        s1 = matrix_minus(matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s2 = matrix_add(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>        s3 = matrix_add(matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s4 = matrix_minus(matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>        s5 = matrix_add(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s6 = matrix_add(matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s7 = matrix_minus(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s8 = matrix_add(matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        s9 = matrix_minus(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br>        s10 = matrix_add(matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># 7 个乘法</span><br>        p1 = strassen(matrix_divide(matrix_a, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), s1)<br>        p2 = strassen(s2, matrix_divide(matrix_b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        p3 = strassen(s3, matrix_divide(matrix_b, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>        p4 = strassen(matrix_divide(matrix_a, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>), s4)<br>        p5 = strassen(s5, s6)<br>        p6 = strassen(s7, s8)<br>        p7 = strassen(s9, s10)<br>        <span class="hljs-comment"># 求出四个子矩阵</span><br>        c11 = matrix_add(matrix_add(p5, p4), matrix_minus(p6, p2))<br>        c12 = matrix_add(p1, p2)<br>        c21 = matrix_add(p3, p4)<br>        c22 = matrix_add(matrix_minus(p5, p3), matrix_minus(p1, p7))<br>        <span class="hljs-comment"># 合并矩阵</span><br>        matrix_all = matrix_merge(c11, c12, c21, c22)<br>        <span class="hljs-comment"># 实验需要打印的 p1...p7，这里仅仅是为了应付实验的需要</span><br>        <span class="hljs-comment"># print(p1)</span><br>        <span class="hljs-comment"># print(p2)</span><br>        <span class="hljs-comment"># print(p3)</span><br>        <span class="hljs-comment"># print(p4)</span><br>        <span class="hljs-comment"># print(p5)</span><br>        <span class="hljs-comment"># print(p6)</span><br>        <span class="hljs-comment"># print(p7)</span><br>    <span class="hljs-keyword">return</span> matrix_all<br><br><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    b = [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    c = strassen(a, b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;打印结果矩阵&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(c)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-comment"># 使用 numpy 的矩阵乘法来验证</span><br>    n_a = numpy.array(a)<br>    n_b = numpy.array(b)<br>    <span class="hljs-built_in">print</span>(n_a)<br>    <span class="hljs-built_in">print</span>(n_b)<br>    <span class="hljs-built_in">print</span>(n_a.dot(b))<br></code></pre></div></td></tr></table></figure><p>说明：本算法严格参照《算法导论》的描述来实现。具体思路可以参照《算法导论》相关章节。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>《算法导论》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字逻辑--序列检测器相关问题整理</title>
    <link href="/2021/04/26/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E5%BA%8F%E5%88%97%E6%A3%80%E6%B5%8B%E5%99%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/2021/04/26/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E5%BA%8F%E5%88%97%E6%A3%80%E6%B5%8B%E5%99%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="示例一">示例一</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221106.png"alt="20210426221106" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221132.png"alt="20210426221132" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221156.png"alt="20210426221156" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221217.png"alt="20210426221217" /></p><p>来源：第五章 PPT</p><h3 id="示例二">示例二</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221328.png"alt="20210426221328" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221347.png"alt="20210426221347" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221407.png"alt="20210426221407" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426221423.png"alt="20210426221423" /></p><p>来源：第五章 PPT</p><h3 id="示例三">示例三</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426222426.png"alt="20210426222426" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426222447.png"alt="20210426222447" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426222504.png"alt="20210426222504" /></p>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字逻辑</tag>
      
      <tag>待 refactor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用门电路符号及表达式</title>
    <link href="/2021/04/26/%E5%B8%B8%E7%94%A8%E9%97%A8%E7%94%B5%E8%B7%AF%E7%AC%A6%E5%8F%B7%E5%8F%8A%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/04/26/%E5%B8%B8%E7%94%A8%E9%97%A8%E7%94%B5%E8%B7%AF%E7%AC%A6%E5%8F%B7%E5%8F%8A%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="说明">说明</h1><p>这里列举的是常用的门电路符号及表达式，便于以后查阅与记忆。</p><p>每一组门符号按照顺序分别列出<strong>新标准符号、沿用符号和国外流行符号</strong>。</p><h1 id="与门">1、与门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917163826.png" /></p><ul><li>逻辑功能：与运算</li><li>逻辑表达式：<span class="math inline">\(L = A \cdot B\)</span></li></ul><h1 id="或门">2、或门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917161855.png" /></p><ul><li>逻辑功能：或运算</li><li>逻辑表达式：<span class="math inline">\(L = A + B\)</span></li></ul><h1 id="非门">3、非门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917162033.png" /></p><ul><li>逻辑功能：非运算</li><li>逻辑表达式：<span class="math inline">\(L =\overline{A}\)</span></li></ul><h1 id="与非门">4、与非门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917162259.png" /></p><ul><li>逻辑功能：与非运算</li><li>逻辑表达式：<span class="math inline">\(L = \overline{A \cdotB}\)</span></li></ul><h1 id="或非门">5、或非门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917162706.png" /></p><ul><li>逻辑功能：或非运算</li><li>逻辑表达式：<span class="math inline">\(L = \overline{A +B}\)</span></li></ul><h1 id="与或非门">6、与或非门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917162835.png" /></p><ul><li>逻辑功能：与或非运算</li><li>逻辑表达式：<span class="math inline">\(L = \overline{AB +CD}\)</span></li></ul><h1 id="异或门">7、异或门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917163051.png" /></p><ul><li>逻辑功能：异或运算</li><li>逻辑表达式：<span class="math inline">\(L = A \oplus B = A\overline{B} + \overline{A} B\)</span></li></ul><h1 id="同或门">8、同或门</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210917163338.png" /></p><ul><li>逻辑功能：同或运算</li><li>逻辑表达式：<span class="math inline">\(L = A \odot B = \overline{A\oplus B} = AB + \overline{A}\overline{B}\)</span>（这里将原式展开，然后运算化简即可得最终式子）</li></ul><hr /><p>参考：</p><p>1、《数字逻辑 第四版》（华中科技大学出版社）</p>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字逻辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 实现经典排序算法（《算法导论》）</title>
    <link href="/2021/04/26/Python-%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/"/>
    <url>/2021/04/26/Python-%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一插入排序">一、插入排序</h2><h3 id="算法描述">1.1 算法描述</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426131930.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426131850.png" /></p><h3 id="算法实现">1.2 算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : insertion_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">插入排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    插入排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(A)):<br>        key = A[j]<br>        <span class="hljs-comment"># 开始插入</span><br>        i = j  -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> A[i] &gt; key:<br>            A[i + <span class="hljs-number">1</span>] = A[i]<br>            i -= <span class="hljs-number">1</span><br>        A[i + <span class="hljs-number">1</span>] = key<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]<br>    insert_sort(A)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="二合并归并排序">二、合并（归并）排序</h2><h3 id="算法描述-1">2.1 算法描述</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132201.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132242.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132330.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132353.png" /></p><h3 id="算法实现-1">2.2 算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : merge_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">合并（归并）排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 归并函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, q:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    把数组的 p 到 q 和 q + 1 到 r 这两个部分进行合并</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边的数组索引</span><br><span class="hljs-string">    :param q: 中间的数组索引</span><br><span class="hljs-string">    :param r: 右边的数组索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n_1 = q - p + <span class="hljs-number">1</span> <span class="hljs-comment"># 左边待归并的数组元素数量</span><br>    n_2 = r - q <span class="hljs-comment"># 右边的待归并的数组元素数量</span><br>    <span class="hljs-comment"># 这里多出来的一个元素放在最后，用正无穷来表示</span><br>    L = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_1 + <span class="hljs-number">1</span>)]<br>    R = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_2 + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_1):<br>        L[i] = A[p + i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_2):<br>        R[j] = A[q + j + <span class="hljs-number">1</span>]<br>    L[n_1] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-comment"># 给最后一个值赋无穷大</span><br>    R[n_2] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p, r + <span class="hljs-number">1</span>): <span class="hljs-comment"># 这里注意索引的问题</span><br>        <span class="hljs-keyword">if</span> L[i] &lt;= R[j]:<br>            A[k] = L[i]<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            A[k] = R[j]<br>            j += <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    归并排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 待排数组左边界</span><br><span class="hljs-string">    :param r: 右边界</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> p &lt; r:<br>        q = <span class="hljs-built_in">int</span>((p + r) / <span class="hljs-number">2</span>)<br>        merge_sort(A, p, q)<br>        merge_sort(A, q + <span class="hljs-number">1</span>, r) <span class="hljs-comment"># bug 处在了这里，这里第一次把 q 写成了 p ！！！！！</span><br>        merge(A, p, q, r)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>]<br>    p = <span class="hljs-number">0</span><br>    r = <span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span><br>    merge_sort(A, p, r)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="三快速排序">三、快速排序</h2><h3 id="算法描述-2">3.1 算法描述</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132538.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132551.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132622.png" /></p><h3 id="算法实现-2">3.2 算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : quick_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">快速排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">swap</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, i:<span class="hljs-built_in">int</span>, j:<span class="hljs-built_in">int</span></span>):<br>    tmp = A[i]<br>    A[i] = A[j]<br>    A[j] = tmp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    处理 p 到 r 这一部分的数组（包含 r），具体操作是以 A[r] 为中心点（pivot），</span><br><span class="hljs-string">    将小于等于 pivot 的元素放在左边，将大于 pivot 的元素放在右边</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    x = A[r] <span class="hljs-comment"># pivot 值</span><br>    i = p - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p, r): <span class="hljs-comment"># j 从 p 到 r（不包含 r）</span><br>        <span class="hljs-keyword">if</span> A[j] &lt;= x:<br>            i = i + <span class="hljs-number">1</span> <span class="hljs-comment"># i + 1 之后指向的就是右边的比 pivot 值大的那部分数组中的第一个元素</span><br>            swap(A, i, j)<br>    swap(A, i + <span class="hljs-number">1</span>, r) <span class="hljs-comment"># 把 pivot 值给换回来</span><br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span> <span class="hljs-comment"># i + 1 是中间值</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    快速排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> p &lt; r:<br>        q = partition(A, p, r)<br>        quick_sort(A, p, q - <span class="hljs-number">1</span>)<br>        quick_sort(A, q + <span class="hljs-number">1</span>, r)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]<br>    p = <span class="hljs-number">0</span><br>    r = <span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span><br>    quick_sort(A, p, r)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="四随机快速排序算法">四、随机快速排序算法</h2><h3 id="算法描述-3">4.1 算法描述</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132824.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426132842.png" /></p><h3 id="算法实现-3">4.2 算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : random_quick_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">随机快速排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> quick_sort<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomized_partition</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    随机化选择 pivot</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    i = random.randint(p, r)<br>    quick_sort.swap(A, r, i)<br>    <span class="hljs-keyword">return</span> quick_sort.partition(A, p, r)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomized_quicksort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span>, p:<span class="hljs-built_in">int</span>, r:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    随机化快速排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param p: 左边界索引</span><br><span class="hljs-string">    :param r: 右边界索引</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> p &lt; r:<br>        q = randomized_partition(A, p, r)<br>        randomized_quicksort(A, p, q - <span class="hljs-number">1</span>)<br>        randomized_quicksort(A, q + <span class="hljs-number">1</span>, r)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]<br>    p = <span class="hljs-number">0</span><br>    r = <span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span><br>    randomized_quicksort(A, p, r)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="五计数排序">五、计数排序</h2><h3 id="算法描述-4">5.1 算法描述</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133153.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133210.png" /></p><p>上图是 COUNTING-SORT 在输入数组 A[1..8] 上的处理过程，其中 A中的每一个元素都是不大于 k = 5 的非负整数。(a) 是第 5 行执行后的数组 A和辅助数组 C 的情况。(b) 是第 8 行执行后，数组 C 的情况。(c)~(e)分别显示了第 10~12 行的循环体迭代了一次、两次和三次之后，输出数组 B和辅助数组 C 的情况。其中，数组 B 中只有浅色阴影部分有元素值填充。(f)是最终排好序的数组 B。</p><p>这里，(a) 中的 C数组是计数数组，即记录待排数组中每个数字出现的次数，它的 size 是 A中最大元素加一，因为它的索引对应的就是 A 中元素的值。(b) 中的 C 数组是(a) 中的 C 数组中元素从左到右依次累加的结果。</p><p>最后往 B 数组中放置元素时，是从 A 中按照倒序的方式依次取元素，再放入B 中相应的位置的。</p><h3 id="算法实现-4">5.2 算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : counting_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">计数排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">counting_sort</span>(<span class="hljs-params">A: <span class="hljs-built_in">list</span>, B: <span class="hljs-built_in">list</span>, k: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计数排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param B: 排好序的结果数组</span><br><span class="hljs-string">    :param k: A 中元素最大值</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    C = []<br>    <span class="hljs-comment"># 初始化 C 为 k + 1 个 0，索引是从 0 到 k</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k + <span class="hljs-number">1</span>):<br>        C.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(B)):<br>        C[A[j]] = C[A[j]] + <span class="hljs-number">1</span> <span class="hljs-comment"># 给数组 A 中的所有不同的数字计数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>        C[i] = C[i] + C[i - <span class="hljs-number">1</span>] <span class="hljs-comment"># 计算累加和</span><br>    <span class="hljs-comment"># 按从后往前的顺序从 A 中取数据，然后根据规则放入 B 中</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        B[C[A[j]] - <span class="hljs-number">1</span>] = A[j] <span class="hljs-comment"># 注意 B 的索引是从 0 开始的</span><br>        C[A[j]] = C[A[j]] - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br>    B = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A))]<br>    k = <span class="hljs-built_in">max</span>(A)<br>    counting_sort(A, B, k)<br>    <span class="hljs-built_in">print</span>(B)<br></code></pre></div></td></tr></table></figure><h2 id="六桶排序">六、桶排序</h2><h3 id="算法描述-5">6.1 算法描述</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133346.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426133358.png" /></p><h3 id="算法实现-5">6.2 算法实现</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : bucket_sort.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">桶排序，这里假设待排元素的范围是 [0, 1)（前闭后开）</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> insertion_sort<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bucket_sort</span>(<span class="hljs-params">A:<span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    桶排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    n = <span class="hljs-built_in">len</span>(A)<br>    B = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        B.append([])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        index = <span class="hljs-built_in">int</span>(n * A[i])<br>        B[index].append(A[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        insertion_sort.insert_sort(B[i])<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> B[i]:<br>            A[k] = each<br>            k = k + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">0.78</span>, <span class="hljs-number">0.17</span>, <span class="hljs-number">0.39</span>, <span class="hljs-number">0.26</span>, <span class="hljs-number">0.72</span>, <span class="hljs-number">0.94</span>, <span class="hljs-number">0.21</span>, <span class="hljs-number">0.12</span>, <span class="hljs-number">0.23</span>, <span class="hljs-number">0.68</span>]<br>    bucket_sort(A)<br>    <span class="hljs-built_in">print</span>(A)<br></code></pre></div></td></tr></table></figure><h2 id="七算法效率可视化">七、算法效率可视化</h2><p>主要是利用 Python 的 matplotlib 这个库，绘制 <spanclass="math inline">\(T(N)\)</span>随输入规模的变化的折线图，这里同时绘制三种情况：最好情况（正序）、一般情况和最坏情况（逆序）。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : time_analysis.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/4/25</span><br><br><span class="hljs-keyword">import</span> insertion_sort, merge_sort<br><span class="hljs-keyword">import</span> quick_sort, random_quick_sort<br><span class="hljs-keyword">import</span> counting_sort, bucket_sort<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>A = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">6000</span>, <span class="hljs-number">7000</span>]<br><span class="hljs-comment"># A = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] # 测试数据</span><br>T = []<br>T_best = []<br>T_worst = []<br>T_list = [T, T_best, T_worst]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> A:<br>    B = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        B.append(random.randint(<span class="hljs-number">0</span>, i))<br>    B_best = <span class="hljs-built_in">sorted</span>(B)<br>    B_worst = B_best[::-<span class="hljs-number">1</span>]<br>    B_list = [B, B_best, B_worst]<br>    TB_map = [(T, B), (T_best, B_best), (T_worst, B_worst)]<br>    <span class="hljs-keyword">for</span> each_T, each_B <span class="hljs-keyword">in</span> TB_map:<br>        pre = time.process_time_ns()<br>        insertion_sort.insert_sort(each_B)<br>        after = time.process_time_ns()<br>        <span class="hljs-built_in">print</span>(after - pre)<br>        each_T.append(after - pre)<br><span class="hljs-built_in">print</span>(T)<br><span class="hljs-built_in">print</span>(T_best)<br><span class="hljs-built_in">print</span>(T_worst)<br><span class="hljs-comment"># 绘制图线</span><br>plt.plot(A, T, label=<span class="hljs-string">&#x27;normal&#x27;</span>)<br>plt.plot(A, T_best, label=<span class="hljs-string">&#x27;best&#x27;</span>)<br>plt.plot(A, T_worst, label=<span class="hljs-string">&#x27;worst&#x27;</span>)<br>plt.legend() <span class="hljs-comment"># 显示 label</span><br>plt.savefig(fname=<span class="hljs-string">&#x27;insert.svg&#x27;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;svg&#x27;</span>)<br>plt.show()<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210426214702.svg" /></p><p>这里只绘制了一个插入排序，如果想绘制其他的图像，只需要将代码中的相应的排序方法给替换掉，然后重新跑一遍代码即可。不过，在实际测试时，如果要替换成其他的排序算法来测试，那么，相应地也要调整测试数据（也就是输入的规模），否则快速排序在最坏情况下的递归会耗尽内存。</p><p>更新（2021.07.09）：在 StackOverflow 找到了一个说法，Python的递归限制是 999 个调用栈，而且，Python中似乎没有真正的递归。所以，这个快速排序在 Python中似乎能用递归实现。然后，我测试了一下 Java的极限，原来也不是很行啊，到了 100,000 这个级别，就会 StackOverflow了。</p><h2 id="总结">总结</h2><p>关于这些排序算法，基本都是直接对原数组进行操作的，原因是这里要测试它们的时间效率，所以不便于产生其他额外的开销。但是，在实际运用中，也会有对待排数组的副本进行排序然后返回的情况，这样的好处是不会修改待排的原数组，这一点是要注意的。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析实验一</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Windows 命令行：&#39;cl&#39; 不是内部或外部命令</title>
    <link href="/2021/04/25/%E8%A7%A3%E5%86%B3-Windows-%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%9A-cl-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/04/25/%E8%A7%A3%E5%86%B3-Windows-%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%9A-cl-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>因为要在 Windows 上做操作系统原理的 C语言实验，同时不愿意开一个笨重的 VS2019 来写一个简单的程序，遂决定在像Linux 一样，在命令编译运行 C语言程序，无奈根据微软官方文档的指示，命令行敲入 <code>cl</code>后出现了 "'cl' 不是内部或外部命令"的信息，不过这种情况的解决方案一般就是找到相关的 <code>exe</code>文件所在的文件路径，然后将其添加到系统高级环境变量的 PATH 中即可。</p><p>下面是我的 <code>cl.exe</code> 文件所在的路径，根据你安装 VS2019时选择的路径，路径会稍微不同，不过大同小异就是了</p><div class="hljs code-wrapper"><pre><code class="hljs">D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\bin\Hostx64\x64</code></pre></div><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210425143545.png"alt="20210425143545" /></p><p>将这个路径添加到系统高级环境变量中的 Path 中之后，再次在命令行敲入<code>cl</code>，成功输出正常的提示信息</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210425143751.png"alt="20210425143751" /></p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Bugs</tag>
      
      <tag>C 语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 中的 pthread.h 头文件（附源码）</title>
    <link href="/2021/04/25/Linux-%E4%B8%AD%E7%9A%84-pthread-h-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2021/04/25/Linux-%E4%B8%AD%E7%9A%84-pthread-h-%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><p>Linux 下的线程库函数是由 POSIX 标准定义的，成为 POSIX thread 或pthread。在 Linux 上线程函数位于 libthread 共享库中，因此在编译时要加上<code>-lpthread</code> 选项。</p><h3 id="源代码">源代码</h3><p>Linux 内核版本是 5.4，文件位置<code>/usr/include/pthread.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Copyright (C) 2002-2018 Free Software Foundation, Inc.</span><br><span class="hljs-comment">   This file is part of the GNU C Library.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is free software; you can redistribute it and/or</span><br><span class="hljs-comment">   modify it under the terms of the GNU Lesser General Public</span><br><span class="hljs-comment">   License as published by the Free Software Foundation; either</span><br><span class="hljs-comment">   version 2.1 of the License, or (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The GNU C Library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="hljs-comment">   Lesser General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment">   License along with the GNU C Library; if not, see</span><br><span class="hljs-comment">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _PTHREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PTHREAD_H1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;features.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;endian.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/pthreadtypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/setjmp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/wordsize.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/types/struct_timespec.h&gt;</span></span><br><br><br><span class="hljs-comment">/* Detach state.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_CREATE_JOINABLE,<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_CREATE_JOINABLEPTHREAD_CREATE_JOINABLE</span><br>  PTHREAD_CREATE_DETACHED<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_CREATE_DETACHEDPTHREAD_CREATE_DETACHED</span><br>&#125;;<br><br><br><span class="hljs-comment">/* Mutex types.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_MUTEX_TIMED_NP,<br>  PTHREAD_MUTEX_RECURSIVE_NP,<br>  PTHREAD_MUTEX_ERRORCHECK_NP,<br>  PTHREAD_MUTEX_ADAPTIVE_NP<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K8</span><br>  ,<br>  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,<br>  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,<br>  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,<br>  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br>  <span class="hljs-comment">/* For compatibility.  */</span><br>  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Robust mutex or not flags.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_MUTEX_STALLED,<br>  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,<br>  PTHREAD_MUTEX_ROBUST,<br>  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_POSIX199506 || defined __USE_UNIX98</span><br><span class="hljs-comment">/* Mutex protocols.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_PRIO_NONE,<br>  PTHREAD_PRIO_INHERIT,<br>  PTHREAD_PRIO_PROTECT<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __PTHREAD_MUTEX_HAVE_PREV</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> PTHREAD_MUTEX_INITIALIZER \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP, __PTHREAD_SPINS, &#123; 0, 0 &#125; &#125; &#125;</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> PTHREAD_MUTEX_INITIALIZER \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP, 0, &#123; __PTHREAD_SPINS &#125; &#125; &#125;</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Read-write lock types.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_RWLOCK_PREFER_READER_NP,<br>  PTHREAD_RWLOCK_PREFER_WRITER_NP,<br>  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,<br>  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP<br>&#125;;<br><br><span class="hljs-comment">/* Define __PTHREAD_RWLOCK_INT_FLAGS_SHARED to 1 if pthread_rwlock_t</span><br><span class="hljs-comment">   has the shared field.  All 64-bit architectures have the shared field</span><br><span class="hljs-comment">   in pthread_rwlock_t.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __PTHREAD_RWLOCK_INT_FLAGS_SHARED</span><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __WORDSIZE == 64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __PTHREAD_RWLOCK_INT_FLAGS_SHARED 1</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Read-write lock initializers.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> PTHREAD_RWLOCK_INITIALIZER \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, 0 &#125; &#125;</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __PTHREAD_RWLOCK_INT_FLAGS_SHARED</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0,      \</span><br><span class="hljs-meta">PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP &#125; &#125;</span><br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#   <span class="hljs-keyword">if</span> __BYTE_ORDER == __LITTLE_ENDIAN</span><br><span class="hljs-meta">#    <span class="hljs-keyword">define</span> PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, \</span><br><span class="hljs-meta">      0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, 0 &#125; &#125;</span><br><span class="hljs-meta">#   <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#    <span class="hljs-keyword">define</span> PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \</span><br><span class="hljs-meta">  &#123; &#123; 0, 0, 0, 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,\</span><br><span class="hljs-meta">      0 &#125; &#125;</span><br><span class="hljs-meta">#   <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">/* Unix98 or XOpen2K */</span></span><br><br><br><span class="hljs-comment">/* Scheduler inheritance.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_INHERIT_SCHED,<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_INHERIT_SCHED   PTHREAD_INHERIT_SCHED</span><br>  PTHREAD_EXPLICIT_SCHED<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_EXPLICIT_SCHED  PTHREAD_EXPLICIT_SCHED</span><br>&#125;;<br><br><br><span class="hljs-comment">/* Scope handling.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_SCOPE_SYSTEM,<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_SCOPE_SYSTEM    PTHREAD_SCOPE_SYSTEM</span><br>  PTHREAD_SCOPE_PROCESS<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_SCOPE_PROCESS   PTHREAD_SCOPE_PROCESS</span><br>&#125;;<br><br><br><span class="hljs-comment">/* Process shared or private flag.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_PROCESS_PRIVATE,<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE</span><br>  PTHREAD_PROCESS_SHARED<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_PROCESS_SHARED  PTHREAD_PROCESS_SHARED</span><br>&#125;;<br><br><br><br><span class="hljs-comment">/* Conditional variable handling.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_COND_INITIALIZER &#123; &#123; &#123;0&#125;, &#123;0&#125;, &#123;0, 0&#125;, &#123;0, 0&#125;, 0, 0, &#123;0, 0&#125; &#125; &#125;</span><br><br><br><span class="hljs-comment">/* Cleanup buffers */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">pthread_cleanup_buffer</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">void</span> (*__routine) (<span class="hljs-type">void</span> *);             <span class="hljs-comment">/* Function to call.  */</span><br>  <span class="hljs-type">void</span> *__arg;                            <span class="hljs-comment">/* Its argument.  */</span><br>  <span class="hljs-type">int</span> __canceltype;                       <span class="hljs-comment">/* Saved cancellation type. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">pthread_cleanup_buffer</span> *__<span class="hljs-title">prev</span>;</span> <span class="hljs-comment">/* Chaining of cleanup functions.  */</span><br>&#125;;<br><br><span class="hljs-comment">/* Cancellation */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_CANCEL_ENABLE,<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_CANCEL_ENABLE   PTHREAD_CANCEL_ENABLE</span><br>  PTHREAD_CANCEL_DISABLE<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_CANCEL_DISABLE  PTHREAD_CANCEL_DISABLE</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  PTHREAD_CANCEL_DEFERRED,<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_CANCEL_DEFERREDPTHREAD_CANCEL_DEFERRED</span><br>  PTHREAD_CANCEL_ASYNCHRONOUS<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_CANCEL_ASYNCHRONOUSPTHREAD_CANCEL_ASYNCHRONOUS</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_CANCELED ((void *) -1)</span><br><br><br><span class="hljs-comment">/* Single execution handling.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTHREAD_ONCE_INIT 0</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Value returned by &#x27;pthread_barrier_wait&#x27; for one of the threads after</span><br><span class="hljs-comment">   the required number of threads have called this function.</span><br><span class="hljs-comment">   -1 is distinct from 0 and all errno constants */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> PTHREAD_BARRIER_SERIAL_THREAD -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br>__BEGIN_DECLS<br><br><span class="hljs-comment">/* Create a new thread, starting with execution of START-ROUTINE</span><br><span class="hljs-comment">   getting passed ARG.  Creation attributed come from ATTR.  The new</span><br><span class="hljs-comment">   handle is stored in *NEWTHREAD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_create</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> *__restrict __newthread,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict __attr,</span><br><span class="hljs-params">   <span class="hljs-type">void</span> *(*__start_routine) (<span class="hljs-type">void</span> *),</span><br><span class="hljs-params">   <span class="hljs-type">void</span> *__restrict __arg)</span> __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* Terminate calling thread.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The registered cleanup handlers are called via exception handling</span><br><span class="hljs-comment">   so we cannot mark this function with __THROW.*/</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pthread_exit</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__retval)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__noreturn__))</span>;<br><br><span class="hljs-comment">/* Make calling thread wait for termination of the thread TH.  The</span><br><span class="hljs-comment">   exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN</span><br><span class="hljs-comment">   is not NULL.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_join</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th, <span class="hljs-type">void</span> **__thread_return)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Check whether thread TH has terminated.  If yes return the status of</span><br><span class="hljs-comment">   the thread in *THREAD_RETURN, if THREAD_RETURN is not NULL.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_tryjoin_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th, <span class="hljs-type">void</span> **__thread_return)</span> __THROW;<br><br><span class="hljs-comment">/* Make calling thread wait for termination of the thread TH, but only</span><br><span class="hljs-comment">   until TIMEOUT.  The exit status of the thread is stored in</span><br><span class="hljs-comment">   *THREAD_RETURN, if THREAD_RETURN is not NULL.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_timedjoin_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th, <span class="hljs-type">void</span> **__thread_return,</span><br><span class="hljs-params"> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *__abstime)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Indicate that the thread TH is never to be joined with PTHREAD_JOIN.</span><br><span class="hljs-comment">   The resources of TH will therefore be freed immediately when it</span><br><span class="hljs-comment">   terminates, instead of waiting for another thread to perform PTHREAD_JOIN</span><br><span class="hljs-comment">   on it.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_detach</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th)</span> __THROW;<br><br><br><span class="hljs-comment">/* Obtain the identifier of the current thread.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">pthread_t</span> <span class="hljs-title function_">pthread_self</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span>;<br><br><span class="hljs-comment">/* Compare two thread identifiers.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_equal</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __thread1, <span class="hljs-type">pthread_t</span> __thread2)</span><br>  __THROW __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__const__))</span>;<br><br><br><span class="hljs-comment">/* Thread attribute handling.  */</span><br><br><span class="hljs-comment">/* Initialize thread attribute *ATTR with default attributes</span><br><span class="hljs-comment">   (detachstate is PTHREAD_JOINABLE, scheduling policy is SCHED_OTHER,</span><br><span class="hljs-comment">    no user-provided stack).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy thread attribute *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Get detach state attribute.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getdetachstate</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params"><span class="hljs-type">int</span> *__detachstate)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set detach state attribute.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setdetachstate</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params"><span class="hljs-type">int</span> __detachstate)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Get the size of the guard area created for stack overflow protection.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getguardsize</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params">      <span class="hljs-type">size_t</span> *__guardsize)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the size of the guard area created for stack overflow protection.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setguardsize</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params">      <span class="hljs-type">size_t</span> __guardsize)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Return in *PARAM the scheduling parameters of *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getschedparam</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict __attr,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> sched_param *__restrict __param)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set scheduling parameters (priority, etc) in *ATTR according to PARAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setschedparam</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__restrict __attr,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sched_param *__restrict</span><br><span class="hljs-params">       __param)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Return in *POLICY the scheduling policy of *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getschedpolicy</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict</span><br><span class="hljs-params">__attr, <span class="hljs-type">int</span> *__restrict __policy)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set scheduling policy in *ATTR according to POLICY.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setschedpolicy</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr, <span class="hljs-type">int</span> __policy)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Return in *INHERIT the scheduling inheritance mode of *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getinheritsched</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict</span><br><span class="hljs-params"> __attr, <span class="hljs-type">int</span> *__restrict __inherit)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set scheduling inheritance mode in *ATTR according to INHERIT.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setinheritsched</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> __inherit)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Return in *SCOPE the scheduling contention scope of *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getscope</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict __attr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> *__restrict __scope)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set scheduling contention scope in *ATTR according to SCOPE.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setscope</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr, <span class="hljs-type">int</span> __scope)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Return the previously set address for the stack.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getstackaddr</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict</span><br><span class="hljs-params">      __attr, <span class="hljs-type">void</span> **__restrict __stackaddr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span> __attribute_deprecated__;<br><br><span class="hljs-comment">/* Set the starting address of the stack of the thread to be created.</span><br><span class="hljs-comment">   Depending on whether the stack grows up or down the value must either</span><br><span class="hljs-comment">   be higher or lower than all the address in the memory block.  The</span><br><span class="hljs-comment">   minimal size of the block must be PTHREAD_STACK_MIN.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setstackaddr</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params">      <span class="hljs-type">void</span> *__stackaddr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span> __attribute_deprecated__;<br><br><span class="hljs-comment">/* Return the currently used minimal stack size.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getstacksize</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict</span><br><span class="hljs-params">      __attr, <span class="hljs-type">size_t</span> *__restrict __stacksize)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Add information about the minimum stack size needed for the thread</span><br><span class="hljs-comment">   to be started.  This size must never be less than PTHREAD_STACK_MIN</span><br><span class="hljs-comment">   and must also not exceed the system limits.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setstacksize</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params">      <span class="hljs-type">size_t</span> __stacksize)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Return the previously set address for the stack.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getstack</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__restrict __attr,</span><br><span class="hljs-params">  <span class="hljs-type">void</span> **__restrict __stackaddr,</span><br><span class="hljs-params">  <span class="hljs-type">size_t</span> *__restrict __stacksize)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* The following two interfaces are intended to replace the last two.  They</span><br><span class="hljs-comment">   require setting the address as well as the size since only setting the</span><br><span class="hljs-comment">   address will make the implementation on some architectures impossible.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setstack</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr, <span class="hljs-type">void</span> *__stackaddr,</span><br><span class="hljs-params">  <span class="hljs-type">size_t</span> __stacksize)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Thread created with attribute ATTR will be limited to run only on</span><br><span class="hljs-comment">   the processors represented in CPUSET.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setaffinity_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> __cpusetsize,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">cpu_set_t</span> *__cpuset)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* Get bit set in CPUSET representing the processors threads created with</span><br><span class="hljs-comment">   ATTR can run on.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getaffinity_np</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__attr,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> __cpusetsize,</span><br><span class="hljs-params"><span class="hljs-type">cpu_set_t</span> *__cpuset)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* Get the default attributes used by pthread_create in this process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_getattr_default_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Set the default attributes to be used by pthread_create in this</span><br><span class="hljs-comment">   process.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setattr_default_np</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Initialize thread attribute *ATTR with attributes corresponding to the</span><br><span class="hljs-comment">   already running thread TH.  It shall be called on uninitialized ATTR</span><br><span class="hljs-comment">   and destroyed with pthread_attr_destroy when no longer needed.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_getattr_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th, <span class="hljs-type">pthread_attr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for scheduling control.  */</span><br><br><span class="hljs-comment">/* Set the scheduling parameters for TARGET_THREAD according to POLICY</span><br><span class="hljs-comment">   and *PARAM.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setschedparam</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __target_thread, <span class="hljs-type">int</span> __policy,</span><br><span class="hljs-params">  <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sched_param *__param)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* Return in *POLICY and *PARAM the scheduling parameters for TARGET_THREAD. */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_getschedparam</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __target_thread,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> *__restrict __policy,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> sched_param *__restrict __param)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* Set the scheduling priority for TARGET_THREAD.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setschedprio</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __target_thread, <span class="hljs-type">int</span> __prio)</span><br>     __THROW;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Get thread name visible in the kernel and its interfaces.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_getname_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __target_thread, <span class="hljs-type">char</span> *__buf,</span><br><span class="hljs-params">       <span class="hljs-type">size_t</span> __buflen)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set thread name visible in the kernel and its interfaces.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setname_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __target_thread, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__name)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_UNIX98</span><br><span class="hljs-comment">/* Determine level of concurrency.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_getconcurrency</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><span class="hljs-comment">/* Set new concurrency level to LEVEL.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setconcurrency</span> <span class="hljs-params">(<span class="hljs-type">int</span> __level)</span> __THROW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Yield the processor to another thread or process.</span><br><span class="hljs-comment">   This function is similar to the POSIX `sched_yield&#x27; function but</span><br><span class="hljs-comment">   might be differently implemented in the case of a m-on-n thread</span><br><span class="hljs-comment">   implementation.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_yield</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> __THROW;<br><br><br><span class="hljs-comment">/* Limit specified thread TH to run only on the processors represented</span><br><span class="hljs-comment">   in CPUSET.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setaffinity_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th, <span class="hljs-type">size_t</span> __cpusetsize,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">cpu_set_t</span> *__cpuset)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* Get bit set in CPUSET representing the processors TH can run on.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_getaffinity_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th, <span class="hljs-type">size_t</span> __cpusetsize,</span><br><span class="hljs-params">   <span class="hljs-type">cpu_set_t</span> *__cpuset)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">3</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling initialization.  */</span><br><br><span class="hljs-comment">/* Guarantee that the initialization function INIT_ROUTINE will be called</span><br><span class="hljs-comment">   only once, even if pthread_once is executed several times with the</span><br><span class="hljs-comment">   same ONCE_CONTROL argument. ONCE_CONTROL must point to a static or</span><br><span class="hljs-comment">   extern variable initialized to PTHREAD_ONCE_INIT.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The initialization functions might throw exception which is why</span><br><span class="hljs-comment">   this function is not marked with __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_once</span> <span class="hljs-params">(<span class="hljs-type">pthread_once_t</span> *__once_control,</span><br><span class="hljs-params"> <span class="hljs-type">void</span> (*__init_routine) (<span class="hljs-type">void</span>))</span> __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><br><span class="hljs-comment">/* Functions for handling cancellation.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Note that these functions are explicitly not marked to not throw an</span><br><span class="hljs-comment">   exception in C++ code.  If cancellation is implemented by unwinding</span><br><span class="hljs-comment">   this is necessary to have the compiler generate the unwind information.  */</span><br><br><span class="hljs-comment">/* Set cancelability state of current thread to STATE, returning old</span><br><span class="hljs-comment">   state in *OLDSTATE if OLDSTATE is not NULL.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setcancelstate</span> <span class="hljs-params">(<span class="hljs-type">int</span> __state, <span class="hljs-type">int</span> *__oldstate)</span>;<br><br><span class="hljs-comment">/* Set cancellation state of current thread to TYPE, returning the old</span><br><span class="hljs-comment">   type in *OLDTYPE if OLDTYPE is not NULL.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setcanceltype</span> <span class="hljs-params">(<span class="hljs-type">int</span> __type, <span class="hljs-type">int</span> *__oldtype)</span>;<br><br><span class="hljs-comment">/* Cancel THREAD immediately or at the next possibility.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cancel</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __th)</span>;<br><br><span class="hljs-comment">/* Test for pending cancellation for the current thread and terminate</span><br><span class="hljs-comment">   the thread as per pthread_exit(PTHREAD_CANCELED) if it has been</span><br><span class="hljs-comment">   cancelled.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pthread_testcancel</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">/* Cancellation handling with integration into exception handling.  */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    __jmp_buf __cancel_jmp_buf;<br>    <span class="hljs-type">int</span> __mask_was_saved;<br>  &#125; __cancel_jmp_buf[<span class="hljs-number">1</span>];<br>  <span class="hljs-type">void</span> *__pad[<span class="hljs-number">4</span>];<br>&#125; <span class="hljs-type">__pthread_unwind_buf_t</span> __attribute__ ((__aligned__));<br><br><span class="hljs-comment">/* No special attributes by default.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __cleanup_fct_attribute</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __cleanup_fct_attribute</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Structure to hold the cleanup handler information.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">pthread_cleanup_frame</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">void</span> (*__cancel_routine) (<span class="hljs-type">void</span> *);<br>  <span class="hljs-type">void</span> *__cancel_arg;<br>  <span class="hljs-type">int</span> __do_it;<br>  <span class="hljs-type">int</span> __cancel_type;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __GNUC__ &amp;&amp; defined __EXCEPTIONS</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-comment">/* Class to handle cancellation handler invocation.  */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> __<span class="hljs-title">pthread_cleanup_class</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">void</span> (*__cancel_routine) (<span class="hljs-type">void</span> *);<br>  <span class="hljs-type">void</span> *__cancel_arg;<br>  <span class="hljs-type">int</span> __do_it;<br>  <span class="hljs-type">int</span> __cancel_type;<br><br> public:<br>  __pthread_cleanup_class (<span class="hljs-type">void</span> (*__fct) (<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *__arg)<br>    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (<span class="hljs-number">1</span>) &#123; &#125;<br>  ~__pthread_cleanup_class () &#123; <span class="hljs-keyword">if</span> (__do_it) __cancel_routine (__cancel_arg); &#125;<br>  <span class="hljs-type">void</span> __setdoit (<span class="hljs-type">int</span> __newval) &#123; __do_it = __newval; &#125;<br>  <span class="hljs-type">void</span> __defer () &#123; pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,<br>   &amp;__cancel_type); &#125;<br>  <span class="hljs-type">void</span> __restore () <span class="hljs-type">const</span> &#123; pthread_setcanceltype (__cancel_type, <span class="hljs-number">0</span>); &#125;<br>&#125;;<br><br><span class="hljs-comment">/* Install a cleanup handler: ROUTINE will be called with arguments ARG</span><br><span class="hljs-comment">   when the thread is canceled or calls pthread_exit.  ROUTINE will also</span><br><span class="hljs-comment">   be called with arguments ARG when the matching pthread_cleanup_pop</span><br><span class="hljs-comment">   is executed with non-zero EXECUTE argument.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   pthread_cleanup_push and pthread_cleanup_pop are macros and must always</span><br><span class="hljs-comment">   be used in matching pairs at the same nesting level of braces.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> pthread_cleanup_push(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_cleanup_class __clframe (routine, arg)</span><br><br><span class="hljs-comment">/* Remove a cleanup handler installed by the matching pthread_cleanup_push.</span><br><span class="hljs-comment">   If EXECUTE is non-zero, the handler function is called. */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> pthread_cleanup_pop(execute) \</span><br><span class="hljs-meta">    __clframe.__setdoit (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Install a cleanup handler as pthread_cleanup_push does, but also</span><br><span class="hljs-comment">   saves the current cancellation type and sets it to deferred</span><br><span class="hljs-comment">   cancellation.  */</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> pthread_cleanup_push_defer_np(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_cleanup_class __clframe (routine, arg);      \</span><br><span class="hljs-meta">    __clframe.__defer ()</span><br><br><span class="hljs-comment">/* Remove a cleanup handler as pthread_cleanup_pop does, but also</span><br><span class="hljs-comment">   restores the cancellation type that was in effect when the matching</span><br><span class="hljs-comment">   pthread_cleanup_push_defer was called.  */</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> pthread_cleanup_pop_restore_np(execute) \</span><br><span class="hljs-meta">    __clframe.__restore ();      \</span><br><span class="hljs-meta">    __clframe.__setdoit (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/* Function called to call the cleanup handler.  As an extern inline</span><br><span class="hljs-comment">   function the compiler is free to decide inlining the change when</span><br><span class="hljs-comment">   needed or fall back on the copy which must exist somewhere</span><br><span class="hljs-comment">   else.  */</span><br>__extern_inline <span class="hljs-type">void</span><br>__pthread_cleanup_routine (<span class="hljs-keyword">struct</span> __pthread_cleanup_frame *__frame)<br>&#123;<br>  <span class="hljs-keyword">if</span> (__frame-&gt;__do_it)<br>    __frame-&gt;__cancel_routine (__frame-&gt;__cancel_arg);<br>&#125;<br><br><span class="hljs-comment">/* Install a cleanup handler: ROUTINE will be called with arguments ARG</span><br><span class="hljs-comment">   when the thread is canceled or calls pthread_exit.  ROUTINE will also</span><br><span class="hljs-comment">   be called with arguments ARG when the matching pthread_cleanup_pop</span><br><span class="hljs-comment">   is executed with non-zero EXECUTE argument.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   pthread_cleanup_push and pthread_cleanup_pop are macros and must always</span><br><span class="hljs-comment">   be used in matching pairs at the same nesting level of braces.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> pthread_cleanup_push(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    struct __pthread_cleanup_frame __clframe      \</span><br><span class="hljs-meta">      __attribute__ ((__cleanup__ (__pthread_cleanup_routine)))      \</span><br><span class="hljs-meta">      = &#123; .__cancel_routine = (routine), .__cancel_arg = (arg),       \</span><br><span class="hljs-meta">  .__do_it = 1 &#125;;</span><br><br><span class="hljs-comment">/* Remove a cleanup handler installed by the matching pthread_cleanup_push.</span><br><span class="hljs-comment">   If EXECUTE is non-zero, the handler function is called. */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> pthread_cleanup_pop(execute) \</span><br><span class="hljs-meta">    __clframe.__do_it = (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><br><span class="hljs-meta">#  <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Install a cleanup handler as pthread_cleanup_push does, but also</span><br><span class="hljs-comment">   saves the current cancellation type and sets it to deferred</span><br><span class="hljs-comment">   cancellation.  */</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> pthread_cleanup_push_defer_np(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    struct __pthread_cleanup_frame __clframe      \</span><br><span class="hljs-meta">      __attribute__ ((__cleanup__ (__pthread_cleanup_routine)))      \</span><br><span class="hljs-meta">      = &#123; .__cancel_routine = (routine), .__cancel_arg = (arg),      \</span><br><span class="hljs-meta">  .__do_it = 1 &#125;;      \</span><br><span class="hljs-meta">    (void) pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,      \</span><br><span class="hljs-meta">  &amp;__clframe.__cancel_type)</span><br><br><span class="hljs-comment">/* Remove a cleanup handler as pthread_cleanup_pop does, but also</span><br><span class="hljs-comment">   restores the cancellation type that was in effect when the matching</span><br><span class="hljs-comment">   pthread_cleanup_push_defer was called.  */</span><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> pthread_cleanup_pop_restore_np(execute) \</span><br><span class="hljs-meta">    (void) pthread_setcanceltype (__clframe.__cancel_type, NULL);      \</span><br><span class="hljs-meta">    __clframe.__do_it = (execute);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/* Install a cleanup handler: ROUTINE will be called with arguments ARG</span><br><span class="hljs-comment">   when the thread is canceled or calls pthread_exit.  ROUTINE will also</span><br><span class="hljs-comment">   be called with arguments ARG when the matching pthread_cleanup_pop</span><br><span class="hljs-comment">   is executed with non-zero EXECUTE argument.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   pthread_cleanup_push and pthread_cleanup_pop are macros and must always</span><br><span class="hljs-comment">   be used in matching pairs at the same nesting level of braces.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> pthread_cleanup_push(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_unwind_buf_t __cancel_buf;      \</span><br><span class="hljs-meta">    void (*__cancel_routine) (void *) = (routine);      \</span><br><span class="hljs-meta">    void *__cancel_arg = (arg);      \</span><br><span class="hljs-meta">    int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \</span><br><span class="hljs-meta">__cancel_buf.__cancel_jmp_buf, 0);    \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (__glibc_unlikely (__not_first_call))      \</span><br><span class="hljs-meta">      &#123;      \</span><br><span class="hljs-meta">__cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">__pthread_unwind_next (&amp;__cancel_buf);      \</span><br><span class="hljs-meta"><span class="hljs-comment">/* NOTREACHED */</span>      \</span><br><span class="hljs-meta">      &#125;      \</span><br><span class="hljs-meta">      \</span><br><span class="hljs-meta">    __pthread_register_cancel (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    do &#123;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __pthread_register_cancel (<span class="hljs-type">__pthread_unwind_buf_t</span> *__buf)<br>     __cleanup_fct_attribute;<br><br><span class="hljs-comment">/* Remove a cleanup handler installed by the matching pthread_cleanup_push.</span><br><span class="hljs-comment">   If EXECUTE is non-zero, the handler function is called. */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> pthread_cleanup_pop(execute) \</span><br><span class="hljs-meta">      do &#123; &#125; while (0);<span class="hljs-comment">/* Empty to allow label before pthread_cleanup_pop.  */</span>\</span><br><span class="hljs-meta">    &#125; while (0);      \</span><br><span class="hljs-meta">    __pthread_unregister_cancel (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (execute)      \</span><br><span class="hljs-meta">      __cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __pthread_unregister_cancel (<span class="hljs-type">__pthread_unwind_buf_t</span> *__buf)<br>  __cleanup_fct_attribute;<br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Install a cleanup handler as pthread_cleanup_push does, but also</span><br><span class="hljs-comment">   saves the current cancellation type and sets it to deferred</span><br><span class="hljs-comment">   cancellation.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> pthread_cleanup_push_defer_np(routine, arg) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    __pthread_unwind_buf_t __cancel_buf;      \</span><br><span class="hljs-meta">    void (*__cancel_routine) (void *) = (routine);      \</span><br><span class="hljs-meta">    void *__cancel_arg = (arg);      \</span><br><span class="hljs-meta">    int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \</span><br><span class="hljs-meta">__cancel_buf.__cancel_jmp_buf, 0);    \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (__glibc_unlikely (__not_first_call))      \</span><br><span class="hljs-meta">      &#123;      \</span><br><span class="hljs-meta">__cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">__pthread_unwind_next (&amp;__cancel_buf);      \</span><br><span class="hljs-meta"><span class="hljs-comment">/* NOTREACHED */</span>      \</span><br><span class="hljs-meta">      &#125;      \</span><br><span class="hljs-meta">      \</span><br><span class="hljs-meta">    __pthread_register_cancel_defer (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    do &#123;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __pthread_register_cancel_defer (<span class="hljs-type">__pthread_unwind_buf_t</span> *__buf)<br>     __cleanup_fct_attribute;<br><br><span class="hljs-comment">/* Remove a cleanup handler as pthread_cleanup_pop does, but also</span><br><span class="hljs-comment">   restores the cancellation type that was in effect when the matching</span><br><span class="hljs-comment">   pthread_cleanup_push_defer was called.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> pthread_cleanup_pop_restore_np(execute) \</span><br><span class="hljs-meta">      do &#123; &#125; while (0);<span class="hljs-comment">/* Empty to allow label before pthread_cleanup_pop.  */</span>\</span><br><span class="hljs-meta">    &#125; while (0);      \</span><br><span class="hljs-meta">    __pthread_unregister_cancel_restore (&amp;__cancel_buf);      \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (execute)      \</span><br><span class="hljs-meta">      __cancel_routine (__cancel_arg);      \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __pthread_unregister_cancel_restore (<span class="hljs-type">__pthread_unwind_buf_t</span> *__buf)<br>  __cleanup_fct_attribute;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Internal interface to initiate cleanup.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __pthread_unwind_next (<span class="hljs-type">__pthread_unwind_buf_t</span> *__buf)<br>     __cleanup_fct_attribute __attribute__ ((__noreturn__))<br><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> SHARED</span><br>     __attribute__ ((__weak__))<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>     ;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Function used in the macros.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">jmp_buf_tag</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __sigsetjmp (<span class="hljs-keyword">struct</span> __jmp_buf_tag *__env, <span class="hljs-type">int</span> __savemask) __THROWNL;<br><br><br><span class="hljs-comment">/* Mutex handling.  */</span><br><br><span class="hljs-comment">/* Initialize a mutex.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__mutex,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *__mutexattr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy a mutex.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__mutex)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Try locking a mutex.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_trylock</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__mutex)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Lock a mutex.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_lock</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__mutex)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Wait until lock becomes available, or specified time passes. */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_timedlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__restrict __mutex,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *__restrict</span><br><span class="hljs-params">    __abstime)</span> __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Unlock a mutex.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_unlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__mutex)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Get the priority ceiling of MUTEX.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_getprioceiling</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutex_t</span> *</span><br><span class="hljs-params"> __restrict __mutex,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> *__restrict __prioceiling)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the priority ceiling of MUTEX to PRIOCEILING, return old</span><br><span class="hljs-comment">   priority ceiling value in *OLD_CEILING.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_setprioceiling</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__restrict __mutex,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> __prioceiling,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> *__restrict __old_ceiling)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Declare the state protected by MUTEX as consistent.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_consistent</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__mutex)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_consistent_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *__mutex)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling mutex attributes.  */</span><br><br><span class="hljs-comment">/* Initialize mutex attribute object ATTR with default attributes</span><br><span class="hljs-comment">   (kind is PTHREAD_MUTEX_TIMED_NP).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy mutex attribute object ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Get the process-shared flag of the mutex attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_getpshared</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *</span><br><span class="hljs-params"> __restrict __attr,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> *__restrict __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the process-shared flag of the mutex attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_setpshared</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K8</span><br><span class="hljs-comment">/* Return in *KIND the mutex kind attribute in *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_gettype</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *__restrict</span><br><span class="hljs-params">      __attr, <span class="hljs-type">int</span> *__restrict __kind)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the mutex kind attribute in *ATTR to KIND (either PTHREAD_MUTEX_NORMAL,</span><br><span class="hljs-comment">   PTHREAD_MUTEX_RECURSIVE, PTHREAD_MUTEX_ERRORCHECK, or</span><br><span class="hljs-comment">   PTHREAD_MUTEX_DEFAULT).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_settype</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr, <span class="hljs-type">int</span> __kind)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Return in *PROTOCOL the mutex protocol attribute in *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_getprotocol</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *</span><br><span class="hljs-params">  __restrict __attr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> *__restrict __protocol)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the mutex protocol attribute in *ATTR to PROTOCOL (either</span><br><span class="hljs-comment">   PTHREAD_PRIO_NONE, PTHREAD_PRIO_INHERIT, or PTHREAD_PRIO_PROTECT).  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_setprotocol</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> __protocol)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Return in *PRIOCEILING the mutex prioceiling attribute in *ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_getprioceiling</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *</span><br><span class="hljs-params">     __restrict __attr,</span><br><span class="hljs-params">     <span class="hljs-type">int</span> *__restrict __prioceiling)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the mutex prioceiling attribute in *ATTR to PRIOCEILING.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_setprioceiling</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr,</span><br><span class="hljs-params">     <span class="hljs-type">int</span> __prioceiling)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Get the robustness flag of the mutex attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_getrobust</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *__attr,</span><br><span class="hljs-params"><span class="hljs-type">int</span> *__robustness)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_getrobust_np</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *__attr,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> *__robustness)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Set the robustness flag of the mutex attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_setrobust</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr,</span><br><span class="hljs-params"><span class="hljs-type">int</span> __robustness)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_setrobust_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *__attr,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> __robustness)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __USE_UNIX98 || defined __USE_XOPEN2K</span><br><span class="hljs-comment">/* Functions for handling read-write locks.  */</span><br><br><span class="hljs-comment">/* Initialize read-write lock RWLOCK using attributes ATTR, or use</span><br><span class="hljs-comment">   the default values if later is NULL.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__restrict __rwlock,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">pthread_rwlockattr_t</span> *__restrict</span><br><span class="hljs-params">__attr)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy read-write lock RWLOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__rwlock)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Acquire read lock for RWLOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_rdlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__rwlock)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Try to acquire read lock for RWLOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_tryrdlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__rwlock)</span><br>  __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Try to acquire read lock for RWLOCK or return after specfied time.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_timedrdlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__restrict __rwlock,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *__restrict</span><br><span class="hljs-params">       __abstime)</span> __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Acquire write lock for RWLOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_wrlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__rwlock)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Try to acquire write lock for RWLOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_trywrlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__rwlock)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Try to acquire write lock for RWLOCK or return after specfied time.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_timedwrlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__restrict __rwlock,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *__restrict</span><br><span class="hljs-params">       __abstime)</span> __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* Unlock RWLOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_unlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *__rwlock)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Functions for handling read-write lock attributes.  */</span><br><br><span class="hljs-comment">/* Initialize attribute object ATTR with default values.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlockattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy attribute object ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlockattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Return current setting of process-shared attribute of ATTR in PSHARED.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_getpshared</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_rwlockattr_t</span> *</span><br><span class="hljs-params">  __restrict __attr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> *__restrict __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set process-shared attribute of ATTR to PSHARED.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_setpshared</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlockattr_t</span> *__attr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Return current setting of reader/writer preference.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_getkind_np</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_rwlockattr_t</span> *</span><br><span class="hljs-params">  __restrict __attr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> *__restrict __pref)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set reader/write preference.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_setkind_np</span> <span class="hljs-params">(<span class="hljs-type">pthread_rwlockattr_t</span> *__attr,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> __pref)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling conditional variables.  */</span><br><br><span class="hljs-comment">/* Initialize condition variable COND using attributes ATTR, or use</span><br><span class="hljs-comment">   the default values if later is NULL.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *__restrict __cond,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">pthread_condattr_t</span> *__restrict __cond_attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy condition variable COND.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *__cond)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Wake up one thread waiting for condition variable COND.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_signal</span> <span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *__cond)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Wake up all threads waiting for condition variables COND.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_broadcast</span> <span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *__cond)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Wait for condition variable COND to be signaled or broadcast.</span><br><span class="hljs-comment">   MUTEX is assumed to be locked before.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_wait</span> <span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *__restrict __cond,</span><br><span class="hljs-params">      <span class="hljs-type">pthread_mutex_t</span> *__restrict __mutex)</span><br>     __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Wait for condition variable COND to be signaled or broadcast until</span><br><span class="hljs-comment">   ABSTIME.  MUTEX is assumed to be locked before.  ABSTIME is an</span><br><span class="hljs-comment">   absolute time specification; zero is the beginning of the epoch</span><br><span class="hljs-comment">   (00:00:00 GMT, January 1, 1970).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_timedwait</span> <span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *__restrict __cond,</span><br><span class="hljs-params">   <span class="hljs-type">pthread_mutex_t</span> *__restrict __mutex,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *__restrict __abstime)</span><br>     __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span>;<br><br><span class="hljs-comment">/* Functions for handling condition variable attributes.  */</span><br><br><span class="hljs-comment">/* Initialize condition variable attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy condition variable attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Get the process-shared flag of the condition variable attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_getpshared</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_condattr_t</span> *</span><br><span class="hljs-params">__restrict __attr,</span><br><span class="hljs-params"><span class="hljs-type">int</span> *__restrict __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the process-shared flag of the condition variable attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_setpshared</span> <span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *__attr,</span><br><span class="hljs-params"><span class="hljs-type">int</span> __pshared)</span> __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Get the clock selected for the condition variable attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_getclock</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_condattr_t</span> *</span><br><span class="hljs-params">      __restrict __attr,</span><br><span class="hljs-params">      <span class="hljs-type">__clockid_t</span> *__restrict __clock_id)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the clock selected for the condition variable attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_setclock</span> <span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *__attr,</span><br><span class="hljs-params">      <span class="hljs-type">__clockid_t</span> __clock_id)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Functions to handle spinlocks.  */</span><br><br><span class="hljs-comment">/* Initialize the spinlock LOCK.  If PSHARED is nonzero the spinlock can</span><br><span class="hljs-comment">   be shared between different processes.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *__lock, <span class="hljs-type">int</span> __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy the spinlock LOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *__lock)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Wait until spinlock LOCK is retrieved.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_lock</span> <span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *__lock)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Try to lock spinlock LOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_trylock</span> <span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *__lock)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Release spinlock LOCK.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_unlock</span> <span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *__lock)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Functions to handle barriers.  */</span><br><br><span class="hljs-comment">/* Initialize BARRIER with the attributes in ATTR.  The barrier is</span><br><span class="hljs-comment">   opened when COUNT waiters arrived.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrier_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_barrier_t</span> *__restrict __barrier,</span><br><span class="hljs-params"> <span class="hljs-type">const</span> <span class="hljs-type">pthread_barrierattr_t</span> *__restrict</span><br><span class="hljs-params"> __attr, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __count)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy a previously dynamically initialized barrier BARRIER.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrier_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_barrier_t</span> *__barrier)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Wait on barrier BARRIER.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrier_wait</span> <span class="hljs-params">(<span class="hljs-type">pthread_barrier_t</span> *__barrier)</span><br>     __THROWNL __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><br><span class="hljs-comment">/* Initialize barrier attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_init</span> <span class="hljs-params">(<span class="hljs-type">pthread_barrierattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy previously dynamically initialized barrier attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_destroy</span> <span class="hljs-params">(<span class="hljs-type">pthread_barrierattr_t</span> *__attr)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Get the process-shared flag of the barrier attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_getpshared</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_barrierattr_t</span> *</span><br><span class="hljs-params">   __restrict __attr,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> *__restrict __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span>;<br><br><span class="hljs-comment">/* Set the process-shared flag of the barrier attribute ATTR.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_setpshared</span> <span class="hljs-params">(<span class="hljs-type">pthread_barrierattr_t</span> *__attr,</span><br><span class="hljs-params">   <span class="hljs-type">int</span> __pshared)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Functions for handling thread-specific data.  */</span><br><br><span class="hljs-comment">/* Create a key value identifying a location in the thread-specific</span><br><span class="hljs-comment">   data area.  Each thread maintains a distinct thread-specific data</span><br><span class="hljs-comment">   area.  DESTR_FUNCTION, if non-NULL, is called with the value</span><br><span class="hljs-comment">   associated to that key when the key is destroyed.</span><br><span class="hljs-comment">   DESTR_FUNCTION is not called if the value associated is NULL when</span><br><span class="hljs-comment">   the key is destroyed.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_key_create</span> <span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> *__key,</span><br><span class="hljs-params">       <span class="hljs-type">void</span> (*__destr_function) (<span class="hljs-type">void</span> *))</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">1</span>))</span>;<br><br><span class="hljs-comment">/* Destroy KEY.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_key_delete</span> <span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> __key)</span> __THROW;<br><br><span class="hljs-comment">/* Return current value of the thread-specific data slot identified by KEY.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">pthread_getspecific</span> <span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> __key)</span> __THROW;<br><br><span class="hljs-comment">/* Store POINTER in the thread-specific data slot identified by KEY. */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setspecific</span> <span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> __key,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">void</span> *__pointer)</span> __THROW ;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN2K</span><br><span class="hljs-comment">/* Get ID of CPU-time clock for thread THREAD_ID.  */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_getcpuclockid</span> <span class="hljs-params">(<span class="hljs-type">pthread_t</span> __thread_id,</span><br><span class="hljs-params">  <span class="hljs-type">__clockid_t</span> *__clock_id)</span><br>     __THROW __<span class="hljs-title function_">nonnull</span> <span class="hljs-params">((<span class="hljs-number">2</span>))</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">/* Install handlers to be called when a new process is created with FORK.</span><br><span class="hljs-comment">   The PREPARE handler is called in the parent process just before performing</span><br><span class="hljs-comment">   FORK. The PARENT handler is called in the parent process just after FORK.</span><br><span class="hljs-comment">   The CHILD handler is called in the child process.  Each of the three</span><br><span class="hljs-comment">   handlers can be NULL, meaning that no handler needs to be called at that</span><br><span class="hljs-comment">   point.</span><br><span class="hljs-comment">   PTHREAD_ATFORK can be called several times, in which case the PREPARE</span><br><span class="hljs-comment">   handlers are called in LIFO order (last added with PTHREAD_ATFORK,</span><br><span class="hljs-comment">   first called before FORK), and the PARENT and CHILD handlers are called</span><br><span class="hljs-comment">   in FIFO (first added, first called).  */</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pthread_atfork</span> <span class="hljs-params">(<span class="hljs-type">void</span> (*__prepare) (<span class="hljs-type">void</span>),</span><br><span class="hljs-params">   <span class="hljs-type">void</span> (*__parent) (<span class="hljs-type">void</span>),</span><br><span class="hljs-params">   <span class="hljs-type">void</span> (*__child) (<span class="hljs-type">void</span>))</span> __THROW;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_EXTERN_INLINES</span><br><span class="hljs-comment">/* Optimizations.  */</span><br>__extern_inline <span class="hljs-type">int</span><br>__NTH (pthread_equal (<span class="hljs-type">pthread_t</span> __thread1, <span class="hljs-type">pthread_t</span> __thread2))<br>&#123;<br>  <span class="hljs-keyword">return</span> __thread1 == __thread2;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>__END_DECLS<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* pthread.h */</span></span><br></code></pre></div></td></tr></table></figure><p>参考：《Linux C 一站式编程》</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标准 C 语言头文件</title>
    <link href="/2021/04/25/%E6%A0%87%E5%87%86-C-%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2021/04/25/%E6%A0%87%E5%87%86-C-%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="iso-c-标准定义的头文件24-项">ISO C 标准定义的头文件（24项）</h2><ol type="1"><li><p><code>&lt;assert.h&gt;</code> 验证程序断言</p></li><li><p><code>&lt;complex.h&gt;</code> 支持复数算术运算</p></li><li><p><code>&lt;ctype.h&gt;</code> 字符类型</p></li><li><p><code>&lt;errno.h&gt;</code> 出错码</p></li><li><p><code>&lt;fenv.h&gt;</code> 浮点环境</p></li><li><p><code>&lt;float.h&gt;</code> 浮点常量</p></li><li><p><code>&lt;inttypes.h&gt;</code> 整型格式转换</p></li><li><p><code>&lt;iso646.h&gt;</code> 替代关系操作符宏</p></li><li><p><code>&lt;limits.h&gt;</code> 实现常量</p></li><li><p><code>&lt;locale.h&gt;</code> 局部类别</p></li><li><p><code>&lt;math.h&gt;</code> 数学常量</p></li><li><p><code>&lt;setjmp.h&gt;</code> 非局部goto</p></li><li><p><code>&lt;signal.h&gt;</code> 信号</p></li><li><p><code>&lt;stdarg.h&gt;</code> 可变参数表</p></li><li><p><code>&lt;stdbool.h&gt;</code> 布尔类型和值</p></li><li><p><code>&lt;stddef.h&gt;</code> 标准定义</p></li><li><p><code>&lt;stdint.h&gt;</code> 整型</p></li><li><p><code>&lt;stdio.h&gt;</code> 标准I/O库</p></li><li><p><code>&lt;stdlib.h&gt;</code> 实用程序库函数</p></li><li><p><code>&lt;string.h&gt;</code> 字符串操作</p></li><li><p><code>&lt;tgmath.h&gt;</code> 通用类型数学宏</p></li><li><p><code>&lt;time.h&gt;</code> 日期和时间</p></li><li><p><code>&lt;wchar.h&gt;</code> 宽字符支持</p></li><li><p><code>&lt;wctype.h&gt;</code> 宽字符分类和映射支持</p></li></ol><h2 id="posix-标准规定的必须的头文件26-项">POSIX标准规定的必须的头文件（26 项）</h2><ol type="1"><li><p><code>&lt;dirent.h&gt;</code> 目录项</p></li><li><p><code>&lt;fcntl.h&gt;</code> 文件控制</p></li><li><p><code>&lt;fnmatch.h&gt;</code> 文件名匹配类型</p></li><li><p><code>&lt;glob.h&gt;</code> 路径名模式匹配类型</p></li><li><p><code>&lt;grp.h&gt;</code> 组文件</p></li><li><p><code>&lt;netdb.h&gt;</code> 网络数据库操作</p></li><li><p><code>&lt;pwd.h&gt;</code> 口令文件</p></li><li><p><code>&lt;regex.h&gt;</code> 正则表达式</p></li><li><p><code>&lt;tar.h&gt;</code> tar归档值</p></li><li><p><code>&lt;termios.h&gt;</code> 终端I/O</p></li><li><p><code>&lt;unistd.h&gt;</code> 符号常量</p></li><li><p><code>&lt;utime.h&gt;</code> 文件时间</p></li><li><p><code>&lt;wordexp.h&gt;</code> 字扩展类型</p></li><li><p><code>&lt;arpa/inet.h&gt;</code> Internet定义</p></li><li><p><code>&lt;net/if.h&gt;</code> 套接字本地接口</p></li><li><p><code>&lt;netinet/in.h&gt;</code> Internet地址族</p></li><li><p><code>&lt;netinet/tcp.h&gt;</code> 传输控制协议定义</p></li><li><p><code>&lt;sys/mman.h&gt;</code> 内存管理声明</p></li><li><p><code>&lt;sys/select.h&gt;</code> select函数</p></li><li><p><code>&lt;sys/socket.h&gt;</code> 套接字接口</p></li><li><p><code>&lt;sys/stat.h&gt;</code> 文件状态</p></li><li><p><code>&lt;sys/times.h&gt;</code> 进程时间</p></li><li><p><code>&lt;sys/types.h&gt;</code> 基本系统数据类型</p></li><li><p><code>&lt;sys/un.h&gt;</code> UNIX域套接字定义</p></li><li><p><code>&lt;sys/utsname.h&gt;</code> 系统名</p></li><li><p><code>&lt;sys/wait.h&gt;</code> 进程控制</p></li></ol><h2 id="posix-标准定义的-xsi-扩展头文件26-项">POSIX 标准定义的 XSI扩展头文件（26 项）</h2><ol type="1"><li><p><code>&lt;cpio.h&gt;</code> cpio归档值</p></li><li><p><code>&lt;dlfcn.h&gt;</code> 动态链接</p></li><li><p><code>&lt;fmtmsg.h&gt;</code> 消息显示结构</p></li><li><p><code>&lt;ftw.h&gt;</code> 文件树漫游</p></li><li><p><code>&lt;iconv.h&gt;</code> 代码集转换实用程序</p></li><li><p><code>&lt;langinfo.h&gt;</code> 语言信息常量</p></li><li><p><code>&lt;libgen.h&gt;</code> 模式匹配函数定义</p></li><li><p><code>&lt;monetary.h&gt;</code> 货币类型</p></li><li><p><code>&lt;ndbm.h&gt;</code> 数据库操作</p></li><li><p><code>&lt;nl_types.h&gt;</code> 消息类别</p></li><li><p><code>&lt;poll.h&gt;</code> 轮询函数</p></li><li><p><code>&lt;search.h&gt;</code> 搜索表</p></li><li><p><code>&lt;strings.h&gt;</code> 字符串操作</p></li><li><p><code>&lt;syslog.h&gt;</code> 系统出错日志记录</p></li><li><p><code>&lt;ucontext.h&gt;</code> 用户上下文</p></li><li><p><code>&lt;ulimit.h&gt;</code> 用户限制</p></li><li><p><code>&lt;utmpx.h&gt;</code> 用户帐户数据库</p></li><li><p><code>&lt;sys/ipc.h&gt;</code> IPC</p></li><li><p><code>&lt;sys/msg.h&gt;</code> 消息队列</p></li><li><p><code>&lt;sys/resource.h&gt;</code> 资源操作</p></li><li><p><code>&lt;sys/sem.h&gt;</code> 信号量</p></li><li><p><code>&lt;sys/shm.h&gt;</code> 共享存储</p></li><li><p><code>&lt;sys/statvfs.h&gt;</code> 文件系统信息</p></li><li><p><code>&lt;sys/time.h&gt;</code> 时间类型</p></li><li><p><code>&lt;sys/timeb.h&gt;</code> 附加的日期和时间定义</p></li><li><p><code>&lt;sys/uio.h&gt;</code> 矢量I/O操作</p></li></ol><h2 id="posix-标准定义的可选头文件8-项">POSIX 标准定义的可选头文件（8项）</h2><ol type="1"><li><p><code>&lt;aio.h&gt;</code> 异步I/O</p></li><li><p><code>&lt;mqueue.h&gt;</code> 消息队列</p></li><li><p><code>&lt;pthread.h&gt;</code> 线程</p></li><li><p><code>&lt;sched.h&gt;</code> 执行调度</p></li><li><p><code>&lt;semaphore.h&gt;</code> 信号量</p></li><li><p><code>&lt;spawn.h&gt;</code> 实时spawn接口</p></li><li><p><code>&lt;stropts.h&gt;</code> XSI STREAMS接口</p></li><li><p><code>&lt;trace.h&gt;</code> 时间跟踪</p></li></ol><p>注：POSIX 的全称是 Portable Operating SystemInterface，意思是<strong>可移植操作系统接口</strong>，不过，这里的移植，主要是针对各种Unix 系统来说的，而 X 则表明其对 Unix API 的传承。</p>]]></content>
    
    
    <categories>
      
      <category>C 语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C 语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于计数排序的稳定性及其对于基数排序的影响</title>
    <link href="/2021/04/22/%E5%85%B3%E4%BA%8E%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%8F%8A%E5%85%B6%E5%AF%B9%E4%BA%8E%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <url>/2021/04/22/%E5%85%B3%E4%BA%8E%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%8F%8A%E5%85%B6%E5%AF%B9%E4%BA%8E%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>这篇博客的主要目的是记录以下对于计数排序稳定性及其对基数排序的影响的理解，故对于算法本身不会作详细描述。</p><h3 id="计数排序的稳定性">计数排序的稳定性</h3><p>在《算法导论》中，计数排序的大概思路是</p><ul><li>1、利用一个辅助数组 C 记录原数组 A 的各个元素的计数</li><li>2、对辅助数组 C 进行处理，即<code>C[i] = C[i] + C[i - 1]</code></li><li>3、对原数组 A 从后往前依次进行重新放置元素到结果数组 B中，使之到达有序状态</li></ul><p>伪代码如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422164501.png"alt="20210422164501" /></p><p>下面我们具体来解释一下计数排序的稳定性问题。</p><p>首先，我们要弄清楚一件事情，就是稳定性的定义是什么？所谓排序的稳定性，是指如果数组中有重复的元素（值相等），那么数组在排完序的前后，这些重复的元素的相对位置保持不变。简单一点讲，就是，比如原来的数组A 中有两个相等的元素 <code>A[i]</code> 和 <code>A[j]</code>，并且<code>A[i]</code> 在 <code>A[j]</code>的前面，那么，排完序之后，<code>A[i]</code> 还是在 <code>A[j]</code>的前面。我们称能保持这种性质的排序是稳定的。</p><p>在上面的伪代码中，第 10 到 12 行，也就是最后处理数组的一步，对于j，我们是从后往前进行遍历的，那么，这样可以保证排序是稳定的。</p><p>我们借助书中的例子来理解这一点。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422165446.png"alt="20210422165446" /></p><p>原数组 A 中有 3 个 <code>3</code>，我们假设排好序的数组中放置所有<code>3</code> 的区域是<code>B[i..j]</code>，那么，我们按照书中的次序，即从后往前往结果数组<code>B</code> 中放置元素时，可以保证所有的 <code>3</code> 维持原来在<code>A</code> 数组中的相对次序。</p><p>相应地，如果我们最后一步是从前往后处理数组的元素的话，那么，所有的<code>3</code> 的相对位置会正好反过来。这与稳定性的要求相悖。</p><p>需要说明的一点是，对于计数排序本身，不管采用具有稳定性的排序或是采用不具有稳定性的排序，对于最后排序结果的正确性是没有影响的。</p><h3id="计数排序稳定性对于基数排序的影响">计数排序稳定性对于基数排序的影响</h3><p>书上的基数排序是先按最低有效位进行排序的，排序的示例过程如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422170446.png"alt="20210422170446" /></p><p>如果我们按照具有稳定性的计数排序，那么，很容易推出，基数排序是可以正常运转的。</p><p>然而，当我们采用另一种不具有稳定性的计数排序来给数据的每一位进行排序的话，那么最后排序的正确性是无法得到保证的。举个例子说明这一点：</p><p>我们假设有 4 个待排元素，当计数排序不稳定时，排序过程如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210422173114.png"alt="20210422173114" /></p><p>我们发现最后的结果是不对的。</p><p>我们只需要稍微回想一下基数排序的排序过程，应该就能明白针对单位数字排序的稳定性对于基数排序的重要性了。</p><h3 id="计数排序的代码实现">计数排序的代码实现</h3><p>计数排序的 <code>Python</code> 实现</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_sort</span>(<span class="hljs-params">A: <span class="hljs-built_in">list</span>, B: <span class="hljs-built_in">list</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计数排序</span><br><span class="hljs-string">    :param A: 待排数组</span><br><span class="hljs-string">    :param B: 排好序的结果数组</span><br><span class="hljs-string">    :param k: A 中元素最大值</span><br><span class="hljs-string">    :return: B</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    C = []<br>    <span class="hljs-comment"># 初始化 C 为 k + 1 个 0，索引是从 0 到 k</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k + <span class="hljs-number">1</span>):<br>        C.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(B)):<br>        C[A[j]] = C[A[j]] + <span class="hljs-number">1</span> <span class="hljs-comment"># 给数组 A 中的所有不同的数字计数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>        C[i] = C[i] + C[i - <span class="hljs-number">1</span>] <span class="hljs-comment"># 计算累加和</span><br>    <span class="hljs-comment"># 按从后往前的顺序从 A 中取数据，然后根据规则放入 B 中</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        B[C[A[j]] - <span class="hljs-number">1</span>] = A[j] <span class="hljs-comment"># 注意 B 的索引是从 0 开始的</span><br>        C[A[j]] = C[A[j]] - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    A = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br>    B = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A))]<br>    k = <span class="hljs-built_in">max</span>(A)<br>    count_sort(A, B, k)<br>    <span class="hljs-built_in">print</span>(B)<br><span class="hljs-comment"># output: [2, 2, 3, 3, 3, 4, 5, 10]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>算法导论</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏（去掉）Hexo 命令行执行 hexo d 时出现的 warning LF will be replaced by CRLF 警告信息</title>
    <link href="/2021/04/21/%E9%9A%90%E8%97%8F%EF%BC%88%E5%8E%BB%E6%8E%89%EF%BC%89Hexo-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C-hexo-d-%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84-warning-LF-will-be-replaced-by-CRLF-%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF/"/>
    <url>/2021/04/21/%E9%9A%90%E8%97%8F%EF%BC%88%E5%8E%BB%E6%8E%89%EF%BC%89Hexo-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C-hexo-d-%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84-warning-LF-will-be-replaced-by-CRLF-%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>Hexo 在部署到 Github 上时，即执行 <code>hexo d</code>命令时，命令行出现这样的警告</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210421221511.png" /></p><p>这个警告表示 Git 会把 <code>LF</code> 替换为<code>CRLF</code>，这个警告并没有什么不好的影响，所以我决定把它给隐藏掉。</p><h3 id="解决方法">解决方法</h3><p>Git 命令行输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git config --global core.autocrlf <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更改 VSCode 的缩进空格数</title>
    <link href="/2021/04/14/%E6%9B%B4%E6%94%B9-VSCode-%E7%9A%84%E7%BC%A9%E8%BF%9B%E7%A9%BA%E6%A0%BC%E6%95%B0/"/>
    <url>/2021/04/14/%E6%9B%B4%E6%94%B9-VSCode-%E7%9A%84%E7%BC%A9%E8%BF%9B%E7%A9%BA%E6%A0%BC%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>VSCode 出现了一个吊诡的 Bug，之前按 Tab 键一直是好好的 4个空格的大小，今天突然就变成了 2 个空格大小，而且改 Preference中的设置竟然没有作用，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414133831.png"alt="20210414133831" /></p><p>于是乎，寻找到了一种新的方法。</p><h3 id="问题解决">问题解决</h3><p>我们可以直接点击下面的状态栏，然后 change view，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134152.png"alt="20210414134152" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134121.png"alt="20210414134121" /></p><p>将 2 改成 4 即可</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134233.png"alt="20210414134233" /></p><p>改完后状态栏是这样的</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134013.png"alt="20210414134013" /></p><p>这下就 ok 了。</p><h3 id="其他">其他</h3><p>这里附上打开和关闭下方状态栏的方法</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210414134451.png"alt="20210414134451" /></p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django.template.exceptions.TemplateSyntaxError: staticfiles is not a registered tag library. 问题解决</title>
    <link href="/2021/04/14/django-template-exceptions-TemplateSyntaxError-staticfiles-is-not-a-registered-tag-library-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/04/14/django-template-exceptions-TemplateSyntaxError-staticfiles-is-not-a-registered-tag-library-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>Django 在加载静态文件时报了一个错误</p><div class="hljs code-wrapper"><pre><code class="hljs">django.template.exceptions.TemplateSyntaxError: staticfiles is not a registered tag library.</code></pre></div><p>导致加载不出来 html 页面</p><h3 id="问题解决">问题解决</h3><p>把模板文件（即 html 文件）中的</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;% load staticfiles %&#125;<br>&#123;% load static from staticfiles %&#125;<br>&#123;% load admin_static %&#125;<br></code></pre></div></td></tr></table></figure><p>改成</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;% load static %&#125;<br></code></pre></div></td></tr></table></figure><p>按：出现这样原因其实是版本的问题，现在用的是 Django 3.0版本，而之前则是 Django 2.0。</p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django 编写 URL 相关（普通和正则）</title>
    <link href="/2021/04/13/Django-%E7%BC%96%E5%86%99-URL-%E7%9B%B8%E5%85%B3%EF%BC%88%E6%99%AE%E9%80%9A%E5%92%8C%E6%AD%A3%E5%88%99%EF%BC%89/"/>
    <url>/2021/04/13/Django-%E7%BC%96%E5%86%99-URL-%E7%9B%B8%E5%85%B3%EF%BC%88%E6%99%AE%E9%80%9A%E5%92%8C%E6%AD%A3%E5%88%99%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>正规详细的参考资料可以参考官方文档：<ahref="https://docs.djangoproject.com/zh-hans/3.2/topics/http/urls/"class="uri">https://docs.djangoproject.com/zh-hans/3.2/topics/http/urls/</a></p><p>这里仅仅是记录一下几个我在学习过程中的例子和踩过的坑。</p><h3 id="示例一编写一个简单的-url">示例一：编写一个简单的 URL</h3><p>首先，在站点目录的 <code>url.py</code> 中编写 URL 规则</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413195445.png"alt="20210413195445" /></p><p>这个是创建项目（使用 PyCharm）时自动生成的目录。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;index.urls&#x27;</span>)), <span class="hljs-comment"># 函数 include() 允许引用其它 URLconfs，URL 为空，代表网站的域名是 localhost(127.0.0.1:8000)，通常是网站的首页</span><br>]<br></code></pre></div></td></tr></table></figure><p>说明</p><ul><li><code>from django.urls import include</code> 这行代码对应<code>path('', include('index.urls'))</code>，使用自己加的 APP的文件下的 <code>urls.py</code> 必须要这样做</li></ul><p>然后在 index 文件夹下编写 <code>urls.py</code>，上面引用的<code>index.urls</code> 就是这个文件</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413200431.png"alt="20210413200431" /></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>]<br></code></pre></div></td></tr></table></figure><p>说明</p><ul><li>这里的 <code>from . import views</code> 表示引用当前文件夹下的<code>views.py</code></li></ul><p>然后我们需要在 <code>views.py</code> 文件中编写 <code>index()</code>函数</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>注释下面的代码即后加的代码。</p><p>最后，我们可以运行项目，然后在浏览器中打开<code>http://127.0.0.1:8000/</code> 测试一下了</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413200846.png"alt="20210413200846" /></p><p>因为我们之前的 <code>path()</code>第一个参数设置的是空字符串，所以，我们在浏览器地址栏输入的地址后，就会最终执行<code>index()</code> 函数，然后显示相关信息。</p><h3 id="示例二带变量的-url">示例二，带变量的 URL</h3><p>注意，下面的操作全部是在 <code>index</code> 文件夹下。</p><h4 id="普通写法">普通写法</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>    <span class="hljs-comment"># 添加带有字符类型、整型和 slug 的 URL</span><br>    path(<span class="hljs-string">&#x27;&lt;year&gt;/&lt;int:month&gt;/&lt;slug:day&gt;&#x27;</span>, views.mydate), <span class="hljs-comment"># 这里的 year </span><br>]<br></code></pre></div></td></tr></table></figure><p>然后编写 <code>mydate()</code> 函数</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mydate</span>(<span class="hljs-params">request, year, month, day</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-built_in">str</span>(year) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(month) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(day))<br></code></pre></div></td></tr></table></figure><p>接下来的操作没什么不同。</p><h4 id="正则表达式写法">正则表达式写法</h4><p>这也是我踩坑的写法。</p><p><code>urls.py</code> 文件</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>    <span class="hljs-comment"># 添加带有字符类型、整型和 slug 的 URL</span><br>    <span class="hljs-comment"># path(&#x27;&lt;year&gt;/&lt;int:month&gt;/&lt;slug:day&gt;&#x27;, views.mydate), # 这里的 year 相当于 str:year</span><br>    re_path(<span class="hljs-string">&#x27;(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;).html$&#x27;</span>, views.mydate),<br>]<br></code></pre></div></td></tr></table></figure><p>说明</p><ul><li>这里正则表达式最好要以 <code>$</code> 结尾，不然，在<code>.html</code> 后面输入无限长的字符串程序也能正常访问。</li></ul><p>然后编写 <code>mydate()</code> 函数</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mydate</span>(<span class="hljs-params">request, year, month, day</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-built_in">str</span>(year) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(month) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(day))<br></code></pre></div></td></tr></table></figure><p>然后运行，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413201701.png"alt="20210413201701" /></p><p>这里是正确的写法。我踩的坑其实是把正则表达式给写错了，具体就是多写了一个花括号<code>&#125;</code>，然后访问 URL 时就总是 404。</p><h3 id="其他">其他</h3><p>在写上面的正则表达式时，我测试过这样一种写法</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">re_path(<span class="hljs-string">&#x27;(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.mydate),<br></code></pre></div></td></tr></table></figure><p>即，利用正则表达式的规则，强制 URL必须以正斜杠结尾，但是，实际测试时，发现结尾不写正斜杠也能够正常访问。原因是Django 中有这样一个配置 <code>APPEND_SLASH</code>，它的默认值是<code>True</code>，作用是如果 URL 结尾没有正斜杠，那么 Django会默认把它加在末尾。这个变量我们可以在<code>django/conf/global_settings</code> 中找到。如果我们想要更改其为<code>False</code>，只需要在项目的站点目录下的 <code>settings.py</code>中写下如下代码即可</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">APPEND_SLASH = <span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><p><code>APPEND_SLASH</code> 在源码中的位置 ↓</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413202800.png"alt="20210413202800" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210413202721.png"alt="20210413202721" /></p><p>参考：<ahref="https://stackoverflow.com/questions/45784191/django-is-append-slash-set-to-true-even-if-not-in-settings-py">stackoverflow</a><a href="https://www.osgeo.cn/django/topics/http/urls.html">文档</a> <ahref="https://docs.djangoproject.com/zh-hans/3.2/topics/http/urls/">官方文档</a>《玩转 Django 2.0 - 黄永祥》</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Linux 下，编写脚本或批处理。功能：在指定目录中全部 txt 文件的末尾追加一行，写入今天日期时间</title>
    <link href="/2021/04/09/%E5%9C%A8-Linux-%E4%B8%8B%EF%BC%8C%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E3%80%82%E5%8A%9F%E8%83%BD%EF%BC%9A%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%85%A8%E9%83%A8-txt-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%AB%E5%B0%BE%E8%BF%BD%E5%8A%A0%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%86%99%E5%85%A5%E4%BB%8A%E5%A4%A9%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <url>/2021/04/09/%E5%9C%A8-Linux-%E4%B8%8B%EF%BC%8C%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E3%80%82%E5%8A%9F%E8%83%BD%EF%BC%9A%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%85%A8%E9%83%A8-txt-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%AB%E5%B0%BE%E8%BF%BD%E5%8A%A0%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%86%99%E5%85%A5%E4%BB%8A%E5%A4%A9%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>脚本如下</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>filenames=$(<span class="hljs-built_in">ls</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>*.txt)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$filenames</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-variable">$filenames</span><br><span class="hljs-keyword">do</span><br>        regular=$(<span class="hljs-built_in">tail</span> -n 1 $1<span class="hljs-variable">$file</span>)<br>        <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$regular</span>&quot;</span> =~ [0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;* ]];<span class="hljs-keyword">then</span><br>                sed -i <span class="hljs-string">&#x27;$d&#x27;</span> $1<span class="hljs-variable">$file</span><br>                <span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>` &gt;&gt; $1<span class="hljs-variable">$file</span><br>        <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>` &gt;&gt; $1<span class="hljs-variable">$file</span><br>        <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware 安装 Ubuntu 18.04</title>
    <link href="/2021/04/08/VMware-%E5%AE%89%E8%A3%85-Ubuntu-18-04/"/>
    <url>/2021/04/08/VMware-%E5%AE%89%E8%A3%85-Ubuntu-18-04/</url>
    
    <content type="html"><![CDATA[<p>首先，准备好 Ubuntu 的镜像，然后开始。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194653.png"alt="20210318194653" /></p><p>这里选择自定义</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194751.png"alt="20210318194751" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194849.png"alt="20210318194849" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318194907.png"alt="20210318194907" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195103.png"alt="20210318195103" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195341.png"alt="20210318195341" /></p><p>这里分配了 4 GB 内存</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195416.png"alt="20210318195416" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195454.png"alt="20210318195454" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195518.png"alt="20210318195518" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195529.png"alt="20210318195529" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195559.png"alt="20210318195559" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195702.png"alt="20210318195702" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195718.png"alt="20210318195718" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195738.png"alt="20210318195738" /></p><p>然后点击完成即可。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318195911.png"alt="20210318195911" /></p><p>之后启动虚拟机即可。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318200211.png"alt="20210318200211" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318200238.png"alt="20210318200238" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318200405.png"alt="20210318200405" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202515.png"alt="20210318202515" /></p><p>这里的清空磁盘只是清空虚拟磁盘，所以不必在意。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202646.png"alt="20210318202646" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202727.png"alt="20210318202727" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318202824.png"alt="20210318202824" /></p><p>注意，安装完毕之后，重启时出现<code>please remove the installation...</code>，解决办法如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210318203601.png"alt="20210318203601" /></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 下为 Linux 内核增加 2 个新的系统调用，并启用新的内核</title>
    <link href="/2021/04/07/Ubuntu-%E4%B8%8B%E4%B8%BA-Linux-%E5%86%85%E6%A0%B8%E5%A2%9E%E5%8A%A0-2-%E4%B8%AA%E6%96%B0%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%8C%E5%B9%B6%E5%90%AF%E7%94%A8%E6%96%B0%E7%9A%84%E5%86%85%E6%A0%B8/"/>
    <url>/2021/04/07/Ubuntu-%E4%B8%8B%E4%B8%BA-Linux-%E5%86%85%E6%A0%B8%E5%A2%9E%E5%8A%A0-2-%E4%B8%AA%E6%96%B0%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%8C%E5%B9%B6%E5%90%AF%E7%94%A8%E6%96%B0%E7%9A%84%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h3 id="下载内核">下载内核</h3><p>首先，到官网（<a href="https://www.kernel.org/"class="uri">https://www.kernel.org/</a>）下载内核。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407193656.png"alt="20210407193656" /></p><p>因为之前编译过一次内核，所以这次没有选择最新的 <code>5.11.11</code>版本。</p><p>下载完之后，直接拖进虚拟机的任意一个目录即可。</p><h3 id="解压内核压缩包">解压内核压缩包</h3><p>进入刚刚放置内核文件的目录，右键解压，或者在命令行解压</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar -Jxvf linux-5.11.11.tar.xz<br></code></pre></div></td></tr></table></figure><p>注意，<code>tar -Jxvf</code> 的 <code>J</code> 要大写。</p><p>然后，将解压好的文件从当前目录移动到 <code>/usr/src/</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo <span class="hljs-built_in">mv</span> linux-5.10.27/ /usr/src/<br></code></pre></div></td></tr></table></figure><h3 id="安装相关依赖">安装相关依赖</h3><p>安装前，先执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><p>然后，依次安装下面的依赖</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get install libncurses5-dev openssl libssl-dev<br>$ sudo apt-get install build-essential openssl<br>$ sudo apt-get install pkg-config<br>$ sudo apt-get install libc6-dev<br>$ sudo apt-get install bison<br>$ sudo apt-get install flex<br>$ sudo apt-get install libelf-dev<br>$ sudo apt-get install zlibc minizip<br>$ sudo apt-get install libidn11-dev libidn11<br></code></pre></div></td></tr></table></figure><p>如果以前有安装过这些依赖，则跳过这一步。</p><h3 id="添加自定义的系统调用">添加自定义的系统调用</h3><p>进入相关目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/src/linux-5.10.27/<br></code></pre></div></td></tr></table></figure><p>打开可以向其中添加自定义系统调用号的文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit <span class="hljs-built_in">arch</span>/x86/entry/syscalls/syscall_64.tbl <br></code></pre></div></td></tr></table></figure><p>如图所示，442 和 443 是自己添加的系统调用的调用号</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408222421.png"alt="20210408222421" /></p><p>保存后关闭窗口。</p><p>需要注意的一点是，这里的第三列的内容是和后面的 <code>sys_</code>后面的内容是一致的，千万不要把它们搞错了！我就是因为这个问题导致后面内核编译到最后一步时，报了一个找不到我自己定义的函数的引用。</p><p>还有，这里使用 <code>sudo gedit</code> 会报一些warning，这个不要理会，这个是 gedit本身的问题，它在命令行调用就会出现这样的警告。</p><p>然后输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit include/linux/syscalls.h <br></code></pre></div></td></tr></table></figure><p>编辑文件，添加函数声明，这里的函数声明应该与上一步定义的系统调用中的函数一致</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408222944.png"alt="20210408222944" /></p><p>添加系统调用的函数定义</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit kernel/sys.c<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* My own system calls */</span><br>SYSCALL_DEFINE0(first)<br>&#123;<br>        printk(<span class="hljs-string">&quot;My first system call\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>SYSCALL_DEFINE1(second, <span class="hljs-type">int</span>, number)<br>&#123;<br>        printk(<span class="hljs-string">&quot;My second system call\n&quot;</span>);<br>        printk(<span class="hljs-string">&quot;The number you enter is %d\n&quot;</span>, number);<br>        <span class="hljs-keyword">return</span> number;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408223101.png"alt="20210408223101" /></p><p>这里的两个函数就是自己增加的系统调用。</p><p>使用虚拟机的朋友，建议在这里拍一个快照。</p><h3 id="编译内核">编译内核</h3><p>首先，输入以下命令并执行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo make mrproper<br>sudo make clean<br></code></pre></div></td></tr></table></figure><p>注意，这里因为执行了<code>clean</code>，所以下面的编译时间会有点长，大概五十分钟到一个小时不等。</p><p>然后执行以下命令，进入图形配置界面</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ make menuconfig<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407202347.png"alt="20210407202347" /></p><p>这里我们直接 Save，然后退出即可，然后开始编译</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make -j4<br></code></pre></div></td></tr></table></figure><p><code>-j4</code> 表示将编译工作分成 4 个 jobs，每一个 job分别在单独的核上运行。当然，前提是我们的机器得是多核的才行。比如，我的机器是4 核的，这里就用 <code>-j4</code>。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407171823.png"alt="20210407171823" /></p><p>以上表示编译好了（只要最后不报错，就是编译成功了）。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make modules_install<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172434.png"alt="20210407172434" /></p><p>以上表示模块安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make install<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172707.png"alt="20210407172707" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408223657.png"alt="20210408223657" /></p><p>最后执行<code>reboot</code>（即重启），然后开机检查内核版本，发现变成了我们安装的<code>5.11.11</code>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">uname</span> -r<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408223858.png"alt="20210408223858" /></p><h3 id="检验添加的系统调用">检验添加的系统调用</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gedit test.c<br></code></pre></div></td></tr></table></figure><p>然后写入以下内容</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 442 long sys_first(void)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;System call sys_first return %ld\n&quot;</span>, syscall(<span class="hljs-number">442</span>));<br><br>    <span class="hljs-comment">//443 long sys_second(int)</span><br>    <span class="hljs-type">long</span> temp;<br>    temp = syscall(<span class="hljs-number">443</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;System call sys_second return %ld\n&quot;</span>, temp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408224750.png"alt="20210408224750" /></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo gcc -o <span class="hljs-built_in">test</span> test.c<br>$ sudo ./test<br></code></pre></div></td></tr></table></figure><p>运行结果如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408225000.png"alt="20210408225000" /></p><p>再输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo dmesg<br></code></pre></div></td></tr></table></figure><p>查看系统进程，可以看到系统调用的输出</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210408225140.png"alt="20210408225140" /></p><p>可以发现，这里打印了我们之前 <code>printk</code> 中的语句。</p><p>到这里，就大功告成了。</p><p>参考：<ahref="https://blog.csdn.net/weixin_44224230/article/details/89945899?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1329187.422.16177947900639469&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control">操作系统作业：Ubuntu编译一个新内核以及添加系统调用</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>操作系统作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 下编译新的 Linux 内核</title>
    <link href="/2021/04/07/Ubuntu-%E4%B8%8B%E7%BC%96%E8%AF%91%E6%96%B0%E7%9A%84-Linux-%E5%86%85%E6%A0%B8/"/>
    <url>/2021/04/07/Ubuntu-%E4%B8%8B%E7%BC%96%E8%AF%91%E6%96%B0%E7%9A%84-Linux-%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>这是一次操作系统布置的作业。本来第一次是布置的课后作业，只是说让编译一个新的Linux内核，然后我就按照本文的步骤编译并启用了新的内核。后来做实验时布置的任务又说是“裁剪内核并编译”，真是有点懵逼。实验之前，一直在纠结裁减内核，究竟怎么裁剪嘛！因为在编译内核的过程中，有一个步骤是<code>$ sudo make menuconfig</code>，这个里面可以选择或者去掉内核的模块，其实这里就是相当于裁剪内核了，而且我们就是在不知道裁剪内核这个概念的情况下一路走下去，最后安装的内核也是裁剪之后的内核。</p><p>最后老师在实验之前，讲了，裁剪内核这个实验我们之前做过。好吧，果然，在他眼里，裁剪内核和编译一个新的内核没有什么本质的区别。</p><h3 id="下载内核">下载内核</h3><p>首先，到官网（<a href="https://www.kernel.org/"class="uri">https://www.kernel.org/</a>）下载内核。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407133515.png"alt="20210407133515" /></p><p>下载好之后，因为我这个 Ubuntu 是 Windows下的虚拟机，所以，直接将文件拖入虚拟机的任意一个文件夹即可。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407134031.png"alt="20210407134031" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407134159.png"alt="20210407134159" /></p><h3 id="解压-tar.xz-包">解压 tar.xz 包</h3><p>进入刚刚放置内核文件的目录，右键解压，或者在命令行解压</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar -Jxvf linux-5.11.11.tar.xz<br></code></pre></div></td></tr></table></figure><p>注意，<code>tar -Jxvf</code> 的 <code>J</code> 要大写。</p><h3 id="安装依赖">安装依赖</h3><p>安装之前，先执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><p>一般来说，安装下面的 9 个依赖就好了</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get install libncurses5-dev openssl libssl-dev<br>$ sudo apt-get install build-essential openssl<br>$ sudo apt-get install pkg-config<br>$ sudo apt-get install libc6-dev<br>$ sudo apt-get install bison<br>$ sudo apt-get install flex<br>$ sudo apt-get install libelf-dev<br>$ sudo apt-get install zlibc minizip<br>$ sudo apt-get install libidn11-dev libidn11<br></code></pre></div></td></tr></table></figure><h3 id="开始编译新的内核">开始编译新的内核</h3><h4 id="进入解压出来的目录">进入解压出来的目录</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> linux-5.11.11/<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407164541.png"alt="20210407164541" /></p><p>这里可以给虚拟机拍一个快照。这是为了后续出错时，可以回到这个点。（如果不知道快照，可以自行搜索引擎搜索，这个真的很方便）</p><h4 id="使用现存内核的配置文件">使用现存内核的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo <span class="hljs-built_in">cp</span> /boot/config-5.11.7 .config<br></code></pre></div></td></tr></table></figure><h4 id="应用现存配置文件">应用现存配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make oldconfig<br></code></pre></div></td></tr></table></figure><p>这个命令的作用是，读取现有的<code>.config</code>（注意，这个是隐藏文件，使用 <code>ls</code>命令无法查看）文件，并提示用户输入当前内核源中在文件中找不到的选项。当采用现有配置并将其移至新内核时，这很有用。</p><p>遇到需要选择的选项直接选 <code>y</code> 或者回车即可。</p><h4 id="仅安装已有-module">仅安装已有 module</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make localmodconfig<br></code></pre></div></td></tr></table></figure><h4 id="配置其他编译选项">配置其他编译选项</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make menuconfig<br></code></pre></div></td></tr></table></figure><p>这个命令执行完之后会出现一个图形界面，如果需要裁剪内核，那么，我们需要对这里的选项进行一些配置。这里我们直接使用右方向键，跳到<code>Exit</code> 选项，然会回车退出即可。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407202347.png"alt="20210407202347" /></p><h4 id="开始编译">开始编译</h4><p>输入以下命令开始编译</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make -j4<br></code></pre></div></td></tr></table></figure><p>这里的 <code>-j</code>选项后面的数字表示使用多进程并发编译的意思，我这里选择 4，也可以选择 2或者不要 <code>-j4</code> 这个选项。我这里因为使用了 4个进程，所以编译基本在两分钟以内就完成了。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407171823.png"alt="20210407171823" /></p><p>以上表示 make 好了。</p><h3 id="安装-linux-内核">安装 Linux 内核</h3><h4id="返回上一级目录然后将文件夹移动到-src-目录">返回上一级目录，然后将文件夹移动到src 目录</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ..<br>$ sudo <span class="hljs-built_in">mv</span> linux-5.11.11/ /usr/src/<br></code></pre></div></td></tr></table></figure><h4 id="进入新目录然后安装-modules">进入新目录，然后安装 modules</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/src/linux-5.11.11/<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make modules_install<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172434.png"alt="20210407172434" /></p><p>以上表示 modules 安装完成。</p><h4 id="安装内核">安装内核</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo make install<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172707.png"alt="20210407172707" /></p><p>以上表示新内核安装完成。</p><h3 id="检验安装成果">检验安装成果</h3><p>执行以下命令检查内核版本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">uname</span> -r<br></code></pre></div></td></tr></table></figure><p>之前是 <code>5.11.7</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407172819.png"alt="20210407172819" /></p><p>重启 Ubuntu 18.04.5 系统并检查内核版本，结果如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210407173212.png"alt="20210407173212" /></p><p>发现内核版本变成了 <code>5.11.11</code>，表明安装内核成功。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未排序数组中累加和小于或等于给定值的最长子数组长度</title>
    <link href="/2021/04/06/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E5%B0%8F%E4%BA%8E%E6%88%96%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/"/>
    <url>/2021/04/06/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E5%B0%8F%E4%BA%8E%E6%88%96%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>给定一个无序数组 arr，其中元素可正、可负、可 0。给定一个整数 k，求arr 所有的子数组中累加和小于或等于 k 的最长子数组长度。</p><p>例如：arr = [3, -2, -4, 0, 6]，k = -2，相加和小于或等于 -2的最长子数组为 {3, -2, -4, 0}，所以结果返回 4。</p><p>要求：时间复杂度为 <span class="math inline">\(O(N)\)</span>。</p><h4 id="解答">解答</h4><p>首先是 <span class="math inline">\(O(NlogN)\)</span>时间复杂度的解法，这个解法和之前的求解未排序数组中累加和为给定值的最长数组系列问题类似。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 时间复杂度为 O(NlogN)，额外空间复杂度为 O(N)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span>[] helpArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 辅助数组</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    helpArr[<span class="hljs-number">0</span>] = sum; <span class="hljs-comment">// 第一个元素为 0，表示当没有任何数时的累加和为 0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i != arr.length; i++) &#123;<br>        sum += arr[i];<br>        helpArr[i + <span class="hljs-number">1</span>] = Math.max(sum, helpArr[i]);<br>    &#125;<br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i != arr.length; i++) &#123;<br>        sum += arr[i];<br>        <span class="hljs-comment">// 最关键之处</span><br>        <span class="hljs-comment">// 找到 helpArr 中大于等于 sum - k 第一次出现的位置，</span><br>        <span class="hljs-comment">// 这个位置等价于以 i 为结尾位置的长度最长的符合要求的子数组</span><br>        pre = getLessIndex(helpArr, sum - k);<br>        len = pre == -<span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : i - pre + <span class="hljs-number">1</span>;<br>        res = Math.max(res, len);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">// 二分查找，查找 arr 数组中第一次出现的大于等于 num 的索引位置，如果没找到，则返回 -1</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLessIndex</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>        mid = low + (high - low) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] &gt;= num) &#123;<br>            res = mid;<br>            high = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>完美的 <span class="math inline">\(O(N)\)</span>的解法，这种解法也可以看成是 “滑动窗口” 的应用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 时间复杂度为 O(N) 的解法，额外空间复杂度为 O(N) 的解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxLengthAwesome</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>[] minSums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length]; <span class="hljs-comment">// minSums[i] 表示必须以 arr[i] 开头的所有子数组中，能</span><br>    <span class="hljs-type">int</span>[] minSumEnds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length]; <span class="hljs-comment">// minSumEnds[i] 表示得到了最小累加和的子数组的右边界</span><br>    minSums[arr.length - <span class="hljs-number">1</span>] = arr[arr.length - <span class="hljs-number">1</span>];<br>    minSumEnds[arr.length - <span class="hljs-number">1</span>] = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 从右向左遍历，填充 minSums 和 minSumEnds 的值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>        <span class="hljs-keyword">if</span> (minSums[i + <span class="hljs-number">1</span>] &lt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果 i 的右面的元素的最小累加和小于等于 0（原书这里没有等于号，但是加上等于号</span><br>            minSums[i] = arr[i] + minSums[i + <span class="hljs-number">1</span>];<br>            minSumEnds[i] = minSumEnds[i + <span class="hljs-number">1</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            minSums[i] = arr[i];<br>            minSumEnds[i] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// i 是窗口的最左位置，end 是窗口最右位置的下一个位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// 如果 end 没有越界，且当前子数组还可以继续往右扩</span><br>        <span class="hljs-keyword">while</span> (end &lt; arr.length &amp;&amp; sum + minSums[end] &lt;= k) &#123;<br>            sum += minSums[end];<br>            end = minSumEnds[end] + <span class="hljs-number">1</span>;<br>        &#125;<br>        res = Math.max(res, end - i);<br>        <span class="hljs-keyword">if</span> (end &gt; i) &#123; <span class="hljs-comment">// 窗口内还有数</span><br>            sum -= arr[i];<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 窗口已经没有数了，说明从 i 开头的所有子数组累加和都不可能小于或等于 k</span><br>            end = i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">// 测试</span><br>    <span class="hljs-type">GetMaxLengthAwesome_11</span> <span class="hljs-variable">gmla</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetMaxLengthAwesome_11</span>();<br>    System.out.println(gmla.maxLengthAwesome(arr, k));<br>    System.out.println(gmla.maxLength(arr, k));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code class="hljs">55</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个怪异的 Bug：Press ENTER or type command to continue</title>
    <link href="/2021/04/05/%E4%B8%80%E4%B8%AA%E6%80%AA%E5%BC%82%E7%9A%84-Bug%EF%BC%9APress-ENTER-or-type-command-to-continue/"/>
    <url>/2021/04/05/%E4%B8%80%E4%B8%AA%E6%80%AA%E5%BC%82%E7%9A%84-Bug%EF%BC%9APress-ENTER-or-type-command-to-continue/</url>
    
    <content type="html"><![CDATA[<p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405234503.png"alt="20210405234503" /></p><p>问题就是，我进入了这个 vim的配置文件之后，敲了几下键盘，然后就陷入了出不来的死循环之中。</p><p>然而，最后，根据 vim 的命令行的提示，是使用了如下的命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">:qa!<br></code></pre></div></td></tr></table></figure><p>才成功退出来。</p>]]></content>
    
    
    <categories>
      
      <category>Bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bugs</tag>
      
      <tag>Linux</tag>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux ls -l 命令输出结果中的 total 的含义</title>
    <link href="/2021/04/05/Linux-ls-l-%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84-total-%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2021/04/05/Linux-ls-l-%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84-total-%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405224205.png"alt="20210405224205" /></p><p>我们观察这个 total的值，显然，如果我们简单地把下面的所有文件的第五列的文件字节大小给加起来，得到的结果和这个total 是不能画等号的。</p><p>那么，问题就来了，这个 total 究竟指的是什么呢？</p><p>我们使用 <code>ls -lh</code> 命令来查看文件的具体大小</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405224059.png"alt="20210405224059" /></p><p>注意，这个命令列出来的文件大小的单位是 <code>K</code>，即<code>KB</code>（不满 1.0 KB的还是以字节为单位，并显示其以字节为单位应该显示的数字），但是，我们再重新加一下，发现其结果还是和<code>total</code> 不相等。原因什么呢？</p><p>这是因为，Linux 中有一个概念，叫做 <code>Block</code>，我们可以把这个<code>Block</code> 想象成一个容器，这个容器的容量是固定的，假设是<code>unit_size</code>，那么，<code>total</code>的算法是这样的，它会对每一个文件进行计算，根据文件的大小计算其需要多少个这样的容器，对于不满<code>unit_size</code>的我们要向上取整。注意，这里是每一个文件计算一次。</p><p>下面，举一个具体的例子。</p><p>我们首先执行一个命令，查看当前系统的 <code>Block Size</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> -<span class="hljs-built_in">fc</span> %s .<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405225101.png"alt="20210405225101" /></p><p>这里发现我的系统的 <code>Block Size</code> 为4096，单位是字节，转换成 <code>KB</code> 也就是<code>4KB</code>，那么，我们分别来计算上面列出来的文件各自需要多少个这样的<code>Block Size</code>。</p><ul><li>首先是 <code>_config.lanscape.yml</code>，文件大小为 0，故需要 0 个<code>Block</code></li><li>对于 <code>_config.yml</code>，文件大小为 2.5K，故需要 1 个<code>Block</code>，这里因为不满 4K 要取整，故最后需要 1 个<code>Block</code>，下同</li><li>对于 <code>db.json</code>，文件大小为 22K，故需要 6 个<code>Block</code></li><li>......</li><li>对于 <code>test.c</code>，注意这里的文件大小是 78B，也就是 78个字节，向上取整，故需要 1 个 <code>Block</code></li><li>对于 <code>themes</code>，文件大小为 4.0K，故需要 1 个<code>Block</code></li></ul><p>我们把所有的 <code>Block</code> 列式相加，再乘以每个<code>Block</code> 的大小，得</p><p><span class="math display">\[(0 + 1 + 6 + 1 + 1 + 15 + 1 + 1 + 1 + 1+ 1 + 1) \times 4 = 120K\]</span></p><p>这样，结果就对得上了。</p><p>参考：<ahref="https://stackoverflow.com/questions/7401704/why-doesnt-total-from-ls-l-add-up-to-total-file-sizes-listed#comment117527984_7401744">StackOverflow相关</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux 命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有用的一些非常用的 Linux 命令</title>
    <link href="/2021/04/05/%E6%9C%89%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%B8%B8%E7%94%A8%E7%9A%84-Linux-%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/04/05/%E6%9C%89%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%B8%B8%E7%94%A8%E7%9A%84-Linux-%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="查看-linux-的-block-size-的命令">查看 Linux 的 Block Size的命令</h4><p>命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> -<span class="hljs-built_in">fc</span> %s .<br></code></pre></div></td></tr></table></figure><p>作用是查看 Block Size 的数值。具体效果如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405222210.png"alt="20210405222210" /></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux 命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常见命令学习与备忘</title>
    <link href="/2021/04/05/Linux-%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%87%E5%BF%98/"/>
    <url>/2021/04/05/Linux-%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%87%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基础命令">基础命令</h3><h4 id="cat-命令">cat 命令</h4><p><code>cat</code>，即concatenate，中文是连接的意思。因此，如果有多个文件的话，它会把这些文件的内容拼接起来显示。</p><p>使用格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> file1 file2...<br></code></pre></div></td></tr></table></figure><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> _config.yml<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405185854.png" /></p><h4 id="ls-命令">ls 命令</h4><p><code>ls</code>，即list，作用是显示指定目录的内容，默认参数为当前目录。</p><p>选项参数说明</p><ul><li><code>-l</code>：list with long format，<code>l</code> 表示 long的意思，作用是显示详细的列表</li><li><code>-F</code>：add one char of "*/=&gt;@|" toentries，即在列出的文件名称后加一个符号，显示文件类型信息，例如可执行文档加<code>*</code>，目录则加 <code>/</code></li><li><code>-lh</code>：list long format with readable filesize，即列出带有具有可读性的文件大小数据的信息</li></ul><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -l<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405193525.png" /></p><p>上面列出的文件中，第一列表示文件模式和权限，第二列表示链接数（即 linkcount，不过，这里的 link 是 hardlink），第三列是文件的所有者，第四列是用户组，第五列是文件大小，后面是文件最后更改的日期、时间以及文件名。</p><h4 id="cp-命令">cp 命令</h4><p><code>cp</code>，即 copy，用来复制文件。</p><p>选项参数说明</p><ul><li><code>-r</code>：copy directoriesrecursively。递归地复制文件夹。</li></ul><p>使用格式</p><p>将文件 <code>file1</code> 复制到文件 <code>file2</code>，如果<code>file2</code> 不存在，则会自动创建:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> file1 file2<br></code></pre></div></td></tr></table></figure><p>将多个文件（<code>file1 ... fileN</code>）复制到目录<code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> file1 ... fileN <span class="hljs-built_in">dir</span><br></code></pre></div></td></tr></table></figure><p>使用范例</p><p>将 <code>a.txt</code> 复制到 <code>b.txt</code>中，<code>b.txt</code> 本来并不存在</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> a.txt b.txt<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406130519.png" /></p><p>将 <code>a.txt</code> 和 <code>b.txt</code> 复制到 <code>new</code>这个新目录中，<code>new</code> 目录必须存在，因为 <code>cp</code>命令不会自动创建它（如果它本来不存在的话）。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406130728.png" /></p><p>附：使用 <code>cp a.txt b.txt</code> 命令时，如果 <code>b.txt</code>中原来有内容，那么，复制完之后，<code>b.txt</code> 中原来的内容将会被<code>a.txt</code> 中的内容覆盖掉。</p><h4 id="mv-命令">mv 命令</h4><p><code>mv</code>，即 move。<code>mv</code>主要用来将一个或多个文件或者目录从一个地方移动到另一个地方。它有两个不同的功能：</p><ul><li><ol type="i"><li>重命名一个文件或者文件夹</li></ol></li><li><ol start="2" type="i"><li>移动一组文件到另一个不同的文件夹中</li></ol></li></ul><p>使用格式</p><p>将文件名从 <code>file1</code> 重命名为 <code>file2</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">mv</span> file1 file2<br></code></pre></div></td></tr></table></figure><p>将多个文件（<code>file1 ... fileN</code>）移动到目录<code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">mv</span> file1 ... fileN <span class="hljs-built_in">dir</span><br></code></pre></div></td></tr></table></figure><p>使用范例</p><p>将 <code>a.txt</code> 重命名为 <code>c.txt</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">mv</span> a.txt c.txt<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406132001.png" /></p><p>将 <code>a.txt</code> 和 <code>c.txt</code> 移动到 <code>new</code>目录中：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">mv</span> a.txt c.txt new<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406132402.png" /></p><h4 id="touch-命令">touch 命令</h4><p><code>touch</code>，并不是缩写。<code>touch</code>命令用来创建文件。如果文件已经存在，则该命令会更新文件的时间戳。</p><p>使用格式</p><p>创建一个新的文件，内容为空：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> file<br></code></pre></div></td></tr></table></figure><h4 id="rm-命令">rm 命令</h4><p><code>rm</code>，即 remove here。<code>rm</code>命令用来删除文件，文件一旦被删除通常无法恢复（也就是说，通过某种手段，是可以恢复的）。</p><p>默认情况下，它不会删除目录。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406133409.png" /></p><p>使用格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">rm</span> file<br></code></pre></div></td></tr></table></figure><p>选项参数说明</p><ul><li><code>-f</code>：force deletion。强制删除。</li><li><code>-r</code>：recursivedeletion。递归删除。当使用这个选项时，<code>rm</code>可以删除目录。</li></ul><p>使用范例</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406133915.png" /></p><p>这里 <code>*</code>表示通配符，表示匹配当前目录下的任意文件或者文件夹。</p><h4 id="echo-命令">echo 命令</h4><p><code>echo</code> 命令将它的参数显示到标准输出。</p><p>使用范例</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210406133206.png" /></p><h4 id="cd-命令">cd 命令</h4><p><code>cd</code>，即 change directory。<code>cd</code>命令用来设置当前工作目录。当前工作目录是指我们的进程和 shell当前所在的目录。</p><p>使用格式</p><p>进入目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> <span class="hljs-built_in">dir</span><br></code></pre></div></td></tr></table></figure><p>如果不带 <code>dir</code> 参数，<code>cd</code>命令会返回我们的个人主目录，即我们登录系统后进入的目录。</p><h4 id="mkdir-命令">mkdir 命令</h4><p><code>mkdir</code>，即 make directory。<code>mkdir</code>命令用来创建新目录。</p><p>使用格式</p><p>创建目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">dir</span><br></code></pre></div></td></tr></table></figure><h4 id="rmdir-命令">rmdir 命令</h4><p><code>rmdir</code>，即 remove directory。<code>rmdir</code>命令用来删除目录（空目录）。如果要删除的目录里面有内容（文件和其他目录），命令会执行失败。我们可以使用<code>rm -rf</code> 来删除一个目录以及其中的所有内容。</p><p>使用格式</p><p>删除目录 <code>dir</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">rmdir</span> <span class="hljs-built_in">dir</span><br></code></pre></div></td></tr></table></figure><h3 id="中级命令">中级命令</h3><h4 id="grep-命令">grep 命令</h4><p><code>grep</code>，即 global regular expression print 的缩写。</p><p>使用范例</p><p>显示文件 <code>/etc/passwd</code> 中包含文本 root 的所有行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ grep root /etc/passwd<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405153031.png" /></p><p>查看目录 <code>/etc</code> 中所有包含 root 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ grep root /etc/*<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405153146.png" /></p><p><code>grep</code> 有几个重要的选项：</p><ul><li><code>-i</code>：不区分大小写</li><li><code>-v</code>：反转匹配，即匹配所有不匹配的行</li><li><code>-r</code>：递归查找，意思是在当前目录下递归搜索某个内容</li><li><code>-n</code>：在结果里显示行号</li></ul><p>我具体使用过的案例是在某一个文件夹下需要递归查找 <code>footer</code>这个字符串，并且需要显示行号，所用命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">grep footer ./themes/ -n -r<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405154002.png" /></p><h4 id="less-命令">less 命令</h4><p><code>less</code> 命令可以将内容分屏显示，按 <code>空格键</code>可查看下一屏，<code>B</code> 键查看上一屏幕，<code>Q</code> 键退出。</p><p>我们可以在 <code>less</code> 命令的输出结果中进行搜索。</p><ul><li>使用 <code>/word</code>从当前位置向前（这里的向前，代表的是向下的意思）搜索 <code>word</code>这个词</li><li>使用 <code>?word</code>从当前位置向后（这里的向后，代表的是向上的意思）搜索。当找到一个匹配时，按<code>N</code> 键跳到下一个匹配，按 <code>B</code> 键跳到上一个匹配</li></ul><p>使用范例</p><p>使用 <code>less</code> 查看输出结果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ grep ie /usr/share/dict/words | less<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405160912.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405160831.png" /></p><h4 id="pwd-命令">pwd 命令</h4><p><code>pwd</code>，即 Print Working Directory 的缩写。</p><p>功能是打印当前的工作目录名。</p><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span><br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405161309.png" /></p><h4 id="diff-命令">diff 命令</h4><p><code>diff</code> 命令用来查看两个文件之间的不同。</p><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ diff _config.yml _config.landscape.yml<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405161628.png" /></p><h4 id="file-命令">file 命令</h4><p><code>file</code> 命令用来查看一个文件的格式信息。</p><p>使用范例</p><p>查看文件 <code>_config.yml</code> 的格式信息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ file _config.yml<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405162651.png" /></p><h4 id="find-和-locate-命令">find 和 locate 命令</h4><p><code>find</code> 命令用来在目录中寻找文件。</p><p>使用格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ find <span class="hljs-built_in">dir</span> -name filename -<span class="hljs-built_in">print</span><br></code></pre></div></td></tr></table></figure><p>关于参数的说明</p><ul><li><code>-name filename</code>：表示查找名为 <code>filename</code>的文件</li><li><code>-print</code>：表示显示文件的路径名。注意，这个选项是默认存在的，也就是说，上面的命令其实是等价于<code>find dir -name filename</code> 的</li></ul><p>使用范例</p><p>查找当前目录下的 <code>_config.yml</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find . -name _config.yml -<span class="hljs-built_in">print</span><br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405170544.png" /></p><p>这里的 <code>.</code> 和 <code>./</code>等价，表示在当前目录下查找。注意，这个 <code>find</code>命令是递归查找所有文件的。</p><p><code>locate</code>命令是另外一个用来查找的命令。只是，它是在系统创建的文件索引中查找文件（因此速度更快）。有时候可能查找不到新文件，因为系统还没有将新文件加入到索引中。</p><h4 id="head-和-tail-命令">head 和 tail 命令</h4><p><code>head</code> 命令显示文件前 10 行内容。</p><p><code>tail</code> 命令显示文件最后 10 行内容。</p><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">head</span> /etc/passwd<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">tail</span> /etc/passwd<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405171404.png" /></p><h4 id="sort-命令">sort 命令</h4><p><code>sort</code> 命令将文件内所有行按照字典序快速排序。</p><p>选项参数说明</p><ul><li><code>-n</code>：按照数字顺序排序哪些以数字开头的行</li><li><code>-r</code>：反向排序</li></ul><p>使用范例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> _config.yml<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210405172428.png" /></p><h3 id="进阶命令">进阶命令</h3><h4 id="tar-命令">tar 命令</h4><p><code>tar</code>，即 tape archive。<code>tar</code>用来解压文件。</p><p>选项参数说明</p><ul><li><code>-f</code>：确定要解压的文件名，即后面要有将被解压的文件的名称</li><li><code>-v</code>：输出命令执行过程中的详细信息</li><li><code>-x</code>：extract files from an archivefile。提取一个压缩文件</li><li><code>-J</code>：Use archive through <code>xz</code></li></ul><p>使用范例</p><p>解压 Linux 内核文件到当前文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tar -Jxvf linux-5.11.11.tar.xz<br></code></pre></div></td></tr></table></figure><p>下面是各种类型文件的解压示例，这里用 file 表示文件名。</p><p>解压 tar 文件：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xvf file.tar</span><br></code></pre></div></td></tr></table></figure><p>解压 tar.gz 文件：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xzf file.tar.gz</span><br></code></pre></div></td></tr></table></figure><h3 id="其他命令">其他命令</h3><h4 id="apt-命令相关">apt 命令相关</h4><p><code>apt</code>，即 advanced package tool。</p><p>命令格式</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt update<br>$ sudo apt upgrade<br></code></pre></div></td></tr></table></figure><p>也可以使用 <code>apt-get</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><p>官方现在建议是使用 <code>apt</code>。</p><h3 id="常用命令示例">常用命令示例</h3><h4 id="locate-命令">locate 命令</h4><p>用于定位某一个文件的位置，如，寻找 <code>sys/types.h</code>这个文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ locate sys/types.h<br></code></pre></div></td></tr></table></figure><h4 id="whereis-命令">whereis 命令</h4><p>寻找 stdio.h 的位置</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ whereis stdio.h<br></code></pre></div></td></tr></table></figure><p>但是这个命令没有 <code>locate</code> 命令好用。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux 命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未排序数组中累加和为给定值的最长子数组系列问题</title>
    <link href="/2021/04/05/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/05/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>给定一个无序数组 arr，其中元素可正、可负、可 0。给定一个整数 k，求arr 所有的子数组中累加和为 k 的最长子数组长度。</p><p>补充问题 1：给定一个无序数组 arr，其中元素可正、可负、可 0。求 arr所有的子数组中正数与负数个数相等的最长子数组长度。</p><p>补充问题 2：给定一个无序数组 arr，其中元素只是 1 或 0。求 arr所有的子数组中 0 和 1 个数相等的最长子数组长度。</p><h4 id="解答">解答</h4><p>这题的主要思想是利用了这样一个数据<code>s(i))</code>，其中，<code>i</code>表示数组的索引，<code>s(i)</code> 表示从数组开头累加到 <code>i</code>索引处的累加值。</p><p>其次，使用了哈希表这一数据结构，我们用 <code>map</code>来表示，<code>map</code> 里存储的就是存储第一次出现的 <code>s(i)</code>以及 <code>i</code>。这里要注意的一点就是 <code>map</code> 中键为<code>0</code> 的键值对中存储的值是 <code>-1</code>，表示起始时<code>s(i)</code> 为 <code>0</code>。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 原问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// map 的 key 是 sum，i 是 s(i)，即从索引为 0 处一直累加到 i 处的值的结果</span><br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 下标从 -1 开始，初始时，放进 map 中的 sum 为 0</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        sum += arr[i];<br>        <span class="hljs-comment">// 这里相当于以 i 为终点，向前寻找最远的满足 arr[j..i] 的累加和为 k 的索引 j</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(sum - k)) &#123;<br>            len = Math.max(i - map.get(sum - k), len);<br>        &#125;<br>        <span class="hljs-comment">// 如果 map 中没有包含 sum，那就加入，否则不作任何操作，这样</span><br>        <span class="hljs-comment">// 可以保证 map 中存储的 i 是使得 s(i) 的值为 sum 的最小的索引</span><br>        <span class="hljs-keyword">if</span> (!map.containsKey(sum)) &#123;<br>            map.put(sum, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br><span class="hljs-comment">// 补充问题 1</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxLength_2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        arr[i] = arr[i] &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> getMaxLength(arr, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">// 补充问题 2</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxLength_3</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        arr[i] = arr[i] == <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> getMaxLength(arr, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-comment">// 测试</span><br>    <span class="hljs-type">GetMaxLength_10</span> <span class="hljs-variable">gml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetMaxLength_10</span>();<br>    System.out.println(gml.getMaxLength(arr, <span class="hljs-number">6</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code class="hljs">5</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未排序正数数组中累加和为给定值的最长子数组长度</title>
    <link href="/2021/04/04/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%AD%A3%E6%95%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/"/>
    <url>/2021/04/04/%E6%9C%AA%E6%8E%92%E5%BA%8F%E6%AD%A3%E6%95%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E7%B4%AF%E5%8A%A0%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>给定一个数组 arr，该数组无序，但每个值均为正数，再给定一个正数 k。求arr 的所有子数组中所有元素相加和为 k 的最长子数组长度。例如，arr =[1，2，1，1，1]，k = 3。累加和为3的最长子数组为 [1，1，1]，所以结果返回3。</p><h4 id="解答">解答</h4><p>这道题可以使用暴力求解的方法，直接来一个双循环即可，问题是，这显然不是好的解决方案。所以，我们需要借助双指针来求解。这里，我们使用<code>left</code> 和 <code>right</code> 分别来代替左指针和右指针。用<code>sum</code> 来代表从 <code>arr[left]</code> 到<code>arr[right]</code> 的累加值。</p><p>首先，它们的起始位置都是 <code>0</code>这个索引，然后，移动的规则是：</p><ul><li><p>1、如果 <code>sum &lt; k</code>，那么，<code>right</code>指针向右移动一格。这一步很好理解，我们在作暴力破解时，第二层循环也是这么做的，这里<code>right</code> 指针的作用就相当于暴力破解的第二层循环。</p></li><li><p>2、如果 <code>sum == k</code>，那么，<code>left</code>指针向右移动一格。类比暴力破解，这里就相当于 <code>left</code>对应的在第二层循环中 <code>right</code>指针后面的元素都直接被跳过了。为什么可以这样呢？原因就在于如果<code>right</code>指针向右移动的话，那么，这些所有被跳过的元素都是不符合情况的，因为无论怎么移动都会使得<code>sum</code> 比 <code>k</code> 要大。所以只好是 <code>left</code>指针向右移动一格了，这就相当于暴力循环中的第一层循环的索引加一。</p></li><li><p>3、如果 <code>sum &gt; k</code>，那么，<code>left</code>指针向右移动一格。这样做的原因是 <code>right</code>指针后面的元素都不符合要求。那么，还有一个问题，就是我们<code>left</code> 向右移动完一格之后，我们可以注意到，当前的<code>left</code> 到 <code>right</code>之间的元素都被跳过了（类比于暴力破解的话），为什么可以这样呢？这也是同样的道理，在当前<code>left</code> 的情况下，无论 <code>right</code>指向哪些被跳过元素中的哪一个，都是不合要求的，它们都会使<code>sum</code> 小于 <code>k</code>。</p></li></ul><p>我们按照上面的规则，不断地进行移动，直到 <code>right</code>指针到达了右边界为止。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span> || k &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right &lt; arr.length) &#123;<br>        <span class="hljs-keyword">if</span> (sum == k) &#123; <span class="hljs-comment">// 等于 k 的情况，左指针向右移动格，因为 right 右面的情况已经可以全部排除</span><br>            len = Math.max(len, right - left + <span class="hljs-number">1</span>);<br>            sum -= arr[left++];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; k) &#123; <span class="hljs-comment">// 小于 k 的情况，右指针向右移动一格，如果 right 到达了尽头，则说明接下来的所有情况都不符合，直接跳出循环即可</span><br>            right++;<br>            <span class="hljs-keyword">if</span> (right == arr.length) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            sum += arr[right];<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// sum &gt; k 的情况</span><br>            sum -= arr[left--];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-type">GetSubArrMaxLen_9</span> <span class="hljs-variable">gsaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetSubArrMaxLen_9</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> gsaml.getMaxLength(arr, <span class="hljs-number">3</span>);<br>    System.out.println(res);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><div class="hljs code-wrapper"><pre><code class="hljs">3</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遍历二叉树的神级方法（Morris 遍历）</title>
    <link href="/2021/04/04/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A5%9E%E7%BA%A7%E6%96%B9%E6%B3%95%EF%BC%88Morris-%E9%81%8D%E5%8E%86%EF%BC%89/"/>
    <url>/2021/04/04/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A5%9E%E7%BA%A7%E6%96%B9%E6%B3%95%EF%BC%88Morris-%E9%81%8D%E5%8E%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>给定一棵二叉树的头节点head，完成二叉树的先序、中序和后序遍历。如果二叉树的节点数为N，则要求时间复杂度为 O(N)，额外空间复杂度为 O(1)。</p><h4 id="解答">解答</h4><p>要想使得遍历二叉树的额外空间复杂度为 O(1)，那么就需要使用 Morris遍历方法。</p><p>Morris 方法的思路，讲得最好的我认为是这一篇博客：<ahref="https://www.cnblogs.com/anniekim/archive/2013/06/15/morristraversal.html"class="uri">https://www.cnblogs.com/anniekim/archive/2013/06/15/morristraversal.html</a></p><p>其中，最核心的是它讲述的步骤，Morris遍历的原始版本其实是中序遍历，步骤如下</p><ol type="1"><li><p>如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。</p></li><li><p>如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点（predecessor）。找到前驱节点之后，关于前驱节点，又要分为以下两种情况来处理：</p><ul><li><p>2.1、如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。</p></li><li><p>2.2、如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。</p></li></ul></li><li><p>重复以上 1、2 直到当前节点为空。</p></li></ol><p>下面就是 Java 代码的全部实现</p><p><strong>原始不打印节点的版本</strong></p><p><code>Node</code> 数据结构</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">public</span> Node left;<br>    <span class="hljs-keyword">public</span> Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 初始版本的 morris 遍历，没有作任何打印</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">morris</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head; <span class="hljs-comment">// cur 初始时为头节点</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">mostRight</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 这个其实就是当前节点 cur 的前驱节点（predecessor）</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 如果当前 cur 有左子树</span><br>            <span class="hljs-comment">// 找到左子树上最右边的节点，即前驱（predecessor）节点</span><br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-literal">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-comment">// 从上面的 while 里出来后，mostRight 就是 cur 左子树上最右的节点</span><br>            <span class="hljs-keyword">if</span> (mostRight == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 如果 mostRight.right 指向 null，说明是第一次访问这个节点</span><br>                mostRight.right = cur; <span class="hljs-comment">// 让 mostRight 的右指针指向当前 cur 节点</span><br>                cur = cur.left; <span class="hljs-comment">// cur 向左移动</span><br>                <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 回到最外层的 while，继续判断 cur 的情况</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果 mostRight.right 是指向 cur 的</span><br>                mostRight.right = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 将 mostRight 的右指针指向恢复为 null</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// a、cur 如果没有左子树，cur 向右移动</span><br>        <span class="hljs-comment">// b、或者 cur 左子树上最右节点的右指针是指向 cur 的，cur 向右移动</span><br>        cur = cur.right;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>前序遍历版本</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 先序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">morrisPre</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">mostRight</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 当前节点左孩子不为 null 的情况</span><br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-literal">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-comment">// 根据上面循环截止的两个条件，分两种情况进行处理</span><br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-literal">null</span>) &#123;<br>                mostRight.right = cur;<br>                System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 因为是先序遍历，所以要先打印</span><br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 某个节点第二次被访问时，这里不作打印操作，仅仅把 mostRight 的右指针恢复为 null</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 当前节点左孩子为 null 则直接打印当前节点</span><br>            System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 打印节点</span><br>        &#125;<br>        <span class="hljs-comment">// a、cur 如果没有左子树，cur 向右移动</span><br>        <span class="hljs-comment">// b、或者 cur 左子树上最右节点的右指针是指向 cur 的，cur 向右移动</span><br>        cur = cur.right; <span class="hljs-comment">// 当前节点往右走</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>中序遍历版本</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 中序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">morrisIn</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">mostRight</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-literal">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-literal">null</span>) &#123;<br>                mostRight.right = cur;<br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// a、cur 如果没有左子树，先打印 cur 的值，然后 cur 向右移动</span><br>        <span class="hljs-comment">// b、或者 cur 左子树上最右节点的右指针是指向 cur 的，先打印 cur 的值，然后 cur 向右移动</span><br>        System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>);<br>        cur = cur.right;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>后序遍历版本</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 后序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">morrisPost</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">mostRight</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-literal">null</span> &amp;&amp; mostRight.<span class="hljs-type">ri</span><br>                <span class="hljs-variable">mostRight</span> <span class="hljs-operator">=</span> mostRight.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-literal">null</span>) &#123;<br>                mostRight.right = cur;<br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-literal">null</span>;<br>                printEdge(cur.left);<br>            &#125;<br>        &#125;<br>        cur = cur.right;<br>    &#125;<br>    printEdge(head);<br>    System.out.println();<br>&#125;<br><span class="hljs-comment">// 打印左子树的右边界时调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEdge</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> reverseEdge(head); <span class="hljs-comment">// 这个 tail 其实是反转之后的头</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>);<br>        cur = cur.right;<br>    &#125;<br>    reverseEdge(tail); <span class="hljs-comment">// 恢复反转的右边界</span><br>&#125;<br><span class="hljs-comment">// 反转右边界</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title function_">reverseEdge</span><span class="hljs-params">(Node from)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    Node next;<br>    <span class="hljs-keyword">while</span> (from != <span class="hljs-literal">null</span>) &#123;<br>        next = from.right; <span class="hljs-comment">// 先把 next 保存起来</span><br>        from.right = pre; <span class="hljs-comment">// 反转</span><br>        pre = from; <span class="hljs-comment">// 更新 pre</span><br>        from = next; <span class="hljs-comment">// 更新 from</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>后序版本稍微有点复杂，主要是多了一个逆转左子树的右边界的做法。</p><p><strong>测试 <code>main</code> 方法</strong></p><p>测试所用的二叉树</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210404144053.png" /></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 构建测试用的二叉树</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">6</span>);<br>    head.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">2</span>);<br>    head.left.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>);<br>    head.left.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">4</span>);<br>    head.left.right.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">3</span>);<br>    head.left.right.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">5</span>);<br>    head.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">7</span>);<br>    head.right.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">9</span>);<br>    head.right.right.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-comment">// 测试</span><br>    <span class="hljs-type">Moris_5</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Moris_5</span>();<br>    ms.morrisPre(head);<br>    System.out.println(<span class="hljs-string">&quot;\n----------&quot;</span>);<br>    ms.morrisIn(head);<br>    System.out.println(<span class="hljs-string">&quot;\n----------&quot;</span>);<br>    ms.morrisPost(head);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-section">6 2 1 4 3 5 7 9 8 </span><br><span class="hljs-section">----------</span><br><span class="hljs-section">1 2 3 4 5 6 7 8 9 </span><br><span class="hljs-section">----------</span><br>1 3 5 4 2 8 9 7 6 <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>二叉树</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树生成测试备用</title>
    <link href="/2021/04/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E5%A4%87%E7%94%A8/"/>
    <url>/2021/04/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E5%A4%87%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="java">Java</h3><p>二叉树数据结构</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">public</span> Node left;<br>    <span class="hljs-keyword">public</span> Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>二叉树 01：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210404144053.png"alt="20210404144053" /></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">6</span>);<br>head.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">2</span>);<br>head.left.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>);<br>head.left.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">4</span>);<br>head.left.right.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">3</span>);<br>head.left.right.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">5</span>);<br>head.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">7</span>);<br>head.right.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">9</span>);<br>head.right.right.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">8</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于递归的一点思考</title>
    <link href="/2021/04/03/%E5%85%B3%E4%BA%8E%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <url>/2021/04/03/%E5%85%B3%E4%BA%8E%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>今天在阅读二叉树的边界打印过程中，由于多要使用递归，什么先序遍历啦，什么尾递归啦，关于二叉树，递归真是无处不在。</p><p>由此，也产生了一点想法。</p><p>以前在做递归的题目，或者说看递归的代码时，真是一头懵，妥妥的愣头青一个。在经过在我看来不算少的递归的题目的冲击和洗涤之后，如今多少算是有点感觉了。当初，递归的过程我是百思不得其解，现今，在纸上模拟递归的过程自然是不在话下，更重要的一点，在脑中直接模拟递归的过程似乎也不再是那么困难的事情。遇到问题，想一想递归，估计是可以想得出来的，这个想，指的是纯粹地依靠我自己。然后，将递归转化为非递归，如果是利用栈这个数据结构，我觉得也还ok 啦。</p>]]></content>
    
    
    <categories>
      
      <category>编程杂感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程杂感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于使用不同网络下 ssh -T git@github.com 可能连接失败的一个 bug</title>
    <link href="/2021/04/02/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E4%B8%8B-ssh-T-git-github-com-%E5%8F%AF%E8%83%BD%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%80%E4%B8%AA-bug/"/>
    <url>/2021/04/02/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E4%B8%8B-ssh-T-git-github-com-%E5%8F%AF%E8%83%BD%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%80%E4%B8%AA-bug/</url>
    
    <content type="html"><![CDATA[<p>今天遇到一个奇怪的错误。</p><p>今天在同学租的房子里，使用房东的 WiFi，然后在执行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></div></td></tr></table></figure><p>时出现连接超时的情况。真是日了狗了。</p><p>因为这个错误，我无法使用 <code>hexo d</code>命令，导致我以为是今天使用 WebStorm 打开博客根目录然后 WebStorm给文件根目录加了一个 <code>.idea</code> 文件的缘故，然后我又重新配置了GitHub 的 SSH 相关内容，因为我在同一台电脑上搭建了两个 Hexo博客，工作量可想而知，真是日了狗了！！！</p><p>然后重新配置好了 SSH之后，测试刚刚那个命令结果还是超时，我日，然后，我将网络换成手机的热点，日了狗了，好了，可以连上了！干你娘！竟然是网络的问题，亏我还给Git 配置了代理。哔了狗了。</p>]]></content>
    
    
    <categories>
      
      <category>bugs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NexT 主题更改页脚内容的颜色（由 ... 强力驱动）</title>
    <link href="/2021/04/02/NexT-%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%94%B9%E9%A1%B5%E8%84%9A%E5%86%85%E5%AE%B9%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%88%E7%94%B1-%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8%EF%BC%89/"/>
    <url>/2021/04/02/NexT-%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%94%B9%E9%A1%B5%E8%84%9A%E5%86%85%E5%AE%B9%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%88%E7%94%B1-%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>我们需要修改页面底部的颜色信息，如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161712.png"alt="20210402161712" /></p><h3 id="解决方案">解决方案</h3><p>首先，找到在站点目录下的<code>themes/next/source/css/_common/outline/footer</code>的文件夹，然后，打开 <code>footer.styl</code> 文件。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161200.png"alt="20210402161200" /></p><p>我们需要更改两个地方。</p><p>第一处</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161534.png"alt="20210402161534" /></p><p>这里将 color 换成我们需要的颜色的十六进制码即可。</p><p>这里的效果是更改页脚的文字的颜色（不包括链接）。</p><p>第二处</p><p>在文件尾部添加一段代码</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 后加的改变页脚颜色的文件<br><span class="hljs-selector-class">.theme-link</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#71ffe5</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210402161847.png"alt="20210402161847" /></p><p>这里的颜色随便设定，效果是将页脚的链接的颜色更改为我们设定的值。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
      <tag>Next</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18 安装搜狗输入法</title>
    <link href="/2021/03/31/Ubuntu-18-%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <url>/2021/03/31/Ubuntu-18-%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224044.png"alt="20210331224044" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224133.png"alt="20210331224133" /></p><p>把中文（简体）勾选上</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224223.png"alt="20210331224223" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224315.png"alt="20210331224315" /></p><p>这里选择 <code>fcitx</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224356.png"alt="20210331224356" /></p><p>如果在键盘输入法系统中，没有 “fcitx” 选项时，建议先打开终端手动安装<code>fcitx</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install fcitx<br></code></pre></div></td></tr></table></figure><p>等安装成功之后再执行上述步骤。</p><p>然后到搜狗拼音官网下载安装包</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224618.png"alt="20210331224618" /></p><p>我这里是下载在了 Downloads 目录下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224737.png"alt="20210331224737" /></p><p>然后在命令行执行安装命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo dpkg -i sogoupinyin_2.4.0.3469_amd64.deb<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224911.png"alt="20210331224911" /></p><p>但是我这里出现了一些问题，就是缺少一些依赖包</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331224944.png"alt="20210331224944" /></p><p>此时，我们可以执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt -f install<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225145.png"alt="20210331225145" /></p><p>此时，发现已经安装成功</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225238.png"alt="20210331225238" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225636.png"alt="20210331225636" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225819.png"alt="20210331225819" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225843.png"alt="20210331225843" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331225926.png"alt="20210331225926" /></p><p>然后，测试一下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331230017.png"alt="20210331230017" /></p><p>大功告成。</p><p>参考：<ahref="https://pinyin.sogou.com/linux/help.php%3E">搜狗官方教程</a> <ahref="https://zhuanlan.zhihu.com/p/34270907">知乎辅助排坑</a></p><p><strong>注</strong>：安装过程中遇到需要确认的选项，我这里一律选择<code>y</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>安装软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中通过 &#39;\u&#39; 给 char 类型变量赋值</title>
    <link href="/2021/03/31/Java-%E4%B8%AD%E9%80%9A%E8%BF%87-u-%E7%BB%99-char-%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/"/>
    <url>/2021/03/31/Java-%E4%B8%AD%E9%80%9A%E8%BF%87-u-%E7%BB%99-char-%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>在 Java 中，可以使用 <code>\u0031</code> 这样形式的值给 char类型变量赋值，其中，<code>\u</code> 表示 Unicode码，后面的四位数字即具体的 Unicode 码。</p><p>部分 Unicode 码如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331004349.png"alt="20210331004349" /></p><p>下面是 Java 中打印通过 Unicode 码赋值的 char 类型变量</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0040&#x27;</span>;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0041&#x27;</span>;<br>    System.out.println(a);<br>    System.out.println(b);<br>    System.out.println(c);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出为</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331005101.png"alt="20210331005101" /></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的 &#39;\u0000&#39;</title>
    <link href="/2021/03/31/Java-%E4%B8%AD%E7%9A%84-u0000/"/>
    <url>/2021/03/31/Java-%E4%B8%AD%E7%9A%84-u0000/</url>
    
    <content type="html"><![CDATA[<p>Java 中的 char 类型初始值是 <code>\u0000</code>，这个表示 Unicode码中的 <code>0000</code> 号字符，但是这个是非打印字符，所以哦我们通过Java 打印这个字符一般只能看到一个字符。这个在 Java 中一般表示 nullchar。</p><p>Unicode 表部分如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210331004349.png"alt="20210331004349" /></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的 Block 代码块</title>
    <link href="/2021/03/30/Java-%E4%B8%AD%E7%9A%84-Block-%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <url>/2021/03/30/Java-%E4%B8%AD%E7%9A%84-Block-%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>Java 中的 Block 就是使用花括号括起来来的一段代码块。</p><p>示例如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210330234610.png"alt="20210330234610" /></p><p>Block 中的代码按顺序执行，需要注意的是，Block中的变量是本地变量（local variables），也可以叫局部变量。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的三种变量</title>
    <link href="/2021/03/30/Java-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E5%8F%98%E9%87%8F/"/>
    <url>/2021/03/30/Java-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>Java 中一共有三种变量，分别是</p><ul><li><p>类变量（ClassVariables）：类变量也叫静态（static）变量。直接在类体中使用<code>static</code>关键字声明的变量。这中变量的特点是只会在程序第一次加载类时初始化一次，然后所有该类的实例化对象都会共享这一份变量。</p></li><li><p>实例变量（Instance Variables）：实例变量即类中的没有使用<code>static</code>关键字创建的变量。每实例化一个对象，该对象都会持有只属于它的一份实例变量。</p></li><li><p>本地变量（LocalVariables）：在方法体中、构造器中、代码块（block）中声明的变量。也可以叫做局部变量。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中变量的初始值</title>
    <link href="/2021/03/30/Java-%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%80%BC/"/>
    <url>/2021/03/30/Java-%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>程序中的每一个变量在使用前都应该有一个值。</p><p>每一个<code>类变量（class variable）</code>、<code>实例变量（instance variable）</code>或 <code>数组变量（array component）</code>在被创建（声明）时都会被初始化一个默认值。各个类型的默认值如下。</p><ul><li><p>byte: 0，即 <code>(byte)0</code></p></li><li><p>short: 0，即 <code>(short)0</code></p></li><li><p>int: 0</p></li><li><p>long: 0，即 <code>0L</code></p></li><li><p>float: 0，即 <code>0.0f</code></p></li><li><p>double: 0，即 <code>0.0d</code></p></li><li><p>char: null，即 <code>\u0000</code></p></li><li><p>boolean: false</p></li><li><p>所有的引用类型：null</p></li></ul><p>附注一：Java 中数字常量默认为 int 类型，所以给 long类型的数据赋值时数字结尾要加 <code>L</code> 或<code>l</code>，给取值范围小于 int 的 byte 和 short类型赋值时，一般直接赋值即可，或者可以进行显式的类型转换。而小数常量默认为double 类型，所以一般可以将不加后缀的小数常量赋给 double类型的变量，而给 float 数据赋值时必须要加 <code>F</code> 或<code>f</code> 后缀。</p><p>参考：<ahref="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.12.5">Java文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 备份或删除所有库的命令</title>
    <link href="/2021/03/29/Python-%E5%A4%87%E4%BB%BD%E6%88%96%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%BA%93%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/03/29/Python-%E5%A4%87%E4%BB%BD%E6%88%96%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%BA%93%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>命令一</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip freeze <br></code></pre></div></td></tr></table></figure><p>作用：查看 Python 通过 <code>pip</code> 安装的所有包（不包括<code>pip</code> 包本身）。</p><p>命令二</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip freeze &gt; requirements.txt<br></code></pre></div></td></tr></table></figure><p>作用：将当前的所有的库备份到当前目录下的<code>requirements.txt</code>（如果没有则会自动新建一个）中。</p><p>下面是我备份的示例</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329233624.png" /></p><p>命令三</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip install -r requirements.txt<br></code></pre></div></td></tr></table></figure><p>作用：安装 <code>requirements.txt</code> 文件中列出的包。</p><p><code>-r</code>：与 <code>--requirements</code> 等价，表示安装requirements文件中列出的所有包，该选项可以重复添加，按照惯例，需求文件名为requirements.txt。</p><p>命令四</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip uninstall -r requirements.txt -y<br></code></pre></div></td></tr></table></figure><p>作用：删除 <code>requirements.txt</code> 文件中列出的包。</p><p><code>-r &lt;file&gt;</code>：与<code>--requirements &lt;file&gt;</code> 等价，删除 requirements文件中列出的所有包，该选项可以重复添加多次。</p><p><code>-y</code>：与 <code>--yes</code>等价，在卸载遇到确认的情况时，一律选择 <code>yes</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pip</tag>
      
      <tag>Python 命令行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断一个链表是否是回文结构</title>
    <link href="/2021/03/29/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/"/>
    <url>/2021/03/29/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>给定一个链表的头节点 head，请判断该链表是否为回文结构。</p><p>例如</p><div class="hljs code-wrapper"><pre><code class="hljs">1-&gt;2-&gt;1, 返回 true。1-&gt;2-&gt;2-&gt;1, 返回 true。15-&gt;6-&gt;15, 返回 true。1-&gt;2-&gt;3, 返回 false。</code></pre></div><p>进阶要求</p><div class="hljs code-wrapper"><pre><code class="hljs">如果链表长度为 N，时间复杂度要求达到 O(N)，额外空间复杂度达到 O(1)。</code></pre></div><h4 id="解答">解答</h4><p><strong>方法一</strong></p><p>利用栈来判断，将所有节点压入栈中，然后弹出时就是按照逆序来弹出的，在弹出的同时与正序的原来的链表的相应的元素作比较，这样就很容易判断出是否是回文结构了。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome1</span><span class="hljs-params">(Node head)</span> &#123;<br>    Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// 将所有节点入栈</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(cur);<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-comment">// 将栈中元素一个个弹出与原链表中的每一个元素作比较</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (head.value != stack.pop().value) &#123; <span class="hljs-comment">// pop 是移除并返回栈顶元素</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法一的时间复杂度为 <spanclass="math inline">\(O(N)\)</span>，额外空间复杂度为 <spanclass="math inline">\(O(N)\)</span>。</p><p><strong>方法二</strong></p><p>这个方法本质上和方法一没有区别，只是，这个压栈操作有些变化，方法一是将所有的元素全部压入一个栈中，而这个方法则是先将栈给对半切割了，然后只是将右半部分的元素给压栈，然后再弹出和原链表的左半部分元素进行比较。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome2</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// 利用快慢指针，快速将 right 移动到链表中点的位置</span><br>    <span class="hljs-comment">// 设链表节点数为 N，</span><br>    <span class="hljs-comment">// 则当 N 为偶数时，cur 指针最终走到 N - 1 处，right 走了 (N - 2) / 2 步，最终走到 N / 2 的下一个位置</span><br>    <span class="hljs-comment">// 当 N 为奇数时，cur 指针最终走到 N 处，right 走了 (N - 1) / 2 步，最终走到 (N + 1) / 2 这个位置，即正好是正中间的位置</span><br>    <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>) &#123;<br>        right = right.next;<br>        cur = cur.next.next;<br>    &#125;<br>    <span class="hljs-comment">// 把右半部分的节点给压入堆栈</span><br>    Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (right != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(right);<br>        right = right.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (head.value != stack.pop().value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法二的时间复杂度为 <spanclass="math inline">\(O(N\)</span>，额外空间复杂度为 <spanclass="math inline">\(O(N)\)</span>。</p><p><strong>方法三</strong></p><p>方法三的主要思想是将链表从中间截断，然后使中间节点指向<code>null</code>，然后逆转右半部分的链表，然后左边和右边分别并同时从最左边的和最右边的节点进行遍历，比较它们每一个节点是否相同。最后，要将逆转的链表恢复原状。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome3</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// N 为偶数，n1 走到 N / 2 位置</span><br>    <span class="hljs-comment">// N 为奇数，n1 走到 N / 2 位置</span><br>    <span class="hljs-keyword">while</span> (n2.next != <span class="hljs-literal">null</span> &amp;&amp; n2.next.next != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 利用快慢指针查找中间节点</span><br>        n1 = n1.next; <span class="hljs-comment">// n1 -&gt; 中部</span><br>        n2 = n2.next.next; <span class="hljs-comment">// n2 -&gt; 尾部</span><br>    &#125;<br>    n2 = n1.next; <span class="hljs-comment">// n2 -&gt; 右部分第一个节点</span><br>    n1.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// mid.next -&gt; null</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (n2 != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 右半区反转</span><br>        n3 = n2.next; <span class="hljs-comment">// n3 -&gt; 保存下一个节点</span><br>        n2.next = n1;<br>        n1 = n2; <span class="hljs-comment">// n1 移动</span><br>        n2 = n3; <span class="hljs-comment">// n2 移动</span><br>    &#125;<br>    n3 = n1; <span class="hljs-comment">// n3 -&gt; 保存最后一个节点</span><br>    n2 = head; <span class="hljs-comment">// n2 -&gt; 左边第一个节点</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (n1 != <span class="hljs-literal">null</span> &amp;&amp; n2 != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 反转之后的检查回文</span><br>        <span class="hljs-keyword">if</span> (n1.value != n2.value) &#123;<br>            res = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 因为之后要恢复被反转的链表，所以要先将结果存储起来，不能直接返回</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        n1 = n1.next; <span class="hljs-comment">// 从左到中部</span><br>        n2 = n2.next; <span class="hljs-comment">// 从右到中部</span><br>    &#125;<br>    n1 = n3.next; <span class="hljs-comment">// 这里的 n3 是原来链表的最后一个节点，n3.next 即倒数第二个节点</span><br>    n3.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (n1 != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 恢复链表</span><br>        n2 = n1.next; <span class="hljs-comment">// 保存下一个节点</span><br>        n1.next = n3; <span class="hljs-comment">// 反转</span><br>        n3 = n1; <span class="hljs-comment">// 移动 n3</span><br>        n1 = n2; <span class="hljs-comment">// 移动 n1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环形单链表的约瑟夫（Josephus）问题</title>
    <link href="/2021/03/29/%E7%8E%AF%E5%BD%A2%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BA%A6%E7%91%9F%E5%A4%AB%EF%BC%88Josephus%EF%BC%89%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/29/%E7%8E%AF%E5%BD%A2%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BA%A6%E7%91%9F%E5%A4%AB%EF%BC%88Josephus%EF%BC%89%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>据说著名犹太历史学家 Josephus有过以下故事：在罗马人占领乔塔帕特后，39 个犹太人与 Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一种自杀方式，41个人排成一个圆圈，由第1个人开始报数，报数到 3的人就自杀，然后再由下一个人重新报 1，报数到 3的人再自杀，这样依次下去，直到剩下最后一个人时，那个人可以自由选择自己的命运。这就是著名的约瑟夫问题。现在请用单向环形链表描述该结构并呈现整个自杀过程。</p><div class="hljs code-wrapper"><pre><code class="hljs">输入：一个环形单向链表的头节点 head 和报数的值 m。返回：最后生存下来的节点</code></pre></div><p>进阶问题：如果链表节点数为 <spanclass="math inline">\(N\)</span>，想在时间复杂度为 <spanclass="math inline">\(O(N)\)</span> 时完成原问题的要求，该怎么实现？</p><h4 id="解答">解答</h4><p><strong>方法一</strong></p><p>直接模拟，这个按部就班写代码即可。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 直接法模拟约瑟夫环的删除过程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head 环形单向链表的头节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m 每隔 m 个节点删除一次</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 最后的幸存者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">josephusKill</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> m)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == head || m &lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 输入不合理</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// 找出最后一个节点 last</span><br>    <span class="hljs-keyword">while</span> (last.next != head) &#123;<br>        last = last.next;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (head != last) &#123;<br>        <span class="hljs-keyword">if</span> (++count == m) &#123; <span class="hljs-comment">// 如果报数到了 m</span><br>            last.next = head.next; <span class="hljs-comment">// 删除节点</span><br>            count = <span class="hljs-number">0</span>; <span class="hljs-comment">// count 重又归零</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            last = last.next; <span class="hljs-comment">// last 往后移动一位</span><br>        &#125;<br>        head = last.next; <span class="hljs-comment">// 移动 head 指针，使 head 指针始终保持是 last 指针的下一位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法一的时间复杂度为 <span class="math inline">\(O(N \timesm)\)</span>，<span class="math inline">\(N\)</span> 是节点数。</p><p><strong>方法二</strong></p><p>公式法。通过找规律，直接利用递推公式来求解。注意，这个公式法并不是书上介绍的方法，而是上个学期在上数据结构课程时老师讲述的方法。具体思路如下。</p><p>首先，我们给出公式</p><blockquote><p>J(n, m) = J(J(n - 1, m) + m) % n, if n &gt; 1, J(1, m) = 0</p></blockquote><p>下面，我们就来简单证明一下这个算法。</p><p>举例，我们用数字表示每一个人：</p><p><span class="math display">\[1,2,3,4,5,6,7,8,9,10,11\]</span></p><p>一共 11 个人，他们排成一排，假设报到 3 的人被杀掉。</p><ul><li>刚开始时，头一个人编号是1，从他开始报数，第一轮被杀掉的是编号3的人。</li><li>编号4的人从1开始重新报数，这时候我们可以认为编号4这个人是队伍的头。第二轮被杀掉的是编号6的人。</li><li>编号7的人开始重新报数，这时候我们可以认为编号7这个人是队伍的头。第三轮被杀掉的是编号9的人。</li><li>……</li><li>第九轮时，编号2的人开始重新报数，这时候我们可以认为编号2这个人是队伍的头。这轮被杀掉的是编号8的人。</li><li>下一个人还是编号为2的人，他从1开始报数，不幸的是他在这轮被杀掉了。</li><li>最后的胜利者是编号为7的人。</li></ul><p>表格演示(表头代表数组的下标)：</p><table><thead><tr class="header"><th style="text-align: center;">0</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th><th style="text-align: center;">5</th><th style="text-align: center;">6</th><th style="text-align: center;">7</th><th style="text-align: center;">8</th><th style="text-align: center;">9</th><th style="text-align: center;">10</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;"><strong>3</strong></td><td style="text-align: center;">4</td><td style="text-align: center;">5</td><td style="text-align: center;">6</td><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;">9</td><td style="text-align: center;">10</td><td style="text-align: center;">11</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">5</td><td style="text-align: center;"><strong>6</strong></td><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;">9</td><td style="text-align: center;">10</td><td style="text-align: center;">11</td><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;"><strong>9</strong></td><td style="text-align: center;">10</td><td style="text-align: center;">11</td><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;">4</td><td style="text-align: center;">5</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">10</td><td style="text-align: center;">11</td><td style="text-align: center;"><strong>1</strong></td><td style="text-align: center;">2</td><td style="text-align: center;">4</td><td style="text-align: center;">5</td><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2</td><td style="text-align: center;">4</td><td style="text-align: center;"><strong>5</strong></td><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;">10</td><td style="text-align: center;">11</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;"><strong>10</strong></td><td style="text-align: center;">11</td><td style="text-align: center;">2</td><td style="text-align: center;">4</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">11</td><td style="text-align: center;">2</td><td style="text-align: center;"><strong>4</strong></td><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">7</td><td style="text-align: center;">8</td><td style="text-align: center;"><strong>11</strong></td><td style="text-align: center;">2</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2</td><td style="text-align: center;">7</td><td style="text-align: center;"><strong>8</strong></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;"><strong>2</strong></td><td style="text-align: center;">7</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">7</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><p>我们用上面的数据验证一下公式的正确性，其中，J(n, m)表示的是幸存者在这一轮的下标位置：</p><ul><li><span class="math inline">\(J(1, 3) =0\)</span>；只有一个人，此人是最后的幸存者，其在数组中的下标为 0</li><li><span class="math inline">\(J(2, 3) = 1 = (J(1, 3) + 3) \%2\)</span>；还剩 2 个人时</li><li><span class="math inline">\(J(3, 3) = 1 = (J(2, 3) + 3) \%3\)</span>；还剩 3 个人时</li><li><span class="math inline">\(J(4, 3) = 0 = (J(3, 3) + 3) \%4\)</span></li><li><span class="math inline">\(J(5, 3) = 3 = (J(4, 3) + 3) \%5\)</span></li><li>...</li><li><span class="math inline">\(J(11, 3) = 6 = (J(10, 3) + 3) \%11\)</span>；最终计算出待求的情况</li></ul><p>我们通过实例只是验证了这一种情况是成立的，这能够很好地辅助我们理解，但是，我们还需要这个公式的具体推导，下面，就以问答的方式来推导这个公式。</p><p><strong>问题1</strong>：假设我们已经知道 11个人时，幸存者的下标位置为 6，那么下一轮 10个人时，幸存者下标的位置是多少？</p><p><strong>答</strong>：我们在第 1 轮杀掉第 3个人时，后面的人都往前面移动了 3 位，幸存者也往前移动了 3位，所以他的下标由 6 变成了 3。</p><p><strong>问题2</strong>：假设我们呢已经知道 10个人时，幸存者的下标位置为 3，那么上一轮 11个人时，幸存者下标的位置是多少？</p><p><strong>答</strong>：这可以看成是上一个问题的逆过程，所以由 10 变成11 个人时，所有人都往后移动 3 位，所以 <span class="math inline">\(J(11,3) = J(10, 3) +3\)</span>，不过数组可能会越界，我们可以想象成数组的首尾是相接的环，那么越界的元素就要重新回到开头，所以这个式子还要模取当前的人数(注意，这里是当前数组，在这里就是人数为11 的这个数组)：<span class="math inline">\(J(11,3) = (J(10, 3) + 3) \%11\)</span>。</p><p><strong>问题3</strong>：推及到一般情况，人数为 n，报到 m时，把那个人杀掉，那么数组又是怎么移动的？</p><p><strong>答</strong>：由上面的推导，我们应该很容易就能得出，若已知 n -1 个人时，幸存者的下标位置为 <span class="math inline">\(J(n - 1,m)\)</span>，那么 n 个人的时候，就是往后移动 m位，同样的，因为可能数组越界，所以式子要变成：<spanclass="math inline">\(J(n, m) = (J(n - 1, m) + 3) \% n\)</span>。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用公式法求解最后幸存的节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head 单向环状链表头节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m 报数到 m 就删去一个节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 最后生存的节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">JosephusKillFormula</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> m)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// n 表示链表的长度</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (last.next != head) &#123;<br>        n++;<br>        last = last.next;<br>    &#125;<br>    n++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 只剩一个人时，数组下标为 0</span><br>    <span class="hljs-comment">// 这个循环就是关键的核心</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        p = (p + m) % i; <span class="hljs-comment">// i 是当前的人数</span><br>    &#125;<br>    p += <span class="hljs-number">1</span>; <span class="hljs-comment">// 因为 p 是从 0 开始，所以最后要加一</span><br>    <span class="hljs-keyword">while</span> (--p != <span class="hljs-number">0</span>) &#123;<br>        last = last.next;<br>        head = head.next;<br>    &#125;<br>    last.next = <span class="hljs-literal">null</span>;<br>    head.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 只取最后的 head 这一个节点，其他都舍去</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单位上三角矩阵的定义</title>
    <link href="/2021/03/29/%E5%8D%95%E4%BD%8D%E4%B8%8A%E4%B8%89%E8%A7%92%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    <url>/2021/03/29/%E5%8D%95%E4%BD%8D%E4%B8%8A%E4%B8%89%E8%A7%92%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>关于单位上三角矩阵的定义，我在教材中没有找到，遂搜索于网络。</p><p>在百度百科和维基百科找到了定义，但是它们让我困惑的有一点，就是 “系数”这个名词，如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329091316.png"alt="20210329091316" /></p><p>我想，这应该是指矩阵中元素的意思，然后查看英文版 Wiki 得以确认</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329091519.png"alt="20210329091519" /></p><p>这里用了 <code>entry</code>这个单词，翻译过来就是条目的意思，我这个翻译也不太好，具体看一个 <ahref="https://www.mathwarehouse.com/algebra/matrix/">英文网站</a>的解释</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329091840.png"alt="20210329091840" /></p><p>尤其注意这里的一句话</p><blockquote><p>Each item in a matrix is called an entry.</p></blockquote><p>对于 <code>item</code>我们是理解的，所以，上三角（下三角类似）单位矩阵的定义，简单来说，就是</p><p><strong>主对角线上的元素全部为 1 的矩阵</strong>.</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转部分单向链表</title>
    <link href="/2021/03/29/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/03/29/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>给定一个单向链表的头节点 head，以及两个整数 from 和to，在单向链表上把第 from 个节点到第 to 个节点这一部分进行反转。</p><p>例如</p><div class="hljs code-wrapper"><pre><code class="hljs">1-＞2-＞3-＞4-＞5-＞null, from=2, to=4调整结果为：1-＞4-＞3-＞2-＞5-＞null1-＞2-＞3-＞null, from=1, to=3调整结果为：3-＞2-＞1-＞null</code></pre></div><p>要求</p><div class="hljs code-wrapper"><pre><code class="hljs">1. 如果链表长度为 N，时间复杂度要求为 O(N)，额外空间复杂度要求为 O(1)。2. 如果不满足 1 &lt;= from &lt;= to &lt;= N，则不用调整。</code></pre></div><h4 id="解答">解答</h4><p>这里主要要注意 from 是否为第一个节点，即是否为头节点的问题。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">reversePart</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">fPre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">tPos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 遍历链表，找到 from 的前一个节点</span><br><span class="hljs-comment">        * 和 to 的后一个节点</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-keyword">while</span> (node1 != <span class="hljs-literal">null</span>) &#123;<br>        len++;<br>        fPre = len == from - <span class="hljs-number">1</span> ? node1 : fPre;<br>        tPos = len == to + <span class="hljs-number">1</span> ? node1 : tPos;<br>        node1 = node1.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (from &gt; to || from &lt; <span class="hljs-number">1</span> || to &gt; len) &#123; <span class="hljs-comment">// 输入不合理，注意，from = 1 和 to = len 是合法的情况</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">// 下面进行反转</span><br>    node1 = fPre == <span class="hljs-literal">null</span> ? head : fPre.next; <span class="hljs-comment">// 如果 fPre 等于 null，则说明 from = 1，否则直接将 fPre 的下一个节点赋给 node1</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> node1.next; <span class="hljs-comment">// 保存 node1.next</span><br>    node1.next = tPos; <span class="hljs-comment">// 先将部分链表的头节点给转了，所以下面不需要再处理将反转好的 “部分链表” 的尾部给接到 tPos 的操作了</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (node2 != tPos) &#123;<br>        next = node2.next; <span class="hljs-comment">// 保存下一个节点</span><br>        node2.next = node1;<br>        node1 = node2;<br>        node2 = next;<br>    &#125; <span class="hljs-comment">// node1 是最后一个 “部分链表” 的最后一个节点</span><br>    <span class="hljs-keyword">if</span> (fPre != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 如果 fPre 不是 null，即 from != 1</span><br>        fPre.next = node1; <span class="hljs-comment">// 直接接上就好</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-keyword">return</span> node1; <span class="hljs-comment">// 这是 from 为头节点的情况</span><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给定链表的头节点 head，实现删除链表的中间节点的函数</title>
    <link href="/2021/03/29/%E7%BB%99%E5%AE%9A%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E8%8A%82%E7%82%B9-head%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <url>/2021/03/29/%E7%BB%99%E5%AE%9A%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E8%8A%82%E7%82%B9-head%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="题目">题目</h4><p>给定链表的头节点 head，实现删除链表的中间节点的函数。</p><p>例如：</p><div class="hljs code-wrapper"><pre><code class="hljs">1-＞2，删除节点1；1-＞2-＞3，删除节点2；1-＞2-＞3-＞4，删除节点2；1-＞2-＞3-＞4-＞5，删除节点3；</code></pre></div><p>进阶：给定链表的头节点 head、整数 a 和 b，实现删除位于 a/b处节点的函数。</p><p>例如：</p><div class="hljs code-wrapper"><pre><code class="hljs">链表：1-＞2-＞3-＞4-＞5，假设a/b的值为r。如果r等于0，不删除任何节点；如果r在区间（0，1/5]上，删除节点1；如果r在区间（1/5，2/5]上，删除节点2；如果r在区间（2/5，3/5]上，删除节点3；如果r在区间（3/5，4/5]上，删除节点4；如果r在区间（4/5，1]上，删除节点5；如果r大于1，不删除任何节点。</code></pre></div><h4 id="解题思路">解题思路</h4><p><strong>原问题</strong></p><p>整体思路是利用快慢指针。只是要注意一些细节问题。我们将小于等于 2个节点的链表直接作硬编码处理。然后处理大于 2个节点的情况。首先初始化快慢指针，快指针初始时指向第 3个节点，慢指针初始时指向第 1个节点。然后开始移动，每一次移动，快指针走两个节点，慢指针走一个节点。终止条件是快指针到达了倒数第一个或者倒数第二个节点。</p><p>至于为何快指针和慢指针走的规则是这样的，我们可以分两种情况来看。我们假定链表节点数为<span class="math inline">\(N, N \geqslant 3\)</span>。</p><ul><li><span class="math inline">\(N\)</span>是偶数。快指针最后是停在了倒数第二个节点的位置。则慢指针走了 <spanclass="math inline">\(\frac{N - 3 - 1}{2}\)</span> 步，即 <spanclass="math inline">\(\frac{N}{2} - 1\)</span>步。很显然，最后慢指针的位置是在该删除节点的前一个位置。</li><li><span class="math inline">\(N\)</span>是奇数。快指针最后是停在了倒数第一个位置。则慢指针走了 <spanclass="math inline">\(\frac{N - 3}{2}\)</span> 步，即 <spanclass="math inline">\(\frac{N - 1}{2} -1\)</span>，而慢指针从头节点开始走 <span class="math inline">\(\frac{N -1}{2}\)</span>步正好会走到中间的节点的地方。因此，最后慢指针的位置是中间节点的前一个位置。</li></ul><p>代码</p><p>节点类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>函数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 删除链表的中间节点，很显然，利用的是快慢指针</span><br><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">removeMidNode</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 如果是空链表或者是只有一个节点的链表</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head.next.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 如果只有两个节点，那么，就删除第一个节点</span><br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next.next;<br>    <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 如果快指针没有走到倒数第一个或者倒数第二个节点</span><br>        pre = pre.next; <span class="hljs-comment">// 慢指针</span><br>        cur = cur.next.next; <span class="hljs-comment">// 快指针</span><br>    &#125;<br>    pre.next = pre.next.next; <span class="hljs-comment">// 删除中间节点</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>进阶问题</strong></p><p>这个主要是要计算出待删除节点的序号，如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">n = (<span class="hljs-type">int</span>) Math.ceil((<span class="hljs-type">double</span>) (n * a) / (<span class="hljs-type">double</span>) b);<br></code></pre></div></td></tr></table></figure><p>完整函数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 删除位于 a/b 处的节点</span><br><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">removeByRatio</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">1</span> || a &gt; b) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 计算出节点的个数</span><br>        n++;<br>        cur = cur.next;<br>    &#125;<br>    n = (<span class="hljs-type">int</span>) Math.ceil((<span class="hljs-type">double</span>) (n * a) / (<span class="hljs-type">double</span>) b); <span class="hljs-comment">// 向上取整，之所以将计算出来的值仍用 n 存储，是为了节省空间</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;<br>        cur = head;<br>        <span class="hljs-keyword">while</span> (--n != <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 找到待删除节点的前一个节点</span><br>            cur = cur.next;<br>        &#125;<br>        cur.next = cur.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-NexT-文章页面去掉页首的描述（description）</title>
    <link href="/2021/03/29/Hexo-NexT-%E6%96%87%E7%AB%A0%E9%A1%B5%E9%9D%A2%E5%8E%BB%E6%8E%89%E9%A1%B5%E9%A6%96%E7%9A%84%E6%8F%8F%E8%BF%B0%EF%BC%88description%EF%BC%89/"/>
    <url>/2021/03/29/Hexo-NexT-%E6%96%87%E7%AB%A0%E9%A1%B5%E9%9D%A2%E5%8E%BB%E6%8E%89%E9%A1%B5%E9%A6%96%E7%9A%84%E6%8F%8F%E8%BF%B0%EF%BC%88description%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="需求描述">需求描述</h3><p>如下图，我们想去掉页首显示的这个 description，因为这个 description只在首页显示就够了。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329001641.png"alt="20210329001641" /></p><h3 id="解决方法">解决方法</h3><p>在 <code>..\themes\next\layout\_macro\post.swig</code> 文件中搜索<code>description</code>，找到下面这段代码，删去即可。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&#123;%- if post<span class="hljs-selector-class">.description</span> and (not theme<span class="hljs-selector-class">.excerpt_description</span> or not is_index) %&#125;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;post-description&quot;&gt;&#123;&#123; post<span class="hljs-selector-class">.description</span> &#125;&#125;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&#123;%- endif %&#125;<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329001034.png"alt="20210329001034" /></p><p>效果</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210329001856.png"alt="20210329001856" /></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>NexT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/28/hello-world/"/>
    <url>/2021/03/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>草稿</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex 中的空格（空白）表示方法（知其然并知其所以然）</title>
    <link href="/2021/03/28/LaTex-%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC%EF%BC%88%E7%A9%BA%E7%99%BD%EF%BC%89%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95%EF%BC%88%E7%9F%A5%E5%85%B6%E7%84%B6%E5%B9%B6%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%89/"/>
    <url>/2021/03/28/LaTex-%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC%EF%BC%88%E7%A9%BA%E7%99%BD%EF%BC%89%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95%EF%BC%88%E7%9F%A5%E5%85%B6%E7%84%B6%E5%B9%B6%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="latex-中的单位">LaTex 中的单位</h3><p>首先我们来了解一下之后我们在使用空格时需要用到的 LaTex 中的单位。</p><ul><li><code>cm</code>：1 厘米</li><li><code>em</code>：大致等于一个当前字体的 <code>M</code> 的宽度</li><li><code>mu</code>：等于 1/18 <code>em</code> 的数学单位</li></ul><h3 id="latex-显示空格">LaTex 显示空格</h3><h4 id="语法格式">语法格式</h4><ul><li><code>\hspace&#123;1cm&#125;</code>：插入 1cm 的水平空白，这里也可以使用其他的LaTex 单位。如<code>pt、mm、cm、in、ex、em、mu</code>。这个指令是可以很精确地控制显示多少空白的。</li><li><code>\quad</code>：大致和当前字体的 <code>M</code> 等宽的空白（= 18mu = 1 em）</li><li><code>\,</code>：等于 3/18 个 <code>\quad</code>（= 3 mu）</li><li><code>\:</code>：等于 4/18 个 <code>\quad</code>（= 4 mu）</li><li><code>\;</code>：等于 5/18 个 <code>\quad</code>（= 5 mu）</li><li><code>\!</code>：等于 -3/18 个 <code>quad</code>（= -3 mu）</li><li><code>\</code>(在反斜杠后面跟一个空格)：等于正常文本中的一个空格</li><li><code>\qquad</code>：两倍的 <code>quad</code>（= 36 mu）</li></ul><h4 id="使用范例">使用范例</h4><p>LaTex 代码</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\begin</span>&#123;align&#125;<br><span class="hljs-built_in">&amp;</span> 0-&gt;a <span class="hljs-keyword">\hspace</span>&#123;2cm&#125;bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 0-&gt;a <span class="hljs-keyword">\hspace</span>&#123;1em&#125;bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 0-&gt;a <span class="hljs-keyword">\hspace</span>&#123;18mu&#125;bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 1-&gt;a <span class="hljs-keyword">\quad</span> bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 2-&gt;a <span class="hljs-keyword">\,</span> bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 3-&gt;a <span class="hljs-keyword">\:</span> bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 4-&gt;a <span class="hljs-keyword">\;</span> bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 5-&gt;a <span class="hljs-keyword">\!</span> bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 6-&gt;a <span class="hljs-keyword">\ </span> bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 7-&gt;a <span class="hljs-keyword">\qquad</span> bcd <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> 8-&gt;abcd<br><span class="hljs-keyword">\end</span>&#123;align&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><span class="math display">\[\begin{align}&amp; 0-&gt;a \hspace{2cm}bcd \\&amp; 0-&gt;a \hspace{1em}bcd \\&amp; 0-&gt;a \hspace{18mu}bcd \\&amp; 1-&gt;a \quad bcd \\&amp; 2-&gt;a \, bcd \\&amp; 3-&gt;a \: bcd \\&amp; 4-&gt;a \; bcd \\&amp; 5-&gt;a \! bcd \\&amp; 6-&gt;a \  bcd \\&amp; 7-&gt;a \qquad bcd \\&amp; 8-&gt;abcd\end{align}\]</span></p><p>参考：<a href="">hspace 相关</a>， <ahref="https://www.overleaf.com/learn/latex/Spacing_in_math_mode#Reference_guide">quad相关</a>，<ahref="https://www.overleaf.com/learn/latex/Lengths_in_LaTeX">LaTex单位</a></p><p>附注一：关于 quad 的解释</p><blockquote><p>The word “quad” is a traditional term in typography. It comes fromItalian “quadratone” (big square). In old fashioned metal typography itmeant a square piece of metal lower than type height that could beinserted between types for spacing them. In Italian typography it'sstill called “spazio quadratone”. It's commonly as wide and high as anuppercase “M”, since this is usually the widest letter in a font andoccupies a square area. The command takes its name from this traditionalname; just means ”two quads”. However in TeX the has no height, but onlywidth.(来自：<ahref="https://tex.stackexchange.com/questions/119068/meaning-of-quad#:~:text=In%20the%20Not%20so%20Short,is%20the%20space%20of%20MM%20.">stackexchange</a>)</p></blockquote><p>附注二：这里使用的 LaTex 解析器是 mathjax。</p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
      <tag>MathJax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改 Hexo-NexT 的 mathjax 配置，配置公式不要自动渲染编号</title>
    <link href="/2021/03/28/%E4%BF%AE%E6%94%B9%20Hexo-NexT%20%E7%9A%84%20mathjax%20%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%A6%81%E8%87%AA%E5%8A%A8%E6%B8%B2%E6%9F%93%E7%BC%96%E5%8F%B7/"/>
    <url>/2021/03/28/%E4%BF%AE%E6%94%B9%20Hexo-NexT%20%E7%9A%84%20mathjax%20%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%A6%81%E8%87%AA%E5%8A%A8%E6%B8%B2%E6%9F%93%E7%BC%96%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>修改 Hexo-NexT 的 mathjax配置，配置公式不要自动渲染编号，具体操作如下</p><p>找到相关配置文件，如图所示</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210328210344.png"alt="20210328210344" /></p><p>这里将 <code>tags: 'ams'</code> 这一行删掉即可。</p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>NexT</tag>
      
      <tag>MathJax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>证明严格对角占优矩阵经一步 Gauss 消元后仍为严格对角矩阵</title>
    <link href="/2021/03/28/%E8%AF%81%E6%98%8E%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E5%8D%A0%E4%BC%98%E7%9F%A9%E9%98%B5%E7%BB%8F%E4%B8%80%E6%AD%A5-Gauss-%E6%B6%88%E5%85%83%E5%90%8E%E4%BB%8D%E4%B8%BA%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E7%9F%A9%E9%98%B5/"/>
    <url>/2021/03/28/%E8%AF%81%E6%98%8E%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E5%8D%A0%E4%BC%98%E7%9F%A9%E9%98%B5%E7%BB%8F%E4%B8%80%E6%AD%A5-Gauss-%E6%B6%88%E5%85%83%E5%90%8E%E4%BB%8D%E4%B8%BA%E4%B8%A5%E6%A0%BC%E5%AF%B9%E8%A7%92%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="问题">问题</h3><p>设矩阵 <span class="math inline">\(\mathbf{A} = (a_{ij}) \in\mathbf{R}^{n \times n}\)</span> 满足 <span class="math inline">\(a_{11}\neq 0\)</span>，且其经一步 Gauss 消元后成为</p><p><span class="math display">\[\begin{pmatrix}a_{11} &amp; \pmb{a}_{1}^{T} \\\pmb{0} &amp; \pmb{A}_2 \\\end{pmatrix}\]</span></p><p>证明：若 <span class="math inline">\(\pmb{A}\)</span>为严格对角占优矩阵，则经一次 Gauss 消元之后的 <spanclass="math inline">\(\pmb{A}^{(1)}\)</span> 也是严格对角矩阵.</p><h3 id="解答">解答</h3><p>注意到矩阵 <span class="math inline">\(\pmb{A}^{(1)}\)</span> 的<span class="math inline">\(i\)</span> 行 <spanclass="math inline">\(j\)</span> 列元素为</p><p><span class="math display">\[a_{ij}^{(1)} = a_{ij} - a_{i1}\frac{a_{1j}}{a_{11}}, \quad i, j = 2, 3, ..., n.\]</span></p><p>要证严格对角占优矩阵 <span class="math inline">\(\mathbf{A}\)</span>经过一步 Gauss 消元后的矩阵 <spanclass="math inline">\(\mathbf{A}^{(1)}\)</span>仍是严格对角占优矩阵，即证</p><p><span class="math display">\[\left| a_{ii} - a_{i1}\frac{a_{1i}}{a_{11}} \right| &gt; \sum_{j = 2, \\ j \neq i}^{n} \left|a_{ij} - a_{i1} \frac{a_{1j}}{a_{11}} \right|\]</span></p><p>然后，对不等式进行放缩，把左边缩小为</p><p><span class="math display">\[\left| a_{ii} \right| - \left| a_{ii}\right| \frac{\left| a_{1i} \right|}{\left| a_{11} \right|}\]</span></p><p>右边放大为</p><p><span class="math display">\[\sum_{j = 2, \\ j \neq i}^{n} \left(\left| a_{ij} \right| + \frac{\left| a_{1j} \right|}{\left| a_{11}\right|} \left| a_{i1} \right| \right)\]</span></p><p>放缩后的左边减去右边得</p><p><span class="math display">\[\begin{equation}\begin{split}&amp; \left| a_{ii} \right| - \left| a_{ii} \right| \frac{\left| a_{1i}\right|}{\left| a_{11} \right|} - \sum_{j = 2, \\ j \neq i}^{n} \left|a_{ij} \right| - \sum_{j = 2, \\ j \neq i}^{n} \frac{\left| a_{1j}\right|}{\left| a_{11} \right|} \left| a_{i1} \right| \\&amp; = \left| a_{ii} \right| - \sum_{j = 2, \\ j \neq i}^{n} \left|a_{ij} \right| - \sum_{j = 2}^{n} \frac{\left| a_{1j} \right|}{\left|a_{11} \right|} \left| a_{i1} \right| \nonumber \\&amp; &gt; \left| a_{i1} \right| - \left| a_{i1} \right| \sum_{j =2}^{n} \frac{\left| a_{1j} \right|}{\left| a_{11} \right|} \\&amp; &gt; 0\end{split}\end{equation}\]</span></p><p>所以，<span class="math inline">\(\mathbf{A}^{(1)}\)</span>仍是严格对角占优矩阵。</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>线性代数</tag>
      
      <tag>计算方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的递归遍历空间复杂度为 O(logN) 问题</title>
    <link href="/2021/03/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA-O-logN-%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA-O-logN-%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在阅读《程序员面试代码指南 第 2 版》的第二章的“将搜索二叉树转换成双向链表” 这一节时，书中有一个递归的代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ReturnType <span class="hljs-title function_">process</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnType</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-type">ReturnType</span> <span class="hljs-variable">leftList</span> <span class="hljs-operator">=</span> process(head.left);<br>    <span class="hljs-type">ReturnType</span> <span class="hljs-variable">rightList</span> <span class="hljs-operator">=</span> process(head.right);<br>    <span class="hljs-keyword">if</span> (leftList.end != <span class="hljs-literal">null</span>) &#123;<br>        leftList.end.right = head;<br>    &#125;<br>    head.left = leftList.end;<br>    head.right = rightList.start;<br>    <span class="hljs-keyword">if</span> (rightList.start != <span class="hljs-literal">null</span>) &#123;<br>        rightList.start.left = head;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnType</span>(leftList.start != <span class="hljs-literal">null</span> ? leftList.start : head, rightList.end != <span class="hljs-literal">null</span> ? rightList.end : head);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码的作用是使用递归的方法嫁给你二叉搜索树转换成双向链表。</p><p>书中有这样一句话来描述其空间复杂度</p><blockquote><p>process 递归函数最多占用二叉树高度为 h 的栈空间，所以额外空间复杂度为O(h)。</p></blockquote><p>这里的 <span class="math inline">\(O(h)\)</span> 即 <spanclass="math inline">\(O(logN)\)</span>，其中，<spanclass="math inline">\(N\)</span> 为二叉树的节点个数。</p><p>一开始我并不理解为什么空间复杂度是 <spanclass="math inline">\(O(logN)\)</span>，后来几经周折，终于想通。遂记录之。</p><p>我们可以这样理解，一个函数调用栈就是一个“空间单位”，然后我们这个递归函数即使是调用到二叉树的最下面的一层，所耗费的函数调用栈的个数也不会超过<spanclass="math inline">\(logN\)</span>，因此，这个递归调用的空间复杂度是<span class="math inline">\(O(logN)\)</span>。</p><p>这里要注意一个<strong>误区</strong>，就是不要在计算函数调用栈的时候把函数执行过程中从头到尾的所有调用栈的数量认为是所耗费的空间数量。事实上，我们只需要函数执行到当前这一步时，程序所耗费的调用栈。我们可以把函数调用栈等价成一个<code>int</code> 变量来理解，<code>int</code>变量在程序执行的过程中可能会被重新赋值，但是，一个单个的<code>int</code>变量，无论它在程序执行的过程中被重新赋值多少次，它所占的空间始终是只有一个固定的数量，而不应该在每一次这个<code>int</code> 值变化的时候都把它所占的空间再加一遍。</p><p>我们借助 IDEA 的调试工具看一下函数调用栈来加深理解</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210326192112.png"alt="20210326192112" /></p><p>上图是一个二叉树的递归先序遍历，同时遍历到达最后一层时的递归调用栈。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>二叉树</tag>
      
      <tag>《程序员代码面试指南》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法》第 4 版 Java 环境搭建问题</title>
    <link href="/2021/03/25/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%E7%AC%AC-4-%E7%89%88-Java-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/25/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%E7%AC%AC-4-%E7%89%88-Java-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在阅读《算法》第 4版时，由于程序的运行需要依赖书中提供的程序库，遂到官网下载之。</p><p>第一次下载的是 <code>stdlib.jar</code>，然后导入这个 jar 包到 IDEA中后，发现无法在程序中 <code>import</code>，尝试了三种导入 jar包的方法，都没有奏效。</p><p>最后解决的办法是，重新下载了全书所有的依赖整合成的依赖集<code>algs4.jar</code>，然后重新导入到IDEA，这下就解决了。这里说明一下，<code>stdlib.jar</code> 中的内容是<code>algs4.jar</code> 的一部分。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325230522.png"alt="20210325230522" /></p><p>附注：IDEA 导入 <code>jar</code> 包的一种方法</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325230821.png"alt="20210325230821" /></p><p>然后将 <code>algs4.jar</code> 文件复制到 lib 文件中，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325231159.png"alt="20210325231159" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210325231223.png"alt="20210325231223" /></p><p>发现 IDEA 可以智能提示了，说明已经导入成功了。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Bugs</tag>
      
      <tag>IDEA</tag>
      
      <tag>《算法4》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steffensen 方法的推导及其二阶收敛的证明</title>
    <link href="/2021/03/23/Steffensen-%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%85%B6%E4%BA%8C%E9%98%B6%E6%94%B6%E6%95%9B%E7%9A%84%E8%AF%81%E6%98%8E/"/>
    <url>/2021/03/23/Steffensen-%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%85%B6%E4%BA%8C%E9%98%B6%E6%94%B6%E6%95%9B%E7%9A%84%E8%AF%81%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="steffensen-方法的推导">Steffensen 方法的推导</h3><p>由于 Steffensen方法是由弦截法改造来的，所以，这里先给出弦截法的迭代公式</p><p><span class="math display">\[ x_{k + 1} = x_k - \frac{x_k - x_{k -1}}{f(x_k) - f(x_{k - 1})} f(x_k), \quad k = 1, 2,... \ .\]</span></p><p>弦截法的定义及推导比较简单，这里不再赘述，然后我们来看如何将弦截法改造成Steffensen 方法：若弦截法产生的迭代序列 <span class="math inline">\(\{x_k \}\)</span> 充分接近于精确解 <spanclass="math inline">\(x^*\)</span>，则 <span class="math inline">\(x_k -x_{k - 1}\)</span> 与 <span class="math inline">\(f(x_k)\)</span>均充分接近于零。因此，我们可以近似地置 <span class="math inline">\(x_k -x_{k - 1} \approx f(x_k)\)</span>，然后将弦截法迭代公式中的 <spanclass="math inline">\(x_{k - 1}\)</span> 给代换掉，就得到了<strong>Steffensen</strong> 方法</p><p><span class="math display">\[x_{k + 1} = x_k - \frac{f^2(x_k)}{f(x_k)- f(x_k - f(x_k))}, \quad k = 1, 2,... \ .\]</span></p><h3 id="证明-steffensen-方法的二阶收敛性">证明 Steffensen方法的二阶收敛性</h3><p><strong>给定条件</strong>：设 <span class="math inline">\(f(x) =0\)</span> 有根 <span class="math inline">\(x_*\)</span>，其中 <spanclass="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(x^*\)</span> 的某邻域 <spanclass="math inline">\(S(x^*, \delta)\)</span> 内二阶连续可微，且 <spanclass="math inline">\(f^{&#39;} (x) \neq 0\)</span>.</p><p><strong>证明：</strong></p><p>由 Steffensen 迭代公式，有</p><p><span class="math display">\[\varphi(x) = x - \frac{f(x)}{f(x) - f(x- f(x))}\]</span></p><p>对 <span class="math inline">\(f(x - f(x))\)</span>进行泰勒展开，得</p><p><span class="math display">\[\displaystyle f(x - f(x)) = f(x) -f^{&#39;}(x)f(x) + \frac{1}{2}f^{&#39;&#39;}(\xi)f^{2}(x)，\]</span></p><p>其中，<span class="math inline">\(\xi\)</span> 是 <spanclass="math inline">\(x\)</span> 和 <span class="math inline">\(x -f(x)\)</span> 之间的一个值。</p><p>于是，有</p><p><span class="math display">\[g(x) = \frac{f(x) - f(x - f(x))}{f(x)} =\frac{f^{&#39;}(x)f(x) - \frac{1}{2}f^{&#39;&#39;}f^{2}(x)}{f(x)} =f^{&#39;}(x) - \frac{1}{2} f^{&#39;&#39;}(\xi) f(x) .\]</span></p><p>进而，</p><p><span class="math display">\[\varphi (x) = x - \frac{f^{2} (x)}{f(x)- f(x - f(x))} = x - \frac{f(x)}{f^{&#39;} (x) - \frac{1}{2}f^{&#39;&#39;} (\xi) f(x)}.\]</span></p><p>因此，</p><p><span class="math display">\[\frac{\varphi(x) - \varphi(x^*)}{x -x^*} = \frac{x - \frac{f(x)}{f^{&#39;} (x) - \frac{1}{2} f^{&#39;&#39;}(\xi) f(x)} - x^*}{x - x^*} = \frac{x - x^* - \frac{f(x)}{f^{&#39;} (x)- \frac{1}{2} f^{&#39;&#39;} (\xi) f(x)}}{x - x^*} = 1 - \frac{f(x) -f(x^*)}{x - x^*} \frac{1}{f^{&#39;} (x) - \frac{1}{2} f^{&#39;&#39;}(\xi) f(x)}\]</span></p><p>所以，</p><p><span class="math display">\[\varphi^{&#39;} (x^*) = \lim_{x \to x^*}\frac{\varphi(x) - \varphi(x^*)}{x - x^*} = 1 - f^{&#39;} (x^*)\frac{1}{f^{&#39;} (x^*)} = 0.\]</span></p><p>因为 <span class="math inline">\(f^{&#39;}(x^*) \neq0\)</span>，所以，Steffensen 方法至少是二阶收敛的。</p><p>注意，Steffensen方法是严格二阶收敛的，但是，证明这个所需的知识不在学习范围内，暂时不作证明。</p><p>按：本文给出的 Steffensen方法是华科的计算方法课本上的。网上还有其他的形式，在符号上略有区别，但是证明方法相同，而且，英文的证明在网上比较多。</p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>证明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 命令行使用代理 VPN</title>
    <link href="/2021/03/23/Git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86-VPN/"/>
    <url>/2021/03/23/Git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86-VPN/</url>
    
    <content type="html"><![CDATA[<p>首先查看我们使用的 “相关” 软件的端口设置：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210223012913.png" /></p><p>然后在 Git Bash 中敲入设置全局代理的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:4781&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:4781&#x27;</span><br></code></pre></div></td></tr></table></figure><p>上面的命令，一个是设置 http，另一个是设置 https。</p><p>设置完之后 git clone 一个仓库进行测试，发现速度飙到了 5.5mb/s，而原来的速度是只有十几 kb/s 的。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210223012957.png" /></p><p>记录遇到的坑：</p><p>一开始我是使用的命令是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;http://127.0.0.1:4780&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;https://127.0.0.1:4780&#x27;</span><br></code></pre></div></td></tr></table></figure><p>这里的端口就对应上面的 http(s)端口，然而，几经测试，发现都是没有效果，最后换成了socks5，问题才得到解决。</p><hr /><p>参考：</p><p>1、<a href="https://www.yixuju.cn/other/talking-about-proxy/"class="uri">https://www.yixuju.cn/other/talking-about-proxy/</a> 2、<ahref="http://www.beiliangshizi.com/?p=532"class="uri">http://www.beiliangshizi.com/?p=532</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Python 和 sympy 库来求逻辑函数的真值表</title>
    <link href="/2021/03/22/%E5%88%A9%E7%94%A8-Python-%E5%92%8C-sympy-%E5%BA%93%E6%9D%A5%E6%B1%82%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8/"/>
    <url>/2021/03/22/%E5%88%A9%E7%94%A8-Python-%E5%92%8C-sympy-%E5%BA%93%E6%9D%A5%E6%B1%82%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>一份可以作为模板的代码：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @File  : simply_purefile.py</span><br><span class="hljs-comment"># @Author: FanLu</span><br><span class="hljs-comment"># @Date  : 2021/3/21</span><br><br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br>A, B, C, D, F, F2 = symbols(<span class="hljs-string">&#x27;A, B, C, D, F, F2&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N   A  B  C  D  |  F&#x27;</span>)<br><br><span class="hljs-comment"># 将 1 到 16 的二进制计算出来，然后转化成 bool 类型的值</span><br>bool_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    tmp_list = []<br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#123;0:0&gt;4b&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)<br>    <span class="hljs-comment"># print(str, end=&#x27;&#x27;)</span><br>    <span class="hljs-comment"># print(&#x27;  &#x27;, end=&#x27;&#x27;)</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>[j])<br>        tmp_list.append(num)<br>    bool_list.append(tmp_list)<br><span class="hljs-comment"># print(bool_list)</span><br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> eachone <span class="hljs-keyword">in</span> bool_list:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;4&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(num), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> eachone:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(j), end=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment"># 0 表示索引，&lt; 表示左对齐，3 表示占 3 个格子</span><br>    F = (A | B | (C &amp; D)).subs(&#123;A:eachone[<span class="hljs-number">0</span>], B:eachone[<span class="hljs-number">1</span>], C:eachone[<span class="hljs-number">2</span>], D:eachone[<span class="hljs-number">3</span>]&#125;)<br>    each_res = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> F == <span class="hljs-literal">True</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;|&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(each_res), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></div></td></tr></table></figure><p>输出是：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">N</span>   A  B  C  D  |  F<br><span class="hljs-attribute">0</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">0</span>  <br><span class="hljs-attribute">1</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">0</span>  <br><span class="hljs-attribute">2</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">0</span>  <br><span class="hljs-attribute">3</span>   <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">4</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">5</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">6</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">7</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">8</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">9</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">10</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">11</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">12</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">13</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">14</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  |  <span class="hljs-number">1</span>  <br><span class="hljs-attribute">15</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  |  <span class="hljs-number">1</span>  <br></code></pre></div></td></tr></table></figure><p>对于四元逻辑函数，我们在求不同函数的真值表时，只需要更换下面这一行代码即可</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">F = (A | B | (C &amp; D)).subs(&#123;A:eachone[<span class="hljs-number">0</span>], B:eachone[<span class="hljs-number">1</span>], C:eachone[<span class="hljs-number">2</span>], D:eachone[<span class="hljs-number">3</span>]&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Sympy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo NexT 使用 pandoc 插件渲染图片问题</title>
    <link href="/2021/03/22/Hexo-NexT-%E4%BD%BF%E7%94%A8-pandoc-%E6%8F%92%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/22/Hexo-NexT-%E4%BD%BF%E7%94%A8-pandoc-%E6%8F%92%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题复现">问题复现</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322232830.png"alt="20210322232830" /></p><p>这个图片的原来的 <code>Markdown</code> 文本为</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">![<span class="hljs-string">20210321222711</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222711.png</span>)<br></code></pre></div></td></tr></table></figure><p>显然，<code>pandoc</code> 是将 <code>[]</code>中的内容给渲染到图片的下方了。</p><h3 id="问题解决">问题解决</h3><p>找到站点目录下的 <code>_configure.yml</code>文件，并在末尾添加如下代码</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">pandoc:</span><br>  <span class="hljs-attr">extensions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-implicit_figures&#x27;</span><br></code></pre></div></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo s<br></code></pre></div></td></tr></table></figure><p>检验成效</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322233357.png"alt="20210322233357" /></p><p>发现多余的文字已经消失了。</p><p>参考：<a href="https://wylu.me/posts/7bd83fc5/"class="uri">https://wylu.me/posts/7bd83fc5/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandoc</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-NexT 首页和其他页面设置分页</title>
    <link href="/2021/03/22/Hexo-NexT-%E9%A6%96%E9%A1%B5%E5%92%8C%E5%85%B6%E4%BB%96%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5/"/>
    <url>/2021/03/22/Hexo-NexT-%E9%A6%96%E9%A1%B5%E5%92%8C%E5%85%B6%E4%BB%96%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<p>Hexo 分页的相关设置在站点目录下的 <code>_config.yml</code>文件中，</p><p>首页文章数量分页设置</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Home page setting</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br></code></pre></div></td></tr></table></figure><p>归档、标签、分类等页面分页设置</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Pagination</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br></code></pre></div></td></tr></table></figure><p>上面的 <code>per_page</code> 就是设置每隔多少页就进行分页的变量。</p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试数学公式是否能正常显示</title>
    <link href="/2021/03/22/%E6%B5%8B%E8%AF%95%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%98%AF%E5%90%A6%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA/"/>
    <url>/2021/03/22/%E6%B5%8B%E8%AF%95%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%98%AF%E5%90%A6%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>测试一条数学公式</p><p><span class="math inline">\(x^2 + y ^2 = z^2\)</span></p><p>复杂一点的</p><p><span class="math display">\[\sum_{i = 1}^{100} i =5050.\]</span></p><p>测试公式编号：</p><p><span class="math display">\[\begin{align}-4 + 5x &amp;= 2+y  \\w+2 &amp;= -1+w \\ab &amp;= cb\end{align}\]</span></p><p><span class="math display">\[\begin{align}-4 + 5x &amp;= 2+y \nonumber  \\w+2 &amp;= -1+w \\ab &amp;= cb\end{align}\]</span></p><p>附注：我这里在配置文件中关闭了标签显示，所以这里的测试无效。</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>草稿</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github 搭建个人博客</title>
    <link href="/2021/03/22/Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/03/22/Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里假设我们所有的准备工作都已经做好了，比如 npm 的安装、hexo的安装等等。</p></blockquote><h2 id="基本部署">基本部署</h2><p>执行下面的命令进行初始化。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo init<br></code></pre></div></td></tr></table></figure><span id="more"></span><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321221904.png"alt="20210321221904" /></p><p>然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo g<br></code></pre></div></td></tr></table></figure><p>生成静态文件，命令执行后文件夹如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222053.png"alt="20210321222053" /></p><p>然后，执行 <code>hexo s</code> 命令，在本地浏览器预览一下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222858.png"alt="20210321222858" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222821.png"alt="20210321222821" /></p><p>之后，配置根目录下的 <code>_config.yml</code> 文件</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:fanlumaster/fanlumaster.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321222711.png"alt="20210321222711" /></p><h3 id="安装插件和部署到-github">安装插件和部署到 Github</h3><p>安装插件命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>部署命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo d<br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321224721.png"alt="20210321224721" /></p><p>可以访问 <a href="https://fanlumaster.github.io"class="uri">https://fanlumaster.github.io</a>来检验是否部署成功，下面是部署成功的页面</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321224948.png"alt="20210321224948" /></p><p>我们再看一下我们的 Github 仓库</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322002245.png"alt="20210322002245" /></p><p>发现多了好多文件，到这里，基本的部署就完成了，接下来就是要学习如何美化博客了。</p><h2 id="美化博客">美化博客</h2><p>首先，我们选择的是 <code>NextT</code>主题，第一步，先将其代码克隆到根目录下的 themes 文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure><p>这里要注意，这个仓库名是最新的，以前有些博客搭建教程上的已经过期。</p><p>这里我们使用 git 的好处是之后的更新可以使用 <code>git pull</code>来快速更新。</p><p>然后，启用主题。打开根目录下站点配置文件<code>_config.yml</code>，找到 <code>theme</code> 字段，并将其值更改为<code>next</code>，如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321225901.png"alt="20210321225901" /></p><p>然后，打开主题的 <code>_config.yml</code>文件，不是<strong>站点文件</strong>，找到<code>Scheme Settings</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321230047.png"alt="20210321230047" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321230228.png"alt="20210321230228" /></p><p><code>next</code>主题有四个样式，想用哪一个，就把其注释给取消即可，这里使用的是<code>Gemini</code> 主题。</p><p>在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除Hexo 的缓存，以免出现一些莫名其妙的问题。</p><p>然后重新执行 <code>hexo g</code> 以及 <code>hexo s</code>来重新生成本地预览，如下</p><p>注意，这里有一个<strong>坑</strong>，修改主题的<code>_config.yml</code> 配置时，这里是更换<code>scheme</code>，没有将原来的 <code>scheme</code>给注释掉，导致会出现 <code>ERROR Theme config load failed.</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321232200.png"alt="20210321232200" /></p><p>解决完坑之后，我们重新执行那三条指令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br>hexo g <span class="hljs-comment"># 生成静态文件</span><br>hexo s <span class="hljs-comment"># 生成本地预览</span><br></code></pre></div></td></tr></table></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321233034.png"alt="20210321233034" /></p><p>到这里，主题就更换成功了。</p><h4 id="配置站点信息">配置站点信息</h4><p>打开站点根目录下的 <code>_config.yml</code>，设置如下内容</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210401231748.png"alt="20210401231748" /></p><p>参数说明：</p><ul><li>title: 网站标题</li><li>subtitle: 网站副标题</li><li>description: 网站描述</li><li>keywords: 关键字</li><li>author: 作者</li><li>language: 网站使用的语言</li><li>timezone: 网站时区。Hexo 默认使用您电脑的时区</li></ul><p>其中，language一定要设置为主题能够识别的语言（不然中文可能出现乱码），在<code>\themes\next\languages\</code>中可以找到，中文有两种格式，<code>zh-CN</code>、<code>zh-hk</code>、<code>zh-tw</code>可选。</p><h2 id="高级配置">高级配置</h2><h4 id="创建一篇博文">创建一篇博文</h4><p>执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new <span class="hljs-string">&#x27;blog_name&#x27;</span> <span class="hljs-comment"># blog_name 填入文章名称</span><br></code></pre></div></td></tr></table></figure><p>Hexo 会帮我们在 <code>..\source\_posts</code> 下生成相关<code>md</code> 文件</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321234534.png"alt="20210321234534" /></p><h4 id="config.yml-文件">_config.yml 文件</h4><p>网站配置信息，也就是本文所称的<strong>站点配置文件</strong>，可以在此配置大部分的参数。我们之前也在这个文件里面配置了一些基本的配置。</p><h4 id="scaffolds-文件">scaffolds 文件</h4><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210321234856.png"alt="20210321234856" /></p><p>模板文件夹，新建文章时，Hexo 会根据 <code>scaffolds</code>来建立文件。默认的模板有三种<code>draft.md</code>、<code>page.md</code>、<code>post.md</code>，我们也可以在该文件夹下创建属于自己定制的模板，推荐格式如下：</p><ul><li>title: 测试模板文件</li><li>date: 1616344047000</li><li>tags:</li><li>categories:</li><li>description:</li></ul><p>然后，输入 <code>hexo new blog '文章名'</code> 进行测试。</p><p>按：这里并没有进行真正的测试，命令的使用也有点模糊，比如，如果需要使用某个模板，那么，在新建文章时，是否需要再加必要的参数？</p><h4 id="public">public</h4><p>该文件夹中的内容最终将被 <code>push</code> 到 <code>Github</code>仓库中。</p><h4 id="source">source</h4><p>资源文件夹是存放用户资源的地方，除 <code>_posts</code>文件夹之外，开头命名为 <code>_(下划线)</code> 的文件 /文件夹将会被忽略。<code>Markdown</code> 和 <code>HTML</code>文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝到<code>public</code> 文件夹。</p><h4 id="themes">themes</h4><p>主题文件夹，下载的主题都保存在此文件夹下。Hexo会根据主题来生成静态页面。</p><p>另外主题的配置也有很多高级技巧，更多可以参考 Next 的官方网站。</p><p>还有许多个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能High功能、404网页设置等，可以参看：</p><ul><li>主题配置 - NexT 使用文档</li><li>第三方服务集成 - NexT 使用文档</li><li>内置标签 - NexT 使用文档</li><li>进阶设定 - NexT 使用文档</li><li>High功能特效 - Next 主题网站推荐博主的文章</li></ul><h4 id="寻找图床">寻找图床</h4><p>我这里本身也是使用 <code>Github</code> 搭建的图床。免费且稳定。</p><h2 id="hexo-常用命令">Hexo 常用命令</h2><h4 id="常见命令">常见命令</h4><ol type="1"><li>hexo new 'postName' # 新建文章</li><li>hexo clean # 清除缓存</li><li>hexo generate # 生成静态页面至 public 目录</li><li>hexo server # 开启预览访问端口（默认端口是 4000,‘Ctrl + C’ 关闭server）</li><li>hexo deploy # 部署到 Github</li><li>hexo help # 查看帮助</li><li>hexo version # 查看 Hexo 的版本</li></ol><h4 id="缩写">缩写</h4><ol type="1"><li>hexo n == hexo new</li><li>hexo g == hexo generate</li><li>hexo s == hexo server</li><li>hexo d == hexo deploy</li></ol><h4 id="组合命令">组合命令</h4><ol type="1"><li>hexo s -g # 生成本地预览</li><li>hexo d -g # 生成并上传</li></ol><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210322002245.png"alt="20210322002245" /></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
